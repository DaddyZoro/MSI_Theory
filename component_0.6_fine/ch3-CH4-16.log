Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::RigidRotor::RigidRotor:  starts
      Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         effective rotational constant[1/cm]  = 27.3386
         analytic  frequency at minimum[1/cm] = 264.582
         numerical frequency at minimum[1/cm] = 264.58
         minimum energy[kcal/mol]             = -0.652133
         maximum energy[kcal/mol]             = 4.43076
         maximum frequency[1/cm]              = 304.056
         maximum imaginary frequency[1/cm]    = 363.663
         ground energy [kcal/mol]             = -0.331612
         highest energy level [kcal/mol]      = 181.149
         number of levels                     = 97
         10 lowest excited states [kcal/mol] relative to the ground: 0.0416 0.501 0.787 1.2 1.64 2.1 2.58 3.06 3.55
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum      Classical  Semiclassical  ***
           100        1.91315        2.83254        1.89531
           200        2.39365        2.62672        2.39014
           300          2.881        2.99583        2.87973
           400        3.35757        3.42902        3.35695
           500        3.82304        3.87287        3.82272
           600        4.27901        4.31609        4.27884
           700        4.72624        4.75501        4.72615
           800        5.16483        5.18782        5.16479
           900        5.59466        5.61343        5.59464
          1000        6.01554        6.03113        6.01553
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 0.00307, elapsed time[sec] = 0
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.003054, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.006118, elapsed time[sec] = 1
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
               hamiltonian size                = 175
               ground energy [kcal/mol]        = -0.331612
               highest level energy [kcal/mol] = 579.487
               number of levels                = 173
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.003315, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.380185, elapsed time[sec] = 0
         effective power exponent at 590.248 kcal/mol = 11.3975
      interpolating states number/density done, cpu time[sec] = 0.42028, elapsed time[sec] = 1
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.423507, elapsed time[sec] = 1
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         18.6636
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 4.2e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.55031        9.55025        4.77514
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000133, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         19.7115        11.2506        7.16248
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         27.4891        14.3449        9.42601
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000103, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.37766        1.21309        1.07414
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 8.9e-05, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.6e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.70369        1.21669        1.08113
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 9.2e-05, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.46649        1.30145        1.14415
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 8.7e-05, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         6.45653       0.996021       0.869895
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 3.3e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 7.4e-05, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.24344       0.933826       0.927158
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 3.1e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 6.8e-05, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.00087, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000886, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.002159, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004998, elapsed time[sec] = 0
            effective power exponent at 522.659 kcal/mol = 11.8743
         interpolating states number/density done, cpu time[sec] = 0.022465, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.022508, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001586, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004984, elapsed time[sec] = 0
            effective power exponent at 519.405 kcal/mol = 11.8747
         interpolating states number/density done, cpu time[sec] = 0.021088, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021142, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001615, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004965, elapsed time[sec] = 0
            effective power exponent at 516.412 kcal/mol = 11.8755
         interpolating states number/density done, cpu time[sec] = 0.020968, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021022, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001569, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004931, elapsed time[sec] = 0
            effective power exponent at 513.676 kcal/mol = 11.8759
         interpolating states number/density done, cpu time[sec] = 0.02086, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020915, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001569, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004902, elapsed time[sec] = 0
            effective power exponent at 511.203 kcal/mol = 11.8765
         interpolating states number/density done, cpu time[sec] = 0.020734, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020788, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001553, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004883, elapsed time[sec] = 0
            effective power exponent at 508.998 kcal/mol = 11.8771
         interpolating states number/density done, cpu time[sec] = 0.020743, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020798, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00156, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004849, elapsed time[sec] = 0
            effective power exponent at 507.065 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.020647, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020696, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00155, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004834, elapsed time[sec] = 0
            effective power exponent at 505.407 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.020054, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020103, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00155, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004822, elapsed time[sec] = 0
            effective power exponent at 504.049 kcal/mol = 11.8772
         interpolating states number/density done, cpu time[sec] = 0.019973, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020025, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00155, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004825, elapsed time[sec] = 0
            effective power exponent at 502.986 kcal/mol = 11.8768
         interpolating states number/density done, cpu time[sec] = 0.020397, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020451, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001542, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004812, elapsed time[sec] = 0
            effective power exponent at 502.234 kcal/mol = 11.8766
         interpolating states number/density done, cpu time[sec] = 0.020289, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020344, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001535, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004809, elapsed time[sec] = 0
            effective power exponent at 501.762 kcal/mol = 11.8765
         interpolating states number/density done, cpu time[sec] = 0.020382, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020435, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001537, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004805, elapsed time[sec] = 0
            effective power exponent at 501.547 kcal/mol = 11.8767
         interpolating states number/density done, cpu time[sec] = 0.02037, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020423, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001529, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00481, elapsed time[sec] = 0
            effective power exponent at 501.607 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.02036, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020409, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00153, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004819, elapsed time[sec] = 0
            effective power exponent at 501.856 kcal/mol = 11.8784
         interpolating states number/density done, cpu time[sec] = 0.020383, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020433, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001533, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004826, elapsed time[sec] = 0
            effective power exponent at 502.254 kcal/mol = 11.8799
         interpolating states number/density done, cpu time[sec] = 0.020278, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020336, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001556, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004816, elapsed time[sec] = 0
            effective power exponent at 502.763 kcal/mol = 11.8817
         interpolating states number/density done, cpu time[sec] = 0.020307, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020361, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 5.35442, elapsed time[sec] = 1
      effective power exponent at 501.547 kcal/mol = 12.1215
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 5.96859, elapsed time[sec] = 1
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001592, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00499, elapsed time[sec] = 0
            effective power exponent at 521.876 kcal/mol = 11.8794
         interpolating states number/density done, cpu time[sec] = 0.021825, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021877, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001583, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004964, elapsed time[sec] = 0
            effective power exponent at 518.814 kcal/mol = 11.8788
         interpolating states number/density done, cpu time[sec] = 0.021137, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021189, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001575, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004944, elapsed time[sec] = 0
            effective power exponent at 516.032 kcal/mol = 11.8783
         interpolating states number/density done, cpu time[sec] = 0.020858, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020911, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001579, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004912, elapsed time[sec] = 0
            effective power exponent at 513.53 kcal/mol = 11.8777
         interpolating states number/density done, cpu time[sec] = 0.020429, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020484, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001573, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004923, elapsed time[sec] = 0
            effective power exponent at 511.311 kcal/mol = 11.8768
         interpolating states number/density done, cpu time[sec] = 0.020549, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020599, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001574, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004872, elapsed time[sec] = 0
            effective power exponent at 509.396 kcal/mol = 11.8759
         interpolating states number/density done, cpu time[sec] = 0.020553, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020605, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001549, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00486, elapsed time[sec] = 0
            effective power exponent at 507.789 kcal/mol = 11.8748
         interpolating states number/density done, cpu time[sec] = 0.020435, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020487, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001553, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00485, elapsed time[sec] = 0
            effective power exponent at 506.494 kcal/mol = 11.8737
         interpolating states number/density done, cpu time[sec] = 0.020051, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020102, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001552, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00484, elapsed time[sec] = 0
            effective power exponent at 505.53 kcal/mol = 11.8725
         interpolating states number/density done, cpu time[sec] = 0.020078, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020131, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00154, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004835, elapsed time[sec] = 0
            effective power exponent at 504.858 kcal/mol = 11.8715
         interpolating states number/density done, cpu time[sec] = 0.020536, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020587, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00154, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004834, elapsed time[sec] = 0
            effective power exponent at 504.472 kcal/mol = 11.8707
         interpolating states number/density done, cpu time[sec] = 0.020773, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020822, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001547, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004824, elapsed time[sec] = 0
            effective power exponent at 504.404 kcal/mol = 11.8706
         interpolating states number/density done, cpu time[sec] = 0.020782, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020833, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001551, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004826, elapsed time[sec] = 0
            effective power exponent at 504.572 kcal/mol = 11.8709
         interpolating states number/density done, cpu time[sec] = 0.020438, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020489, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001551, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004829, elapsed time[sec] = 0
            effective power exponent at 504.93 kcal/mol = 11.8718
         interpolating states number/density done, cpu time[sec] = 0.020528, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020578, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001542, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004836, elapsed time[sec] = 0
            effective power exponent at 505.433 kcal/mol = 11.8731
         interpolating states number/density done, cpu time[sec] = 0.020455, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020512, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001542, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004844, elapsed time[sec] = 0
            effective power exponent at 506.042 kcal/mol = 11.8749
         interpolating states number/density done, cpu time[sec] = 0.020524, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020579, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 6.08734, elapsed time[sec] = 1
      effective power exponent at 504.404 kcal/mol = 12.1643
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 6.68345, elapsed time[sec] = 2
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::RigidRotor::RigidRotor:  starts
      Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 3.3e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.0019, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.005474, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 32.6376, elapsed time[sec] = 4
         effective power exponent at 569.903 kcal/mol = 13.605
      interpolating states number/density done, cpu time[sec] = 32.6957, elapsed time[sec] = 4
   Model::RRHO::RRHO:  done, cpu time[sec] = 32.6959, elapsed time[sec] = 4
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000949, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000916, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O           B1           B2           B3           B4           B5           B6           B7
     100  1.32337e+28  1.11801e+26  1.79595e+26  1.27054e+26  1.20988e+26  3.09395e+23  9.07742e+27  3.09395e+23  8.88157e+27  3.09395e+23  4.22578e+27  3.80274e+23  1.41444e+28  3.80274e+23  1.04332e+28  1.02813e+30  3.90835e+30  1.47521e+35  6.97793e+37 5.12313e+128  6.66931e+29  2.86815e+29
     200  1.33692e+29  7.62301e+26  1.46719e+27  1.01648e+27  9.67917e+26   1.7502e+24  7.26915e+28   1.7502e+24  7.10972e+28   1.7502e+24  3.38168e+28  1.07558e+24  1.21883e+29  1.07558e+24  8.41716e+28   2.6594e+31  6.23661e+31  1.08311e+30  2.15609e+30  1.52794e+59   8.8803e+30   3.6677e+30
     300  5.54011e+29   2.3227e+27  5.26013e+27  3.43494e+27  3.26819e+27  4.82299e+24  2.48509e+29  4.82299e+24  2.42373e+29  4.82299e+24  1.14821e+29  1.97596e+24  4.86792e+29  1.97596e+24  2.97902e+29  1.82848e+32  2.59531e+32  1.44204e+30  1.73251e+30  1.89698e+39  4.41738e+31  1.66472e+31
     400  1.62876e+30  5.05864e+27  1.36165e+28  8.18813e+27  7.76763e+27  9.90065e+24  6.13421e+29  9.90065e+24  5.94841e+29  9.90065e+24  2.78615e+29  3.04219e+24  1.44573e+30  3.04219e+24  7.82109e+29  7.43427e+32   6.7607e+32  3.11922e+30  3.38427e+30  5.81349e+32  1.53174e+32  5.25522e+31
     500  4.05813e+30  9.18441e+27  2.95805e+28  1.61898e+28  1.52757e+28  1.72958e+25  1.28789e+30  1.72958e+25  1.23982e+30  1.72958e+25   5.7057e+29  4.25159e+24  3.66233e+30  4.25159e+24  1.77789e+30  2.27526e+33  1.40931e+33  6.99374e+30  7.25775e+30  2.17394e+31  4.38411e+32  1.38723e+32
     600    9.205e+30  1.48858e+28  5.75714e+28  2.85232e+28  2.67107e+28  2.72836e+25  2.45845e+30  2.72836e+25   2.3485e+30  2.72836e+25  1.05857e+30  5.58887e+24  8.37639e+30  5.58887e+24  3.71358e+30  5.83122e+33  2.59745e+33  1.53855e+31  1.55306e+31  1.56568e+31  1.10959e+33   3.2876e+32
     700  1.96268e+31  2.23327e+28  1.03863e+29  4.64909e+28  4.31284e+28  4.01151e+25  4.40299e+30  4.01151e+25  4.17418e+30  4.01151e+25  1.84184e+30  7.04278e+24  1.77958e+31  7.04278e+24   7.3216e+30  1.32403e+34  4.44561e+33   3.2848e+31  3.24856e+31  2.00146e+31   2.5703e+33  7.23012e+32
     800  3.99726e+31  3.16884e+28  1.77202e+29  7.16645e+28  6.57463e+28  5.60263e+25  7.52403e+30  5.60263e+25  7.08108e+30  5.60263e+25  3.06199e+30  8.60462e+24  3.57018e+31  8.60462e+24  1.38186e+31  2.75318e+34  7.26015e+33  6.79278e+31  6.61014e+31  3.04631e+31  5.55972e+33  1.50221e+33
     900  7.84672e+31  4.31167e+28  2.89593e+29  1.05933e+29  9.59692e+28  7.52475e+25   1.2392e+31  7.52475e+25  1.15817e+31  7.52475e+25  4.91708e+30  1.02674e+25   6.8364e+31  1.02674e+25  2.51764e+31  5.35415e+34  1.14974e+34  1.36142e+32  1.30787e+32  4.96296e+31  1.13778e+34  2.98126e+33
    1000  1.49313e+32  5.67863e+28   4.5729e+29   1.5155e+29  1.35418e+29  9.80094e+25  1.98006e+31  9.80094e+25  1.83844e+31  9.80094e+25  7.67956e+30  1.20253e+25  1.25894e+32  1.20253e+25  4.45216e+31  9.87573e+34  1.78329e+34   2.6486e+32  2.51879e+32  8.31111e+31  2.22336e+34  5.69301e+33
    1100  2.76498e+32  7.28733e+28  7.02014e+29  2.11181e+29  1.85958e+29  1.24549e+26  3.08361e+31  1.24549e+26  2.84529e+31  1.24549e+26  1.17186e+31  1.38735e+25  2.24211e+32  1.38735e+25  7.67118e+31  1.74484e+35  2.72609e+34  5.01126e+32  4.72845e+32  1.40419e+32  4.17712e+34   1.0516e+34
    1200  4.99709e+32  9.15623e+28  1.05243e+30  2.87952e+29   2.4973e+29  1.55112e+26  4.69635e+31  1.55112e+26    4.308e+31  1.55112e+26  1.75274e+31  1.58077e+25  3.87836e+32  1.58077e+25  1.29155e+32  2.97422e+35  4.12329e+34  9.23932e+32   8.6658e+32  2.37069e+32  7.58478e+34  1.88651e+34
    1300  8.83374e+32  1.13047e+29  1.54592e+30  3.85497e+29  3.29178e+29  1.89956e+26  7.01317e+31  1.89956e+26  6.39766e+31  1.89956e+26  2.57572e+31  1.78243e+25  6.53817e+32  1.78243e+25  2.12955e+32  4.91785e+35  6.18529e+34  1.66312e+33  1.55279e+33  3.97859e+32  1.33662e+35  3.29702e+34
    1400  1.53024e+33  1.37529e+29  2.23077e+30  5.08012e+29   4.2708e+29  2.29347e+26  1.02902e+32  2.29347e+26  9.33807e+31  2.29347e+26  3.72573e+31    1.992e+25  1.07714e+33    1.992e+25  3.44487e+32  7.92097e+35  9.21464e+34  2.92792e+33   2.7242e+33  6.61771e+32   2.2936e+35  5.62782e+34
    1500  2.60145e+33  1.65218e+29  3.16862e+30  6.60308e+29  5.46575e+29  2.73564e+26    1.486e+32  2.73564e+26  1.34187e+32  2.73564e+26  5.31243e+31  2.20919e+25   1.7381e+33  2.20919e+25   5.4755e+32  1.24687e+36  1.36429e+35  5.04944e+33  4.68555e+33  1.08918e+33  3.84292e+35  9.40225e+34
    1600  4.34584e+33  1.96331e+29  4.43755e+30  8.47865e+29  6.91195e+29  3.22898e+26  2.11503e+32  3.22898e+26  1.90103e+32  3.22898e+26  7.47593e+31  2.43375e+25  2.75222e+33  2.43375e+25  8.56247e+32  1.92339e+36  2.00811e+35  8.54277e+33  7.91042e+33  1.77224e+33  6.30124e+35  1.54018e+35
    1700  7.14212e+33  2.31092e+29  6.13555e+30   1.0769e+30  8.64899e+29  3.77647e+26  2.97052e+32  3.77647e+26   2.6583e+32  3.77647e+26  1.03937e+32  2.66545e+25   4.2834e+33  2.66545e+25  1.31882e+33  2.91382e+36  2.93871e+35  1.41965e+34  1.31232e+34  2.84978e+33  1.01309e+36  2.47759e+35
    1800  1.15587e+34  2.69732e+29   8.3846e+30  1.35441e+30   1.0721e+30  4.38121e+26  4.12115e+32  4.38121e+26  3.67278e+32  4.38121e+26  1.42886e+32  2.90406e+25  6.56127e+33  2.90406e+25  2.00268e+33  4.34307e+36  4.27567e+35  2.32001e+34  2.14153e+34   4.5282e+33  1.59972e+36  3.91911e+35
    1900  1.84378e+34  3.12487e+29  1.13355e+31  1.68827e+30   1.3177e+30  5.04637e+26  5.65279e+32  5.04637e+26  5.01818e+32  5.04637e+26  1.94381e+32   3.1494e+25  9.90373e+33   3.1494e+25  3.00099e+33  6.37873e+36  6.18439e+35  3.73225e+34  3.44083e+34  7.11066e+33  2.48444e+36  6.10326e+35
    2000  2.90124e+34  3.59599e+29  1.51731e+31  2.08726e+30  1.60714e+30  5.77522e+26  7.67203e+32  5.77522e+26  6.78572e+32  5.77522e+26  2.61854e+32  3.40128e+25   1.4746e+34  3.40128e+25   4.4411e+33  9.24353e+36  8.89195e+35  5.91605e+34  5.44797e+34  1.10373e+34  3.79963e+36  9.36719e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7
     100 2.29837e+225  1.02813e+30  1.82417e+29    3.594e+38   2.9701e+47 1.37266e+129  2.66905e+20     0.948942
     200 5.57152e+127   2.6594e+31  1.34736e+31  5.34606e+31  1.40666e+35  2.50103e+59   1.7765e+26  6.67134e+15
     300  3.09099e+95  1.82848e+32   9.3443e+31  1.94038e+31  2.80774e+33  2.63474e+39  3.25529e+28  2.48059e+21
     400    3.325e+79  7.43427e+32  3.14239e+32  2.19142e+31  8.64423e+32  7.43778e+32    6.851e+29   2.2413e+24
     500  1.13834e+70  2.27526e+33  7.63521e+32  3.32701e+31  6.11802e+32   2.6476e+31  5.78544e+30  1.76229e+26
     600  6.87565e+63  5.83122e+33  1.55857e+33  5.64371e+31  6.25213e+32  1.84519e+31  3.01214e+31  4.01315e+27
     700  2.95091e+59  1.32403e+34  2.86945e+33  1.00075e+32  7.71381e+32  2.30406e+31  1.16802e+32  4.44289e+28
     800  1.80605e+56  2.75318e+34  4.94971e+33  1.80048e+32  1.05643e+33   3.4457e+31  3.71824e+32  3.10232e+29
     900  6.45973e+53  5.35415e+34  8.17932e+33  3.23813e+32  1.53624e+33  5.53732e+31   1.0277e+33  1.58053e+30
    1000  7.90811e+51  9.87573e+34  1.31259e+34  5.77682e+32  2.31258e+33  9.17195e+31  2.55409e+33  6.41662e+30
    1100  2.35818e+50  1.74484e+35  2.06322e+34  1.01819e+33  3.54884e+33  1.53581e+32  5.84168e+33  2.19695e+31
    1200  1.36572e+49  2.97422e+35  3.19399e+34  1.76957e+33   5.4983e+33  2.57362e+32  1.24968e+34  6.59117e+31
    1300  1.31351e+48  4.91785e+35  4.88631e+34  3.02998e+33  8.54687e+33  4.29194e+32  2.52991e+34  1.77992e+32
    1400  1.87634e+47  7.92097e+35  7.40307e+34  5.11055e+33  1.32748e+34  7.10037e+32  4.88935e+34  4.41164e+32
    1500  3.66886e+46  1.24687e+36  1.11219e+35   8.4923e+33  2.05446e+34  1.16314e+33  9.08125e+34   1.0183e+33
    1600  9.23757e+45  1.92339e+36  1.65808e+35  1.39081e+34  3.16238e+34  1.88484e+33  1.62955e+35  2.21334e+33
    1700  2.85867e+45  2.91382e+36  2.45396e+35  2.24595e+34  4.83564e+34  3.01988e+33  2.83688e+35  4.56972e+33
    1800  1.04875e+45  4.34307e+36  3.60632e+35    3.578e+34  7.33958e+34  4.78305e+33  4.80782e+35   9.0238e+33
    1900  4.43352e+44  6.37873e+36  5.26318e+35  5.62626e+34  1.10524e+35  7.48924e+33  7.95446e+35  1.71381e+34
    2000   2.1114e+44  9.24353e+36   7.6287e+35  8.73711e+34  1.65077e+35  1.15948e+34  1.28782e+36  3.14479e+34
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0
Model::init:  done, cpu time[sec] = 47.1196, elapsed time[sec] = 9
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 1054.9 K
      Collision rate   = 5.86493e-10cm^3/sec
      Energy reference = 34046 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: density of states done, elapsed time[sec] = 0.000307
         W1 Well: cannot satisfy the constant collision frequency at energy = -31154 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30504 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30254 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30104 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30054 1/cm, truncating the well
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.274188
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.043929
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.02615
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.55189
         W1 Well: minimal relaxation eigenvalue = 0.288918
         W1 Well: maximal relaxation eigenvalue = 1.02023
         W1 Well:       grid size = 1282
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -30053 1/cm
         B1 Barrier:        grid size = 681
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -4 1/cm
         B2 Barrier:        grid size = 677
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 196 1/cm
         B3 Barrier:        grid size = 773
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4604 1/cm
         B4 Barrier:        grid size = 805
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6204 1/cm
         B5 Barrier: nonpositive number of states at -23604 1/cm => truncating
         B5 Barrier:        grid size = 1153
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23603 1/cm
         B6 Barrier:        grid size = 651
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1496 1/cm
         B7 Barrier:        grid size = 587
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4696 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.92509, elapsed time[sec] = 2
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -30053 -23603 2.57e+05 1.43e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -4 3.31e+15
         B2    197 6.24e+14
         B3  -4604  1.7e+14
         B4  -6204 2.05e+14
         B5 -23603 2.33e+13
         B6   1497 2.54e+15
         B7   4696 2.89e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6
         W1         1  0.000102  0.000176  2.68e-06  3.17e-07  1.22e-17    0.0133      3.08
          R  9.77e+03         1      1.72    0.0262   0.00309  1.19e-13       130  3.01e+04
         P1  5.68e+03     0.582         1    0.0152    0.0018  6.91e-14      75.9  1.75e+04
         P2  3.73e+05      38.2      65.7         1     0.118  4.54e-12  4.98e+03  1.15e+06
         P3  3.16e+06       323       556      8.46         1  3.84e-11  4.22e+04  9.74e+06
         P4  8.23e+16  8.42e+12  1.45e+13   2.2e+11   2.6e+10         1   1.1e+15  2.54e+17
         P5      74.9   0.00767    0.0132  0.000201  2.37e-05  9.11e-16         1       231
         P6     0.324  3.32e-05  5.71e-05  8.69e-07  1.03e-07  3.94e-18   0.00433         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6
         W1         1  2.76e-08  4.75e-08  7.23e-10  8.54e-11  3.28e-21   3.6e-06  0.000832
          R  3.62e+07         1      1.72    0.0262   0.00309  1.19e-13       130  3.01e+04
         P1  2.11e+07     0.582         1    0.0152    0.0018  6.91e-14      75.9  1.75e+04
         P2  1.38e+09      38.2      65.7         1     0.118  4.54e-12  4.98e+03  1.15e+06
         P3  1.17e+10       323       556      8.46         1  3.84e-11  4.22e+04  9.74e+06
         P4  3.05e+20  8.42e+12  1.45e+13   2.2e+11   2.6e+10         1   1.1e+15  2.54e+17
         P5  2.78e+05   0.00767    0.0132  0.000201  2.37e-05  9.11e-16         1       231
         P6   1.2e+03  3.32e-05  5.71e-05  8.69e-07  1.03e-07  3.94e-18   0.00433         1
   MasterEquation::set:  done, cpu time[sec] = 1.9267, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1e-05 atm	 Temperature = 1054.9 K
      collision frequency = 40798.4 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064842, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.42534, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288961
      maximal relaxation eigenvalue / collision frequency = 3.69211e+08
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.70726e+08  3.21382e+07  8.73542e+06  1.05508e+07  1.19817e+06  1.30963e+08  1.48993e+07
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0455, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.287851, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3341, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.67683e-11  9.14623e-11  4.19965e-11
      low eigenvalue method done, cpu time[sec] = 12.3445, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.15e-11   4.2e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-11   4.2e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.2e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2751, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3e-05 atm	 Temperature = 1054.9 K
      collision frequency = 122395 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063644, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.40723, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288955
      maximal relaxation eigenvalue / collision frequency = 1.2307e+08
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        5.69087e+07  1.07127e+07  2.91181e+06  3.51695e+06       399391  4.36543e+07  4.96643e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0374, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.293846, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.332, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.97927e-11  6.66369e-11  2.89256e-11
      low eigenvalue method done, cpu time[sec] = 12.3424, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.66e-11  2.89e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-11  2.89e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.9e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2554, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5e-05 atm	 Temperature = 1054.9 K
      collision frequency = 203992 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063396, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3985, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288952
      maximal relaxation eigenvalue / collision frequency = 7.38422e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        3.41452e+07  6.42765e+06  1.74708e+06  2.11017e+06       239634  2.61926e+07  2.97986e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0241, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.303578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3284, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.87127e-11  5.64129e-11  2.38893e-11
      low eigenvalue method done, cpu time[sec] = 12.3388, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.64e-11  2.39e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-11  2.39e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.4e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2482, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7e-05 atm	 Temperature = 1054.9 K
      collision frequency = 285589 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064378, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.36949, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288951
      maximal relaxation eigenvalue / collision frequency = 5.27444e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        2.43895e+07  4.59118e+06  1.24792e+06  1.50726e+06       171167   1.8709e+07  2.12847e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0552, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.282748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3386, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.36451e-11  5.02723e-11  2.10072e-11
      low eigenvalue method done, cpu time[sec] = 12.3491, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.03e-11   2.1e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-11   2.1e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.1e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2292, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9e-05 atm	 Temperature = 1054.9 K
      collision frequency = 367186 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06442, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.37994, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288949
      maximal relaxation eigenvalue / collision frequency = 4.10235e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.89696e+07  3.57092e+06       970602  1.17232e+06       133130  1.45514e+07  1.65548e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0308, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.284578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3161, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.77584e-11   4.6027e-11  1.90898e-11
      low eigenvalue method done, cpu time[sec] = 12.3266, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.6e-11  1.91e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-11  1.91e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.9e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.217, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0001 atm	 Temperature = 1054.9 K
      collision frequency = 407984 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064259, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35256, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288949
      maximal relaxation eigenvalue / collision frequency = 3.69211e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.70726e+07  3.21382e+06       873542  1.05508e+06       119817  1.30963e+07  1.48993e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0534, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.290333, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3445, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.34719e-11  4.43382e-11   1.8346e-11
      low eigenvalue method done, cpu time[sec] = 12.3549, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.43e-11  1.83e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.28e-11  1.83e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2203, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0003 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+06 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063443, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.32637, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288943
      maximal relaxation eigenvalue / collision frequency = 1.2307e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        5.69087e+06  1.07127e+06       291181       351695      39939.1  4.36543e+06       496643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9735, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.290997, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2652, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.74248e-11  3.00429e-11  1.25448e-11
      low eigenvalue method done, cpu time[sec] = 12.2756, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0     3e-11  1.25e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  8.68e-12  1.25e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.3e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1126, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0005 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+06 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063423, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.31947, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288941
      maximal relaxation eigenvalue / collision frequency = 7.38422e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        3.41452e+06       642765       174708       211017      23963.4  2.61926e+06       297986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9196, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.284921, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2052, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.50248e-11   2.5353e-11  1.08291e-11
      low eigenvalue method done, cpu time[sec] = 12.2156, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.54e-11  1.08e-11         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  7.33e-12  1.08e-11         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.1e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.042, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0007 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+06 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.31691, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.28894
      maximal relaxation eigenvalue / collision frequency = 5.27444e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        2.43895e+06       459118       124792       150726      17116.7   1.8709e+06       212847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8968, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.305604, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2031, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.25569e-11  2.28318e-11   9.9233e-12
      low eigenvalue method done, cpu time[sec] = 12.2135, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.28e-11  9.92e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   6.6e-12  9.92e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 9.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0412, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0009 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+06 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064323, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.30414, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288939
      maximal relaxation eigenvalue / collision frequency = 4.10235e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.89696e+06       357092      97060.2       117232        13313  1.45514e+06       165548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9048, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.27926, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1849, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.10363e-11  2.11959e-11  9.32997e-12
      low eigenvalue method done, cpu time[sec] = 12.1953, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-11  9.33e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  6.12e-12  9.33e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 9.3e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.01, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.001 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+06 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06398, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.30187, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288939
      maximal relaxation eigenvalue / collision frequency = 3.69211e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.70726e+06       321382      87354.2       105508      11981.7  1.30963e+06       148993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8842, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.294001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1789, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05213e-11  2.05649e-11  9.09776e-12
      low eigenvalue method done, cpu time[sec] = 12.1894, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-11   9.1e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.94e-12   9.1e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 9.1e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0016, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.003 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+07 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.30756, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288936
      maximal relaxation eigenvalue / collision frequency = 1.2307e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             569087       107127      29118.1      35169.5      3993.91       436543      49664.3
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9156, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.281252, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1976, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.53641e-11  1.53746e-11  7.00791e-12
      low eigenvalue method done, cpu time[sec] = 12.208, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-11  7.01e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-12  7.01e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 7e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0248, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.005 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+07 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063364, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.30209, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288935
      maximal relaxation eigenvalue / collision frequency = 738423
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             341452      64276.5      17470.8      21101.7      2396.34       261926      29798.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8836, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.300825, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1852, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35029e-11     1.35e-11  6.12918e-12
      low eigenvalue method done, cpu time[sec] = 12.1956, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-11  6.13e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   3.9e-12  6.13e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.1e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0074, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.007 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+07 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.31438, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288934
      maximal relaxation eigenvalue / collision frequency = 527445
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             243895      45911.8      12479.2      15072.6      1711.67       187090      21284.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8992, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.282575, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1826, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23617e-11  1.23621e-11  5.56232e-12
      low eigenvalue method done, cpu time[sec] = 12.193, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-11  5.56e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-12  5.56e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 5.6e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0174, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.009 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+07 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063418, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.31476, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288933
      maximal relaxation eigenvalue / collision frequency = 410235
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             189696      35709.2      9706.02      11723.2       1331.3       145514      16554.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9077, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.298116, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2065, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15554e-11  1.15477e-11  5.14495e-12
      low eigenvalue method done, cpu time[sec] = 12.2169, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-11  5.14e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.34e-12  5.14e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 5.1e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0412, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.01 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+07 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3192, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288933
      maximal relaxation eigenvalue / collision frequency = 369212
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             170726      32138.2      8735.42      10550.8      1198.17       130963      14899.3
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8973, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.290032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1881, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12216e-11  1.12138e-11  4.97182e-12
      low eigenvalue method done, cpu time[sec] = 12.1985, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-11  4.97e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.24e-12  4.97e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 5e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0324, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.03 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+08 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063549, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3295, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288931
      maximal relaxation eigenvalue / collision frequency = 123071
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            56908.7      10712.7      2911.81      3516.95      399.391      43654.3      4966.43
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8897, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.285945, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1763, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    7.963e-12  7.96268e-12  3.27423e-12
      low eigenvalue method done, cpu time[sec] = 12.1867, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.96e-12  3.27e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-12  3.27e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.3e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0226, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.05 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+08 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063372, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.33621, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.28893
      maximal relaxation eigenvalue / collision frequency = 73843.2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            34145.2      6427.65      1747.08      2110.17      239.634      26192.6      2979.86
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9332, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.295289, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2292, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.60223e-12  6.60499e-12  2.58661e-12
      low eigenvalue method done, cpu time[sec] = 12.2397, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.6e-12  2.59e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-12  2.59e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.6e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0793, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.07 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+08 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063421, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34771, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288929
      maximal relaxation eigenvalue / collision frequency = 52745.4
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            24389.5      4591.18      1247.92      1507.26      171.167        18709      2128.47
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8984, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.292325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1915, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    5.775e-12  5.77587e-12  2.18043e-12
      low eigenvalue method done, cpu time[sec] = 12.2019, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.78e-12  2.18e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-12  2.18e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0596, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.09 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+08 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34834, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288929
      maximal relaxation eigenvalue / collision frequency = 41024.4
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            18969.6      3570.92      970.602      1172.32       133.13      14551.4      1655.48
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8949, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.297752, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1934, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.20674e-12  5.19417e-12  1.90326e-12
      low eigenvalue method done, cpu time[sec] = 12.2038, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.19e-12   1.9e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   1.5e-12   1.9e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0618, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+08 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064286, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34274, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288928
      maximal relaxation eigenvalue / collision frequency = 36922.1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            17072.6      3213.82      873.542      1055.08      119.817      13096.3      1489.93
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8945, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.286751, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.182, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.95839e-12  4.96039e-12  1.79391e-12
      low eigenvalue method done, cpu time[sec] = 12.1925, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-12  1.79e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-12  1.79e-12         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0459, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+09 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35246, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288926
      maximal relaxation eigenvalue / collision frequency = 12308
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            5690.87      1071.27      291.181      351.695      39.9391      4365.43      496.643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9032, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.298544, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2025, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.889e-12  2.90026e-12  8.92896e-13
      low eigenvalue method done, cpu time[sec] = 12.2129, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.9e-12  8.93e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  8.38e-13  8.93e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 8.9e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0752, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+09 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063473, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35133, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288925
      maximal relaxation eigenvalue / collision frequency = 7385.2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            3414.52      642.765      174.708      211.017      23.9634      2619.26      297.986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8973, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.283838, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1819, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.1688e-12  2.17959e-12  6.11996e-13
      low eigenvalue method done, cpu time[sec] = 12.1924, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.18e-12  6.12e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-13  6.12e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.1e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0534, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+09 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34812, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288924
      maximal relaxation eigenvalue / collision frequency = 5275.43
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            2438.95      459.118      124.792      150.726      17.1167       1870.9      212.847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8977, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.286558, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.185, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.7745e-12  1.78282e-12  4.67812e-13
      low eigenvalue method done, cpu time[sec] = 12.1955, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.78e-12  4.68e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-13  4.68e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.7e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0547, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+09 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06357, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34711, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288923
      maximal relaxation eigenvalue / collision frequency = 4103.33
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1896.96      357.092      97.0602      117.232       13.313      1455.14      165.548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8976, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.309316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2076, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5151e-12  1.52418e-12  3.78691e-13
      low eigenvalue method done, cpu time[sec] = 12.2185, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-12  3.79e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   4.4e-13  3.79e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.8e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0893, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+09 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063999, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35349, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288923
      maximal relaxation eigenvalue / collision frequency = 3693.09
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1707.26      321.382      87.3542      105.508      11.9817      1309.63      148.993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9114, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.291224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2033, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.42199e-12  1.42484e-12  3.45618e-13
      low eigenvalue method done, cpu time[sec] = 12.2138, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-12  3.47e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  4.12e-13  3.47e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.5e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.078, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+10 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064467, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3451, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288921
      maximal relaxation eigenvalue / collision frequency = 1231.69
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            569.087      107.127      29.1181      35.1695      3.99391      436.543      49.6643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9124, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.28085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1939, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.65101e-13  6.65311e-13  1.20292e-13
      low eigenvalue method done, cpu time[sec] = 12.2044, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.65e-13  1.21e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-13  1.21e-13         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.2e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0602, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+10 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34277, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288921
      maximal relaxation eigenvalue / collision frequency = 739.404
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            341.452      64.2765      17.4708      21.1017      2.39634      261.926      29.7986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8802, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.299713, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1806, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.50213e-13  4.50694e-13  6.88762e-14
      low eigenvalue method done, cpu time[sec] = 12.1911, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.51e-13  6.84e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-13  6.84e-14         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.8e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0449, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+10 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064421, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34467, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.28892
      maximal relaxation eigenvalue / collision frequency = 528.426
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            243.895      45.9118      12.4792      15.0726      1.71167       187.09      21.2847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8771, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.300424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1783, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48442e-13  3.44716e-13  4.65584e-14
      low eigenvalue method done, cpu time[sec] = 12.1887, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.45e-13  4.71e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  9.96e-14  4.71e-14         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.7e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0444, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+10 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34272, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.28892
      maximal relaxation eigenvalue / collision frequency = 411.217
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            189.696      35.7092      9.70602      11.7232       1.3313      145.514      16.5548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8931, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.291494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1853, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.78457e-13   2.8057e-13  3.43071e-14
      low eigenvalue method done, cpu time[sec] = 12.1957, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.81e-13  3.44e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  8.11e-14  3.44e-14         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.4e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0504, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 10 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+10 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34753, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.28892
      maximal relaxation eigenvalue / collision frequency = 370.193
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            170.726      32.1382      8.73542      10.5508      1.19817      130.963      14.8993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9629, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.291801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2554, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.59065e-13   2.5701e-13  3.00852e-14
      low eigenvalue method done, cpu time[sec] = 12.2658, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-13  3.02e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  7.43e-14  3.02e-14         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1221, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 30 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+11 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063557, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.36141, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288919
      maximal relaxation eigenvalue / collision frequency = 124.053
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            56.9087      10.7127      2.91181      3.51695     0.399391      43.6543      4.96643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9195, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.290136, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2103, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04709e-13  9.85555e-14  6.80235e-15
      low eigenvalue method done, cpu time[sec] = 12.2208, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.86e-14  7.11e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-14  7.11e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 7.1e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0951, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 50 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+11 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063463, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.37479, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 74.8257
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            34.1452      6.42765      1.74708      2.11017     0.239634      26.1926      2.97986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8829, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.300941, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1846, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.0273e-14   6.1662e-14  3.16936e-15
      low eigenvalue method done, cpu time[sec] = 12.195, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.17e-14  3.11e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-14  3.11e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.1e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.0755, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 70 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+11 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063346, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.39294, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 53.7286
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            24.3895      4.59118      1.24792      1.50726     0.171167       18.709      2.12847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8848, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.301865, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1873, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40311e-14  4.49883e-14  1.87056e-15
      low eigenvalue method done, cpu time[sec] = 12.1978, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.5e-14  2.89e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-14  2.89e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.9e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.101, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 90 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+11 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063655, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.40244, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 42.0082
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            18.9696      3.57092     0.970602      1.17232      0.13313      14.5514      1.65548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9225, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.281975, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2052, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.87173e-14  3.54499e-14  1.24648e-15
      low eigenvalue method done, cpu time[sec] = 12.2156, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.54e-14  1.78e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-14  1.78e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1281, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 100 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+11 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064345, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.40869, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 37.9062
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            17.0726      3.21382     0.873542      1.05508     0.119817      13.0963      1.48993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8955, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.288811, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1851, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.28807e-14  3.20593e-14  1.04832e-15
      low eigenvalue method done, cpu time[sec] = 12.1956, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.21e-14  6.66e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  9.26e-15  6.66e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.7e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1183, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 300 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+12 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064196, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.44745, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 13.2961
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            5.69087      1.07127     0.291181     0.351695    0.0399391      4.36543     0.496643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8867, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.294643, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.182, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35905e-14  1.10459e-14  1.56731e-16
      low eigenvalue method done, cpu time[sec] = 12.1925, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-14  1.78e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.19e-15  1.78e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1475, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 500 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+12 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063649, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.46798, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 8.37544
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            3.41452     0.642765     0.174708     0.211017    0.0239634      2.61926     0.297986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8788, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.292049, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1715, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1586e-15  6.67988e-15   6.1576e-17
      low eigenvalue method done, cpu time[sec] = 12.182, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.68e-15  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-15  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.162, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 700 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+12 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064433, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47757, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 6.26703
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            2.43895     0.459118     0.124792     0.150726    0.0171167       1.8709     0.212847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8964, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.285414, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1825, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.32352e-15  4.78841e-15  3.28201e-17
      low eigenvalue method done, cpu time[sec] = 12.193, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.79e-15  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-15  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1804, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 900 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+12 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063392, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.48279, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 5.09588
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1.89696     0.357092    0.0970602     0.117232     0.013313      1.45514     0.165548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8805, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.302298, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1835, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.31814e-15  3.73195e-15  2.03893e-17
      low eigenvalue method done, cpu time[sec] = 12.194, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.73e-15  1.55e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-15  1.55e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.6e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1862, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1000 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+12 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063709, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49471, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 4.68602
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1.70726     0.321382    0.0873542     0.105508    0.0119817      1.30963     0.148993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8687, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.306085, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1755, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.80258e-15   3.3612e-15  1.66778e-17
      low eigenvalue method done, cpu time[sec] = 12.186, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.36e-15  1.78e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  9.71e-16  1.78e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.1908, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3000 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+13 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.51385, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 2.2275
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.569087     0.107127    0.0291181    0.0351695   0.00399391     0.436543    0.0496643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8867, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.285356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1728, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.21817e-15  1.12546e-15  1.97889e-18
      low eigenvalue method done, cpu time[sec] = 12.1833, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-15  1.11e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.25e-16  1.11e-15         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.1e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2081, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5000 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+13 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06432, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.52632, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.73603
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.341452    0.0642765    0.0174708    0.0211017   0.00239634     0.261926    0.0297986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8969, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.288657, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1863, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.76849e-15   6.7591e-16  7.23219e-19
      low eigenvalue method done, cpu time[sec] = 12.1968, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.76e-16 -8.88e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-16 -8.88e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = -8.9e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2393, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7000 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+13 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06473, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.53313, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.52546
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.243895    0.0459118    0.0124792    0.0150726   0.00171167      0.18709    0.0212847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9113, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.29441, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2064, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.72304e-15  4.82989e-16  3.71484e-19
      low eigenvalue method done, cpu time[sec] = 12.2168, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.83e-16 -4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-16 -4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = -4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2577, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9000 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+13 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063419, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.53413, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.4085
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.189696    0.0357092   0.00970602    0.0117232    0.0013313     0.145514    0.0165548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8974, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.299883, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.198, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.80929e-15  3.75743e-16  2.25586e-19
      low eigenvalue method done, cpu time[sec] = 12.2084, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-16  6.66e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-16  6.66e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.7e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2521, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 10000 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+13 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06351, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.53875, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.36756
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.170726    0.0321382   0.00873542    0.0105508   0.00119817     0.130963    0.0148993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9142, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.281276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1963, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60664e-14  3.38195e-16  1.82972e-19
      low eigenvalue method done, cpu time[sec] = 12.2067, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.38e-16  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  9.77e-17  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2555, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 30000 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+14 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063514, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.54807, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.12208
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0569087    0.0107127   0.00291181   0.00351695  0.000399391    0.0436543   0.00496643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9094, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.29522, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.2054, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.48631e-15  1.12786e-16  2.04994e-20
      low eigenvalue method done, cpu time[sec] = 12.2158, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-16  6.66e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-17  6.66e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.7e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2735, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 50000 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+14 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.06437, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.55814, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.07302
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0341452   0.00642765   0.00174708   0.00211017  0.000239634    0.0261926   0.00297986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9185, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.301746, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.221, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.08208e-15  6.76779e-17   7.3923e-21
      low eigenvalue method done, cpu time[sec] = 12.2316, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.77e-17  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-17  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.3002, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 70000 atm	 Temperature = 1054.9 K
      collision frequency = 2.85589e+14 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063419, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.56561, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.05201
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0243895   0.00459118   0.00124792   0.00150726  0.000171167     0.018709   0.00212847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.889, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.290348, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.18, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.19402e-15  4.83433e-17  3.77434e-21
      low eigenvalue method done, cpu time[sec] = 12.1905, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.83e-17  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-17  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2684, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 90000 atm	 Temperature = 1054.9 K
      collision frequency = 3.67186e+14 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.57328, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.04035
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0189696   0.00357092  0.000970602   0.00117232   0.00013313    0.0145514   0.00165548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8613, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.302566, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1645, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.13697e-14  3.76012e-17  2.28417e-21
      low eigenvalue method done, cpu time[sec] = 12.175, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-17  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-17  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2555, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 100000 atm	 Temperature = 1054.9 K
      collision frequency = 4.07984e+14 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063677, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.57596, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.03627
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0170726   0.00321382  0.000873542   0.00105508  0.000119817    0.0130963   0.00148993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.9026, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.28245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1858, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.8518e-15  3.38414e-17  1.85044e-21
      low eigenvalue method done, cpu time[sec] = 12.1962, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.38e-17  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  9.78e-18  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.282, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 300000 atm	 Temperature = 1054.9 K
      collision frequency = 1.22395e+15 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.064306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.5876, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.02023
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
         0.00569087   0.00107127  0.000291181  0.000351695  3.99391e-05   0.00436543  0.000496643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.8629, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.292524, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.1561, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.27667e-16   1.1281e-17  2.05781e-22
      low eigenvalue method done, cpu time[sec] = 12.1666, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-17  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-18  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.2645, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 500000 atm	 Temperature = 1054.9 K
      collision frequency = 2.03992e+15 1/sec
      global relaxation matrix dimension = 1282
      setting global matrices ... done, cpu time[sec] = 0.063403, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.57652, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.288918
      maximal relaxation eigenvalue / collision frequency = 1.02023
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
         0.00341452  0.000642765  0.000174708  0.000211017  2.39634e-05   0.00261926  0.000297986
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 12.0099, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.301045, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 12.3116, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -1.2987e-14  6.76867e-18   7.4094e-23
      low eigenvalue method done, cpu time[sec] = 12.3221, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.77e-18  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-18  4.44e-16         1
         *Z       ---       ---  6.98e+23
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 16.4081, elapsed time[sec] = 6
rate calculation done, cpu time[sec] = 857.306, elapsed time[sec] = 296
