Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::RigidRotor::RigidRotor:  starts
      Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 1.4e-05, elapsed time[sec] = 0
         effective rotational constant[1/cm]  = 27.3386
         analytic  frequency at minimum[1/cm] = 264.582
         numerical frequency at minimum[1/cm] = 264.58
         minimum energy[kcal/mol]             = -0.652133
         maximum energy[kcal/mol]             = 4.43076
         maximum frequency[1/cm]              = 304.056
         maximum imaginary frequency[1/cm]    = 363.663
         ground energy [kcal/mol]             = -0.331612
         highest energy level [kcal/mol]      = 181.149
         number of levels                     = 97
         10 lowest excited states [kcal/mol] relative to the ground: 0.0416 0.501 0.787 1.2 1.64 2.1 2.58 3.06 3.55
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum      Classical  Semiclassical  ***
           100        1.91315        2.83254        1.89531
           200        2.39365        2.62672        2.39014
           300          2.881        2.99583        2.87973
           400        3.35757        3.42902        3.35695
           500        3.82304        3.87287        3.82272
           600        4.27901        4.31609        4.27884
           700        4.72624        4.75501        4.72615
           800        5.16483        5.18782        5.16479
           900        5.59466        5.61343        5.59464
          1000        6.01554        6.03113        6.01553
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 0.003104, elapsed time[sec] = 0
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.002464, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.005683, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
               hamiltonian size                = 175
               ground energy [kcal/mol]        = -0.331612
               highest level energy [kcal/mol] = 579.487
               number of levels                = 173
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.003307, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.374179, elapsed time[sec] = 0
         effective power exponent at 590.248 kcal/mol = 11.3975
      interpolating states number/density done, cpu time[sec] = 0.411439, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.414701, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         18.6636
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 4.4e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.55031        9.55025        4.77514
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000139, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         19.7115        11.2506        7.16248
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         27.4891        14.3449        9.42601
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000105, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.37766        1.21309        1.07414
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 8.6e-05, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.6e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.70369        1.21669        1.08113
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 9e-05, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: linear
            rotational constant[1/cm]:         60.4052
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         9.46649        1.30145        1.14415
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 8e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 8.5e-05, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         6.45653       0.996021       0.869895
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 3.2e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 7.3e-05, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.24344       0.933826       0.927158
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 2.9e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 6.7e-05, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000892, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000846, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7e-06, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.005013, elapsed time[sec] = 0
            effective power exponent at 522.659 kcal/mol = 11.8743
         interpolating states number/density done, cpu time[sec] = 0.02297, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.023011, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001587, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004987, elapsed time[sec] = 0
            effective power exponent at 519.405 kcal/mol = 11.8747
         interpolating states number/density done, cpu time[sec] = 0.021061, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021116, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001582, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004955, elapsed time[sec] = 0
            effective power exponent at 516.412 kcal/mol = 11.8755
         interpolating states number/density done, cpu time[sec] = 0.020915, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020969, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001586, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004928, elapsed time[sec] = 0
            effective power exponent at 513.676 kcal/mol = 11.8759
         interpolating states number/density done, cpu time[sec] = 0.020916, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020972, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001581, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004899, elapsed time[sec] = 0
            effective power exponent at 511.203 kcal/mol = 11.8765
         interpolating states number/density done, cpu time[sec] = 0.02077, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020822, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001553, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004874, elapsed time[sec] = 0
            effective power exponent at 508.998 kcal/mol = 11.8771
         interpolating states number/density done, cpu time[sec] = 0.020758, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020807, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001549, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004857, elapsed time[sec] = 0
            effective power exponent at 507.065 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.0203, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02035, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001543, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004844, elapsed time[sec] = 0
            effective power exponent at 505.407 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.020075, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020125, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001608, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004829, elapsed time[sec] = 0
            effective power exponent at 504.049 kcal/mol = 11.8772
         interpolating states number/density done, cpu time[sec] = 0.020116, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020166, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001536, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004828, elapsed time[sec] = 0
            effective power exponent at 502.986 kcal/mol = 11.8768
         interpolating states number/density done, cpu time[sec] = 0.019935, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.019984, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001542, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004843, elapsed time[sec] = 0
            effective power exponent at 502.234 kcal/mol = 11.8766
         interpolating states number/density done, cpu time[sec] = 0.020424, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020477, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001549, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004805, elapsed time[sec] = 0
            effective power exponent at 501.762 kcal/mol = 11.8765
         interpolating states number/density done, cpu time[sec] = 0.020419, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02047, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001552, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004804, elapsed time[sec] = 0
            effective power exponent at 501.547 kcal/mol = 11.8767
         interpolating states number/density done, cpu time[sec] = 0.02043, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020482, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001556, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004804, elapsed time[sec] = 0
            effective power exponent at 501.607 kcal/mol = 11.8774
         interpolating states number/density done, cpu time[sec] = 0.020509, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02056, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001532, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00481, elapsed time[sec] = 0
            effective power exponent at 501.856 kcal/mol = 11.8784
         interpolating states number/density done, cpu time[sec] = 0.020227, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02028, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001534, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004822, elapsed time[sec] = 0
            effective power exponent at 502.254 kcal/mol = 11.8799
         interpolating states number/density done, cpu time[sec] = 0.020211, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02027, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001544, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004821, elapsed time[sec] = 0
            effective power exponent at 502.763 kcal/mol = 11.8817
         interpolating states number/density done, cpu time[sec] = 0.020419, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020476, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 5.3562, elapsed time[sec] = 1
      effective power exponent at 501.547 kcal/mol = 12.1215
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 5.97105, elapsed time[sec] = 1
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001588, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004996, elapsed time[sec] = 0
            effective power exponent at 521.876 kcal/mol = 11.8794
         interpolating states number/density done, cpu time[sec] = 0.02231, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.022363, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001583, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004966, elapsed time[sec] = 0
            effective power exponent at 518.814 kcal/mol = 11.8788
         interpolating states number/density done, cpu time[sec] = 0.021382, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021433, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001577, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004945, elapsed time[sec] = 0
            effective power exponent at 516.032 kcal/mol = 11.8783
         interpolating states number/density done, cpu time[sec] = 0.02097, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.021022, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001578, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004913, elapsed time[sec] = 0
            effective power exponent at 513.53 kcal/mol = 11.8777
         interpolating states number/density done, cpu time[sec] = 0.021049, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.0211, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001572, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004893, elapsed time[sec] = 0
            effective power exponent at 511.311 kcal/mol = 11.8768
         interpolating states number/density done, cpu time[sec] = 0.02063, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02068, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001564, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004876, elapsed time[sec] = 0
            effective power exponent at 509.396 kcal/mol = 11.8759
         interpolating states number/density done, cpu time[sec] = 0.020249, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020299, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00155, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004862, elapsed time[sec] = 0
            effective power exponent at 507.789 kcal/mol = 11.8748
         interpolating states number/density done, cpu time[sec] = 0.020295, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020345, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001553, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004851, elapsed time[sec] = 0
            effective power exponent at 506.494 kcal/mol = 11.8737
         interpolating states number/density done, cpu time[sec] = 0.020051, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020104, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001552, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004842, elapsed time[sec] = 0
            effective power exponent at 505.53 kcal/mol = 11.8725
         interpolating states number/density done, cpu time[sec] = 0.019989, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.02004, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001565, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004833, elapsed time[sec] = 0
            effective power exponent at 504.858 kcal/mol = 11.8715
         interpolating states number/density done, cpu time[sec] = 0.02006, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020112, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001541, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004831, elapsed time[sec] = 0
            effective power exponent at 504.472 kcal/mol = 11.8707
         interpolating states number/density done, cpu time[sec] = 0.020403, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020454, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00154, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004833, elapsed time[sec] = 0
            effective power exponent at 504.404 kcal/mol = 11.8706
         interpolating states number/density done, cpu time[sec] = 0.020621, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020672, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001553, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004826, elapsed time[sec] = 0
            effective power exponent at 504.572 kcal/mol = 11.8709
         interpolating states number/density done, cpu time[sec] = 0.020759, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020809, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001551, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004829, elapsed time[sec] = 0
            effective power exponent at 504.93 kcal/mol = 11.8718
         interpolating states number/density done, cpu time[sec] = 0.020571, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020618, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001543, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004838, elapsed time[sec] = 0
            effective power exponent at 505.433 kcal/mol = 11.8731
         interpolating states number/density done, cpu time[sec] = 0.020403, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020452, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001545, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004844, elapsed time[sec] = 0
            effective power exponent at 506.042 kcal/mol = 11.8749
         interpolating states number/density done, cpu time[sec] = 0.020414, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.020467, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 6.0868, elapsed time[sec] = 1
      effective power exponent at 504.404 kcal/mol = 12.1643
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 6.68309, elapsed time[sec] = 2
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::RigidRotor::RigidRotor:  starts
      Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.001759, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.005475, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 32.9192, elapsed time[sec] = 4
         effective power exponent at 569.903 kcal/mol = 13.605
      interpolating states number/density done, cpu time[sec] = 32.9603, elapsed time[sec] = 4
   Model::RRHO::RRHO:  done, cpu time[sec] = 32.9604, elapsed time[sec] = 4
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000953, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000914, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O           B1           B2           B3           B4           B5           B6           B7
     100  1.32337e+28  1.11801e+26  1.79595e+26  1.27054e+26  1.20988e+26  3.09395e+23  9.07742e+27  3.09395e+23  8.88157e+27  3.09395e+23  4.22578e+27  3.80274e+23  1.41444e+28  3.80274e+23  1.04332e+28  1.02813e+30  3.90835e+30  1.47521e+35  6.97793e+37 5.12313e+128  6.66931e+29  2.86815e+29
     200  1.33692e+29  7.62301e+26  1.46719e+27  1.01648e+27  9.67917e+26   1.7502e+24  7.26915e+28   1.7502e+24  7.10972e+28   1.7502e+24  3.38168e+28  1.07558e+24  1.21883e+29  1.07558e+24  8.41716e+28   2.6594e+31  6.23661e+31  1.08311e+30  2.15609e+30  1.52794e+59   8.8803e+30   3.6677e+30
     300  5.54011e+29   2.3227e+27  5.26013e+27  3.43494e+27  3.26819e+27  4.82299e+24  2.48509e+29  4.82299e+24  2.42373e+29  4.82299e+24  1.14821e+29  1.97596e+24  4.86792e+29  1.97596e+24  2.97902e+29  1.82848e+32  2.59531e+32  1.44204e+30  1.73251e+30  1.89698e+39  4.41738e+31  1.66472e+31
     400  1.62876e+30  5.05864e+27  1.36165e+28  8.18813e+27  7.76763e+27  9.90065e+24  6.13421e+29  9.90065e+24  5.94841e+29  9.90065e+24  2.78615e+29  3.04219e+24  1.44573e+30  3.04219e+24  7.82109e+29  7.43427e+32   6.7607e+32  3.11922e+30  3.38427e+30  5.81349e+32  1.53174e+32  5.25522e+31
     500  4.05813e+30  9.18441e+27  2.95805e+28  1.61898e+28  1.52757e+28  1.72958e+25  1.28789e+30  1.72958e+25  1.23982e+30  1.72958e+25   5.7057e+29  4.25159e+24  3.66233e+30  4.25159e+24  1.77789e+30  2.27526e+33  1.40931e+33  6.99374e+30  7.25775e+30  2.17394e+31  4.38411e+32  1.38723e+32
     600    9.205e+30  1.48858e+28  5.75714e+28  2.85232e+28  2.67107e+28  2.72836e+25  2.45845e+30  2.72836e+25   2.3485e+30  2.72836e+25  1.05857e+30  5.58887e+24  8.37639e+30  5.58887e+24  3.71358e+30  5.83122e+33  2.59745e+33  1.53855e+31  1.55306e+31  1.56568e+31  1.10959e+33   3.2876e+32
     700  1.96268e+31  2.23327e+28  1.03863e+29  4.64909e+28  4.31284e+28  4.01151e+25  4.40299e+30  4.01151e+25  4.17418e+30  4.01151e+25  1.84184e+30  7.04278e+24  1.77958e+31  7.04278e+24   7.3216e+30  1.32403e+34  4.44561e+33   3.2848e+31  3.24856e+31  2.00146e+31   2.5703e+33  7.23012e+32
     800  3.99726e+31  3.16884e+28  1.77202e+29  7.16645e+28  6.57463e+28  5.60263e+25  7.52403e+30  5.60263e+25  7.08108e+30  5.60263e+25  3.06199e+30  8.60462e+24  3.57018e+31  8.60462e+24  1.38186e+31  2.75318e+34  7.26015e+33  6.79278e+31  6.61014e+31  3.04631e+31  5.55972e+33  1.50221e+33
     900  7.84672e+31  4.31167e+28  2.89593e+29  1.05933e+29  9.59692e+28  7.52475e+25   1.2392e+31  7.52475e+25  1.15817e+31  7.52475e+25  4.91708e+30  1.02674e+25   6.8364e+31  1.02674e+25  2.51764e+31  5.35415e+34  1.14974e+34  1.36142e+32  1.30787e+32  4.96296e+31  1.13778e+34  2.98126e+33
    1000  1.49313e+32  5.67863e+28   4.5729e+29   1.5155e+29  1.35418e+29  9.80094e+25  1.98006e+31  9.80094e+25  1.83844e+31  9.80094e+25  7.67956e+30  1.20253e+25  1.25894e+32  1.20253e+25  4.45216e+31  9.87573e+34  1.78329e+34   2.6486e+32  2.51879e+32  8.31111e+31  2.22336e+34  5.69301e+33
    1100  2.76498e+32  7.28733e+28  7.02014e+29  2.11181e+29  1.85958e+29  1.24549e+26  3.08361e+31  1.24549e+26  2.84529e+31  1.24549e+26  1.17186e+31  1.38735e+25  2.24211e+32  1.38735e+25  7.67118e+31  1.74484e+35  2.72609e+34  5.01126e+32  4.72845e+32  1.40419e+32  4.17712e+34   1.0516e+34
    1200  4.99709e+32  9.15623e+28  1.05243e+30  2.87952e+29   2.4973e+29  1.55112e+26  4.69635e+31  1.55112e+26    4.308e+31  1.55112e+26  1.75274e+31  1.58077e+25  3.87836e+32  1.58077e+25  1.29155e+32  2.97422e+35  4.12329e+34  9.23932e+32   8.6658e+32  2.37069e+32  7.58478e+34  1.88651e+34
    1300  8.83374e+32  1.13047e+29  1.54592e+30  3.85497e+29  3.29178e+29  1.89956e+26  7.01317e+31  1.89956e+26  6.39766e+31  1.89956e+26  2.57572e+31  1.78243e+25  6.53817e+32  1.78243e+25  2.12955e+32  4.91785e+35  6.18529e+34  1.66312e+33  1.55279e+33  3.97859e+32  1.33662e+35  3.29702e+34
    1400  1.53024e+33  1.37529e+29  2.23077e+30  5.08012e+29   4.2708e+29  2.29347e+26  1.02902e+32  2.29347e+26  9.33807e+31  2.29347e+26  3.72573e+31    1.992e+25  1.07714e+33    1.992e+25  3.44487e+32  7.92097e+35  9.21464e+34  2.92792e+33   2.7242e+33  6.61771e+32   2.2936e+35  5.62782e+34
    1500  2.60145e+33  1.65218e+29  3.16862e+30  6.60308e+29  5.46575e+29  2.73564e+26    1.486e+32  2.73564e+26  1.34187e+32  2.73564e+26  5.31243e+31  2.20919e+25   1.7381e+33  2.20919e+25   5.4755e+32  1.24687e+36  1.36429e+35  5.04944e+33  4.68555e+33  1.08918e+33  3.84292e+35  9.40225e+34
    1600  4.34584e+33  1.96331e+29  4.43755e+30  8.47865e+29  6.91195e+29  3.22898e+26  2.11503e+32  3.22898e+26  1.90103e+32  3.22898e+26  7.47593e+31  2.43375e+25  2.75222e+33  2.43375e+25  8.56247e+32  1.92339e+36  2.00811e+35  8.54277e+33  7.91042e+33  1.77224e+33  6.30124e+35  1.54018e+35
    1700  7.14212e+33  2.31092e+29  6.13555e+30   1.0769e+30  8.64899e+29  3.77647e+26  2.97052e+32  3.77647e+26   2.6583e+32  3.77647e+26  1.03937e+32  2.66545e+25   4.2834e+33  2.66545e+25  1.31882e+33  2.91382e+36  2.93871e+35  1.41965e+34  1.31232e+34  2.84978e+33  1.01309e+36  2.47759e+35
    1800  1.15587e+34  2.69732e+29   8.3846e+30  1.35441e+30   1.0721e+30  4.38121e+26  4.12115e+32  4.38121e+26  3.67278e+32  4.38121e+26  1.42886e+32  2.90406e+25  6.56127e+33  2.90406e+25  2.00268e+33  4.34307e+36  4.27567e+35  2.32001e+34  2.14153e+34   4.5282e+33  1.59972e+36  3.91911e+35
    1900  1.84378e+34  3.12487e+29  1.13355e+31  1.68827e+30   1.3177e+30  5.04637e+26  5.65279e+32  5.04637e+26  5.01818e+32  5.04637e+26  1.94381e+32   3.1494e+25  9.90373e+33   3.1494e+25  3.00099e+33  6.37873e+36  6.18439e+35  3.73225e+34  3.44083e+34  7.11066e+33  2.48444e+36  6.10326e+35
    2000  2.90124e+34  3.59599e+29  1.51731e+31  2.08726e+30  1.60714e+30  5.77522e+26  7.67203e+32  5.77522e+26  6.78572e+32  5.77522e+26  2.61854e+32  3.40128e+25   1.4746e+34  3.40128e+25   4.4411e+33  9.24353e+36  8.89195e+35  5.91605e+34  5.44797e+34  1.10373e+34  3.79963e+36  9.36719e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7
     100 2.29837e+225  1.02813e+30  1.82417e+29    3.594e+38   2.9701e+47 1.37266e+129  2.66905e+20     0.948942
     200 5.57152e+127   2.6594e+31  1.34736e+31  5.34606e+31  1.40666e+35  2.50103e+59   1.7765e+26  6.67134e+15
     300  3.09099e+95  1.82848e+32   9.3443e+31  1.94038e+31  2.80774e+33  2.63474e+39  3.25529e+28  2.48059e+21
     400    3.325e+79  7.43427e+32  3.14239e+32  2.19142e+31  8.64423e+32  7.43778e+32    6.851e+29   2.2413e+24
     500  1.13834e+70  2.27526e+33  7.63521e+32  3.32701e+31  6.11802e+32   2.6476e+31  5.78544e+30  1.76229e+26
     600  6.87565e+63  5.83122e+33  1.55857e+33  5.64371e+31  6.25213e+32  1.84519e+31  3.01214e+31  4.01315e+27
     700  2.95091e+59  1.32403e+34  2.86945e+33  1.00075e+32  7.71381e+32  2.30406e+31  1.16802e+32  4.44289e+28
     800  1.80605e+56  2.75318e+34  4.94971e+33  1.80048e+32  1.05643e+33   3.4457e+31  3.71824e+32  3.10232e+29
     900  6.45973e+53  5.35415e+34  8.17932e+33  3.23813e+32  1.53624e+33  5.53732e+31   1.0277e+33  1.58053e+30
    1000  7.90811e+51  9.87573e+34  1.31259e+34  5.77682e+32  2.31258e+33  9.17195e+31  2.55409e+33  6.41662e+30
    1100  2.35818e+50  1.74484e+35  2.06322e+34  1.01819e+33  3.54884e+33  1.53581e+32  5.84168e+33  2.19695e+31
    1200  1.36572e+49  2.97422e+35  3.19399e+34  1.76957e+33   5.4983e+33  2.57362e+32  1.24968e+34  6.59117e+31
    1300  1.31351e+48  4.91785e+35  4.88631e+34  3.02998e+33  8.54687e+33  4.29194e+32  2.52991e+34  1.77992e+32
    1400  1.87634e+47  7.92097e+35  7.40307e+34  5.11055e+33  1.32748e+34  7.10037e+32  4.88935e+34  4.41164e+32
    1500  3.66886e+46  1.24687e+36  1.11219e+35   8.4923e+33  2.05446e+34  1.16314e+33  9.08125e+34   1.0183e+33
    1600  9.23757e+45  1.92339e+36  1.65808e+35  1.39081e+34  3.16238e+34  1.88484e+33  1.62955e+35  2.21334e+33
    1700  2.85867e+45  2.91382e+36  2.45396e+35  2.24595e+34  4.83564e+34  3.01988e+33  2.83688e+35  4.56972e+33
    1800  1.04875e+45  4.34307e+36  3.60632e+35    3.578e+34  7.33958e+34  4.78305e+33  4.80782e+35   9.0238e+33
    1900  4.43352e+44  6.37873e+36  5.26318e+35  5.62626e+34  1.10524e+35  7.48924e+33  7.95446e+35  1.71381e+34
    2000   2.1114e+44  9.24353e+36   7.6287e+35  8.73711e+34  1.65077e+35  1.15948e+34  1.28782e+36  3.14479e+34
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0
Model::init:  done, cpu time[sec] = 47.3165, elapsed time[sec] = 8
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 1012.95 K
      Collision rate   = 5.78195e-10cm^3/sec
      Energy reference = 32880 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: density of states done, elapsed time[sec] = 0.000274
         W1 Well: cannot satisfy the constant collision frequency at energy = -31170 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30520 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30370 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30220 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30120 1/cm, truncating the well
         W1 Well: cannot satisfy the constant collision frequency at energy = -30070 1/cm, truncating the well
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.301244
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.041933
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.96651
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.523695
         W1 Well: minimal relaxation eigenvalue = 0.291338
         W1 Well: maximal relaxation eigenvalue = 1.01491
         W1 Well:       grid size = 1259
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -30069 1/cm
         B1 Barrier:        grid size = 658
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 654
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 180 1/cm
         B3 Barrier:        grid size = 750
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4619 1/cm
         B4 Barrier:        grid size = 782
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6219 1/cm
         B5 Barrier: nonpositive number of states at -23570 1/cm => truncating
         B5 Barrier:        grid size = 1129
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23570 1/cm
         B6 Barrier:        grid size = 628
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1480 1/cm
         B7 Barrier:        grid size = 564
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4680 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.86231, elapsed time[sec] = 2
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -30069 -23570 2.64e+05 1.18e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 2.48e+15
         B2    181 4.49e+14
         B3  -4619  1.2e+14
         B4  -6219 1.46e+14
         B5 -23570 1.64e+13
         B6   1481 1.84e+15
         B7   4681 2.01e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6
         W1         1   0.00061   0.00105  1.23e-05  1.33e-06  1.81e-17    0.0881        24
          R  1.64e+03         1      1.72    0.0203   0.00218  2.97e-14       144  3.94e+04
         P1       954     0.582         1    0.0118   0.00127  1.73e-14      84.1  2.29e+04
         P2   8.1e+04      49.4      84.8         1     0.108  1.47e-12  7.13e+03  1.95e+06
         P3  7.53e+05       459       789       9.3         1  1.36e-11  6.63e+04  1.81e+07
         P4  5.52e+16  3.37e+13  5.79e+13  6.82e+11  7.33e+10         1  4.87e+15  1.33e+18
         P5      11.4   0.00692    0.0119   0.00014  1.51e-05  2.06e-16         1       273
         P6    0.0416  2.54e-05  4.36e-05  5.14e-07  5.52e-08  7.53e-19   0.00366         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6
         W1         1  1.69e-07   2.9e-07  3.42e-09  3.68e-10  5.01e-21  2.44e-05   0.00666
          R  5.92e+06         1      1.72    0.0203   0.00218  2.97e-14       144  3.94e+04
         P1  3.45e+06     0.582         1    0.0118   0.00127  1.73e-14      84.1  2.29e+04
         P2  2.92e+08      49.4      84.8         1     0.108  1.47e-12  7.13e+03  1.95e+06
         P3  2.72e+09       459       789       9.3         1  1.36e-11  6.63e+04  1.81e+07
         P4     2e+20  3.37e+13  5.79e+13  6.82e+11  7.33e+10         1  4.87e+15  1.33e+18
         P5   4.1e+04   0.00692    0.0119   0.00014  1.51e-05  2.06e-16         1       273
         P6       150  2.54e-05  4.36e-05  5.14e-07  5.52e-08  7.53e-19   0.00366         1
   MasterEquation::set:  done, cpu time[sec] = 1.86388, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1e-05 atm	 Temperature = 1012.95 K
      collision frequency = 41886.8 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06504, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.22269, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291359
      maximal relaxation eigenvalue / collision frequency = 3.17536e+08
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.50126e+08  2.71707e+07  7.26731e+06  8.85023e+06       994156  1.10995e+08  1.21321e+07
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.2179, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.277623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4962, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.76109e-11  1.96593e-11  8.86681e-12
      low eigenvalue method done, cpu time[sec] = 11.5046, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-11  8.87e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.73e-12  8.87e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 8.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.2061, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3e-05 atm	 Temperature = 1012.95 K
      collision frequency = 125661 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065774, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20437, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291356
      maximal relaxation eigenvalue / collision frequency = 1.05845e+08
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        5.00422e+07   9.0569e+06  2.42244e+06  2.95008e+06       331385  3.69984e+07  4.04405e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.236, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.271801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.5085, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.858e-11   1.4106e-11  5.98918e-12
      low eigenvalue method done, cpu time[sec] = 11.5168, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-11  5.99e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  4.11e-12  5.99e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.2115, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5e-05 atm	 Temperature = 1012.95 K
      collision frequency = 209434 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065631, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.18257, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291354
      maximal relaxation eigenvalue / collision frequency = 6.35072e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        3.00253e+07  5.43414e+06  1.45346e+06  1.77005e+06       198831   2.2199e+07  2.42643e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.2026, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.277983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4813, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.66523e-12  1.18469e-11  4.89681e-12
      low eigenvalue method done, cpu time[sec] = 11.4896, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-11   4.9e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-12   4.9e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1628, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7e-05 atm	 Temperature = 1012.95 K
      collision frequency = 293208 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065601, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17606, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291353
      maximal relaxation eigenvalue / collision frequency = 4.53623e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        2.14466e+07  3.88153e+06  1.03819e+06  1.26432e+06       142022  1.58564e+07  1.73316e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1798, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.263983, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4724, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02882e-11   1.0499e-11   4.2768e-12
      low eigenvalue method done, cpu time[sec] = 11.4808, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-11  4.28e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.06e-12  4.28e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.3e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1509, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9e-05 atm	 Temperature = 1012.95 K
      collision frequency = 376982 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.067269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17196, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291353
      maximal relaxation eigenvalue / collision frequency = 3.52818e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.66807e+07  3.01897e+06       807479       983359       110462  1.23328e+07  1.34802e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.2159, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.278757, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4954, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.58425e-12  9.57131e-12  3.86674e-12
      low eigenvalue method done, cpu time[sec] = 11.5037, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.57e-12  3.87e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.79e-12  3.87e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1622, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0001 atm	 Temperature = 1012.95 K
      collision frequency = 418868 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.066062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17804, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291352
      maximal relaxation eigenvalue / collision frequency = 3.17536e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.50126e+07  2.71707e+06       726731       885023      99415.6  1.10995e+07  1.21321e+06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1954, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.267948, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.464, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32699e-11   9.2033e-12  3.70825e-12
      low eigenvalue method done, cpu time[sec] = 11.4724, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.2e-12  3.71e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-12  3.71e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.7e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1408, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0003 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+06 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065647, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14258, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.29135
      maximal relaxation eigenvalue / collision frequency = 1.05845e+07
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        5.00422e+06       905690       242244       295008      33138.5  3.69984e+06       404405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0929, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.277644, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3713, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.66663e-12  6.11442e-12  2.48534e-12
      low eigenvalue method done, cpu time[sec] = 11.3796, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.11e-12  2.49e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-12  2.49e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.5e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0113, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0005 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+06 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064874, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.13837, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291349
      maximal relaxation eigenvalue / collision frequency = 6.35072e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        3.00253e+06       543414       145346       177005      19883.1   2.2199e+06       242643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1195, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.269162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3893, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.84018e-12  5.11316e-12  2.12929e-12
      low eigenvalue method done, cpu time[sec] = 11.3976, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.11e-12  2.13e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-12  2.13e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.1e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0246, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0007 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+06 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064959, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.13212, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291348
      maximal relaxation eigenvalue / collision frequency = 4.53623e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        2.14466e+06       388153       103819       126432      14202.2  1.58564e+06       173316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0858, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.286942, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3735, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.40832e-12   4.5781e-12  1.94258e-12
      low eigenvalue method done, cpu time[sec] = 11.3818, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-12  1.94e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-12  1.94e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.9e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0026, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.0009 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+06 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064856, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.13328, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291348
      maximal relaxation eigenvalue / collision frequency = 3.52818e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.66807e+06       301897      80747.9      98335.9      11046.2  1.23328e+06       134802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1171, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.289935, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4077, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.29482e-12  4.23236e-12  1.82078e-12
      low eigenvalue method done, cpu time[sec] = 11.4161, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.23e-12  1.82e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-12  1.82e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0426, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.001 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+06 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12918, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291348
      maximal relaxation eigenvalue / collision frequency = 3.17536e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
        1.50126e+06       271707      72673.1      88502.3      9941.56  1.10995e+06       121321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1136, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.272072, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3864, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.22249e-12  4.09936e-12  1.77322e-12
      low eigenvalue method done, cpu time[sec] = 11.3947, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.1e-12  1.77e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-12  1.77e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.8e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0086, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.003 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+07 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065092, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12323, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291346
      maximal relaxation eigenvalue / collision frequency = 1.05845e+06
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             500422        90569      24224.4      29500.8      3313.85       369984      40440.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1474, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.268008, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4161, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.00545e-12  3.01464e-12  1.34808e-12
      low eigenvalue method done, cpu time[sec] = 11.4245, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.01e-12  1.35e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  8.78e-13  1.35e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.3e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0365, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.005 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+07 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065035, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12793, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291346
      maximal relaxation eigenvalue / collision frequency = 635073
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             300253      54341.4      14534.6      17700.5      1988.31       221990      24264.3
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1206, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.288979, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4103, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.61818e-12  2.62835e-12   1.1711e-12
      low eigenvalue method done, cpu time[sec] = 11.4186, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.63e-12  1.17e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  7.66e-13  1.17e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.2e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0353, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.007 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+07 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064903, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.1156, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291345
      maximal relaxation eigenvalue / collision frequency = 453624
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             214466      38815.3      10381.9      12643.2      1420.22       158564      17331.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1294, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.26841, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3985, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.40436e-12  2.39568e-12  1.05763e-12
      low eigenvalue method done, cpu time[sec] = 11.4069, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-12  1.06e-12         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  6.98e-13  1.06e-12         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.1e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0114, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.009 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+07 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064984, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16314, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291345
      maximal relaxation eigenvalue / collision frequency = 352819
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             166807      30189.7      8074.79      9833.59      1104.62       123328      13480.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1541, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.270058, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4248, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22705e-12  2.23008e-12  9.74466e-13
      low eigenvalue method done, cpu time[sec] = 11.4332, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.23e-12  9.75e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   6.5e-13  9.75e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 9.8e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.085, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.01 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+07 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.066935, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12191, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291345
      maximal relaxation eigenvalue / collision frequency = 317537
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
             150126      27170.7      7267.31      8850.23      994.156       110995      12132.1
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1476, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.269925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.4182, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15514e-12  2.16241e-12  9.40074e-13
      low eigenvalue method done, cpu time[sec] = 11.4265, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-12   9.4e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-13   9.4e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 9.4e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0395, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.03 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+08 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.066689, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14813, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291344
      maximal relaxation eigenvalue / collision frequency = 105846
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            50042.2       9056.9      2422.44      2950.08      331.385      36998.4      4044.05
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.255, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.289527, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.5452, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51486e-12  1.51084e-12  6.06607e-13
      low eigenvalue method done, cpu time[sec] = 11.5536, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-12  6.08e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   4.4e-13  6.08e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.1e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1959, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.05 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+08 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064765, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14936, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291344
      maximal relaxation eigenvalue / collision frequency = 63508.2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            30025.3      5434.14      1453.46      1770.05      198.831        22199      2426.43
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0332, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.274257, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3081, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2436e-12  1.24299e-12  4.73872e-13
      low eigenvalue method done, cpu time[sec] = 11.3165, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-12  4.73e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.62e-13  4.73e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.7e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9523, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.07 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+08 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.067107, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14847, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291343
      maximal relaxation eigenvalue / collision frequency = 45363.3
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            21446.6      3881.53      1038.19      1264.32      142.022      15856.4      1733.16
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0845, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.277605, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3628, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08618e-12   1.0808e-12  3.96273e-13
      low eigenvalue method done, cpu time[sec] = 11.3711, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-12  3.97e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-13  3.97e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0108, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.09 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+08 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064922, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16597, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291343
      maximal relaxation eigenvalue / collision frequency = 35282.8
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            16680.7      3018.97      807.479      983.359      110.462      12332.8      1348.02
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0308, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.288583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3201, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.58199e-13   9.6769e-13  3.43724e-13
      low eigenvalue method done, cpu time[sec] = 11.3284, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.68e-13  3.44e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-13  3.44e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.4e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.983, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+08 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064902, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.1655, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291343
      maximal relaxation eigenvalue / collision frequency = 31754.6
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            15012.6      2717.07      726.731      885.023      99.4156      11099.5      1213.21
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0955, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.265652, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3618, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.24853e-13  9.22403e-13  3.23091e-13
      low eigenvalue method done, cpu time[sec] = 11.3701, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.22e-13  3.23e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.69e-13  3.23e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 3.2e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0252, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+09 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06496, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15563, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291342
      maximal relaxation eigenvalue / collision frequency = 10585.5
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            5004.22       905.69      242.244      295.008      33.1385      3699.84      404.405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0575, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.265196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3233, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.26641e-13  5.28245e-13  1.55838e-13
      low eigenvalue method done, cpu time[sec] = 11.3317, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.28e-13  1.56e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-13  1.56e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.6e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9781, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+09 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064809, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14836, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291341
      maximal relaxation eigenvalue / collision frequency = 6351.7
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            3002.53      543.414      145.346      177.005      19.8831       2219.9      242.643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.024, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.27579, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3005, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.95958e-13  3.92942e-13  1.05067e-13
      low eigenvalue method done, cpu time[sec] = 11.3088, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.93e-13  1.04e-13         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-13  1.04e-13         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1e-13
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.943, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+09 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.1476, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291341
      maximal relaxation eigenvalue / collision frequency = 4537.21
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            2144.66      388.153      103.819      126.432      14.2022      1585.64      173.316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0215, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.289459, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3116, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19484e-13  3.19208e-13  7.93966e-14
      low eigenvalue method done, cpu time[sec] = 11.3199, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-13  7.95e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   9.3e-14  7.95e-14         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 7.9e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9565, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+09 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14904, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291341
      maximal relaxation eigenvalue / collision frequency = 3529.16
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1668.07      301.897      80.7479      98.3359      11.0462      1233.28      134.802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0226, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.27779, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3011, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.74863e-13  2.71492e-13  6.37016e-14
      low eigenvalue method done, cpu time[sec] = 11.3094, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.71e-13  6.35e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  7.91e-14  6.35e-14         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.4e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9478, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+09 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15613, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291341
      maximal relaxation eigenvalue / collision frequency = 3176.34
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1501.26      271.707      72.6731      88.5023      9.94156      1109.95      121.321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0439, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.276456, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.321, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.57709e-13  2.53245e-13  5.79171e-14
      low eigenvalue method done, cpu time[sec] = 11.3293, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.53e-13  5.84e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  7.38e-14  5.84e-14         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 5.8e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9738, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+10 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06498, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14982, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.29134
      maximal relaxation eigenvalue / collision frequency = 1059.43
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            500.422       90.569      24.2244      29.5008      3.31385      369.984      40.4405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0617, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.284974, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3474, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07287e-13  1.15631e-13  1.93224e-14
      low eigenvalue method done, cpu time[sec] = 11.3557, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-13  1.98e-14         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-14  1.98e-14         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9947, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+10 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06494, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14291, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.29134
      maximal relaxation eigenvalue / collision frequency = 636.053
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            300.253      54.3414      14.5346      17.7005      1.98831       221.99      24.2643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0151, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.283776, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.2996, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.24987e-14  7.75603e-14  1.08329e-14
      low eigenvalue method done, cpu time[sec] = 11.3079, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.76e-14  9.99e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-14  9.99e-15         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1e-14
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9399, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+10 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064974, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15281, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 454.604
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            214.466      38.8153      10.3819      12.6432      1.42022      158.564      17.3316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0275, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.280242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3084, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.06329e-14  5.89573e-14  7.21927e-15
      low eigenvalue method done, cpu time[sec] = 11.3168, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.9e-14  6.88e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-14  6.88e-15         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.9e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9589, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+10 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15657, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 353.799
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            166.807      30.1897      8.07479      9.83359      1.10462      123.328      13.4802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0371, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.281122, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3188, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.55456e-14  4.77759e-14  5.26271e-15
      low eigenvalue method done, cpu time[sec] = 11.3272, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.78e-14  4.88e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-14  4.88e-15         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.9e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9726, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 10 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+10 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064946, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15528, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 318.518
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            150.126      27.1707      7.26731      8.85023     0.994156      110.995      12.1321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0309, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.283536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3151, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.89851e-14  4.36862e-14  4.59419e-15
      low eigenvalue method done, cpu time[sec] = 11.3234, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.37e-14  5.33e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-14  5.33e-15         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 5.3e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 14.9681, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 30 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+11 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064955, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.18254, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 106.828
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            50.0422       9.0569      2.42244      2.95008     0.331385      36.9984      4.04405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0467, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.275643, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.323, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9302e-14  1.64864e-14  9.90896e-16
      low eigenvalue method done, cpu time[sec] = 11.3314, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.65e-14  1.11e-15         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   4.8e-15  1.11e-15         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 1.1e-15
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.003, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 50 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+11 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065121, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20732, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 64.4904
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            30.0253      5.43414      1.45346      1.77005     0.198831       22.199      2.42643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0764, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.27891, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.356, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09552e-14  1.02565e-14   4.5203e-16
      low eigenvalue method done, cpu time[sec] = 11.3644, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-14  8.88e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-15  8.88e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 8.9e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0606, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 70 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+11 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064763, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21544, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 46.3462
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            21.4466      3.88153      1.03819      1.26432     0.142022      15.8564      1.73316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0295, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.278752, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.309, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02483e-14   7.4599e-15  2.63266e-16
      low eigenvalue method done, cpu time[sec] = 11.3173, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.46e-15  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.17e-15  4.44e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0217, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 90 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+11 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064937, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21899, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 36.2664
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            16.6807      3.01897     0.807479     0.983359     0.110462      12.3328      1.34802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0041, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.291997, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.2968, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.28805e-14  5.86649e-15  1.73774e-16
      low eigenvalue method done, cpu time[sec] = 11.3052, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.87e-15 -4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-15 -4.44e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = -4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0144, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 100 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+11 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.23065, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291339
      maximal relaxation eigenvalue / collision frequency = 32.7385
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            15.0126      2.71707     0.726731     0.885023    0.0994156      11.0995      1.21321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0198, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.290325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3108, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.11493e-14  5.30134e-15  1.45585e-16
      low eigenvalue method done, cpu time[sec] = 11.3191, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.3e-15  4.44e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-15  4.44e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 4.4e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0427, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 300 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+12 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065216, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.26516, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 11.5737
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            5.00422      0.90569     0.242244     0.295008    0.0331385      3.69984     0.404405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0185, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.286709, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3059, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5065e-15  1.81631e-15  2.10227e-17
      low eigenvalue method done, cpu time[sec] = 11.3142, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.82e-15         0         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.29e-16         0         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0636, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 500 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+12 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.27636, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 7.34217
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            3.00253     0.543414     0.145346     0.177005    0.0198831       2.2199     0.242643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.0323, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.288911, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3219, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.82903e-15  1.09678e-15  8.15886e-18
      low eigenvalue method done, cpu time[sec] = 11.3302, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-15  6.66e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   3.2e-16  6.66e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 6.7e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.0958, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 700 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+12 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064861, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.28463, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 5.52905
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            2.14466     0.388153     0.103819     0.126432    0.0142022      1.58564     0.173316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.1123, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.273456, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.3864, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.63973e-15   7.8567e-16  4.31996e-18
      low eigenvalue method done, cpu time[sec] = 11.3947, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.86e-16  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.29e-16  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.1625, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 900 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+12 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065043, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.29643, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 4.52194
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1.66807     0.301897    0.0807479    0.0983359    0.0110462      1.23328     0.134802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.4229, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.266198, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6897, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27535e-14  6.12081e-16   2.6724e-18
      low eigenvalue method done, cpu time[sec] = 11.6981, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.12e-16         0         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-16         0         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.485, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1000 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+12 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.06485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.30544, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 4.16948
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
            1.50126     0.271707    0.0726731    0.0885023   0.00994156      1.10995     0.121321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3653, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.26915, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6352, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -9.1825e-16  5.51194e-16  2.18243e-18
      low eigenvalue method done, cpu time[sec] = 11.6435, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.51e-16         0         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.61e-16         0         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.4361, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3000 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+13 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.32259, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 2.05535
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.500422     0.090569    0.0242244    0.0295008   0.00331385     0.369984    0.0404405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3815, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.26478, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6469, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.67243e-14  1.84392e-16   2.5599e-19
      low eigenvalue method done, cpu time[sec] = 11.6552, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-16         0         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.37e-17         0         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.4699, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 5000 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+13 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064942, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34062, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.63275
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.300253    0.0543414    0.0145346    0.0177005   0.00198831      0.22199    0.0242643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3437, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.288568, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.633, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.08472e-14  1.10717e-16  9.32878e-20
      low eigenvalue method done, cpu time[sec] = 11.6413, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-16  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.23e-17  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.4679, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 7000 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+13 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064969, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.34692, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.45168
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.214466    0.0388153    0.0103819    0.0126432   0.00142022     0.158564    0.0173316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3641, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.286871, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6516, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.41458e-14   7.9109e-17  4.78543e-20
      low eigenvalue method done, cpu time[sec] = 11.66, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.91e-17  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-17  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.499, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 9000 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+13 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064941, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35365, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.35111
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.166807    0.0301897   0.00807479   0.00983359   0.00110462     0.123328    0.0134802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3812, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.280317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6622, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -8.67318e-15  6.15402e-17  2.90377e-20
      low eigenvalue method done, cpu time[sec] = 11.6705, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.15e-17  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-17  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5106, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 10000 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+13 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.35308, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.31592
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
           0.150126    0.0271707   0.00726731   0.00885023  0.000994156     0.110995    0.0121321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3818, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.288081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6706, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.21264e-15  5.53896e-17   2.3546e-20
      low eigenvalue method done, cpu time[sec] = 11.6789, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.54e-17  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.61e-17  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5212, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 30000 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+14 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065139, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.36745, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.10485
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0500422    0.0090569   0.00242244   0.00295008  0.000331385    0.0369984   0.00404405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3424, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.290965, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6341, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51849e-15  1.84702e-17  2.63356e-21
      low eigenvalue method done, cpu time[sec] = 11.6424, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-17  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.38e-18  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5038, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 50000 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+14 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065028, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.37423, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.06268
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0300253   0.00543414   0.00145346   0.00177005  0.000198831     0.022199   0.00242643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.4053, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.26516, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6711, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.85079e-15  1.10829e-17  9.49357e-22
      low eigenvalue method done, cpu time[sec] = 11.6794, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-17  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.23e-18  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5401, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 70000 atm	 Temperature = 1012.95 K
      collision frequency = 2.93208e+14 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065069, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3796, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.04462
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0214466   0.00388153   0.00103819   0.00126432  0.000142022    0.0158564   0.00173316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3802, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.28926, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6701, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15078e-14  7.91664e-18  4.84646e-22
      low eigenvalue method done, cpu time[sec] = 11.6785, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.92e-18  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-18  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5452, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 90000 atm	 Temperature = 1012.95 K
      collision frequency = 3.76982e+14 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.38101, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.03459
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0166807   0.00301897  0.000807479  0.000983359  0.000110462    0.0123328   0.00134802
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3883, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.264278, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6812, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71734e-15   6.1575e-18  2.93276e-22
      low eigenvalue method done, cpu time[sec] = 11.6896, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.16e-18  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-18  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5565, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 100000 atm	 Temperature = 1012.95 K
      collision frequency = 4.18868e+14 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064885, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.3802, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.03108
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
          0.0150126   0.00271707  0.000726731  0.000885023  9.94156e-05    0.0110995   0.00121321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3759, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.279427, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.656, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.67702e-15  5.54178e-18   2.3758e-22
      low eigenvalue method done, cpu time[sec] = 11.6644, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.54e-18  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  1.61e-18  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5318, elapsed time[sec] = 6
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 300000 atm	 Temperature = 1012.95 K
      collision frequency = 1.25661e+15 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.064964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.38918, elapsed time[sec] = 3
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.01491
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
         0.00500422   0.00090569  0.000242244  0.000295008  3.31385e-05   0.00369984  0.000404405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3804, elapsed time[sec] = 2
            inverting kinetic matrices ... done, cpu time[sec] = 0.273651, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6547, elapsed time[sec] = 2
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -1.2987e-14  1.84733e-18  2.64157e-23
      low eigenvalue method done, cpu time[sec] = 11.6631, elapsed time[sec] = 2
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-18  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  5.38e-19  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5416, elapsed time[sec] = 5
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 500000 atm	 Temperature = 1012.95 K
      collision frequency = 2.09434e+15 1/sec
      global relaxation matrix dimension = 1259
      setting global matrices ... done, cpu time[sec] = 0.065012, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.38782, elapsed time[sec] = 4
      minimal relaxation eigenvalue / collision frequency = 0.291338
      maximal relaxation eigenvalue / collision frequency = 1.01491
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6
         0.00300253  0.000543414  0.000145346  0.000177005  1.98831e-05    0.0022199  0.000242643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 11.3675, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.270943, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 11.6391, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.60221e-15  1.10841e-18  9.51095e-24
      low eigenvalue method done, cpu time[sec] = 11.6475, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-18  2.22e-16         1
         *R - eigenvalue over the relaxation limit
         *P - eigenvector projection squared on the relaxation subspace
      eigenvector projections:
          L        *Q        *P        W1
          0  3.23e-19  2.22e-16         1
         *Z       ---       ---  1.74e+24
         *Q - eigenvalue over the collision frequency
         *P - eigenvector projection squared on the relaxation subspace
         *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6
         W1        0        0        0        0        0        0        0
      projection error = 2.2e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 15.5245, elapsed time[sec] = 6
rate calculation done, cpu time[sec] = 805.611, elapsed time[sec] = 280
