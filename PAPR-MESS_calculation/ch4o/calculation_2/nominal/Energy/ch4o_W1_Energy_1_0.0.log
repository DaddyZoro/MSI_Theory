Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000839, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 0.00689, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 0.002469, elapsed time[sec] = 0
         Model::HinderedRotor::_init: WARNING: potential second derivative at the minimum is negative, assuming zero
         effective rotational constant[1/cm]  = 27.3382
         analytic  frequency at minimum[1/cm] = 0
         numerical frequency at minimum[1/cm] = 0
         minimum energy[kcal/mol]             = 0
         maximum energy[kcal/mol]             = 0
         maximum frequency[1/cm]              = 0
         ground energy [kcal/mol]             = 0
         highest energy level [kcal/mol]      = 19462.6
         number of levels                     = 999
         10 lowest excited states [kcal/mol] relative to the ground: 0.0782 0.0782 0.313 0.313 0.703 0.703 1.25 1.25 1.95
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum             PG             PI  ***
           100        2.82615        2.82615        2.82615
           200        3.99678        3.99678        3.99678
           300        4.89503        4.89503        4.89503
           400         5.6523         5.6523         5.6523
           500        6.31946        6.31946        6.31946
           600        6.92262        6.92262        6.92262
           700        7.47729        7.47729        7.47729
           800        7.99355        7.99355        7.99355
           900        8.47844        8.47844        8.47844
          1000        8.93707        8.93707        8.93707
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 1.75602, elapsed time[sec] = 0
      ground state energy, kcal/mol:   -90.2506
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.187381, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.054279, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.000824, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.516098, elapsed time[sec] = 0
         effective power exponent at 690.248 kcal/mol = 11.4574
      interpolating states number/density done, cpu time[sec] = 2.43498, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 4.2165, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         18.6633
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002044, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003941, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007272, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.55015        9.55009        4.77506
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001545, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003406, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00723, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.021015, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         19.7111        11.2504        7.16236
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001545, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003412, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006364, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         27.4886        14.3446        9.42584
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001524, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003395, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00631, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018076, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001435, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003259, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006103, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:          9.3775        1.21307        1.07412
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002122, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003976, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007024, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018484, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001447, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00333, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006182, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.70353        1.21666        1.08111
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001493, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003604, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006645, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018154, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.00143, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003283, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006121, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.46633        1.30142        1.14413
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001515, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003373, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006387, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.017803, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         6.45642       0.996004        0.86988
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002177, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.004073, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007206, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.012437, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.24335        0.93381       0.927142
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001547, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003428, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006534, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.011683, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.080895, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.082856, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001419, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003315, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -22.6613
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.079028, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.009894, elapsed time[sec] = 0
            effective power exponent at 622.659 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.175478, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.182844, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -19.4076
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001374, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000467, elapsed time[sec] = 0
            effective power exponent at 619.406 kcal/mol = 11.9694
         interpolating states number/density done, cpu time[sec] = 0.016241, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016309, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.4142
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001368, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000457, elapsed time[sec] = 0
            effective power exponent at 616.412 kcal/mol = 11.9705
         interpolating states number/density done, cpu time[sec] = 0.016151, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016216, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.678
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001363, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000445, elapsed time[sec] = 0
            effective power exponent at 613.676 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.01596, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016095, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.2049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001349, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000463, elapsed time[sec] = 0
            effective power exponent at 611.203 kcal/mol = 11.9723
         interpolating states number/density done, cpu time[sec] = 0.016007, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016121, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 4.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.00049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001343, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000459, elapsed time[sec] = 0
            effective power exponent at 608.998 kcal/mol = 11.9731
         interpolating states number/density done, cpu time[sec] = 0.016037, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016173, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.06773
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001327, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000452, elapsed time[sec] = 0
            effective power exponent at 607.066 kcal/mol = 11.9737
         interpolating states number/density done, cpu time[sec] = 0.015821, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015886, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.40945
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001335, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000425, elapsed time[sec] = 0
            effective power exponent at 605.407 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.015699, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015807, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.05137
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001337, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000435, elapsed time[sec] = 0
            effective power exponent at 604.049 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.015678, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015739, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.98779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001329, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000441, elapsed time[sec] = 0
            effective power exponent at 602.986 kcal/mol = 11.9739
         interpolating states number/density done, cpu time[sec] = 0.015616, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015679, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.23584
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001322, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000442, elapsed time[sec] = 0
            effective power exponent at 602.234 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.015566, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015631, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.76409
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00132, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000433, elapsed time[sec] = 0
            effective power exponent at 601.762 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.015551, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015674, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.54966
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001325, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000439, elapsed time[sec] = 0
            effective power exponent at 601.548 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.015546, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015669, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.6097
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001321, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000463, elapsed time[sec] = 0
            effective power exponent at 601.608 kcal/mol = 11.9746
         interpolating states number/density done, cpu time[sec] = 0.015576, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015638, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.85844
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001323, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000445, elapsed time[sec] = 0
            effective power exponent at 601.856 kcal/mol = 11.9754
         interpolating states number/density done, cpu time[sec] = 0.015558, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015631, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.25586
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001325, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00045, elapsed time[sec] = 0
            effective power exponent at 602.254 kcal/mol = 11.9765
         interpolating states number/density done, cpu time[sec] = 0.015592, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015658, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.76478
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001326, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000437, elapsed time[sec] = 0
            effective power exponent at 602.763 kcal/mol = 11.978
         interpolating states number/density done, cpu time[sec] = 0.015596, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015658, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.33011, elapsed time[sec] = 2
      effective power exponent at 601.548 kcal/mol = 12.1579
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.79475, elapsed time[sec] = 2
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -21.8779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001362, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00045, elapsed time[sec] = 0
            effective power exponent at 621.876 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.017142, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017229, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -18.8158
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001353, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000462, elapsed time[sec] = 0
            effective power exponent at 618.814 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.015992, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01606, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.0339
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001347, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000441, elapsed time[sec] = 0
            effective power exponent at 616.032 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.015988, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016053, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.5322
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00134, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000466, elapsed time[sec] = 0
            effective power exponent at 613.53 kcal/mol = 11.9729
         interpolating states number/density done, cpu time[sec] = 0.015962, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016027, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.3135
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001336, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000443, elapsed time[sec] = 0
            effective power exponent at 611.311 kcal/mol = 11.9725
         interpolating states number/density done, cpu time[sec] = 0.015972, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016043, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.39794
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00133, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000448, elapsed time[sec] = 0
            effective power exponent at 609.396 kcal/mol = 11.972
         interpolating states number/density done, cpu time[sec] = 0.015822, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015887, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.79112
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001334, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000452, elapsed time[sec] = 0
            effective power exponent at 607.789 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.01575, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015817, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.49595
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001331, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000463, elapsed time[sec] = 0
            effective power exponent at 606.494 kcal/mol = 11.9706
         interpolating states number/density done, cpu time[sec] = 0.015718, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015783, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.53243
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001329, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000446, elapsed time[sec] = 0
            effective power exponent at 605.53 kcal/mol = 11.9698
         interpolating states number/density done, cpu time[sec] = 0.015706, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015768, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.86054
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001327, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000433, elapsed time[sec] = 0
            effective power exponent at 604.858 kcal/mol = 11.9691
         interpolating states number/density done, cpu time[sec] = 0.015824, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015889, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.47456
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001332, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00044, elapsed time[sec] = 0
            effective power exponent at 604.472 kcal/mol = 11.9684
         interpolating states number/density done, cpu time[sec] = 0.01576, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015821, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.40594
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001327, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000455, elapsed time[sec] = 0
            effective power exponent at 604.404 kcal/mol = 11.9683
         interpolating states number/density done, cpu time[sec] = 0.015743, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015808, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.57463
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001327, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000432, elapsed time[sec] = 0
            effective power exponent at 604.572 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.015679, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015745, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.93202
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001328, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000441, elapsed time[sec] = 0
            effective power exponent at 604.93 kcal/mol = 11.9692
         interpolating states number/density done, cpu time[sec] = 0.015702, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015764, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.43522
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001333, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000424, elapsed time[sec] = 0
            effective power exponent at 605.433 kcal/mol = 11.9702
         interpolating states number/density done, cpu time[sec] = 0.015656, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015719, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.04421
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001333, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000461, elapsed time[sec] = 0
            effective power exponent at 606.042 kcal/mol = 11.9715
         interpolating states number/density done, cpu time[sec] = 0.015799, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.015874, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.482, elapsed time[sec] = 1
      effective power exponent at 604.404 kcal/mol = 12.2165
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.76471, elapsed time[sec] = 1
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 3.5e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      ground state energy, kcal/mol:   -0.195851
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.001468, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000511, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 7.09068, elapsed time[sec] = 7
         effective power exponent at 669.903 kcal/mol = 13.426
      interpolating states number/density done, cpu time[sec] = 7.10938, elapsed time[sec] = 7
   Model::RRHO::RRHO:  done, cpu time[sec] = 7.10948, elapsed time[sec] = 7
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000971, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000943, elapsed time[sec] = 0
   BIMOLECULAR: P7
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.47873        5.47873        5.47873
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 6e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000105, elapsed time[sec] = 0
   BARRIER: B8
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.47873        5.47873        5.47873
            TST level: E
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  done, cpu time[sec] = 4.4e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 7.5e-05, elapsed time[sec] = 0
      ground state energy, kcal/mol:   47.9656
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.002938, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000327, elapsed time[sec] = 0
         effective power exponent at 552.034 kcal/mol = 10.6123
      interpolating states number/density done, cpu time[sec] = 0.015407, elapsed time[sec] = 1
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.01552, elapsed time[sec] = 1
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O            o          CH4           B1           B2           B3           B4           B5           B6           B7           B8
     100  1.97336e+28  1.11806e+26  1.79604e+26   1.2706e+26  1.20995e+26  3.09408e+23  9.07788e+27  3.09408e+23  8.88203e+27  3.09408e+23    4.226e+27  3.80284e+23  1.41451e+28  3.80284e+23  1.04337e+28  1.20275e+25  8.05078e+25  1.02816e+30  3.90845e+30  1.47525e+35  6.97811e+37 5.12326e+128  6.66948e+29  2.86822e+29  6.30386e+29
     200  2.23564e+29  7.62333e+26  1.46726e+27  1.01653e+27  9.67966e+26  1.75028e+24  7.26953e+28  1.75028e+24  7.11008e+28  1.75028e+24  3.38185e+28  1.07561e+24  1.21889e+29  1.07561e+24  8.41759e+28   3.4019e+25  6.44206e+26  2.65947e+31  6.23677e+31  1.08314e+30  2.15615e+30  1.52798e+59  8.88053e+30  3.66779e+30  8.00719e+30
     300  9.41744e+29   2.3228e+27   5.2604e+27  3.43512e+27  3.26835e+27   4.8232e+24  2.48522e+29   4.8232e+24  2.42385e+29   4.8232e+24  1.14827e+29  1.97601e+24  4.86817e+29  1.97601e+24  2.97918e+29   6.2497e+25  2.18681e+27  1.82852e+32  2.59538e+32  1.44208e+30  1.73256e+30  1.89702e+39  4.41749e+31  1.66476e+31  3.56174e+31
     400  2.74251e+30  5.05886e+27  1.36172e+28  8.18855e+27  7.76803e+27  9.90107e+24  6.13453e+29  9.90107e+24  5.94872e+29  9.90107e+24   2.7863e+29  3.04227e+24   1.4458e+30  3.04227e+24  7.82149e+29  9.62204e+25  5.31893e+27  7.43446e+32  6.76087e+32   3.1193e+30  3.38436e+30  5.81364e+32  1.53178e+32  5.25536e+31  1.04946e+32
     500   6.7088e+30   9.1848e+27   2.9582e+28  1.61907e+28  1.52765e+28  1.72965e+25  1.28796e+30  1.72965e+25  1.23988e+30  1.72965e+25    5.706e+29   4.2517e+24  3.66252e+30   4.2517e+24  1.77798e+30  1.34472e+26  1.09838e+28  2.27531e+33  1.40935e+33  6.99392e+30  7.25794e+30    2.174e+31  4.38422e+32  1.38727e+32   2.5148e+32
     600  1.48929e+31  1.48864e+28  5.75744e+28  2.85247e+28  2.67121e+28  2.72848e+25  2.45857e+30  2.72848e+25  2.34862e+30  2.72848e+25  1.05862e+30  5.58901e+24  8.37682e+30  5.58901e+24  3.71377e+30  1.76768e+26  2.06944e+28  5.83137e+33  2.59752e+33  1.53859e+31   1.5531e+31  1.56572e+31  1.10962e+33  3.28769e+32  5.35043e+32
     700  3.10526e+31  2.23336e+28  1.03869e+29  4.64933e+28  4.31306e+28  4.01168e+25  4.40321e+30  4.01168e+25   4.1744e+30  4.01168e+25  1.84194e+30  7.04296e+24  1.77967e+31  7.04296e+24  7.32198e+30  2.22753e+26  3.68096e+28  1.32406e+34  4.44573e+33  3.28489e+31  3.24865e+31  2.00151e+31  2.57036e+33  7.23031e+32   1.0547e+33
     800  6.18672e+31  3.16898e+28  1.77211e+29  7.16682e+28  6.57497e+28  5.60287e+25  7.52441e+30  5.60287e+25  7.08144e+30  5.60287e+25  3.06214e+30  8.60484e+24  3.57037e+31  8.60484e+24  1.38193e+31  2.72152e+26  6.29237e+28  2.75326e+34  7.26034e+33  6.79296e+31  6.61031e+31  3.04639e+31  5.55986e+33  1.50225e+33   1.9708e+33
     900  1.18917e+32  4.31186e+28  2.89608e+29  1.05938e+29  9.59741e+28  7.52507e+25  1.23926e+31  7.52507e+25  1.15823e+31  7.52507e+25  4.91733e+30  1.02677e+25  6.83675e+31  1.02677e+25  2.51777e+31  3.24744e+26   1.0442e+29  5.35429e+34  1.14977e+34  1.36146e+32  1.30791e+32  4.96309e+31  1.13781e+34  2.98133e+33  3.53766e+33
    1000  2.21835e+32  5.67887e+28  4.57314e+29  1.51557e+29  1.35425e+29  9.80136e+25  1.98016e+31  9.80136e+25  1.83853e+31  9.80136e+25  7.67995e+30  1.20256e+25  1.25901e+32  1.20256e+25  4.45239e+31  3.80344e+26  1.69248e+29  9.87598e+34  1.78334e+34  2.64867e+32  2.51886e+32  8.31132e+31  2.22341e+34  5.69316e+33   6.1512e+33
    1100  4.03237e+32  7.28764e+28   7.0205e+29  2.11192e+29  1.85967e+29  1.24554e+26  3.08377e+31  1.24554e+26  2.84544e+31  1.24554e+26  1.17192e+31  1.38738e+25  2.24222e+32  1.38738e+25  7.67157e+31  4.38799e+26  2.68985e+29  1.74488e+35  2.72616e+34  5.01139e+32  4.72857e+32  1.40422e+32  4.17722e+34  1.05163e+34  1.04174e+34
    1200  7.16278e+32  9.15662e+28  1.05248e+30  2.87967e+29  2.49743e+29  1.55119e+26  4.69659e+31  1.55119e+26  4.30822e+31  1.55119e+26  1.75283e+31  1.58081e+25  3.87856e+32  1.58081e+25  1.29162e+32  4.99976e+26  4.20283e+29   2.9743e+35  4.12339e+34  9.23956e+32  8.66602e+32  2.37075e+32  7.58498e+34  1.88656e+34   1.7249e+34
    1300  1.24607e+33  1.13052e+29    1.546e+30  3.85517e+29  3.29195e+29  1.89964e+26  7.01353e+31  1.89964e+26  6.39799e+31  1.89964e+26  2.57585e+31  1.78247e+25  6.53851e+32  1.78247e+25  2.12965e+32  5.63757e+26  6.46803e+29  4.91797e+35  6.18545e+34  1.66316e+33  1.55283e+33  3.97869e+32  1.33665e+35   3.2971e+34  2.80008e+34
    1400  2.12665e+33  1.37535e+29  2.23088e+30  5.08038e+29  4.27102e+29  2.29356e+26  1.02907e+32  2.29356e+26  9.33855e+31  2.29356e+26  3.72593e+31  1.99205e+25   1.0772e+33  1.99205e+25  3.44505e+32  6.30041e+26  9.81784e+29  7.92117e+35  9.21487e+34  2.92799e+33  2.72427e+33  6.61788e+32  2.29366e+35  5.62797e+34   4.4655e+34
    1500  3.56581e+33  1.65225e+29  3.16878e+30  6.60342e+29  5.46603e+29  2.73576e+26  1.48608e+32  2.73576e+26  1.34194e+32  2.73576e+26   5.3127e+31  2.20925e+25  1.73819e+33  2.20925e+25  5.47579e+32  6.98737e+26  1.47141e+30  1.24691e+36  1.36433e+35  5.04957e+33  4.68567e+33   1.0892e+33  3.84301e+35  9.40249e+34  7.00752e+34
    1600  5.88104e+33  1.96339e+29  4.43778e+30  8.47909e+29  6.91231e+29  3.22912e+26  2.11513e+32  3.22912e+26  1.90113e+32  3.22912e+26  7.47631e+31  2.43382e+25  2.75236e+33  2.43382e+25  8.56291e+32  7.69763e+26  2.17922e+30  1.92344e+36  2.00816e+35  8.54299e+33  7.91062e+33  1.77228e+33   6.3014e+35  1.54022e+35  1.08347e+35
    1700  9.55077e+33  2.31102e+29  6.13586e+30  1.07695e+30  8.64943e+29  3.77663e+26  2.97068e+32  3.77663e+26  2.65843e+32  3.77663e+26  1.03942e+32  2.66552e+25  4.28362e+33  2.66552e+25  1.31889e+33  8.43044e+26  3.19172e+30  2.91389e+36  2.93879e+35  1.41969e+34  1.31235e+34  2.84985e+33  1.01312e+36  2.47765e+35  1.65232e+35
    1800  1.52866e+34  2.69743e+29  8.38503e+30  1.35448e+30  1.07215e+30   4.3814e+26  4.12136e+32   4.3814e+26  3.67296e+32   4.3814e+26  1.42893e+32  2.90413e+25  6.56161e+33  2.90413e+25  2.00279e+33  9.18514e+26  4.62568e+30  4.34318e+36  4.27578e+35  2.32007e+34  2.14159e+34  4.52832e+33  1.59976e+36  3.91921e+35  2.48767e+35
    1900  2.41341e+34    3.125e+29   1.1336e+31  1.68836e+30  1.31777e+30  5.04659e+26  5.65308e+32  5.04659e+26  5.01844e+32  5.04659e+26  1.94391e+32  3.14948e+25  9.90424e+33  3.14948e+25  3.00115e+33   9.9611e+26  6.63727e+30   6.3789e+36  6.18455e+35  3.73235e+34  3.44092e+34  7.11085e+33   2.4845e+36  6.10341e+35  3.70051e+35
    2000  3.76117e+34  3.59614e+29  1.51739e+31  2.08737e+30  1.60722e+30  5.77547e+26  7.67243e+32  5.77547e+26  6.78607e+32  5.77547e+26  2.61867e+32  3.40136e+25  1.47468e+34  3.40136e+25  4.44133e+33  1.07578e+27  9.43368e+30  9.24376e+36  8.89218e+35   5.9162e+34  5.44811e+34  1.10376e+34  3.79973e+36  9.36743e+35  5.44256e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7           B8
     100 3.42725e+225  1.02816e+30  1.82422e+29  3.59409e+38  2.97017e+47 1.37269e+129  2.66912e+20     0.948966  9.38107e-76
     200 9.31689e+127  2.65947e+31   1.3474e+31   5.3462e+31   1.4067e+35   2.5011e+59  1.77655e+26  6.67151e+15   3.0889e-22
     300  5.25428e+95  1.82852e+32  9.34454e+31  1.94043e+31  2.80781e+33  2.63481e+39  3.25537e+28  2.48065e+21   0.00040664
     400  5.59864e+79  7.43446e+32  3.14247e+32  2.19148e+31  8.64445e+32  7.43797e+32  6.85118e+29  2.24136e+24       651820
     500  1.88188e+70  2.27531e+33   7.6354e+32   3.3271e+31  6.11818e+32  2.64767e+31  5.78559e+30  1.76233e+26   2.7229e+11
     600  1.11242e+64  5.83137e+33  1.55861e+33  5.64385e+31  6.25229e+32  1.84524e+31  3.01222e+31  4.01325e+27  1.80785e+15
     700  4.66878e+59  1.32406e+34  2.86953e+33  1.00078e+32  7.71401e+32  2.30412e+31  1.16805e+32    4.443e+28  1.11633e+18
     800   2.7953e+56  2.75326e+34  4.94984e+33  1.80053e+32  1.05646e+33  3.44579e+31  3.71834e+32   3.1024e+29  1.55319e+20
     900  9.78971e+53  5.35429e+34  8.17953e+33  3.23822e+32  1.53628e+33  5.53746e+31  1.02773e+33  1.58057e+30  7.96585e+21
    1000  1.17491e+52  9.87598e+34  1.31263e+34  5.77697e+32  2.31264e+33  9.17219e+31  2.55416e+33  6.41678e+30  2.02406e+23
    1100  3.43911e+50  1.74488e+35  2.06328e+34  1.01822e+33  3.54893e+33  1.53585e+32  5.84183e+33    2.197e+31  3.07609e+24
    1200  1.95761e+49   2.9743e+35  3.19407e+34  1.76961e+33  5.49845e+33  2.57368e+32  1.24971e+34  6.59133e+31  3.17068e+25
    1300  1.85281e+48  4.91797e+35  4.88644e+34  3.03006e+33  8.54709e+33  4.29205e+32  2.52998e+34  1.77997e+32   2.4184e+26
    1400  2.60764e+47  7.92117e+35  7.40326e+34  5.11068e+33  1.32752e+34  7.10056e+32  4.88948e+34  4.41176e+32  1.45279e+27
    1500  5.02891e+46  1.24691e+36  1.11222e+35  8.49252e+33  2.05451e+34  1.16317e+33  9.08149e+34  1.01832e+33  7.19572e+27
    1600  1.25008e+46  1.92344e+36  1.65812e+35  1.39085e+34  3.16247e+34  1.88489e+33  1.62959e+35   2.2134e+33  3.04163e+28
    1700  3.82275e+45  2.91389e+36  2.45402e+35  2.24601e+34  4.83576e+34  3.01995e+33  2.83696e+35  4.56984e+33  1.12662e+29
    1800  1.38699e+45  4.34318e+36  3.60641e+35  3.57809e+34  7.33977e+34  4.78317e+33  4.80794e+35  9.02403e+33  3.73294e+29
    1900  5.80323e+44   6.3789e+36  5.26331e+35  5.62641e+34  1.10527e+35  7.48943e+33  7.95467e+35  1.71386e+34  1.12469e+30
    2000  2.73722e+44  9.24376e+36   7.6289e+35  8.73733e+34  1.65081e+35  1.15951e+34  1.28785e+36  3.14487e+34  3.12202e+30
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D           B8            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0            1           -0
Model::init:  done, cpu time[sec] = 15.3357, elapsed time[sec] = 11
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 300 K
      Energy reference = 37628 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000171
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.020362
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.02687
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 7.48968
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 26.3582
         W1 Well: minimal relaxation eigenvalue = 0.0718866
         W1 Well: maximal relaxation eigenvalue = 1.42787
         W1 Well:       grid size = 1384
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31572 1/cm
         B1 Barrier:        grid size = 753
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -22 1/cm
         B2 Barrier:        grid size = 749
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 177 1/cm
         B3 Barrier:        grid size = 845
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4622 1/cm
         B4 Barrier:        grid size = 877
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23572 1/cm => truncating
         B5 Barrier:        grid size = 1224
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23572 1/cm
         B6 Barrier:        grid size = 723
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 659
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4677 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16727 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 34.0717, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31572 -23572 3.47e+05 2.66e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -22 7.68e+15
         B2    178 1.62e+15
         B3  -4622 4.61e+14
         B4  -6222 5.45e+14
         B5 -23572 6.37e+13
         B6   1478 6.52e+15
         B7   4678  8.3e+14
         B8  16728 5.59e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.88e+44  5.68e+44  5.78e+35  2.47e+32  5.58e-06  3.24e+48  2.62e+55  1.47e+81
          R  5.32e-45         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  1.76e-45     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  1.73e-36  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  4.05e-33  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  1.79e+05  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5  3.09e-49   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  3.82e-56  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  6.79e-82  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.3e+40   1.3e+41  1.32e+32  5.64e+28  1.28e-09  7.41e+44  5.99e+51  3.37e+77
          R  2.33e-41         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  7.69e-42     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  7.56e-33  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  1.77e-29  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  7.83e+08  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5  1.35e-45   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  1.67e-52  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  2.97e-78  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
   MasterEquation::set:  done, cpu time[sec] = 34.0783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+08
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 1.19575, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.2016, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18336.7      3877.81      1101.96       1301.1       152.28      15588.1      1982.11      13.3559
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.921893, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061406, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.983999, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -9.27947e-10   9.2918e-52  1.25174e-59
      low eigenvalue method done, cpu time[sec] = 0.986791, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.29e-52  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.68e-53  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -5.06713e-47 -2.89079e-47 -1.56859e-48 -8.15125e-47 -1.87347e-48  7.30472e-50 -2.84881e-54 -1.92044e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 40.4476, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040822, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.5511, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6112.24       1292.6      367.319      433.701        50.76      5196.04      660.705      4.45196
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.925155, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.062061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.987916, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.65948e-11  3.09727e-52  3.02242e-60
      low eigenvalue method done, cpu time[sec] = 0.990762, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-52  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-53  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.14815e-46 -5.55571e-47 -1.18264e-48 -3.49109e-47 -9.20367e-49  4.21567e-50  1.42914e-55  1.94694e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.6245, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         2.35656e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 32.9165, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3667.34      775.563      220.392      260.221       30.456      3117.62      396.423      2.67117
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.924631, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.062094, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.987435, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.07236e-10  1.85836e-52  1.44483e-60
      low eigenvalue method done, cpu time[sec] = 0.99022, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-52  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-53  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.75193e-47   3.4487e-47  1.93929e-48  3.90577e-47  6.29651e-49 -4.96092e-50 -1.69784e-54 -5.24811e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 38.9877, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         3.29919e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040536, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 32.94, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2619.53      553.974      157.423      185.872      21.7543      2226.87      283.159      1.90798
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.926696, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.062254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.989662, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.43999e-10   1.3274e-52  8.64883e-61
      low eigenvalue method done, cpu time[sec] = 0.992471, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-52  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.54e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   1.5144e-47  1.62886e-47   1.4154e-48  2.12301e-47  5.36523e-49 -1.09903e-49  3.13754e-55  1.49478e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.0145, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.24181e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 32.9625, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2037.41      430.868       122.44      144.567        16.92      1732.01      220.235      1.48399
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.925168, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061761, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.98762, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04029e-10  1.03242e-52   5.8161e-61
      low eigenvalue method done, cpu time[sec] = 0.99042, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-52  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.42e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  6.43924e-47  2.51215e-47  7.19646e-49  1.12817e-48  1.58212e-49  3.06823e-50 -4.06107e-55 -1.06233e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.0314, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040481, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.0114, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1833.67      387.781      110.196       130.11       15.228      1558.81      198.211      1.33559
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.924732, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.987046, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.44346e-11   9.2918e-53  4.90843e-61
      low eigenvalue method done, cpu time[sec] = 0.989845, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.29e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.68e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  -3.3577e-47 -5.67239e-48 -3.27032e-49 -1.03989e-48  -9.8605e-50 -1.04296e-49  -7.4989e-55  1.84013e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.083, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         7.06969e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040577, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 34.1051, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1222.45      258.521      73.4639      86.7403       10.152      1039.21      132.141     0.890392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.918367, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061426, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980474, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.2983e-11  6.19454e-53  2.51051e-61
      low eigenvalue method done, cpu time[sec] = 0.983196, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.19e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.45e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  8.69576e-48 -1.29886e-48 -5.22182e-50  3.41788e-48  1.48669e-49  1.22866e-50   -3.794e-55  -1.3073e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 40.0961, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         9.42625e+09
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040174, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.3269, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            916.836      193.891      55.0979      65.0552        7.614      779.405      99.1057     0.667794
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.918538, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061439, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980648, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -5.9284e-12   4.6459e-53  1.53561e-61
      low eigenvalue method done, cpu time[sec] = 0.983335, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.65e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.34e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  3.63862e-47  6.92299e-48  2.60625e-49  3.19555e-48  4.43119e-50  1.01684e-49  2.62592e-55   1.1256e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.387, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.17828e+10
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.039807, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 34.1251, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            733.469      155.113      44.0783      52.0442       6.0912      623.524      79.2846     0.534235
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.917961, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980059, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.13279e-12  3.71672e-53  1.04008e-61
      low eigenvalue method done, cpu time[sec] = 0.982756, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.67e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -3.71106e-47 -1.49096e-47 -5.77675e-49 -6.33071e-48  -1.1382e-49 -2.01735e-51 -9.99918e-55  2.58267e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 40.1883, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+10
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.040077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.9618, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            611.224       129.26      36.7319      43.3701        5.076      519.604      66.0705     0.445196
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.918654, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.061389, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980718, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.21588e-14  3.09727e-53  7.52703e-62
      low eigenvalue method done, cpu time[sec] = 0.983433, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -4.11088e-48  1.83358e-49 -8.77328e-50 -2.14676e-48 -5.25141e-50 -2.62052e-50  2.36059e-55 -3.12659e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 40.0221, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.64959e+10
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.039688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 33.5706, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            523.906      110.795      31.4845      37.1744      4.35086      445.374      56.6318     0.381596
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.917686, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061468, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979845, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   -2.223e-11   2.6548e-53  5.70745e-62
      low eigenvalue method done, cpu time[sec] = 0.982549, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.65e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.00139e-47  4.66152e-49  1.93467e-50  2.69729e-49 -1.12327e-52  4.20703e-50   -7.649e-55 -8.94359e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 39.6306, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.88525e+10
      global relaxation matrix dimension = 1384
      setting global matrices ... done, cpu time[sec] = 0.039829, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 31.2959, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            458.418      96.9454      27.5489      32.5276        3.807      389.703      49.5529     0.333897
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.917961, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.061418, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980047, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33497e-11  2.32295e-53  4.48057e-62
      low eigenvalue method done, cpu time[sec] = 0.982736, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-53  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-54  2.22e-16         1
         *Z       ---       ---  5.53e+75
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.71352e-47  -1.0704e-47 -2.56629e-49 -3.39886e-48 -1.02742e-49 -4.49266e-51  1.01674e-54 -1.69017e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 37.3541, elapsed time[sec] = 3
   MasterEquation::set:  starts
      Temperature      = 310 K
      Energy reference = 38323 1/cm
      Energy step      = 52 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000218
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.016614
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.025165
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 7.3259
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 22.4702
         W1 Well: minimal relaxation eigenvalue = 0.0707042
         W1 Well: maximal relaxation eigenvalue = 5.17206
         W1 Well:       grid size = 1345
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31617 1/cm
         B1 Barrier:        grid size = 737
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -1 1/cm
         B2 Barrier:        grid size = 733
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 206 1/cm
         B3 Barrier:        grid size = 826
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4629 1/cm
         B4 Barrier:        grid size = 856
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6189 1/cm
         B5 Barrier: nonpositive number of states at -23141 1/cm => truncating
         B5 Barrier:        grid size = 1182
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23141 1/cm
         B6 Barrier:        grid size = 709
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1454 1/cm
         B7 Barrier:        grid size = 647
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4678 1/cm
         B8 Barrier:        grid size = 415
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16742 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 30.0306, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31617 -23141 4.75e+05 2.96e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -1 8.97e+15
         B2    207 1.94e+15
         B3  -4629 5.55e+14
         B4  -6189 6.53e+14
         B5 -23141 7.68e+13
         B6   1455 7.76e+15
         B7   4679 1.01e+15
         B8  16743 7.27e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.27e+42   3.7e+42     8e+33  4.39e+30  1.67e-06  1.78e+46  8.85e+52  7.75e+77
          R  7.89e-43         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1   2.7e-43     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  1.25e-34  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  2.28e-31  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  5.99e+05  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5  5.62e-47  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  1.13e-53  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  1.29e-78  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.02e+38   8.8e+38   1.9e+30  1.05e+27  3.97e-10  4.23e+42  2.11e+49  1.85e+74
          R  3.32e-39         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  1.14e-39     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  5.25e-31  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  9.57e-28  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  2.52e+09  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5  2.36e-43  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  4.75e-50  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  5.42e-75  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
   MasterEquation::set:  done, cpu time[sec] = 30.0366, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+08
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 1.19883, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.682, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19753.2      4269.58      1222.88      1438.11      169.216        17103      2218.23      16.0081
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.839668, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056133, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896434, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.02535e-11  1.04131e-50  1.80954e-57
      low eigenvalue method done, cpu time[sec] = 0.90295, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-50 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.36e-52 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16 -2.53444e-45 -7.66701e-46  6.08116e-48  2.53579e-46  7.37759e-48  2.72341e-48  5.00921e-53  -1.2088e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 35.8732, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038271, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.7069, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6584.38      1423.19      407.626       479.37      56.4054      5701.01      739.411      5.33602
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.841007, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897929, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9306e-10  3.47103e-51  4.52767e-58
      low eigenvalue method done, cpu time[sec] = 0.904382, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-51 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.45e-52 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  7.93664e-46  5.11249e-46 -1.53101e-47 -4.07416e-46 -1.40362e-47 -2.71642e-48 -1.39397e-53 -3.36417e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.6867, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         2.30227e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038149, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.6554, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3950.63      853.916      244.575      287.622      33.8432       3420.6      443.647      3.20161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.840792, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056285, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897731, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.29181e-11  2.08262e-51  2.19816e-58
      low eigenvalue method done, cpu time[sec] = 0.904012, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-51 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-52 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  1.25592e-45  4.95836e-46  3.38821e-49 -1.79725e-46 -4.16915e-48 -2.94066e-51  7.61126e-56 -3.40113e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.629, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         3.22318e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.03822, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.6921, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2821.88       609.94      174.697      205.444      24.1737      2443.29       316.89      2.28687
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838904, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895824, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56636e-10  1.48758e-51  1.32872e-58
      low eigenvalue method done, cpu time[sec] = 0.901936, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-51 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-52 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  2.91605e-46   3.4895e-46  1.08098e-47   1.1333e-46  2.69468e-48 -2.82585e-48 -1.92138e-53  3.68404e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.6704, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.14409e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.037934, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.7119, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2194.79      474.398      135.875       159.79      18.8018      1900.34       246.47      1.77867
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838889, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056404, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895943, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.88105e-11  1.15701e-51  8.99812e-59
      low eigenvalue method done, cpu time[sec] = 0.902162, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-51 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.18e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  3.76712e-46  8.09411e-47 -4.77836e-48 -3.56498e-47 -9.91941e-49  9.75484e-49 -5.03058e-54 -4.07567e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.6857, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.7866, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1975.32      426.958      122.288      143.811      16.9216       1710.3      221.823      1.60081
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.836041, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.056314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893004, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.62622e-11  1.04131e-51  7.61556e-59
      low eigenvalue method done, cpu time[sec] = 0.899094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-51 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.36e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  3.91762e-46  1.73063e-46   3.6114e-48 -3.59928e-47  2.59468e-49  2.35573e-48  1.87893e-53 -1.11318e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.7541, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         6.90681e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038229, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.8403, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1316.88      284.639      81.5251       95.874      11.2811       1140.2      147.882       1.0672
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.83733, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056275, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894255, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.88259e-11  6.94206e-52  3.93617e-59
      low eigenvalue method done, cpu time[sec] = 0.900359, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.94e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.91e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  3.97641e-46  2.38772e-46  7.14829e-48  5.91666e-47  1.77559e-48 -4.05723e-49  6.87258e-54  3.45449e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.8153, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         9.20908e+09
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038055, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.8865, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            987.658      213.479      61.1438      71.9055      8.46081      855.151      110.912     0.800403
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.837364, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056559, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894559, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.89718e-11  5.20654e-52  2.42428e-59
      low eigenvalue method done, cpu time[sec] = 0.90057, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.21e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  -5.3098e-46 -1.36952e-46 -1.86199e-48  3.79132e-47   6.4328e-49 -2.43417e-48 -1.02447e-53  1.14712e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.8619, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.15114e+10
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.8368, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            790.126      170.783      48.9151      57.5244      6.76865      684.121      88.7293     0.640323
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838222, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895444, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6826e-12  4.16523e-52   1.6502e-59
      low eigenvalue method done, cpu time[sec] = 0.901524, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.17e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.94e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16 -7.91745e-47 -1.15765e-46 -3.87666e-48 -3.26974e-48  -2.1983e-52 -9.15415e-49 -1.17485e-53 -1.51682e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.8128, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+10
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038236, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 28.8447, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            658.438      142.319      40.7626       47.937      5.64054      570.101      73.9411     0.533602
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.837938, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056569, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895153, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.39747e-11  3.47103e-52  1.19883e-59
      low eigenvalue method done, cpu time[sec] = 0.901235, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.45e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  6.98177e-47 -4.09032e-47  1.20864e-48  4.50259e-47  7.87502e-49  1.59804e-48 -1.38949e-53 -1.83008e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.8242, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.61159e+10
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038004, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 29.567, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            564.376      121.988      34.9393      41.0889      4.83475      488.658      63.3781     0.457373
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.837917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.05654, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895103, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28596e-11  2.97517e-52  9.11813e-60
      low eigenvalue method done, cpu time[sec] = 0.901118, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.98e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.1e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16  1.71815e-46  7.52746e-47  3.48266e-48  4.74376e-47  1.33836e-48 -3.67725e-49  7.33646e-54 -1.24329e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 35.4721, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.84182e+10
      global relaxation matrix dimension = 1345
      setting global matrices ... done, cpu time[sec] = 0.038184, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 29.4846, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            493.829      106.739      30.5719      35.9528      4.23041      427.575      55.4558     0.400202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838327, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.056495, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895468, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.66331e-11  2.60327e-52  7.17614e-60
      low eigenvalue method done, cpu time[sec] = 0.901526, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.6e-52 -8.88e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-53 -8.88e-16         1
         *Z       ---       ---  1.33e+74
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -8.88178e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -8.88178e-16 -3.06173e-47 -9.22334e-48 -1.97125e-49  2.19565e-48  8.93155e-50  1.24057e-48  4.52507e-54 -2.08536e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 35.3878, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 320 K
      Energy reference = 39018 1/cm
      Energy step      = 53 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000222
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.016258
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.024674
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 4.09778
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 22.1994
         W1 Well: minimal relaxation eigenvalue = 0.069713
         W1 Well: maximal relaxation eigenvalue = 1.49726
         W1 Well:       grid size = 1332
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31578 1/cm
         B1 Barrier:        grid size = 737
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 733
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 169 1/cm
         B3 Barrier:        grid size = 823
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4600 1/cm
         B4 Barrier:        grid size = 853
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23151 1/cm => truncating
         B5 Barrier:        grid size = 1173
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23151 1/cm
         B6 Barrier:        grid size = 708
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1494 1/cm
         B7 Barrier:        grid size = 648
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4674 1/cm
         B8 Barrier:        grid size = 420
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 26.5102, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31578 -23151 4.71e+05 3.28e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 1.04e+16
         B2    170 2.31e+15
         B3  -4600 6.66e+14
         B4  -6190  7.8e+14
         B5 -23151 9.23e+13
         B6   1495 9.21e+15
         B7   4675 1.22e+15
         B8  16759 9.38e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.19e+40  3.37e+40  1.48e+32  1.03e+29  5.49e-07  1.38e+44  4.36e+50   6.7e+74
          R  8.39e-41         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  2.97e-41     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2  6.77e-33  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  9.74e-30  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  1.82e+06  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5  7.25e-45  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  2.29e-51  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  1.49e-75  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.88e+36  8.13e+36  3.57e+28  2.48e+25  1.33e-10  3.33e+40  1.05e+47  1.62e+71
          R  3.48e-37         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  1.23e-37     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2   2.8e-29  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  4.03e-26  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  7.54e+09  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5     3e-41  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  9.49e-48  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  6.19e-72  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
   MasterEquation::set:  done, cpu time[sec] = 26.5168, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+08
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 1.20194, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.4534, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21230.8       4689.3      1353.38      1585.42       187.52      18714.1      2474.44      19.0694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.82294, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879078, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.83151e-10  1.09976e-49  1.90876e-55
      low eigenvalue method done, cpu time[sec] = 0.882015, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-49  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.67e-51  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.63967e-44  1.20587e-44  5.62041e-46  3.30898e-45  1.09081e-46 -2.15819e-47  7.09515e-52 -1.52755e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 34.6591, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.04045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.3572, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7076.94       1563.1      451.128      528.473      62.5066      6238.03      824.815      6.35648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.822634, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878769, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -4.3672e-12  3.66589e-50  4.93875e-56
      low eigenvalue method done, cpu time[sec] = 0.881623, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-50  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.56e-51  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  8.26405e-45   3.9372e-45   1.0134e-46 -6.14604e-47  5.92061e-48  5.59204e-48 -2.82406e-52  3.92414e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.3105, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          2.2512e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.038177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.4114, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4246.16       937.86      270.677      317.084       37.504      3742.82      494.889      3.81389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.821717, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055513, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.877867, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.18098e-10  2.19953e-50  2.43366e-56
      low eigenvalue method done, cpu time[sec] = 0.880626, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-50  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-51  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.42767e-45  6.11578e-46 -1.04269e-46 -2.12934e-45 -5.00784e-47 -4.28091e-48 -1.63623e-52 -1.70346e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.3625, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         3.15168e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.038226, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.3984, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3032.97        669.9      193.341      226.488      26.7886      2673.44      353.492      2.72421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.82049, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.055492, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876617, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.10925e-10   1.5711e-50  1.48507e-56
      low eigenvalue method done, cpu time[sec] = 0.879397, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-50  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-51  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.09091e-45  1.90346e-45  1.05097e-46  1.97983e-45   3.7139e-47  1.45205e-47  1.54866e-52 -2.17265e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.3465, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         4.05216e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.038108, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.4329, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2358.98      521.034      150.376      176.158      20.8355      2079.34      274.938      2.11883
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.82047, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055453, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.87656, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56462e-10  1.22196e-50   1.0126e-56
      low eigenvalue method done, cpu time[sec] = 0.879155, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-50  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.52e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  3.39008e-45  2.24956e-45  8.03539e-47  9.19917e-46  1.61194e-47  1.08243e-47  3.56165e-52  2.41705e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.3795, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.038352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.5163, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2123.08       468.93      135.338      158.542       18.752      1871.41      247.444      1.90694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820473, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055481, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876583, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06464e-11  1.09977e-50  8.59425e-57
      low eigenvalue method done, cpu time[sec] = 0.879405, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-50  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.67e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -4.50498e-46 -1.15424e-45   -1.245e-48  6.69473e-46  9.39021e-48   7.0049e-49  1.70545e-53  3.11106e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4667, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         6.75361e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.03793, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.4626, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1415.39       312.62      90.2256      105.695      12.5013      1247.61      164.963       1.2713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820176, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.055453, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876266, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.94266e-11  7.33179e-51  4.48828e-57
      low eigenvalue method done, cpu time[sec] = 0.879117, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.33e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.11e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -3.46842e-45 -3.95127e-46  1.44949e-48  2.99322e-46  4.74976e-48  -1.2554e-47 -3.08746e-52 -2.09546e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4094, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         9.00481e+09
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.03814, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.9135, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1061.54      234.465      67.6692      79.2709      9.37599      935.705      123.722     0.953472
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819194, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055566, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.875389, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72945e-11  5.49884e-51  2.78339e-57
      low eigenvalue method done, cpu time[sec] = 0.878178, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.5e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  9.09878e-46  6.62434e-46  2.81046e-47  5.90766e-46  1.56972e-47 -1.14468e-47 -1.80791e-52 -1.79393e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.8597, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          1.1256e+10
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.038458, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.4937, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            849.233      187.572      54.1354      63.4167      7.50079      748.564      98.9778     0.762778
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.818956, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.875123, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.57358e-11  4.39908e-51  1.90417e-57
      low eigenvalue method done, cpu time[sec] = 0.877837, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.4e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   7.6621e-46  2.13516e-46  2.00017e-47  3.35417e-46  5.58149e-48  9.95006e-48 -1.46737e-52 -3.69941e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4429, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+10
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.03805, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.5088, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            707.694       156.31      45.1128      52.8473      6.25066      623.803      82.4815     0.635648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.818796, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.055488, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.874922, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62204e-12   3.6659e-51  1.38871e-57
      low eigenvalue method done, cpu time[sec] = 0.877565, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.56e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  4.45982e-46  3.25361e-46  1.92115e-47  4.11869e-46  9.46639e-48 -4.15712e-48  2.72624e-53 -4.85624e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4477, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.57584e+10
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.03823, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.6035, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            606.595       133.98      38.6681      45.2977      5.35771      534.688      70.6984     0.544841
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819327, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.055501, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.875462, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.46976e-11   3.1422e-51  1.05953e-57
      low eigenvalue method done, cpu time[sec] = 0.878177, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.14e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.19e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.24376e-45 -3.25152e-46 -1.37899e-47 -6.15382e-47 -5.66018e-49 -2.00342e-48 -2.55422e-52 -2.20815e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.5497, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.80096e+10
      global relaxation matrix dimension = 1332
      setting global matrices ... done, cpu time[sec] = 0.03818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 27.5404, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            530.771      117.233      33.8346      39.6355        4.688      467.852      61.8611     0.476736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.818545, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.05551, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.874683, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.49973e-11  2.74942e-51   8.3602e-58
      low eigenvalue method done, cpu time[sec] = 0.877477, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.75e-51  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-52  2.22e-16         1
         *Z       ---       ---  4.12e+72
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -4.33329e-46 -8.68614e-48 -1.34354e-48 -4.22097e-47 -2.76259e-49 -2.18875e-48   2.5704e-54  6.88438e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4875, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 330 K
      Energy reference = 39713 1/cm
      Energy step      = 55 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000182
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.014307
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.023447
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.29354
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 20.4831
         W1 Well: minimal relaxation eigenvalue = 0.0687003
         W1 Well: maximal relaxation eigenvalue = 1.39144
         W1 Well:       grid size = 1296
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31567 1/cm
         B1 Barrier:        grid size = 723
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 719
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 806
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4617 1/cm
         B4 Barrier:        grid size = 835
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6212 1/cm
         B5 Barrier: nonpositive number of states at -23207 1/cm => truncating
         B5 Barrier:        grid size = 1144
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23207 1/cm
         B6 Barrier:        grid size = 695
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1487 1/cm
         B7 Barrier:        grid size = 637
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4677 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16723 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 21.9795, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31567 -23207 4.52e+05 3.63e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 1.22e+16
         B2    168 2.74e+15
         B3  -4617 7.97e+14
         B4  -6212  9.3e+14
         B5 -23207 1.11e+14
         B6   1488 1.09e+16
         B7   4678 1.47e+15
         B8  16723  1.2e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.43e+38  3.94e+38  3.36e+30  2.91e+27  1.87e-07  1.39e+42  2.87e+48  8.57e+71
          R  6.97e-39         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1  2.54e-39     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  2.98e-31  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  3.43e-28  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  5.35e+06  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5  7.21e-43  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  3.49e-49     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  1.17e-72  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.63e+34  9.96e+34  8.49e+26  7.37e+23  4.73e-11  3.51e+38  7.26e+44  2.17e+68
          R  2.75e-35         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1     1e-35     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  1.18e-27  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.36e-24  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  2.11e+10  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5  2.85e-39  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  1.38e-45     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  4.61e-69  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
   MasterEquation::set:  done, cpu time[sec] = 21.9858, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+08
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 1.19422, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 26.4402, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              22770      5138.03      1493.95      1743.49       207.26      20423.9      2751.75      22.5803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753668, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.051002, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.805297, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.79627e-09  1.12654e-48  1.54225e-53
      low eigenvalue method done, cpu time[sec] = 0.80771, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-48 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-50 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  1.57844e-43  4.92206e-44  4.71757e-45  9.78871e-44  2.20503e-45 -1.29885e-46 -2.40885e-50 -4.10013e-66

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 33.4954, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.9049, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7589.99      1712.68      497.982      581.164      69.0865      6807.98      917.249      7.52678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753127, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.050944, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804718, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.83647e-10  3.75521e-49   4.1196e-54
      low eigenvalue method done, cpu time[sec] = 0.807152, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-49 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.58e-50 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.73839e-43 -8.79581e-44  -2.7553e-45 -3.85261e-44 -1.04532e-45  1.15192e-46  2.60369e-51 -4.71365e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.7692, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         2.20306e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036748, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.5788, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4553.99      1027.61      298.789      348.699      41.4519      4084.79      550.349      4.51607
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.752808, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.050982, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.80443, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.91493e-10  2.25314e-49  2.05944e-54
      low eigenvalue method done, cpu time[sec] = 0.806841, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.25e-49 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-50 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  2.79903e-44  1.40718e-45 -2.41397e-46 -1.86679e-45  1.97997e-47  2.12237e-46 -1.02709e-51  1.88824e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.4426, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.08429e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036825, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.5867, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3252.85      734.004      213.421       249.07      29.6085       2917.7      393.107      3.22576
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.752346, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.050951, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803929, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.00996e-11   1.6094e-49  1.26839e-54
      low eigenvalue method done, cpu time[sec] = 0.806334, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-49 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-50 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.02494e-43 -3.35033e-44 -1.07367e-45 -5.85523e-45 -2.32633e-46 -1.59281e-46  3.87095e-51 -1.57319e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.4502, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.96551e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.037811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.5937, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2530      570.892      165.994      193.721      23.0288      2269.33       305.75      2.50893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.752511, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.05095, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.8041, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.40032e-11  1.25176e-49  8.70703e-55
      low eigenvalue method done, cpu time[sec] = 0.80651, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-49 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.6e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  6.85347e-44  2.68858e-44  7.64854e-46  2.44424e-45  2.13145e-46  6.46922e-47  1.83434e-51 -3.05144e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.4584, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.038402, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 26.013, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2277      513.803      149.395      174.349       20.726      2042.39      275.175      2.25803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.75255, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.050958, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804162, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.37439e-10  1.12658e-49  7.41038e-55
      low eigenvalue method done, cpu time[sec] = 0.806543, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-49 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  -1.6097e-44 -3.33104e-45 -5.07903e-47  1.83993e-45  5.14415e-48 -1.75843e-46  1.43021e-51 -1.71969e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.8801, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         6.60918e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036806, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 26.0498, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1518      342.535      99.5965      116.233      13.8173       1361.6       183.45      1.50536
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.752552, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.051001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804212, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51884e-11  7.51057e-50  3.91004e-55
      low eigenvalue method done, cpu time[sec] = 0.806598, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.51e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.16e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  5.64417e-44  2.00629e-44   3.1869e-46 -5.07638e-45 -1.31955e-46 -2.15469e-46  2.16196e-51  3.23989e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.9176, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         8.81225e+09
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 26.0029, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1138.5      256.901      74.6974      87.1746       10.363       1021.2      137.587      1.12902
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.75176, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.051029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.80343, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65162e-12  5.63294e-50  2.44155e-55
      low eigenvalue method done, cpu time[sec] = 0.805776, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.63e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.87e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  1.67098e-44  3.10678e-45  1.89878e-46  6.77851e-46  3.09866e-47  4.85001e-47  2.66753e-51  4.32315e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.87, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.10153e+10
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.03673, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.6637, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            910.799      205.521      59.7579      69.7397      8.29038      816.957       110.07     0.903214
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.752667, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.050992, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804315, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     6.69e-11  4.50636e-50  1.67878e-55
      low eigenvalue method done, cpu time[sec] = 0.806675, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.51e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.1e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  4.64549e-45  8.56826e-46  1.36475e-46  1.94108e-45  4.12799e-47  3.97009e-47 -1.46801e-51 -8.17322e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.5284, elapsed time[sec] = 3
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+10
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036734, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.9661, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            758.999      171.268      49.7982      58.1164      6.90865      680.798      91.7249     0.752678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.751632, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.050962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803251, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.32505e-11   3.7553e-50  1.22915e-55
      low eigenvalue method done, cpu time[sec] = 0.805634, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.58e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -2.56039e-44 -7.55886e-45 -2.51124e-46  -1.1049e-45  -3.2318e-47 -1.01548e-47  3.78514e-51  2.06899e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.8301, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.54214e+10
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.03669, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.9669, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            650.571      146.801      42.6842      49.8141       5.9217      583.541      78.6214     0.645153
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.751621, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.05097, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803226, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.42609e-11  3.21883e-50  9.40777e-56
      low eigenvalue method done, cpu time[sec] = 0.805587, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.22e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  2.54536e-44  4.13629e-45  1.18066e-46  5.54237e-46  2.52439e-47  1.48828e-46  1.61873e-51 -1.26877e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.8329, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.76245e+10
      global relaxation matrix dimension = 1296
      setting global matrices ... done, cpu time[sec] = 0.036798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 25.9685, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            569.249      128.451      37.3487      43.5873      5.18149      510.598      68.7937     0.564509
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.751986, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.05103, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803656, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.49477e-11  2.81648e-50  7.44275e-56
      low eigenvalue method done, cpu time[sec] = 0.806023, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.82e-50 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-51 -4.44e-16         1
         *Z       ---       ---  1.54e+71
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.55801e-44 -6.94112e-45 -1.65307e-46 -9.69683e-46  -2.7676e-47 -5.75414e-47  5.99701e-52 -1.48942e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.8309, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 340 K
      Energy reference = 40408 1/cm
      Energy step      = 57 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000177
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.016975
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.022226
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.11495
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 18.7754
         W1 Well: minimal relaxation eigenvalue = 0.0676836
         W1 Well: maximal relaxation eigenvalue = 1.53191
         W1 Well:       grid size = 1263
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31583 1/cm
         B1 Barrier:        grid size = 709
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -5 1/cm
         B2 Barrier:        grid size = 706
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 790
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4622 1/cm
         B4 Barrier:        grid size = 818
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6218 1/cm
         B5 Barrier: nonpositive number of states at -23147 1/cm => truncating
         B5 Barrier:        grid size = 1115
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23147 1/cm
         B6 Barrier:        grid size = 683
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1476 1/cm
         B7 Barrier:        grid size = 627
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4668 1/cm
         B8 Barrier:        grid size = 415
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16752 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 20.0924, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31583 -23147 4.72e+05 4.02e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -5 1.41e+16
         B2    166 3.25e+15
         B3  -4622 9.52e+14
         B4  -6218 1.11e+15
         B5 -23147 1.32e+14
         B6   1477 1.29e+16
         B7   4669 1.77e+15
         B8  16753 1.54e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.28e+36  6.07e+36  9.68e+28  1.03e+26  6.88e-08  1.86e+40  2.57e+46  1.65e+69
          R  4.39e-37         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  1.65e-37     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  1.03e-29  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  9.67e-27   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  1.45e+07  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5  5.39e-41  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6  3.88e-47  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  6.06e-70  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.92e+32  1.58e+33  2.51e+25  2.69e+22  1.79e-11  4.82e+36  6.69e+42  4.29e+65
          R  1.69e-33         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  6.34e-34     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  3.98e-26  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  3.72e-23   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  5.59e+10  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5  2.07e-37  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6   1.5e-43  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  2.33e-66  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
   MasterEquation::set:  done, cpu time[sec] = 20.0982, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+08
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 1.13969, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.2095, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24368.6      5616.78      1645.04       1912.8      228.505      22235.1      3051.15      26.5909
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.69581, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.047963, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744319, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.15887e-09   1.0881e-47  9.45114e-52
      low eigenvalue method done, cpu time[sec] = 0.74938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-47  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.36e-49  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -1.28463e-42 -7.40087e-43 -8.93053e-46  2.39452e-43  6.70396e-45 -7.00561e-46 -9.94084e-50 -2.43357e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 31.1319, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034905, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.1867, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8122.87      1872.26      548.347        637.6      76.1684       7411.7      1017.05      8.86362
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695943, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.047999, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744515, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.82211e-10  3.62752e-48  2.60226e-52
      low eigenvalue method done, cpu time[sec] = 0.749712, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.63e-48  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-49  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  7.66543e-43  1.96992e-43  7.17181e-45 -2.90755e-44  -7.5533e-46  2.09827e-45  1.33228e-50  6.53937e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.9844, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         2.15759e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.03493, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.2107, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4873.72      1123.36      329.008       382.56       45.701      4447.02      610.231      5.31817
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695799, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.047936, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744287, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.90609e-10  2.17663e-48  1.31913e-52
      low eigenvalue method done, cpu time[sec] = 0.749366, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.18e-48  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-49  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  1.53736e-42   5.7908e-43  1.69439e-44  1.20504e-43   3.2606e-45  1.49522e-45  1.13635e-50  4.18342e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.16, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.02062e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034882, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.2085, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3481.23      802.397      235.006      273.257      32.6436      3176.44      435.879       3.7987
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.694534, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.048006, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.743108, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.44072e-11  1.55478e-48    8.198e-53
      low eigenvalue method done, cpu time[sec] = 0.748023, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-48  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-49  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -7.17476e-44 -6.47741e-44 -2.86924e-45 -2.45772e-44 -9.74675e-46  2.04313e-45  1.01901e-50  4.48153e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.0053, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.88366e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.2543, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2707.62      624.087      182.782      212.533      25.3895      2470.57      339.017      2.95454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.694468, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.047962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.742998, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22971e-10   1.2093e-48  5.66487e-53
      low eigenvalue method done, cpu time[sec] = 0.747892, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-48  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.18e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16   6.2888e-43   2.5262e-43  9.88257e-45  8.24338e-44  2.25025e-45  4.20477e-48 -4.36428e-50 -3.86909e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.05, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034971, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.3366, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2436.86      561.678      164.504       191.28      22.8505      2223.51      305.115      2.65909
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.694936, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.048003, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.743508, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.81786e-11  1.08838e-48  4.83441e-53
      low eigenvalue method done, cpu time[sec] = 0.74825, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-48  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.37e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -2.18517e-43 -1.36023e-43 -2.84427e-45 -3.66693e-44 -9.75697e-46 -8.49278e-47 -5.48718e-50  -1.0178e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.1336, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         6.47276e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.03478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.3491, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1624.57      374.452      109.669       127.52      15.2337      1482.34       203.41      1.77272
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695831, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.047947, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744339, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -9.73214e-11  7.25604e-49  2.57694e-53
      low eigenvalue method done, cpu time[sec] = 0.748889, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.26e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.91e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  8.89635e-44  5.47209e-44  3.42529e-45  6.05067e-44  1.35504e-45 -6.27849e-46 -2.37773e-50  1.74658e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.1457, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         8.63035e+09
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034967, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.3759, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1218.43      280.839       82.252      95.6401      11.4253      1111.75      152.558      1.32954
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697357, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.047967, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.745894, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.63316e-11  5.44211e-49   1.6202e-53
      low eigenvalue method done, cpu time[sec] = 0.750522, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.44e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -7.28011e-44 -1.30146e-44 -8.70791e-46 -1.53328e-44 -4.24629e-46  4.39029e-46  1.70979e-51   1.0973e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.1792, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.07879e+10
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.4012, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            974.744      224.671      65.8016      76.5121      9.14021      889.404      122.046      1.06363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695077, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.048009, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.743645, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.06761e-11  4.35373e-49   1.1197e-53
      low eigenvalue method done, cpu time[sec] = 0.748383, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.35e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.95e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  2.80712e-43    5.472e-44  2.39214e-45   1.8203e-44  5.04968e-46    7.539e-46 -4.92753e-51 -2.45529e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.1986, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+10
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.03493, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.3871, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            812.287      187.226      54.8347        63.76      7.61684       741.17      101.705     0.886362
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.69504, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.048002, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.743607, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97403e-12  3.62813e-49  8.23064e-54
      low eigenvalue method done, cpu time[sec] = 0.74876, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.63e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -4.50368e-46 -2.26553e-44  6.50061e-46 -1.07417e-45   4.6503e-47  6.05649e-46  2.18068e-50  2.29697e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.1847, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.51031e+10
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.034911, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.4487, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            696.246      160.479      47.0012      54.6515      6.52872      635.288      87.1758     0.759739
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695649, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.047969, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744184, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.41388e-11  3.10984e-49   6.3199e-54
      low eigenvalue method done, cpu time[sec] = 0.74913, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.1e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  4.93791e-44  3.55455e-45   4.1166e-46  2.41596e-45  5.45763e-47   6.1154e-46 -4.29749e-50 -1.51764e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.2433, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.72607e+10
      global relaxation matrix dimension = 1263
      setting global matrices ... done, cpu time[sec] = 0.03492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.4375, elapsed time[sec] = 2
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            609.215       140.42       41.126        47.82      5.71263      555.877      76.2788     0.664772
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695642, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.048002, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.744206, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60459e-11  2.72112e-49  5.01324e-54
      low eigenvalue method done, cpu time[sec] = 0.74906, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.72e-49  6.66e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-50  6.66e-16         1
         *Z       ---       ---  7.09e+69
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.66134e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16 -6.22085e-44 -4.38409e-44 -9.01885e-46 -9.63504e-45 -1.79834e-46  8.33671e-47 -3.36432e-50 -3.46507e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.2315, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 350 K
      Energy reference = 41103 1/cm
      Energy step      = 58 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.0002
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.015071
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.02222
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.2371
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 18.1427
         W1 Well: minimal relaxation eigenvalue = 0.0667496
         W1 Well: maximal relaxation eigenvalue = 1.41619
         W1 Well:       grid size = 1253
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31571 1/cm
         B1 Barrier:        grid size = 709
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 705
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 212 1/cm
         B3 Barrier:        grid size = 788
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4601 1/cm
         B4 Barrier:        grid size = 816
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6225 1/cm
         B5 Barrier: nonpositive number of states at -23103 1/cm => truncating
         B5 Barrier:        grid size = 1107
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23103 1/cm
         B6 Barrier:        grid size = 683
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 628
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4678 1/cm
         B8 Barrier:        grid size = 420
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16742 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 19.5837, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31571 -23103 4.88e+05 4.45e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 1.63e+16
         B2    213 3.84e+15
         B3  -4601 1.13e+15
         B4  -6225 1.31e+15
         B5 -23103 1.58e+14
         B6   1489 1.51e+16
         B7   4679 2.12e+15
         B8  16743 1.95e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.59e+34  1.19e+35  3.42e+27  4.46e+24  2.69e-08  3.19e+38  3.03e+44  4.56e+66
          R  2.18e-35         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  8.39e-36     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  2.92e-28  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3  2.24e-25  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  3.72e+07   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5  3.14e-39  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6   3.3e-45  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  2.19e-67  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e+31  3.16e+31  9.09e+23  1.18e+21  7.14e-12  8.46e+34  8.05e+40  1.21e+63
          R  8.21e-32         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  3.16e-32     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2   1.1e-24  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3  8.45e-22  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4   1.4e+11   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5  1.18e-35  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  1.24e-41  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  8.26e-64  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
   MasterEquation::set:  done, cpu time[sec] = 19.5905, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+08
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 1.12177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.8753, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26018.2      6124.13      1807.14      2093.82      251.327        24150      3373.67      31.1472
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.678137, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.046852, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.727301, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -1.3526e-09   1.0314e-46  4.63627e-50
      low eigenvalue method done, cpu time[sec] = 0.732383, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-48         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.33878e-42 -1.13146e-42 -2.27222e-44  8.98231e-44   5.1449e-45 -1.03812e-44  1.01504e-49  7.25616e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.7852, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.034071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.8126, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8672.73      2041.38      602.382       697.94      83.7757      8050.01      1124.56      10.3824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677688, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.046876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.72687, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -6.28286e-10  3.44065e-47  1.31391e-50
      low eigenvalue method done, cpu time[sec] = 0.731747, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-48         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -5.03144e-42 -2.62819e-43 -3.60669e-44 -9.12831e-43 -1.92778e-44 -1.92575e-44 -8.43376e-49  1.67486e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.5878, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.11455e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.034032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.8587, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5203.64      1224.83      361.429      418.764      50.2654      4830.01      674.735      6.22944
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677561, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.046837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726707, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.07984e-11    2.065e-47  6.75052e-51
      low eigenvalue method done, cpu time[sec] = 0.73143, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-48         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -2.93824e-42 -8.24778e-43  1.11653e-44  9.19611e-43  2.05889e-44  -7.7789e-45 -1.98162e-49 -2.43803e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6334, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.96037e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.033822, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.878, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3716.89      874.876      258.164      299.117      35.9039         3450      481.954       4.4496
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677609, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046841, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726715, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.96816e-10  1.47525e-47  4.23215e-51
      low eigenvalue method done, cpu time[sec] = 0.731359, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.85e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -2.84499e-42 -2.12035e-42 -7.70953e-44 -1.09931e-42 -2.60229e-44  2.06328e-44  1.82165e-49 -1.59403e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6545, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         3.80619e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.033854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.8861, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2890.91      680.459      200.794      232.647      27.9252      2683.34      374.853       3.4608
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677243, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046856, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726413, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.02936e-11  1.14754e-47  2.94337e-51
      low eigenvalue method done, cpu time[sec] = 0.730915, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.66e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.15545e-42 -7.93696e-43 -2.03277e-44 -1.49038e-43 -4.35971e-45  1.56889e-45  2.87864e-49   9.7565e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6622, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.034028, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.888, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2601.82      612.413      180.714      209.382      25.1327         2415      337.367      3.11472
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677217, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046883, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726396, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.81394e-12  1.03283e-47  2.51859e-51
      low eigenvalue method done, cpu time[sec] = 0.731283, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.89e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29947e-42  5.97025e-43  5.42175e-44  8.63341e-43  1.95435e-44  -7.5182e-45  1.86654e-49 -4.69543e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6641, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         6.34365e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.033999, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.9154, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1734.55      408.275      120.476      139.588      16.7551         1610      224.912      2.07648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676719, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046854, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.725843, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.83254e-11  6.88649e-48  1.35604e-51
      low eigenvalue method done, cpu time[sec] = 0.730601, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.89e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.16279e-42  -2.6197e-43  1.35728e-44  4.23001e-43  9.18866e-45 -4.46721e-45  2.14686e-50 -1.28138e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6897, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         8.45821e+09
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.033972, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.9048, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1300.91      306.206      90.3572      104.691      12.5664       1207.5      168.684      1.55736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676662, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046854, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.725825, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.99511e-11  5.16529e-48  8.58406e-52
      low eigenvalue method done, cpu time[sec] = 0.730148, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.17e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91857e-42  9.20886e-43  1.89473e-44  1.55927e-43  4.61139e-45 -6.28949e-45  2.77867e-51 -2.00394e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6791, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.05728e+10
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.03382, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.9221, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1040.73      244.965      72.2858      83.7528      10.0531      966.001      134.947      1.24589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676726, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046898, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.72591, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.14558e-11  4.13246e-48  5.96242e-52
      low eigenvalue method done, cpu time[sec] = 0.730683, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.13e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -6.34146e-43  1.58038e-43  -1.2966e-46 -5.09569e-44 -5.96484e-46 -2.26028e-45 -2.92435e-49  2.91215e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.6964, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+10
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.034069, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.9707, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            867.273      204.138      60.2382       69.794      8.37757      805.001      112.456      1.03824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.67757, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046875, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726718, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.23173e-12  3.44385e-48   4.4003e-52
      low eigenvalue method done, cpu time[sec] = 0.731302, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.34005e-42  4.93955e-43  1.66372e-44  1.47007e-43  3.72994e-45  7.98433e-45  4.29882e-49  3.32539e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.7471, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.48019e+10
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.033928, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 24.2935, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            743.377      174.975      51.6327      59.8234      7.18078      690.001      96.3907     0.889919
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.67662, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046877, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.725775, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.96365e-12  2.95195e-48  3.38972e-52
      low eigenvalue method done, cpu time[sec] = 0.730482, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.95e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.97e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -7.06845e-43 -5.92729e-43 -5.90735e-45  7.33507e-44  1.31767e-45  5.92332e-45  -4.1391e-49   2.7849e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 30.0686, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.69164e+10
      global relaxation matrix dimension = 1253
      setting global matrices ... done, cpu time[sec] = 0.034014, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 23.9674, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            650.455      153.103      45.1786      52.3455      6.28318      603.751      84.3419      0.77868
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677004, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.046831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.726146, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.59546e-11  2.58302e-48  2.69617e-52
      low eigenvalue method done, cpu time[sec] = 0.73073, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-48         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-49         0         1
         *Z       ---       ---   3.9e+68
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.78353e-43  7.78803e-44  1.83177e-45  2.79366e-44  5.52885e-46 -6.53897e-45 -2.99071e-49 -1.38817e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.7422, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 360 K
      Energy reference = 41798 1/cm
      Energy step      = 60 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000207
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.013165
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.020834
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.09739
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 17.1746
         W1 Well: minimal relaxation eigenvalue = 0.0658428
         W1 Well: maximal relaxation eigenvalue = 1.5019
         W1 Well:       grid size = 1223
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31582 1/cm
         B1 Barrier:        grid size = 697
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -22 1/cm
         B2 Barrier:        grid size = 694
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 157 1/cm
         B3 Barrier:        grid size = 774
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4642 1/cm
         B4 Barrier:        grid size = 800
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23602 1/cm => truncating
         B5 Barrier:        grid size = 1090
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23602 1/cm
         B6 Barrier:        grid size = 672
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1477 1/cm
         B7 Barrier:        grid size = 618
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4717 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16717 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 18.4692, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31582 -23602 3.39e+05 4.91e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -22 1.88e+16
         B2    158 4.53e+15
         B3  -4642 1.35e+15
         B4  -6202 1.55e+15
         B5 -23602 1.87e+14
         B6   1478 1.78e+16
         B7   4718 2.53e+15
         B8  16718 2.47e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.13e+33  2.87e+33  1.44e+26  2.26e+23  1.09e-08  6.76e+36  4.51e+42  1.73e+64
          R  8.82e-34         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  3.48e-34     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  6.94e-27  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  4.43e-24  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  9.14e+07  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5  1.48e-37  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6  2.22e-43  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  5.79e-65  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.11e+29  7.87e+29  3.95e+22  6.19e+19     3e-12  1.85e+33  1.24e+39  4.73e+60
          R  3.22e-30         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  1.27e-30     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  2.53e-23  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  1.62e-20  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  3.33e+11  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5   5.4e-34  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6  8.08e-40  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  2.11e-61  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
   MasterEquation::set:  done, cpu time[sec] = 18.4758, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+08
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 1.03045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.4611, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27716.5      6659.74      1980.75      2287.02      275.797        26170      3720.33      36.3031
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.634641, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044119, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679309, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.25402e-10  9.57732e-46  1.82111e-48
      low eigenvalue method done, cpu time[sec] = 0.683727, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.58e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.31e-47         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.79339e-41  2.52816e-41   1.7588e-42  3.17135e-41  7.00495e-43  6.47948e-44  6.33555e-47  3.49987e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 29.2566, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.031473, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.448, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9238.85      2219.91      660.249      762.341      91.9325      8723.35      1240.11       12.101
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.634273, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044083, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678906, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.24181e-10  3.20313e-46  5.30589e-49
      low eigenvalue method done, cpu time[sec] = 0.68313, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-47         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27643e-41  8.00304e-42  3.19969e-43   8.6169e-43  4.03964e-44  8.40908e-44  -1.6491e-48 -1.40625e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.1647, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.07375e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.031214, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.4794, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5543.31      1331.95      396.149      457.405      55.1595      5234.01      744.066      7.26061
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.633961, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.044111, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678598, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70708e-10  1.92438e-46  2.76182e-49
      low eigenvalue method done, cpu time[sec] = 0.682969, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.92e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-47         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -4.21173e-41 -1.58064e-41 -4.30841e-43 -4.19736e-42 -1.16186e-43 -7.65869e-44  3.10313e-48  3.81123e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.2013, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.90325e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.6476, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3959.51      951.391      282.964      326.718      39.3996      3738.58      531.475      5.18615
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.63448, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.044107, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679098, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -8.55726e-11  1.37558e-46  1.74638e-49
      low eigenvalue method done, cpu time[sec] = 0.683526, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.38e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.06e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3637e-41  1.45247e-41  5.39945e-43  5.99538e-42  1.39663e-43 -9.39698e-44   9.7012e-49  3.17888e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.3645, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         3.73275e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030796, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.4579, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3079.62      739.971      220.083      254.114      30.6442      2907.78       413.37      4.03367
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.635102, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044077, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679711, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.41971e-10  1.07042e-46  1.22229e-49
      low eigenvalue method done, cpu time[sec] = 0.684129, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-46         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.05e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10561e-41  2.13247e-42  4.92936e-44 -7.44815e-43 -6.93906e-45  9.19697e-44  3.70244e-48  9.47252e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.1791, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030975, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.4607, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2771.65      665.974      198.075      228.702      27.5797         2617      372.033      3.63031
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.634823, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044115, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679467, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.44013e-10  9.63555e-47  1.04864e-49
      low eigenvalue method done, cpu time[sec] = 0.683884, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.64e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.34e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02321e-41   3.7417e-42  1.06956e-43  1.00577e-43  1.37467e-44  3.44462e-44 -3.47453e-48 -9.12258e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.3122, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         6.22124e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.031055, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.5272, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1847.77      443.983       132.05      152.468      18.3865      1744.67      248.022       2.4202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.634856, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679468, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.70099e-11   6.4278e-47   5.7023e-50
      low eigenvalue method done, cpu time[sec] = 0.683703, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.43e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  -1.5222e-41 -5.76152e-42 -2.23191e-43 -1.16025e-42 -3.66064e-44  7.36165e-45  2.07382e-49 -1.22337e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.2495, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         8.29499e+09
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.03111, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.5873, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1385.83      332.987      99.0373      114.351      13.7899       1308.5      186.016      1.81515
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.633759, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044106, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678402, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.63017e-11  4.82265e-47  3.63425e-50
      low eigenvalue method done, cpu time[sec] = 0.682741, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.82e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.18e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -5.00501e-42 -2.13351e-42 -7.76096e-44 -8.97026e-43 -1.56425e-44  1.80425e-44  4.27058e-49 -4.90498e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.3025, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.03687e+10
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.5891, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1108.66       266.39      79.2299      91.4809      11.0319       1046.8      148.813      1.45212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.6336, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678239, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.91476e-11  3.85907e-47  2.53714e-50
      low eigenvalue method done, cpu time[sec] = 0.682634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.86e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.11902e-41 -2.98898e-42 -5.25616e-44  3.49422e-43 -2.07835e-45 -4.78578e-44  3.83682e-49 -6.88458e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.2821, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+10
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.6728, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            923.885      221.991      66.0249      76.2341      9.19325      872.335      124.011       1.2101
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.63343, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04405, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678003, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -6.32266e-13  3.21646e-47  1.87992e-50
      low eigenvalue method done, cpu time[sec] = 0.682349, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.22e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.12e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -6.64365e-42 -1.39543e-42 -5.66039e-44 -4.50859e-43 -1.48496e-44 -3.76214e-44  2.26838e-48 -1.16634e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.3905, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.45162e+10
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.031062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.6102, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            791.901      190.278      56.5928      65.3435      7.87993      747.716      106.295      1.03723
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.633771, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044038, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.67833, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.54214e-11  2.75733e-47  1.45291e-50
      low eigenvalue method done, cpu time[sec] = 0.682664, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.76e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05893e-41   2.1999e-42  2.19006e-44 -4.62332e-43 -8.65599e-45  3.55487e-44 -8.68737e-49  8.46589e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.3315, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1           1.659e+10
      global relaxation matrix dimension = 1223
      setting global matrices ... done, cpu time[sec] = 0.030837, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 22.5407, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            692.914      166.493      49.5187      57.1756      6.89494      654.251      93.0082     0.907576
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.633392, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.044123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.678056, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.37462e-11  2.41292e-47  1.15881e-50
      low eigenvalue method done, cpu time[sec] = 0.682517, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.41e-47         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-48         0         1
         *Z       ---       ---   2.5e+67
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41873e-42  7.59353e-43    6.337e-45  2.17142e-46 -8.07905e-46 -2.36808e-44 -4.32532e-48  1.39041e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 28.2592, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 370 K
      Energy reference = 42493 1/cm
      Energy step      = 62 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00019
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.013824
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.019927
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.17335
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 15.9804
         W1 Well: minimal relaxation eigenvalue = 0.0649544
         W1 Well: maximal relaxation eigenvalue = 1.8998
         W1 Well:       grid size = 1195
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31597 1/cm
         B1 Barrier:        grid size = 686
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 682
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 209 1/cm
         B3 Barrier:        grid size = 760
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4626 1/cm
         B4 Barrier:        grid size = 785
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6176 1/cm
         B5 Barrier: nonpositive number of states at -23103 1/cm => truncating
         B5 Barrier:        grid size = 1058
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23103 1/cm
         B6 Barrier:        grid size = 662
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1449 1/cm
         B7 Barrier:        grid size = 610
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 415
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 17.4044, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31597 -23103 4.88e+05 5.42e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 2.17e+16
         B2    210 5.32e+15
         B3  -4626  1.6e+15
         B4  -6176 1.84e+15
         B5 -23103 2.22e+14
         B6   1450 2.08e+16
         B7   4674 3.01e+15
         B8  16763  3.1e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.41e+31  8.45e+31  7.18e+24  1.34e+22  4.66e-09  1.76e+35  8.42e+40  8.82e+61
          R  2.93e-32         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  1.18e-32     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  1.39e-25  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  7.46e-23  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  2.14e+08  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  5.67e-36  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6  1.19e-41  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  1.13e-62  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.64e+27  2.39e+28  2.03e+21  3.79e+18  1.32e-12  4.98e+31  2.38e+37  2.49e+58
          R  1.04e-28         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.19e-29     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  4.93e-22  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  2.64e-19  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  7.58e+11  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  2.01e-32  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6   4.2e-38  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  4.01e-59  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
   MasterEquation::set:  done, cpu time[sec] = 17.4103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+08
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 1.02706, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1309, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29462.1      7224.02      2166.34       2492.9      301.988      28288.8      4092.14      42.1117
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.588512, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040874, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.629871, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57019e-09  9.07945e-45  5.86911e-47
      low eigenvalue method done, cpu time[sec] = 0.634031, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.08e-45  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.9e-46  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16 -5.80951e-42  8.77187e-41  3.12733e-42  9.53969e-41  1.98853e-42  1.13935e-42  2.05536e-47  6.37976e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 27.8266, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1027, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9820.69      2408.01      722.113      830.966      100.663      9429.59      1364.05      14.0372
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.589145, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.630544, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72576e-10  3.06174e-45  1.75597e-47
      low eigenvalue method done, cpu time[sec] = 0.634627, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.06e-45  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.99e-46  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  9.02004e-42 -2.70212e-41  9.27835e-43  9.90379e-42  2.83708e-43   7.8825e-43  5.38713e-49  1.19892e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.7687, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.03499e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.142, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5892.41       1444.8      433.268      498.579      60.3977      5657.75      818.428      8.42234
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.588777, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040906, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.630187, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.60488e-10  1.84546e-45  9.25642e-48
      low eigenvalue method done, cpu time[sec] = 0.63423, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-45  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-46  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  2.73317e-40  1.03744e-40  3.77554e-42   3.4907e-41  9.08391e-43  1.01235e-44 -2.04718e-47 -9.72708e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8073, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.84899e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.2439, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4208.87         1032      309.477      356.128      43.1412      4041.25      584.591      6.01596
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587952, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040929, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.629402, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.21899e-11  1.32164e-45  5.90216e-48
      low eigenvalue method done, cpu time[sec] = 0.633491, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-45  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.58e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  4.13489e-41 -2.56944e-41 -1.18513e-42 -2.13251e-41 -4.32579e-43 -2.19215e-43 -1.77555e-47  2.93803e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.9101, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         3.66299e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1496, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3273.56      802.669      240.704      276.989      33.5543       3143.2      454.682      4.67908
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587346, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.628724, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.78199e-10  1.02973e-45  4.15657e-48
      low eigenvalue method done, cpu time[sec] = 0.632455, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-45  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.69e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  1.35362e-40  6.14294e-41  1.28212e-42  5.52527e-42  1.98277e-43 -3.38764e-43 -2.09676e-47  6.90422e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8127, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030731, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1045, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2946.21      722.402      216.634       249.29      30.1988      2828.88      409.214      4.21117
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.588106, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04084, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.62945, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09662e-10  9.27382e-46  3.57529e-48
      low eigenvalue method done, cpu time[sec] = 0.633733, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.27e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.02e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16 -8.59813e-41 -2.46749e-41 -8.99194e-43 -9.27149e-42 -2.20091e-43 -3.58076e-44  1.84326e-47    2.124e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.7734, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         6.10498e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1493, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1964.14      481.601      144.423      166.193      20.1326      1885.92      272.809      2.80745
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587808, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.04081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.629111, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89011e-11   6.1967e-46  1.96326e-48
      low eigenvalue method done, cpu time[sec] = 0.633291, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.2e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.03e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16 -2.58322e-41  7.41499e-42 -2.05299e-43 -1.65318e-42 -3.98824e-44 -2.21455e-43 -2.72198e-47  9.58029e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8133, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         8.13998e+09
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030723, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1587, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1473.1      361.201      108.317      124.645      15.0994      1414.44      204.607      2.10558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587189, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040868, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.628547, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.33186e-12  4.65378e-46  1.25968e-48
      low eigenvalue method done, cpu time[sec] = 0.632437, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.65e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  4.71368e-41  2.51436e-41  8.56882e-43  8.13221e-42  2.12761e-43 -2.96395e-43  7.94872e-48  1.32313e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8227, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.0175e+10
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030657, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.1832, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1178.48      288.961      86.6535      99.7159      12.0795      1131.55      163.686      1.68447
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587352, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040901, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.628741, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -8.51334e-11  3.72637e-46  8.83856e-49
      low eigenvalue method done, cpu time[sec] = 0.632845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.73e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.42e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16 -8.84306e-41 -2.66154e-41 -6.04862e-43 -2.61076e-42  -8.9267e-44 -2.36867e-44 -7.14377e-48  8.71686e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8417, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+10
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030456, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.2078, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            982.069      240.801      72.2113      83.0966      10.0663      942.959      136.405      1.40372
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587362, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.04081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.628679, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.28892e-11  3.10731e-46  6.57524e-49
      low eigenvalue method done, cpu time[sec] = 0.6325, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16 -4.16147e-42  2.09803e-43 -2.91489e-43 -5.29021e-42 -1.28052e-43 -4.38494e-43 -3.66355e-48  -1.9267e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8701, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.4245e+10
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.2209, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            841.774      206.401      61.8954      71.2256      8.62824       808.25      116.918      1.20319
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587472, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040833, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.628807, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -9.7294e-12   2.6647e-46   5.0984e-49
      low eigenvalue method done, cpu time[sec] = 0.632749, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  5.37166e-41  8.90926e-42  1.27418e-43 -8.42636e-43 -2.45812e-45  4.72176e-43  1.99006e-47  1.65268e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8815, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.628e+10
      global relaxation matrix dimension = 1195
      setting global matrices ... done, cpu time[sec] = 0.030548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 21.236, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            736.552        180.6      54.1585      62.3224      7.54971      707.219      102.304      1.05279
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.58802, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.629349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24567e-11  2.33251e-46  4.07758e-49
      low eigenvalue method done, cpu time[sec] = 0.633151, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-46  4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.52e-47  4.44e-16         1
         *Z       ---       ---  1.87e+66
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  2.95511e-41  1.08092e-41  2.37667e-43 -1.53521e-43  1.89245e-44 -4.16737e-44 -1.36615e-47 -2.18834e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.8981, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 380 K
      Energy reference = 43188 1/cm
      Energy step      = 63 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000161
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.013781
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.019493
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 3.07851
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 15.9166
         W1 Well: minimal relaxation eigenvalue = 0.0641203
         W1 Well: maximal relaxation eigenvalue = 1.68652
         W1 Well:       grid size = 1187
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31593 1/cm
         B1 Barrier:        grid size = 686
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -29 1/cm
         B2 Barrier:        grid size = 683
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 759
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4628 1/cm
         B4 Barrier:        grid size = 784
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6203 1/cm
         B5 Barrier: nonpositive number of states at -23151 1/cm => truncating
         B5 Barrier:        grid size = 1053
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23151 1/cm
         B6 Barrier:        grid size = 662
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1482 1/cm
         B7 Barrier:        grid size = 611
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4695 1/cm
         B8 Barrier:        grid size = 420
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16728 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 19.2421, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31593 -23151 4.71e+05 5.98e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -29 2.49e+16
         B2    159 6.24e+15
         B3  -4628 1.89e+15
         B4  -6203 2.16e+15
         B5 -23151 2.63e+14
         B6   1483 2.43e+16
         B7   4696 3.58e+15
         B8  16729 3.88e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.25e+30  3.03e+30  4.23e+23  9.35e+20   2.1e-09  5.63e+33  1.96e+39  6.02e+59
          R  8.01e-31         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  3.31e-31     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  2.36e-24  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  1.07e-21  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  4.76e+08  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  1.78e-34  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6  5.11e-40  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  1.66e-60  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.59e+26   8.7e+26  1.22e+20  2.69e+17  6.05e-13  1.62e+30  5.63e+35  1.73e+56
          R  2.78e-27         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  1.15e-27     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  8.21e-21  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  3.72e-18  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  1.65e+12  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  6.18e-31  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6  1.78e-36  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  5.77e-57  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
   MasterEquation::set:  done, cpu time[sec] = 19.2481, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+08
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.969949, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8862, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31253.2      7817.33      2364.42      2711.92      329.974        30505      4490.13      48.6294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.575151, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040559, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.61774, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.91529e-09  9.23977e-44  1.57765e-45
      low eigenvalue method done, cpu time[sec] = 0.621531, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.24e-44  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-45  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -8.12887e-40 -1.08725e-39 -4.81451e-41 -6.21456e-40 -1.41352e-41  3.52577e-42 -1.25535e-45  1.05523e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 27.4965, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029218, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8435, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10417.7      2605.78      788.139      903.975      109.991      10168.3      1496.71      16.2098
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.576043, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.618596, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.04296e-10  3.17681e-44  4.84174e-46
      low eigenvalue method done, cpu time[sec] = 0.622159, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-44  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-45  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.29743e-39 -8.60327e-40 -2.42221e-41 -2.67734e-40 -7.40595e-42 -3.64811e-42  2.38767e-46 -2.65162e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4913, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.99813e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029254, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.7386, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6250.63      1563.47      472.883      542.385      65.9948         6101      898.025      9.72588
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.575269, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040478, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617833, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.72679e-10  1.92965e-44  2.58368e-46
      low eigenvalue method done, cpu time[sec] = 0.621272, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.93e-44  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-45  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.17901e-39 -3.87435e-40 -1.05487e-41 -8.23944e-41  -2.6668e-42 -3.46459e-42  1.44132e-46 -5.63794e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.3911, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         2.79738e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029093, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.7679, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4464.74      1116.76      337.774      387.418      47.1391      4357.86      641.447      6.94706
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.574958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617523, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.41562e-11  1.38809e-44  1.66085e-46
      low eigenvalue method done, cpu time[sec] = 0.621088, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-44  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.9e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   3.3975e-40  2.28926e-40  4.68987e-42  1.77989e-41  6.07215e-43 -1.84596e-42 -3.84546e-47 -8.59249e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4174, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.59663e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.028696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.7343, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3472.57      868.593      262.713      301.325      36.6638      3389.44      498.903      5.40327
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.574874, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.04049, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617394, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.52976e-12  1.08471e-44  1.17674e-46
      low eigenvalue method done, cpu time[sec] = 0.620767, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-44  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.96e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -3.58017e-40 -2.23373e-40 -5.40093e-42 -4.68675e-41 -1.28563e-42  4.74766e-43  4.69649e-47  7.05122e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.5285, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.7477, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3125.32      781.733      236.442      271.192      32.9974       3050.5      449.013      4.86294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.575264, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040499, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617803, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.81483e-11  9.78025e-45  1.01474e-46
      low eigenvalue method done, cpu time[sec] = 0.621372, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.78e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.27e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.23022e-40 -9.23261e-41 -3.98543e-42 -1.97914e-41 -6.49504e-43  3.48994e-42  2.76872e-47   4.1368e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.3969, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         5.99438e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.028991, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.7623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2083.54      521.156      157.628      180.795      21.9983      2033.67      299.342      3.24196
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.5752, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.04047, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617701, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.62192e-11  6.56087e-45  5.62583e-47
      low eigenvalue method done, cpu time[sec] = 0.621278, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.56e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.21e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  6.47282e-40  1.93597e-40  5.39558e-42  5.25293e-41  1.43867e-42  5.44397e-43 -6.52111e-47  -3.1332e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4067, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         7.99251e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8142, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1562.66      390.867      118.221      135.596      16.4987      1525.25      224.506      2.43147
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.574658, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040414, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617104, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.07479e-11  4.93878e-45   3.6337e-47
      low eigenvalue method done, cpu time[sec] = 0.620292, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.94e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.17e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.69256e-40 -9.15256e-42 -4.11491e-43  9.28913e-42  1.95839e-43  6.33398e-43  3.68163e-47  5.68708e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4615, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         9.99064e+09
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.030152, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8256, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1250.13      312.693      94.5767      108.477       13.199       1220.2      179.605      1.94518
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.574616, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040469, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96052e-12  3.96076e-45  2.56239e-47
      low eigenvalue method done, cpu time[sec] = 0.620058, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.96e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.47432e-40  1.11715e-41 -2.69371e-43 -1.58538e-42 -1.18152e-44  4.30704e-43 -2.74016e-47  1.76295e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4725, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+10
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.029, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8289, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1041.77      260.578      78.8139      90.3975      10.9991      1016.83      149.671      1.62098
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.573595, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040449, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.616073, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.23966e-11  3.30649e-45  1.91383e-47
      low eigenvalue method done, cpu time[sec] = 0.619546, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.12e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   9.0555e-41  5.56912e-41  2.48073e-42  3.41323e-41  7.48048e-43  3.32448e-43  5.34082e-47   2.8691e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4742, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.39869e+10
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.028842, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8314, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            892.947      223.352      67.5548      77.4836      9.42782      871.571      128.289      1.38941
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.57433, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.040406, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.616773, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.07303e-11  2.83795e-45  1.48883e-47
      low eigenvalue method done, cpu time[sec] = 0.620316, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.84e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  -3.1123e-40 -1.12595e-40 -3.21086e-42 -2.35656e-41 -6.71163e-43  1.80661e-43  8.14352e-47 -4.24892e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.5997, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1          1.5985e+10
      global relaxation matrix dimension = 1187
      setting global matrices ... done, cpu time[sec] = 0.028969, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 20.8427, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            781.329      195.433      59.1104      67.7981      8.24934      762.625      112.253      1.21574
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.574947, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040472, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617467, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.06156e-11  2.48583e-45  1.19403e-47
      low eigenvalue method done, cpu time[sec] = 0.620742, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.49e-45  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-46  2.22e-16         1
         *Z       ---       ---  1.61e+65
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -3.24613e-40 -6.70703e-41 -2.15954e-42 -5.61237e-42 -2.56787e-43  -2.0877e-42  -7.4994e-47  9.98424e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.4868, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 390 K
      Energy reference = 43883 1/cm
      Energy step      = 65 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000175
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.012188
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.01871
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 5.04634
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 14.7612
         W1 Well: minimal relaxation eigenvalue = 0.0632832
         W1 Well: maximal relaxation eigenvalue = 1.48901
         W1 Well:       grid size = 1161
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31581 1/cm
         B1 Barrier:        grid size = 676
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -57 1/cm
         B2 Barrier:        grid size = 672
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 202 1/cm
         B3 Barrier:        grid size = 746
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4607 1/cm
         B4 Barrier:        grid size = 771
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6231 1/cm
         B5 Barrier: nonpositive number of states at -23197 1/cm => truncating
         B5 Barrier:        grid size = 1032
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23196 1/cm
         B6 Barrier:        grid size = 652
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 603
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4688 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16713 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 19.9936, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31581 -23196 4.56e+05  6.6e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -57 2.86e+16
         B2    203 7.29e+15
         B3  -4607 2.22e+15
         B4  -6231 2.54e+15
         B5 -23196 3.11e+14
         B6   1503 2.84e+16
         B7   4689 4.25e+15
         B8  16713 4.83e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.32e+28  1.26e+29  2.84e+22  7.34e+19  9.71e-10  2.11e+32  5.43e+37  5.23e+57
          R  1.88e-29         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  7.91e-30     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  3.52e-23  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  1.36e-20  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  1.03e+09  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  4.74e-33  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6  1.84e-38   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  1.91e-58  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.58e+25  3.75e+25  8.44e+18  2.18e+16  2.88e-13  6.26e+28  1.61e+34  1.55e+54
          R  6.33e-26         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  2.66e-26     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.19e-19  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  4.58e-17  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  3.47e+12  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5   1.6e-29  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6   6.2e-35   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  6.44e-55  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
   MasterEquation::set:  done, cpu time[sec] = 19.9998, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+08
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.939495, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6918, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            33088.1         8440      2575.48      2944.59      359.827      32818.9      4915.31      55.9167
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579378, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -8.11469e-10  1.04307e-42  3.58216e-44
      low eigenvalue method done, cpu time[sec] = 0.583127, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-42 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.6e-44 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -9.85374e-39 -4.16308e-39 -8.51738e-41  1.19971e-39  1.84041e-41 -1.37512e-41 -1.80797e-44 -2.14267e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 26.2221, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027425, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6492, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11029.4      2813.33      858.494      981.532      119.942      10939.6      1638.44      18.6389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539517, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.037999, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579481, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -6.25425e-10  3.70167e-43  1.12658e-44
      low eigenvalue method done, cpu time[sec] = 0.58334, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-43 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-44 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -6.84891e-39 -2.65877e-39 -3.72712e-41  3.18481e-40  4.19774e-42  1.27715e-42 -1.51394e-46  3.37559e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2397, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1           1.963e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6722, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6617.63         1688      515.097      588.919      71.9655      6563.77      983.062      11.1833
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539285, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579273, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.35428e-10  2.27665e-43  6.08353e-45
      low eigenvalue method done, cpu time[sec] = 0.582785, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.28e-43 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-44 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16   3.5351e-39  -3.5749e-40 -2.14649e-41 -4.34395e-40  -8.1188e-42  1.53172e-41  1.84034e-45   9.9725e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2673, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          2.7482e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027319, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6736, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4726.88      1205.71      367.926      420.656      51.4039      4688.41      702.187       7.9881
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539218, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.037986, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579181, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.75498e-11  1.64947e-43  3.94173e-45
      low eigenvalue method done, cpu time[sec] = 0.5828, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.65e-43 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-44 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  1.83869e-39  5.58821e-40   1.4385e-41  1.38988e-40  3.16482e-42 -7.86034e-42 -4.45262e-49 -3.82636e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2733, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          3.5334e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6222, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3676.46      937.778      286.165      327.177      39.9808      3646.54      546.146      6.21297
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.53915, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579255, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.22593e-10  1.29514e-43  2.80938e-45
      low eigenvalue method done, cpu time[sec] = 0.582889, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-43 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.2e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -2.75991e-39 -8.40141e-40 -3.16816e-41 -3.22147e-40 -8.08835e-42  6.12242e-43  4.29874e-46 -1.12088e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2202, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027367, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6274, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3308.81          844      257.548      294.459      35.9827      3281.89      491.531      5.59167
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538753, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.038132, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.578829, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.42539e-11  1.16992e-43  2.42862e-45
      low eigenvalue method done, cpu time[sec] = 0.582248, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-43 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.4e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16   3.4837e-39   1.2453e-39  4.50582e-41  6.00309e-40   1.4723e-41 -1.45962e-43 -1.29105e-45 -1.66956e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2244, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         5.88901e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027426, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.6591, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2205.88      562.667      171.699      196.306      23.9885      2187.92      327.687      3.72778
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038128, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579353, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.36095e-11  7.89814e-44  1.35925e-45
      low eigenvalue method done, cpu time[sec] = 0.583141, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.9e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     5e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  6.18863e-39  1.26431e-39  3.77765e-41  2.22983e-40  7.23038e-42   1.3306e-41 -2.04308e-45  7.73229e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2592, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         7.85201e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027317, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.7233, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1654.41          422      128.774       147.23      17.9914      1640.94      245.766      2.79584
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.53899, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.038091, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579034, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.20568e-11   5.9679e-44  8.83722e-46
      low eigenvalue method done, cpu time[sec] = 0.582522, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.97e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.78e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16   9.6508e-40  1.15725e-40  6.80441e-42  2.39774e-41  9.64829e-43  2.36071e-42 -7.67258e-46  3.79013e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.3247, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         9.81501e+09
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.7229, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1323.53        337.6      103.019      117.784      14.3931      1312.75      196.612      2.23667
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038142, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579071, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.54082e-11  4.79823e-44  6.26287e-46
      low eigenvalue method done, cpu time[sec] = 0.582637, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.04e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  -1.8092e-40   1.9509e-40 -2.03459e-42 -2.76762e-41 -4.57365e-44 -1.83985e-41 -4.41722e-46 -6.86633e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.3209, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+10
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027268, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.7466, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1102.94      281.333      85.8494      98.1532      11.9942      1093.96      163.844      1.86389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038102, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.578877, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.62141e-12  4.01298e-44  4.69628e-46
      low eigenvalue method done, cpu time[sec] = 0.582466, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.01e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  1.16986e-39 -3.16187e-41  1.73662e-43 -3.69097e-41 -5.76358e-43  4.04306e-42 -5.35636e-46 -2.13079e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.3427, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.3741e+10
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.7263, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            945.375      241.143      73.5852      84.1313      10.2808      937.682      140.437      1.59762
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538653, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.038151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.578787, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.87759e-12  3.44914e-44   3.6654e-46
      low eigenvalue method done, cpu time[sec] = 0.58245, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.45e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -2.74489e-39 -5.84236e-40 -2.08654e-41 -1.47902e-40 -4.13308e-42 -1.81405e-41 -5.30887e-46  4.01783e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.3215, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.5704e+10
      global relaxation matrix dimension = 1161
      setting global matrices ... done, cpu time[sec] = 0.027336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 19.7284, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            827.203          211      64.3871      73.6149      8.99569      820.471      122.883      1.39792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.038125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579058, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.93557e-11  3.02453e-44  2.94777e-46
      low eigenvalue method done, cpu time[sec] = 0.582649, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.02e-44 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-45 -4.44e-16         1
         *Z       ---       ---  1.56e+64
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  9.51977e-40  3.92679e-40  4.35661e-42 -3.42372e-41  6.55688e-45 -4.53267e-42  9.39854e-46  8.20094e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.3275, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 400 K
      Energy reference = 44578 1/cm
      Energy step      = 67 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000194
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.011782
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.017933
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.940581
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 13.8252
         W1 Well: minimal relaxation eigenvalue = 0.0625072
         W1 Well: maximal relaxation eigenvalue = 1.87949
         W1 Well:       grid size = 1137
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31601 1/cm
         B1 Barrier:        grid size = 666
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 663
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier: nonpositive number of states at -4600 1/cm => truncating
         B3 Barrier:        grid size = 734
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4599 1/cm
         B4 Barrier:        grid size = 758
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6207 1/cm
         B5 Barrier: nonpositive number of states at -23159 1/cm => truncating
         B5 Barrier:        grid size = 1011
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23158 1/cm
         B6 Barrier:        grid size = 643
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1497 1/cm
         B7 Barrier:        grid size = 595
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4712 1/cm
         B8 Barrier:        grid size = 415
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16772 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 14.9497, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31601 -23158 4.68e+05 7.27e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 3.27e+16
         B2    157  8.5e+15
         B3  -4599 2.62e+15
         B4  -6207 2.98e+15
         B5 -23158 3.66e+14
         B6   1498  3.3e+16
         B7   4713 5.02e+15
         B8  16773 5.99e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.65e+27  6.16e+27  2.17e+21  6.53e+18  4.64e-10  9.26e+30   1.8e+36  5.74e+55
          R  3.78e-28         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  1.62e-28     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2   4.6e-22  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  1.53e-19  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  2.15e+09   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  1.08e-31  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6  5.57e-37  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  1.74e-56  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.13e+23  1.89e+24  6.67e+17  2.01e+15  1.43e-13  2.85e+27  5.52e+32  1.76e+52
          R  1.23e-24         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  5.28e-25     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2   1.5e-18  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  4.99e-16  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  7.01e+12   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  3.51e-28  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6  1.81e-33  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  5.68e-53  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
   MasterEquation::set:  done, cpu time[sec] = 14.9555, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+08
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.902786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8099, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34965.3       9092.3      2800.04       3191.4      391.625      35230.3      5368.72      64.0322
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507909, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035652, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.545448, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.45214e-09  1.28069e-41  6.96639e-43
      low eigenvalue method done, cpu time[sec] = 0.547255, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.28e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.01e-43  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.83519e-38 -1.79758e-38  -1.3771e-39 -1.46638e-38 -3.63048e-40  2.99207e-41 -3.57311e-44   1.2677e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 25.2659, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026456, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.7593, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11655.1      3030.77      933.348       1063.8      130.542      11743.4      1789.57      21.3441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507812, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035669, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.545385, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.49945e-10  4.71509e-42  2.24328e-43
      low eigenvalue method done, cpu time[sec] = 0.547322, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.72e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.95e-43  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.61344e-38  2.42472e-39 -3.74669e-41 -1.47032e-39 -1.74419e-41  9.00482e-41  1.05222e-44 -1.92925e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3143, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.92949e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026349, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.7726, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6993.05      1818.46      560.009       638.28      78.3249      7046.05      1073.74      12.8064
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507423, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035651, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544974, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.30272e-10  2.94141e-42  1.22543e-43
      low eigenvalue method done, cpu time[sec] = 0.546779, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.94e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-43  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  8.48334e-39  3.36072e-39  1.39256e-40  1.37819e-39  3.48988e-41  5.28884e-41 -1.00632e-44 -1.82854e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3313, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         2.70128e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026184, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.796, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4995.04       1298.9      400.006      455.914      55.9464      5032.89      766.959      9.14745
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035635, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544829, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.67155e-10  2.14848e-42  8.00156e-44
      low eigenvalue method done, cpu time[sec] = 0.546875, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.15e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-43  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -4.52537e-38 -1.21601e-38 -3.72829e-40 -3.07352e-39 -8.75493e-41 -7.19607e-41  3.06038e-45 -4.62514e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3529, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.47308e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026262, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8191, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3885.03      1010.26      311.116        354.6      43.5138      3914.47      596.524      7.11468
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507092, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.03574, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544728, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.15142e-10  1.69611e-42  5.73609e-44
      low eigenvalue method done, cpu time[sec] = 0.546571, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-43  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.36766e-39  3.23924e-39  9.14491e-41  1.48391e-39  3.22575e-41 -6.10656e-41  1.00401e-44  6.25696e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.375, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026167, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8436, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3496.53       909.23      280.004       319.14      39.1625      3523.03      536.872      6.40322
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.506776, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.19929e-11  1.53535e-42  4.97073e-44
      low eigenvalue method done, cpu time[sec] = 0.546295, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.6e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   1.5913e-38  7.19804e-39  1.81336e-40  1.46756e-39  4.05477e-41 -2.21448e-42 -2.28833e-45 -2.36954e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3998, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         5.78846e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026015, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8031, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2331.02      606.154       186.67       212.76      26.1083      2348.68      357.914      4.26881
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.506907, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035753, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544536, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.12518e-11    1.044e-42    2.808e-44
      low eigenvalue method done, cpu time[sec] = 0.546293, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.53e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.40474e-38  5.61629e-39  1.30498e-40  7.24975e-40  2.28883e-41  2.64856e-41  2.81622e-45 -1.30719e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3598, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         7.71795e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026114, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8097, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1748.26      454.615      140.002       159.57      19.5812      1761.51      268.436      3.20161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.506631, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035832, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544365, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -9.87597e-11  7.92246e-43  1.83752e-44
      low eigenvalue method done, cpu time[sec] = 0.546051, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.92e-43  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.95e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  8.22272e-40  1.30277e-39  4.81579e-41   7.0919e-40   1.4336e-41 -9.35344e-42 -2.69758e-45   9.6445e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3656, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         9.64744e+09
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026197, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8081, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1398.61      363.692      112.002      127.656       15.665      1409.21      214.749      2.56129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507031, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544509, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.07426e-10  6.38815e-43  1.30868e-44
      low eigenvalue method done, cpu time[sec] = 0.54633, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.39e-43  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.99e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -8.19055e-40  2.10353e-40 -2.46434e-42 -6.53269e-41 -8.23839e-43  -1.3893e-41 -4.41315e-45   6.1816e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.3643, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+10
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8697, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1165.51      303.077      93.3348       106.38      13.0542      1174.34      178.957      2.13441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.507006, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035759, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.544647, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.24758e-11  5.35394e-43   9.8521e-45
      low eigenvalue method done, cpu time[sec] = 0.546288, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.35e-43  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.35e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.87768e-40  6.92502e-40  1.64184e-42 -2.31566e-40  -5.2912e-42 -1.51751e-41  2.28901e-46 -1.17052e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.4237, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.35064e+10
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026016, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.8772, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            999.008       259.78      80.0013      91.1828      11.1893      1006.58      153.392      1.82949
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.506993, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035793, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.54467, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.33734e-11  4.60907e-43  7.71462e-45
      low eigenvalue method done, cpu time[sec] = 0.546351, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.61e-43  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.88e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -4.87379e-39 -1.75456e-39 -5.03799e-41 -2.69498e-40 -8.97478e-42  3.75551e-42 -3.32368e-45  2.34185e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.4306, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.54359e+10
      global relaxation matrix dimension = 1137
      setting global matrices ... done, cpu time[sec] = 0.026215, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.9068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            874.132      227.308      70.0011       79.785      9.79061      880.757      134.218       1.6008
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.506865, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035758, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.54452, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87593e-12  4.04678e-43  6.22144e-45
      low eigenvalue method done, cpu time[sec] = 0.546388, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.05e-43  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-44  2.22e-16         1
         *Z       ---       ---   1.7e+63
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  -1.1032e-39 -5.10429e-40 -9.87883e-42 -4.16475e-41 -1.09802e-42  1.60947e-41  7.02997e-45  4.63064e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.464, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 410 K
      Energy reference = 45273 1/cm
      Energy step      = 68 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000164
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.011679
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.01782
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.00599
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 13.7799
         W1 Well: minimal relaxation eigenvalue = 0.0617128
         W1 Well: maximal relaxation eigenvalue = 1.4123
         W1 Well:       grid size = 1130
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31567 1/cm
         B1 Barrier:        grid size = 666
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -14 1/cm
         B2 Barrier:        grid size = 663
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier:        grid size = 734
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4638 1/cm
         B4 Barrier:        grid size = 757
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23135 1/cm => truncating
         B5 Barrier:        grid size = 1006
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23134 1/cm
         B6 Barrier:        grid size = 644
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1480 1/cm
         B7 Barrier:        grid size = 597
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4676 1/cm
         B8 Barrier:        grid size = 420
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16712 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 14.9672, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31567 -23134 4.77e+05    8e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -14 3.73e+16
         B2    189  9.9e+15
         B3  -4638 3.08e+15
         B4  -6202  3.5e+15
         B5 -23134 4.31e+14
         B6   1481 3.82e+16
         B7   4677 5.92e+15
         B8  16713 7.39e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.56e+26  3.56e+26  1.92e+20  6.67e+17  2.35e-10  4.84e+29  7.17e+34  8.02e+53
          R  6.43e-27         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  2.81e-27     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2   5.2e-21  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3   1.5e-18  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  4.25e+09  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  2.06e-30  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6   1.4e-35  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  1.25e-54  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.82e+22   1.1e+23  5.96e+16  2.07e+14  7.29e-14   1.5e+26  2.22e+31  2.49e+50
          R  2.07e-23         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  9.06e-24     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.68e-17  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.83e-15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.37e+13  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  6.66e-27  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6   4.5e-32  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  4.02e-51  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
   MasterEquation::set:  done, cpu time[sec] = 14.9734, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+08
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.896925, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5135, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36882.8      9774.48      3038.61      3452.83      425.441        37739      5850.48      73.0428
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.499579, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035533, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.537011, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.64774e-10  1.59366e-40  1.16155e-41
      low eigenvalue method done, cpu time[sec] = 0.539632, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.83e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.50343e-37  -1.3823e-37 -3.99548e-39  -4.9777e-38  -1.1557e-39  5.48485e-42 -8.19051e-43 -3.63458e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.954, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025872, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.4758, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12294.3      3258.16      1012.87      1150.94      141.814      12579.7      1950.16      24.3476
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.498381, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035477, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535704, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.56272e-12  6.07146e-41  3.82585e-42
      low eigenvalue method done, cpu time[sec] = 0.538425, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.07e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.75e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.66734e-38  3.76526e-38  1.27591e-39  6.31101e-39  1.66023e-40  8.99639e-41  5.33819e-44  3.20093e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0225, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.89747e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.02606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.4839, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7376.56       1954.9      607.722      690.566      85.0881       7547.8       1170.1      14.6086
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.498335, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035496, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535715, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.71229e-10  3.83728e-41  2.11335e-42
      low eigenvalue method done, cpu time[sec] = 0.538513, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.84e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  6.32715e-38  1.88911e-38  6.02675e-40  3.36028e-39  1.21826e-40 -8.19034e-41  2.52975e-44  -4.0673e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0267, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         2.65645e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025666, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.4764, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5268.97      1396.35      434.087      493.262      60.7772      5391.28      835.782      10.4347
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.498528, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035477, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535897, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.10444e-11  2.82381e-41   1.3903e-42
      low eigenvalue method done, cpu time[sec] = 0.538858, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.82e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.74e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -3.31968e-38 -3.03457e-39 -4.48923e-40 -5.85461e-39 -1.54082e-40 -3.22763e-40 -3.42394e-44   2.4372e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0237, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.41544e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025903, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5149, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4098.09      1086.05      337.623      383.648      47.2712      4193.22      650.053      8.11587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.497813, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035433, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535127, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.05103e-10  2.24034e-41   1.0023e-42
      low eigenvalue method done, cpu time[sec] = 0.537974, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.95298e-38  2.96744e-38  9.40392e-40  7.62128e-39  2.11229e-40  1.50999e-40 -4.65834e-45  2.10352e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0572, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025885, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.4845, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3688.28      977.448      303.861      345.283      42.5441       3773.9      585.048      7.30428
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.49829, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035383, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535545, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.11756e-10  2.03193e-41  8.70626e-43
      low eigenvalue method done, cpu time[sec] = 0.538283, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-42  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  9.11205e-39 -2.09819e-39 -2.53786e-40 -4.53899e-39 -1.06107e-40   6.3094e-41 -1.54765e-44   1.4639e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0277, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1          5.6924e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.3173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2458.85      651.632      202.574      230.189      28.3627      2515.93      390.032      4.86952
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.498193, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035385, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.53546, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -7.89898e-11  1.39087e-41  4.96315e-43
      low eigenvalue method done, cpu time[sec] = 0.538236, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.58e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -6.56644e-39 -1.75255e-39  1.16356e-40  2.67855e-39   5.4556e-41 -6.62413e-42 -4.58553e-45  1.34858e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.8603, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         7.58986e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025911, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5359, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1844.14      488.724      151.931      172.642       21.272      1886.95      292.524      3.65214
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.497982, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035409, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535281, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14115e-11  1.05968e-41  3.26859e-43
      low eigenvalue method done, cpu time[sec] = 0.53813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.54e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -5.95066e-38 -1.74483e-38 -5.43249e-40 -5.98283e-39 -1.51885e-40 -1.43853e-40  8.51533e-45  5.95304e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0798, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         9.48733e+09
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5396, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1475.31      390.979      121.544      138.113      17.0176      1509.56      234.019      2.92171
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.498055, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535361, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.60309e-11   8.5676e-42  2.33924e-43
      low eigenvalue method done, cpu time[sec] = 0.538134, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.57e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.29e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  4.12944e-38  5.78486e-39  2.03854e-40  1.54568e-39  5.10417e-41  2.35611e-40  3.96514e-44 -1.21279e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.0796, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+10
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5647, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1229.43      325.816      101.287      115.094      14.1814      1257.97      195.016      2.43476
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.49792, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035467, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535219, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.60018e-12  7.19467e-42  1.76793e-43
      low eigenvalue method done, cpu time[sec] = 0.537918, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.19e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.48705e-38  6.83276e-39  1.33527e-40 -1.61775e-40  5.36484e-42  1.15898e-41  -8.6703e-45 -3.34926e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.1124, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.32823e+10
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025843, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5717, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1053.79      279.271      86.8175      98.6523      12.1554      1078.26      167.156      2.08694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.497857, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.035507, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535248, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -5.66981e-11  6.20304e-42  1.38886e-43
      low eigenvalue method done, cpu time[sec] = 0.538094, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.2e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.56706e-38  4.97472e-39  1.18757e-40  8.41784e-40  2.60802e-41 -1.52369e-40 -4.23363e-44 -8.67985e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.117, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.51797e+10
      global relaxation matrix dimension = 1130
      setting global matrices ... done, cpu time[sec] = 0.025726, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 18.5798, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             922.07      244.362      75.9653      86.3208       10.636      943.475      146.262      1.82607
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.497786, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.035405, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.535072, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.05156e-11  5.45282e-42  1.12314e-43
      low eigenvalue method done, cpu time[sec] = 0.537737, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.45e-42  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-43  2.22e-16         1
         *Z       ---       ---  2.09e+62
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.25584e-38  2.80792e-39  6.49419e-41  1.29767e-39    2.643e-41 -2.13335e-40  2.38843e-44  4.07841e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.1284, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 420 K
      Energy reference = 45968 1/cm
      Energy step      = 70 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000181
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.011478
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.017002
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.885551
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 12.9882
         W1 Well: minimal relaxation eigenvalue = 0.060959
         W1 Well: maximal relaxation eigenvalue = 1.59514
         W1 Well:       grid size = 1108
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31591 1/cm
         B1 Barrier:        grid size = 657
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -21 1/cm
         B2 Barrier:        grid size = 654
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier:        grid size = 723
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4641 1/cm
         B4 Barrier:        grid size = 745
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6181 1/cm
         B5 Barrier: nonpositive number of states at -23612 1/cm => truncating
         B5 Barrier:        grid size = 994
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23611 1/cm
         B6 Barrier:        grid size = 636
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1448 1/cm
         B7 Barrier:        grid size = 590
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4668 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16708 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 14.0498, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31591 -23611 3.37e+05  8.8e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -21 4.25e+16
         B2    189 1.15e+16
         B3  -4641 3.61e+15
         B4  -6181 4.09e+15
         B5 -23611 5.05e+14
         B6   1449 4.42e+16
         B7   4669 6.97e+15
         B8  16709 9.09e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.03e+25  2.32e+25  1.88e+19  7.47e+16  1.21e-10  2.86e+28  3.28e+33  1.35e+52
          R  9.72e-26         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  4.32e-26     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  5.32e-20  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  1.34e-17  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  8.27e+09   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5  3.49e-29  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6  3.05e-34  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  7.41e-53  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.27e+21  7.37e+21  5.98e+15  2.38e+13  3.85e-14  9.11e+24  1.04e+30   4.3e+48
          R  3.06e-22         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  1.36e-22     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.67e-16  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  4.21e-14  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4   2.6e+13   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5   1.1e-25  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6   9.6e-31  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  2.33e-49  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
   MasterEquation::set:  done, cpu time[sec] = 14.0559, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+08
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.869357, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.733, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              38839      10486.7       3291.7      3729.39      461.352      40344.7       6359.6      83.0103
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.484745, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.033192, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.51973, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.14317e-10  1.91629e-39   1.6961e-40
      low eigenvalue method done, cpu time[sec] = 0.521201, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.92e-39  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.17e-40  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  6.31247e-37  3.40125e-37  6.61128e-39  1.15486e-37  2.46442e-39  3.16963e-40  2.62659e-43 -4.53675e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 24.1193, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.025076, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.6684, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12946.3      3495.57      1097.23      1243.13      153.784      13448.2      2119.87      27.6701
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033131, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.51786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8627e-10  7.51807e-40  5.71018e-41
      low eigenvalue method done, cpu time[sec] = 0.519256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.52e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.58e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.13953e-38  3.52278e-38   4.5584e-39  7.28948e-38  1.50009e-39 -1.02288e-39  7.93516e-43 -6.19857e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.1903, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.86683e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.025134, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.657, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7767.8      2097.34      658.339      745.877      92.2704      8068.93      1271.92      16.6021
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482996, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033188, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.518008, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.37111e-10  4.80496e-40  3.18864e-41
      low eigenvalue method done, cpu time[sec] = 0.519402, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.93e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.49473e-37  4.73413e-38   1.7672e-39  3.16583e-38  6.63148e-40 -3.12632e-39  3.91547e-43 -2.02599e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.1715, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         2.61356e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.02478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.7051, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5548.43       1498.1      470.242      532.769      65.9074      5763.52      908.515      11.8586
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482408, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.033165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517378, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.97301e-10  3.55864e-40  2.11312e-41
      low eigenvalue method done, cpu time[sec] = 0.518757, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.56e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.17e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.68209e-37  6.92632e-38  1.96171e-39  1.49508e-38  4.17593e-40  1.49351e-39  6.38906e-44 -1.70329e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.2264, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.36029e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.024875, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.7, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4315.44      1165.19      365.744      414.376      51.2613      4482.74      706.622      9.22336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.483078, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.518084, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.83601e-10  2.83549e-40  1.53184e-41
      low eigenvalue method done, cpu time[sec] = 0.519506, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.84e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.79053e-38  7.01557e-38  1.74072e-39  1.84748e-38  4.24129e-40 -1.42341e-39   9.1002e-44  2.07148e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.2222, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.025071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.7133, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3883.9      1048.67       329.17      372.939      46.1352      4034.47       635.96      8.30103
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.4832, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.518218, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.00099e-10  2.57602e-40  1.33369e-41
      low eigenvalue method done, cpu time[sec] = 0.519565, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -7.26364e-37 -2.16543e-37 -6.01101e-39 -3.55171e-38 -1.10922e-39 -1.15328e-39    4.408e-44  -6.4444e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.236, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         5.60049e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.025048, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.5957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2589.27      699.114      219.446      248.626      30.7568      2689.64      423.973      5.53402
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482654, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.033275, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517752, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34177e-10  1.77355e-40  7.67125e-42
      low eigenvalue method done, cpu time[sec] = 0.519177, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-41  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.12476e-37 -1.31476e-39 -7.66608e-41  -1.9323e-39  -6.9871e-41 -1.38802e-39 -7.93253e-44 -1.82164e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.1219, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         7.46731e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.024936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.6119, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1941.95      524.336      164.585      186.469      23.0676      2017.23       317.98      4.15051
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482729, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.51766, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.34902e-11  1.35597e-40    5.084e-42
      low eigenvalue method done, cpu time[sec] = 0.519026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.36e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.27e-42  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  5.81508e-38  6.43649e-39  2.94421e-40  5.07946e-39  1.16909e-40 -7.49837e-40  1.25723e-44  1.99835e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.136, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         9.33414e+09
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.024828, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.5691, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1553.56      419.469      131.668      149.175      18.4541      1613.79      254.384      3.32041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517884, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.73369e-10  1.09894e-40  3.65606e-42
      low eigenvalue method done, cpu time[sec] = 0.519299, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-40  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.7e-42  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -9.11616e-38 -2.65597e-38 -9.54559e-40 -7.50832e-39 -1.97129e-40 -5.00508e-40 -6.86682e-44 -1.55162e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.0897, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+10
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.024967, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.5746, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1294.63      349.557      109.723      124.313      15.3784      1344.82      211.987      2.76701
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482762, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.033124, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517675, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -8.85766e-11  9.24454e-41  2.77389e-42
      low eigenvalue method done, cpu time[sec] = 0.518985, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.24e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.64e-42  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.26762e-38 -1.10783e-38  -4.4612e-40 -5.83408e-39 -1.32666e-40  4.96471e-40 -8.54555e-44  6.48668e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.0927, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.30678e+10
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.025023, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.5737, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1109.69       299.62      94.0484      106.554      13.1815       1152.7      181.703      2.37172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.48234, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033205, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -3.73606e-12  7.98116e-41  2.18618e-42
      low eigenvalue method done, cpu time[sec] = 0.518657, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.98e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.87e-42  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.11093e-38  2.08522e-38  4.36489e-40  4.48551e-39  1.06283e-40 -8.64986e-40  8.77673e-44  8.96768e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.0964, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.49346e+10
      global relaxation matrix dimension = 1108
      setting global matrices ... done, cpu time[sec] = 0.024921, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 17.597, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            970.975      262.168      82.2924      93.2346      11.5338      1008.62       158.99      2.07526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482109, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.03321, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.517113, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.90549e-11  7.02343e-41  1.77277e-42
      low eigenvalue method done, cpu time[sec] = 0.518463, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.02e-41  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.28e-42  2.22e-16         1
         *Z       ---       ---  2.82e+61
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.05008e-38  5.23804e-40 -1.03689e-40   -2.356e-39 -6.93568e-41 -2.21438e-40 -1.27719e-43  3.61208e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.1241, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 430 K
      Energy reference = 46663 1/cm
      Energy step      = 72 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000103
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.010875
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.016346
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.922898
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 12.1761
         W1 Well: minimal relaxation eigenvalue = 0.0602701
         W1 Well: maximal relaxation eigenvalue = 1.72324
         W1 Well:       grid size = 1087
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31600 1/cm
         B1 Barrier:        grid size = 649
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -64 1/cm
         B2 Barrier:        grid size = 646
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 151 1/cm
         B3 Barrier:        grid size = 712
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4600 1/cm
         B4 Barrier:        grid size = 734
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6184 1/cm
         B5 Barrier: nonpositive number of states at -23105 1/cm => truncating
         B5 Barrier:        grid size = 969
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23104 1/cm
         B6 Barrier:        grid size = 628
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1447 1/cm
         B7 Barrier:        grid size = 583
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4687 1/cm
         B8 Barrier:        grid size = 416
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16711 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 13.2751, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31600 -23104 4.87e+05 9.67e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -64 4.84e+16
         B2    152 1.33e+16
         B3  -4600 4.22e+15
         B4  -6184 4.77e+15
         B5 -23104 5.92e+14
         B6   1448  5.1e+16
         B7   4688 8.17e+15
         B8  16712 1.11e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.64e+23  1.69e+24  2.02e+18  9.16e+15  6.35e-11  1.91e+27  1.71e+32  2.72e+50
          R  1.31e-24         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1  5.91e-25     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  4.94e-19  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  1.09e-16  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  1.57e+10   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  5.24e-28    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6  5.85e-33  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  3.67e-51   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.51e+20  5.57e+20  6.66e+14  3.02e+12  2.09e-14  6.29e+23  5.63e+28  8.97e+46
          R  3.98e-21         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1   1.8e-21     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2   1.5e-15  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.31e-13  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.78e+13   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.59e-24    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6  1.78e-29  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.12e-47   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
   MasterEquation::set:  done, cpu time[sec] = 13.2808, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+08
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.833805, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8479, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              40832      11229.2      3559.81      4021.56      499.435      43046.7      6896.52      94.0063
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.446366, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031938, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.480059, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47281e-09   2.1669e-38  2.20385e-39
      low eigenvalue method done, cpu time[sec] = 0.481411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.17e-38         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-39         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -5.90013e-37 -1.27591e-36 -3.87253e-38 -4.19846e-37 -9.40661e-39 -9.42187e-39 -3.34606e-41  4.15426e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.149, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024236, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7925, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13610.7      3743.06       1186.6      1340.52      166.478      14348.9      2298.84      31.3354
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445693, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.479349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.14294e-10  8.71889e-39  7.57868e-40
      low eigenvalue method done, cpu time[sec] = 0.480651, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.72e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.25e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -3.60799e-37 -2.61264e-37 -1.38056e-38 -2.44183e-37 -5.38419e-39  7.31094e-39 -1.23476e-42  1.28565e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2805, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.83748e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024333, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8064, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8166.39      2245.84      711.963      804.312      99.8871      8609.35       1379.3      18.8013
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445717, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.479353, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.85918e-10  5.62662e-39  4.27696e-40
      low eigenvalue method done, cpu time[sec] = 0.480832, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.63e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -9.36109e-37 -3.71469e-37 -1.16485e-38 -1.47744e-37 -3.40285e-39  3.15895e-39 -3.55569e-42  1.66221e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2841, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         2.57247e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8141, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5833.14      1604.17      508.545      574.509      71.3479      6149.53      985.218      13.4295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445567, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031898, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.479212, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.5064e-11  4.19055e-39  2.85467e-40
      low eigenvalue method done, cpu time[sec] = 0.480551, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.19e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.13351e-36 -2.96542e-37 -1.02854e-38  -9.8219e-38 -2.65959e-39  2.85092e-39 -4.55309e-43  7.22504e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.296, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.30747e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024042, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8352, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4536.88      1247.69      395.535       446.84      55.4928      4782.97       766.28      10.4451
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445315, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031931, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.479015, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.04452e-10   3.3516e-39  2.08062e-40
      low eigenvalue method done, cpu time[sec] = 0.48027, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.35e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.16539e-37  1.46891e-37  5.14513e-39  3.43906e-38  8.03017e-40  -3.4075e-39 -2.78664e-43  4.58091e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.313, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024087, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8853, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4083.2      1122.92      355.981      402.156      49.9435      4304.67      689.652      9.40063
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445224, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.03192, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.478884, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.53755e-10  3.04941e-39  1.81561e-40
      low eigenvalue method done, cpu time[sec] = 0.480105, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -1.09699e-36 -2.80892e-37 -9.98047e-39 -6.50034e-38 -1.79433e-39  3.07949e-40  8.28084e-43  -5.8246e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3638, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         5.51244e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024052, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.859, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2722.13      748.612      237.321      268.104      33.2957      2869.78      459.768      6.26709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445337, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.03189, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.47897, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07102e-10  2.11029e-39  1.05353e-40
      low eigenvalue method done, cpu time[sec] = 0.480283, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.11e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-40         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.22152e-37  1.44065e-37  1.73796e-39 -3.99814e-38 -5.41927e-40   5.8422e-39 -1.68933e-43 -1.58816e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3377, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         7.34992e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024164, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8669, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2041.6      561.459      177.991      201.078      24.9718      2152.34      344.826      4.70031
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445032, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031859, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.478639, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.90657e-10   1.6185e-39  7.02555e-41
      low eigenvalue method done, cpu time[sec] = 0.479988, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.62e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.75e-41         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0 -5.95499e-37 -1.32866e-37 -3.38577e-39   6.4767e-39 -2.24523e-40 -3.45055e-39 -2.92135e-43 -7.87535e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3447, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1          9.1874e+09
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.023986, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.891, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1633.28      449.167      142.393      160.862      19.9774      1721.87      275.861      3.76025
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445062, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.032268, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.479074, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.49502e-11  1.31455e-39  5.07641e-41
      low eigenvalue method done, cpu time[sec] = 0.480397, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.92e-41         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  -1.1697e-36 -2.71738e-37 -8.15647e-39 -5.01228e-38 -1.57046e-39 -4.32055e-39 -4.67937e-43   3.1553e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3699, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+10
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.023761, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8468, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1361.07      374.306       118.66      134.052      16.6478      1434.89      229.884      3.13354
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.444972, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031872, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.478578, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.89853e-12   1.1076e-39  3.86636e-41
      low eigenvalue method done, cpu time[sec] = 0.47986, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-39         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.68e-41         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.24933e-37   1.7078e-37  4.73504e-39  1.92166e-38  7.26169e-40  5.30072e-39 -6.79702e-44 -5.89695e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.5204, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.28624e+10
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.023866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1166.63      320.834      101.709      114.902      14.2696      1229.91      197.044      2.68589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.444942, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031849, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.478491, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.53399e-11  9.57411e-40  3.05696e-41
      low eigenvalue method done, cpu time[sec] = 0.47981, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.57e-40         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.77e-41         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30194e-37 -3.53288e-38   1.7431e-40  7.55289e-39  1.63467e-40  4.09489e-39 -2.99472e-43 -4.63432e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.317, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.46998e+10
      global relaxation matrix dimension = 1087
      setting global matrices ... done, cpu time[sec] = 0.024042, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8488, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1020.8       280.73      88.9954      100.539      12.4859      1076.17      172.413      2.35016
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.444894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.478509, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -4.76789e-11  8.43358e-40  2.48569e-41
      low eigenvalue method done, cpu time[sec] = 0.479781, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.43e-40         0         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-41         0         1
         *Z       ---       ---  4.16e+60
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.65853e-38  4.84439e-38  1.21324e-39  1.39022e-38   3.5676e-40 -1.34166e-39 -8.98786e-43  6.90186e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3286, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 440 K
      Energy reference = 47358 1/cm
      Energy step      = 73 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00017
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.010957
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.016258
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.914712
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 12.2202
         W1 Well: minimal relaxation eigenvalue = 0.059563
         W1 Well: maximal relaxation eigenvalue = 3.4418
         W1 Well:       grid size = 1082
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31627 1/cm
         B1 Barrier:        grid size = 649
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -18 1/cm
         B2 Barrier:        grid size = 646
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 200 1/cm
         B3 Barrier:        grid size = 712
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4617 1/cm
         B4 Barrier:        grid size = 734
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6223 1/cm
         B5 Barrier: nonpositive number of states at -23233 1/cm => truncating
         B5 Barrier:        grid size = 967
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23232 1/cm
         B6 Barrier:        grid size = 629
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1441 1/cm
         B7 Barrier:        grid size = 585
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4653 1/cm
         B8 Barrier:        grid size = 419
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16771 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 13.3088, elapsed time[sec] = 1
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31627 -23232 4.44e+05 1.06e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -18 5.49e+16
         B2    201 1.54e+16
         B3  -4617 4.92e+15
         B4  -6223 5.55e+15
         B5 -23232 6.92e+14
         B6   1442 5.87e+16
         B7   4654 9.56e+15
         B8  16772 1.36e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   6.5e+22  1.42e+23  2.46e+17  1.26e+15   3.5e-11  1.47e+26  1.04e+31  6.68e+48
          R  1.54e-23         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  7.05e-24     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  4.07e-18  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  7.94e-16  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  2.86e+10  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  6.82e-27  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6  9.61e-32  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7   1.5e-49  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.17e+19  4.73e+19   8.2e+13   4.2e+11  1.17e-14   4.9e+22  3.47e+27  2.23e+45
          R  4.61e-20         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  2.11e-20     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.22e-14  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.38e-12  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  8.57e+13  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  2.04e-23  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6  2.88e-28  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.48e-46  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
   MasterEquation::set:  done, cpu time[sec] = 13.3145, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+08
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.828368, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            42859.9        12002      3843.49      4329.85      539.768      45844.5      7461.67      106.097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.44208, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.475088, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.618e-09  2.24009e-37  2.53168e-38
      low eigenvalue method done, cpu time[sec] = 0.476459, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-37 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-38 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  4.06238e-35  1.35109e-35  3.09691e-37  1.67284e-36  5.43519e-38  1.63035e-38 -1.41682e-40  1.14292e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 23.0923, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023869, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7382, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14286.6      4000.66      1281.16      1443.28      179.923      15281.5      2487.22      35.3656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.441009, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.47398, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -6.4469e-10  9.21731e-38   8.8846e-39
      low eigenvalue method done, cpu time[sec] = 0.475306, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.22e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.49e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  5.64507e-36   4.7922e-37   2.0563e-38  1.62791e-37  5.65036e-39  1.68133e-38 -2.18157e-41 -3.21123e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2123, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.80933e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023653, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7507, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8571.98       2400.4      768.697       865.97      107.954      9168.91      1492.33      21.2194
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473912, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.31231e-10  5.99988e-38  5.06527e-39
      low eigenvalue method done, cpu time[sec] = 0.475175, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     6e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  4.50592e-36 -2.36803e-38  -1.7044e-39 -1.84691e-37 -3.51393e-39  2.07558e-38 -5.37955e-42  -1.3353e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2259, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         2.53307e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.02378, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7738, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6122.84      1714.57      549.069       618.55      77.1097      6549.22      1065.95      15.1567
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440715, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031197, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473621, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    4.521e-10  4.49108e-38   3.4043e-39
      low eigenvalue method done, cpu time[sec] = 0.474907, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.49e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  4.11189e-36 -2.26189e-37  1.21063e-38 -3.60699e-38  3.79184e-40  2.59613e-38  -4.5847e-42  5.70933e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2475, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          3.2568e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.02376, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7753, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4762.21      1333.55      427.054      481.095      59.9742      5093.84      829.074      11.7885
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.44029, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.03122, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473246, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  -1.8165e-11  3.60425e-38  2.49426e-39
      low eigenvalue method done, cpu time[sec] = 0.474558, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.6e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.15e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  3.54966e-36  5.02981e-37  2.19733e-38   1.2306e-37   3.6502e-39   2.9497e-38  1.08778e-42  2.39217e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.248, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.751, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4285.99       1200.2      384.349      432.985      53.9768      4584.45      746.167      10.6097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440645, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.47359, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.33472e-10   3.2837e-38  2.18139e-39
      low eigenvalue method done, cpu time[sec] = 0.474892, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.28e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -3.17101e-37 -1.06381e-37 -3.39169e-39  3.56649e-38  9.16762e-40 -1.09019e-38 -6.78475e-43 -2.36254e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2274, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1           5.428e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.02388, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7977, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2857.33      800.132      256.232      288.657      35.9845       3056.3      497.444      7.07312
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440564, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031197, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473497, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -2.22854e-10  2.28316e-38  1.27667e-39
      low eigenvalue method done, cpu time[sec] = 0.474873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.28e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.29955e-36 -4.11592e-37 -1.04604e-38 -6.31417e-38 -1.92142e-39 -1.34589e-38  1.09507e-43  7.53648e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.4163, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         7.23734e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023651, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.7929, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2143      600.099      192.174      216.493      26.9884      2292.23      373.083      5.30484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031182, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473423, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.97211e-11  1.75618e-38  8.56545e-40
      low eigenvalue method done, cpu time[sec] = 0.474682, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.76e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-39 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  3.28774e-36  1.11078e-36  2.75865e-38  9.94625e-38    3.913e-39  9.30871e-39  4.28872e-43 -2.60203e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2673, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         9.04667e+09
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023584, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8022, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1714.4      480.079      153.739      173.194      21.5907      1833.78      298.467      4.24387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440727, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031186, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.47365, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -1.77982e-11  1.42924e-38  6.21812e-40
      low eigenvalue method done, cpu time[sec] = 0.474936, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.51e-40 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  2.08857e-36  6.25977e-37  1.80225e-38  1.22399e-37  3.67073e-39  4.44426e-39 -1.22459e-42  2.41824e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2769, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+10
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023756, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1428.66      400.066      128.116      144.328      17.9923      1528.15      248.722      3.53656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440088, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.031192, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473004, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.57184e-11  1.20604e-38  4.75388e-40
      low eigenvalue method done, cpu time[sec] = 0.474399, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.18e-40 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.12687e-36 -4.37594e-37 -1.58268e-38 -1.81229e-37  -4.4215e-39  1.21452e-39 -5.55487e-43  1.06874e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.28, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.26653e+10
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023814, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.81, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1224.57      342.914      109.814       123.71      15.4219      1309.84       213.19      3.03134
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031176, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473271, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.83651e-11  1.04372e-38  3.77059e-40
      low eigenvalue method done, cpu time[sec] = 0.474581, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-38 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-40 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16  -1.0919e-36  -4.6685e-37 -1.40719e-38  -1.2158e-37 -3.16997e-39  1.28894e-38 -9.06614e-43 -8.23203e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.2792, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.44747e+10
      global relaxation matrix dimension = 1082
      setting global matrices ... done, cpu time[sec] = 0.023631, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 16.8939, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1071.5       300.05      96.0872      108.246      13.4942      1146.11      186.542      2.65242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.440248, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.031156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473117, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30629e-11  9.20251e-39  3.07427e-40
      low eigenvalue method done, cpu time[sec] = 0.474394, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.2e-39 -4.44e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.48e-40 -4.44e-16         1
         *Z       ---       ---  6.76e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = -4.44089e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1 -4.44089e-16 -1.89367e-36 -2.33959e-37 -7.99289e-39 -2.67268e-38 -1.28772e-39 -2.31506e-38  6.95304e-43  3.72504e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.3673, elapsed time[sec] = 2
   MasterEquation::set:  starts
      Temperature      = 450 K
      Energy reference = 48053 1/cm
      Energy step      = 75 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.000182
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.010529
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.01565
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.856362
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 11.6359
         W1 Well: minimal relaxation eigenvalue = 0.0588682
         W1 Well: maximal relaxation eigenvalue = 1.64563
         W1 Well:       grid size = 1062
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -31597 1/cm
         B1 Barrier:        grid size = 641
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -22 1/cm
         B2 Barrier:        grid size = 638
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 202 1/cm
         B3 Barrier:        grid size = 703
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4672 1/cm
         B4 Barrier:        grid size = 724
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6247 1/cm
         B5 Barrier: nonpositive number of states at -23197 1/cm => truncating
         B5 Barrier:        grid size = 950
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23197 1/cm
         B6 Barrier:        grid size = 621
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1477 1/cm
         B7 Barrier:        grid size = 578
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4702 1/cm
         B8 Barrier:        grid size = 418
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 12.6649, elapsed time[sec] = 0
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -31597 -23197 4.56e+05 1.16e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -22 6.22e+16
         B2    203 1.77e+16
         B3  -4672 5.74e+15
         B4  -6247 6.45e+15
         B5 -23197 8.07e+14
         B6   1478 6.75e+16
         B7   4703 1.12e+16
         B8  16703 1.65e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.13e+21  1.32e+22  3.26e+16  1.88e+14  1.97e-11  1.25e+25  7.12e+29  1.92e+47
          R  1.63e-22         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  7.58e-23     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  3.07e-17  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  5.32e-15  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  5.09e+10  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  7.97e-26  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6   1.4e-30  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7   5.2e-48  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.09e+18  4.49e+18  1.11e+13  6.39e+10  6.69e-15  4.27e+21  2.42e+26  6.54e+43
          R  4.79e-19         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.23e-19     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  9.03e-14  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.56e-11  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4   1.5e+14  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.34e-22  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6  4.13e-27  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  1.53e-44  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
   MasterEquation::set:  done, cpu time[sec] = 12.671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+08
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.801883, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 15.9043, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              44921      12805.2      4143.23      4654.76      582.427      48737.3      8055.41      119.356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.419779, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.029967, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.45141, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27711e-09  2.10106e-36  2.58606e-37
      low eigenvalue method done, cpu time[sec] = 0.452633, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.1e-36  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-37  2.22e-16         1
         *Z       ---       ---  1.19e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -2.04294e-35 -6.15089e-36  3.38358e-37  7.10588e-36  1.64591e-37  3.20089e-38  5.81771e-40 -1.02646e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 22.1391, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+09
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.023037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 15.8789, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14973.7       4268.4      1381.08      1551.59      194.142      16245.8      2685.14      39.7854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.41857, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.030059, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.450325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.41426e-10  8.82369e-37  9.25646e-38
      low eigenvalue method done, cpu time[sec] = 0.451558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.82e-37  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.19e-38  2.22e-16         1
         *Z       ---       ---  1.19e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   9.0542e-36 -1.14034e-36  3.72587e-38  1.09998e-36  1.98675e-38  3.36934e-38 -2.01367e-40 -1.09625e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 21.323, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.78231e+09
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.022687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 15.8796, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8984.2      2561.04      828.647      930.952      116.485      9747.45      1611.08      23.8713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.41879, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.03001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.45049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.27272e-10  5.78958e-37     5.33e-38
      low eigenvalue method done, cpu time[sec] = 0.451832, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.79e-37  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.41e-38  2.22e-16         1
         *Z       ---       ---  1.19e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  1.18975e-35  1.55127e-36  6.46498e-38  2.97976e-37  8.85433e-39  1.27492e-37 -3.85188e-41  1.03677e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 21.3225, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         2.49523e+09
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.022866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 15.8915, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6417.28      1829.31       591.89      664.966      83.2038      6962.47      1150.77      17.0509
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.418253, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.029958, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.44992, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0 -6.00491e-10  4.35397e-37  3.60654e-38
      low eigenvalue method done, cpu time[sec] = 0.451123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.35e-37  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.56e-38  2.22e-16         1
         *Z       ---       ---  1.19e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.17209e-36  2.00358e-36  5.65728e-38  8.26569e-37  1.85703e-38 -6.00021e-38 -1.66997e-41 -1.00254e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 21.3335, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.20816e+09
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.02276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 15.8911, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4991.22       1422.8      460.359      517.196      64.7141      5415.25      895.046      13.2618
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.418001, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.030002, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.449699, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.44918e-11   3.5054e-37  2.65607e-38
      low eigenvalue method done, cpu time[sec] = 0.450875, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.51e-37  2.22e-16         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-38  2.22e-16         1
         *Z       ---       ---  1.19e+59
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22045e-16
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16 -1.17003e-35 -4.71721e-36 -1.33287e-37  -1.2802e-36 -3.34334e-38 -2.24132e-38 -1.24451e-41  -1.4519e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 21.3338, elapsed time[sec] = 2
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+09
      global relaxation matrix dimension = 1062
      setting global matrices ... done, cpu time[sec] = 0.022671, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ...