Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000491, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 0.001572, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 0.000557, elapsed time[sec] = 0
         Model::HinderedRotor::_init: WARNING: potential second derivative at the minimum is negative, assuming zero
         effective rotational constant[1/cm]  = 27.3382
         analytic  frequency at minimum[1/cm] = 0
         numerical frequency at minimum[1/cm] = 0
         minimum energy[kcal/mol]             = 0
         maximum energy[kcal/mol]             = 0
         maximum frequency[1/cm]              = 0
         ground energy [kcal/mol]             = 0
         highest energy level [kcal/mol]      = 19462.6
         number of levels                     = 999
         10 lowest excited states [kcal/mol] relative to the ground: 0.0782 0.0782 0.313 0.313 0.703 0.703 1.25 1.25 1.95
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum             PG             PI  ***
           100        2.82615        2.82615        2.82615
           200        3.99678        3.99678        3.99678
           300        4.89503        4.89503        4.89503
           400         5.6523         5.6523         5.6523
           500        6.31946        6.31946        6.31946
           600        6.92262        6.92262        6.92262
           700        7.47729        7.47729        7.47729
           800        7.99355        7.99355        7.99355
           900        8.47844        8.47844        8.47844
          1000        8.93707        8.93707        8.93707
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 1.72192, elapsed time[sec] = 0
      ground state energy, kcal/mol:   -90.2506
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.191056, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.056811, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.000819, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.527625, elapsed time[sec] = 0
         effective power exponent at 690.248 kcal/mol = 11.4068
      interpolating states number/density done, cpu time[sec] = 2.59392, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 4.33138, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         18.6633
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002257, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00422, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007538, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.55015        9.55009        4.77506
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001577, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003506, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007281, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.021328, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         19.7111        11.2504        7.16236
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001609, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003492, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006484, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         27.4886        14.3446        9.42584
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001576, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003478, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00643, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018417, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001489, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003373, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006338, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:          9.3775        1.21307        1.07412
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002112, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00404, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007097, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.019039, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001468, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003376, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.0062, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.70353        1.21666        1.08111
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001585, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003767, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006845, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018502, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001487, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003358, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006219, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.46633        1.30142        1.14413
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001588, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003489, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00688, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018728, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         6.45642       0.996004        0.86988
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001984, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003949, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007043, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.012422, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.24335        0.93381       0.927142
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001541, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003414, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006534, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.011718, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.081369, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.051391, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000249, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000506, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -22.6613
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.01935, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.0032, elapsed time[sec] = 0
            effective power exponent at 622.659 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.061478, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.062977, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -19.4076
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001428, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000517, elapsed time[sec] = 0
            effective power exponent at 619.406 kcal/mol = 11.9694
         interpolating states number/density done, cpu time[sec] = 0.017175, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017242, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.4142
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001423, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000501, elapsed time[sec] = 0
            effective power exponent at 616.412 kcal/mol = 11.9705
         interpolating states number/density done, cpu time[sec] = 0.0171, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017168, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.678
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001419, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000482, elapsed time[sec] = 0
            effective power exponent at 613.676 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.017009, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01715, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.2049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001409, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000504, elapsed time[sec] = 0
            effective power exponent at 611.203 kcal/mol = 11.9723
         interpolating states number/density done, cpu time[sec] = 0.016899, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017028, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.00049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001395, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000493, elapsed time[sec] = 0
            effective power exponent at 608.998 kcal/mol = 11.9731
         interpolating states number/density done, cpu time[sec] = 0.016756, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016831, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.06773
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001404, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000495, elapsed time[sec] = 0
            effective power exponent at 607.066 kcal/mol = 11.9737
         interpolating states number/density done, cpu time[sec] = 0.016592, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016718, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.40945
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001395, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000464, elapsed time[sec] = 0
            effective power exponent at 605.407 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016487, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016599, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.05137
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001384, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00047, elapsed time[sec] = 0
            effective power exponent at 604.049 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016699, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016762, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.98779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001388, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000477, elapsed time[sec] = 0
            effective power exponent at 602.986 kcal/mol = 11.9739
         interpolating states number/density done, cpu time[sec] = 0.016679, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01681, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.23584
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001375, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000479, elapsed time[sec] = 0
            effective power exponent at 602.234 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.016591, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016658, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.76409
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001375, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000473, elapsed time[sec] = 0
            effective power exponent at 601.762 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.016567, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016631, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.54966
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00137, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00048, elapsed time[sec] = 0
            effective power exponent at 601.548 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016512, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016575, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.6097
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001387, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000505, elapsed time[sec] = 0
            effective power exponent at 601.608 kcal/mol = 11.9746
         interpolating states number/density done, cpu time[sec] = 0.01661, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016674, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.85844
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001383, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000484, elapsed time[sec] = 0
            effective power exponent at 601.856 kcal/mol = 11.9754
         interpolating states number/density done, cpu time[sec] = 0.016635, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016704, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.25586
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001382, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000475, elapsed time[sec] = 0
            effective power exponent at 602.254 kcal/mol = 11.9765
         interpolating states number/density done, cpu time[sec] = 0.016569, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016639, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.76478
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001371, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000473, elapsed time[sec] = 0
            effective power exponent at 602.763 kcal/mol = 11.978
         interpolating states number/density done, cpu time[sec] = 0.016562, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016627, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.34915, elapsed time[sec] = 2
      effective power exponent at 601.548 kcal/mol = 12.1579
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.7089, elapsed time[sec] = 2
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -21.8779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001391, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000482, elapsed time[sec] = 0
            effective power exponent at 621.876 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.017891, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017974, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -18.8158
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001381, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 618.814 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016628, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016697, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.0339
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001376, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000465, elapsed time[sec] = 0
            effective power exponent at 616.032 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016557, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016621, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.5322
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001364, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000493, elapsed time[sec] = 0
            effective power exponent at 613.53 kcal/mol = 11.9729
         interpolating states number/density done, cpu time[sec] = 0.016475, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01654, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.3135
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000462, elapsed time[sec] = 0
            effective power exponent at 611.311 kcal/mol = 11.9725
         interpolating states number/density done, cpu time[sec] = 0.016402, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016464, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.39794
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001363, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000466, elapsed time[sec] = 0
            effective power exponent at 609.396 kcal/mol = 11.972
         interpolating states number/density done, cpu time[sec] = 0.016595, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01666, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.79112
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001357, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000477, elapsed time[sec] = 0
            effective power exponent at 607.789 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.016358, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016425, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.49595
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00135, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000493, elapsed time[sec] = 0
            effective power exponent at 606.494 kcal/mol = 11.9706
         interpolating states number/density done, cpu time[sec] = 0.016345, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016409, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.53243
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001351, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000471, elapsed time[sec] = 0
            effective power exponent at 605.53 kcal/mol = 11.9698
         interpolating states number/density done, cpu time[sec] = 0.016414, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016478, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.86054
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001343, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00046, elapsed time[sec] = 0
            effective power exponent at 604.858 kcal/mol = 11.9691
         interpolating states number/density done, cpu time[sec] = 0.016149, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016214, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.47456
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00134, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000465, elapsed time[sec] = 0
            effective power exponent at 604.472 kcal/mol = 11.9684
         interpolating states number/density done, cpu time[sec] = 0.016085, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016148, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.40594
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001335, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000475, elapsed time[sec] = 0
            effective power exponent at 604.404 kcal/mol = 11.9683
         interpolating states number/density done, cpu time[sec] = 0.016285, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016349, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.57463
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001344, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000446, elapsed time[sec] = 0
            effective power exponent at 604.572 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.016298, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016361, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.93202
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001359, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000476, elapsed time[sec] = 0
            effective power exponent at 604.93 kcal/mol = 11.9692
         interpolating states number/density done, cpu time[sec] = 0.016154, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016218, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.43522
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001353, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000451, elapsed time[sec] = 0
            effective power exponent at 605.433 kcal/mol = 11.9702
         interpolating states number/density done, cpu time[sec] = 0.016267, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016329, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.04421
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001363, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000484, elapsed time[sec] = 0
            effective power exponent at 606.042 kcal/mol = 11.9715
         interpolating states number/density done, cpu time[sec] = 0.016511, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016581, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.4973, elapsed time[sec] = 1
      effective power exponent at 604.404 kcal/mol = 12.2165
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.78982, elapsed time[sec] = 1
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      ground state energy, kcal/mol:   -0.195851
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.001497, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000532, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 7.1829, elapsed time[sec] = 8
         effective power exponent at 669.903 kcal/mol = 13.426
      interpolating states number/density done, cpu time[sec] = 7.20189, elapsed time[sec] = 8
   Model::RRHO::RRHO:  done, cpu time[sec] = 7.20199, elapsed time[sec] = 8
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000924, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000879, elapsed time[sec] = 0
   BIMOLECULAR: P7
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.47873        5.47873        5.47873
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 6.1e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000106, elapsed time[sec] = 0
   BARRIER: B8
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.47873        5.47873        5.47873
            TST level: E
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  done, cpu time[sec] = 3.7e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 5.7e-05, elapsed time[sec] = 0
      ground state energy, kcal/mol:   47.9656
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.002969, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000338, elapsed time[sec] = 0
         effective power exponent at 552.034 kcal/mol = 10.6123
      interpolating states number/density done, cpu time[sec] = 0.015716, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.015813, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O            o          CH4           B1           B2           B3           B4           B5           B6           B7           B8
     100  1.97336e+28  1.11806e+26  1.79604e+26   1.2706e+26  1.20995e+26  3.09408e+23  9.07788e+27  3.09408e+23  8.88203e+27  3.09408e+23    4.226e+27  3.80284e+23  1.41451e+28  3.80284e+23  1.04337e+28  1.20275e+25  8.05078e+25  1.02816e+30  3.90845e+30  1.47525e+35  6.97811e+37 5.12326e+128  6.66948e+29  2.86822e+29  6.30386e+29
     200  2.23397e+29  7.62333e+26  1.46726e+27  1.01653e+27  9.67966e+26  1.75028e+24  7.26953e+28  1.75028e+24  7.11008e+28  1.75028e+24  3.38185e+28  1.07561e+24  1.21889e+29  1.07561e+24  8.41759e+28   3.4019e+25  6.44206e+26  2.65947e+31  6.23677e+31  1.08314e+30  2.15615e+30  1.52798e+59  8.88053e+30  3.66779e+30  8.00719e+30
     300  9.33712e+29   2.3228e+27   5.2604e+27  3.43512e+27  3.26835e+27   4.8232e+24  2.48522e+29   4.8232e+24  2.42385e+29   4.8232e+24  1.14827e+29  1.97601e+24  4.86817e+29  1.97601e+24  2.97918e+29   6.2497e+25  2.18681e+27  1.82852e+32  2.59538e+32  1.44208e+30  1.73256e+30  1.89702e+39  4.41749e+31  1.66476e+31  3.56174e+31
     400  2.66546e+30  5.05886e+27  1.36172e+28  8.18855e+27  7.76803e+27  9.90107e+24  6.13453e+29  9.90107e+24  5.94872e+29  9.90107e+24   2.7863e+29  3.04227e+24   1.4458e+30  3.04227e+24  7.82149e+29  9.62204e+25  5.31893e+27  7.43446e+32  6.76087e+32   3.1193e+30  3.38436e+30  5.81364e+32  1.53178e+32  5.25536e+31  1.04946e+32
     500   6.3319e+30   9.1848e+27   2.9582e+28  1.61907e+28  1.52765e+28  1.72965e+25  1.28796e+30  1.72965e+25  1.23988e+30  1.72965e+25    5.706e+29   4.2517e+24  3.66252e+30   4.2517e+24  1.77798e+30  1.34472e+26  1.09838e+28  2.27531e+33  1.40935e+33  6.99392e+30  7.25794e+30    2.174e+31  4.38422e+32  1.38727e+32   2.5148e+32
     600  1.35837e+31  1.48864e+28  5.75744e+28  2.85247e+28  2.67121e+28  2.72848e+25  2.45857e+30  2.72848e+25  2.34862e+30  2.72848e+25  1.05862e+30  5.58901e+24  8.37682e+30  5.58901e+24  3.71377e+30  1.76768e+26  2.06944e+28  5.83137e+33  2.59752e+33  1.53859e+31   1.5531e+31  1.56572e+31  1.10962e+33  3.28769e+32  5.35043e+32
     700  2.73245e+31  2.23336e+28  1.03869e+29  4.64933e+28  4.31306e+28  4.01168e+25  4.40321e+30  4.01168e+25   4.1744e+30  4.01168e+25  1.84194e+30  7.04296e+24  1.77967e+31  7.04296e+24  7.32198e+30  2.22753e+26  3.68096e+28  1.32406e+34  4.44573e+33  3.28489e+31  3.24865e+31  2.00151e+31  2.57036e+33  7.23031e+32   1.0547e+33
     800  5.25242e+31  3.16898e+28  1.77211e+29  7.16682e+28  6.57497e+28  5.60287e+25  7.52441e+30  5.60287e+25  7.08144e+30  5.60287e+25  3.06214e+30  8.60484e+24  3.57037e+31  8.60484e+24  1.38193e+31  2.72152e+26  6.29237e+28  2.75326e+34  7.26034e+33  6.79296e+31  6.61031e+31  3.04639e+31  5.55986e+33  1.50225e+33   1.9708e+33
     900  9.74988e+31  4.31186e+28  2.89608e+29  1.05938e+29  9.59741e+28  7.52507e+25  1.23926e+31  7.52507e+25  1.15823e+31  7.52507e+25  4.91733e+30  1.02677e+25  6.83675e+31  1.02677e+25  2.51777e+31  3.24744e+26   1.0442e+29  5.35429e+34  1.14977e+34  1.36146e+32  1.30791e+32  4.96309e+31  1.13781e+34  2.98133e+33  3.53766e+33
    1000   1.7589e+32  5.67887e+28  4.57314e+29  1.51557e+29  1.35425e+29  9.80136e+25  1.98016e+31  9.80136e+25  1.83853e+31  9.80136e+25  7.67995e+30  1.20256e+25  1.25901e+32  1.20256e+25  4.45239e+31  3.80344e+26  1.69248e+29  9.87598e+34  1.78334e+34  2.64867e+32  2.51886e+32  8.31132e+31  2.22341e+34  5.69316e+33   6.1512e+33
    1100  3.09674e+32  7.28764e+28   7.0205e+29  2.11192e+29  1.85967e+29  1.24554e+26  3.08377e+31  1.24554e+26  2.84544e+31  1.24554e+26  1.17192e+31  1.38738e+25  2.24222e+32  1.38738e+25  7.67157e+31  4.38799e+26  2.68985e+29  1.74488e+35  2.72616e+34  5.01139e+32  4.72857e+32  1.40422e+32  4.17722e+34  1.05163e+34  1.04174e+34
    1200  5.33667e+32  9.15662e+28  1.05248e+30  2.87967e+29  2.49743e+29  1.55119e+26  4.69659e+31  1.55119e+26  4.30822e+31  1.55119e+26  1.75283e+31  1.58081e+25  3.87856e+32  1.58081e+25  1.29162e+32  4.99976e+26  4.20283e+29   2.9743e+35  4.12339e+34  9.23956e+32  8.66602e+32  2.37075e+32  7.58498e+34  1.88656e+34   1.7249e+34
    1300  9.02167e+32  1.13052e+29    1.546e+30  3.85517e+29  3.29195e+29  1.89964e+26  7.01353e+31  1.89964e+26  6.39799e+31  1.89964e+26  2.57585e+31  1.78247e+25  6.53851e+32  1.78247e+25  2.12965e+32  5.63757e+26  6.46803e+29  4.91797e+35  6.18545e+34  1.66316e+33  1.55283e+33  3.97869e+32  1.33665e+35   3.2971e+34  2.80008e+34
    1400  1.49861e+33  1.37535e+29  2.23088e+30  5.08038e+29  4.27102e+29  2.29356e+26  1.02907e+32  2.29356e+26  9.33855e+31  2.29356e+26  3.72593e+31  1.99205e+25   1.0772e+33  1.99205e+25  3.44505e+32  6.30041e+26  9.81784e+29  7.92117e+35  9.21487e+34  2.92799e+33  2.72427e+33  6.61788e+32  2.29366e+35  5.62797e+34   4.4655e+34
    1500  2.44946e+33  1.65225e+29  3.16878e+30  6.60342e+29  5.46603e+29  2.73576e+26  1.48608e+32  2.73576e+26  1.34194e+32  2.73576e+26   5.3127e+31  2.20925e+25  1.73819e+33  2.20925e+25  5.47579e+32  6.98737e+26  1.47141e+30  1.24691e+36  1.36433e+35  5.04957e+33  4.68567e+33   1.0892e+33  3.84301e+35  9.40249e+34  7.00752e+34
    1600  3.94386e+33  1.96339e+29  4.43778e+30  8.47909e+29  6.91231e+29  3.22912e+26  2.11513e+32  3.22912e+26  1.90113e+32  3.22912e+26  7.47631e+31  2.43382e+25  2.75236e+33  2.43382e+25  8.56291e+32  7.69763e+26  2.17922e+30  1.92344e+36  2.00816e+35  8.54299e+33  7.91062e+33  1.77228e+33   6.3014e+35  1.54022e+35  1.08347e+35
    1700  6.26128e+33  2.31102e+29  6.13586e+30  1.07695e+30  8.64943e+29  3.77663e+26  2.97068e+32  3.77663e+26  2.65843e+32  3.77663e+26  1.03942e+32  2.66552e+25  4.28362e+33  2.66552e+25  1.31889e+33  8.43044e+26  3.19172e+30  2.91389e+36  2.93879e+35  1.41969e+34  1.31235e+34  2.84985e+33  1.01312e+36  2.47765e+35  1.65232e+35
    1800  9.80978e+33  2.69743e+29  8.38503e+30  1.35448e+30  1.07215e+30   4.3814e+26  4.12136e+32   4.3814e+26  3.67296e+32   4.3814e+26  1.42893e+32  2.90413e+25  6.56161e+33  2.90413e+25  2.00279e+33  9.18514e+26  4.62568e+30  4.34318e+36  4.27578e+35  2.32007e+34  2.14159e+34  4.52832e+33  1.59976e+36  3.91921e+35  2.48767e+35
    1900  1.51787e+34    3.125e+29   1.1336e+31  1.68836e+30  1.31777e+30  5.04659e+26  5.65308e+32  5.04659e+26  5.01844e+32  5.04659e+26  1.94391e+32  3.14948e+25  9.90424e+33  3.14948e+25  3.00115e+33   9.9611e+26  6.63727e+30   6.3789e+36  6.18455e+35  3.73235e+34  3.44092e+34  7.11085e+33   2.4845e+36  6.10341e+35  3.70051e+35
    2000  2.32101e+34  3.59614e+29  1.51739e+31  2.08737e+30  1.60722e+30  5.77547e+26  7.67243e+32  5.77547e+26  6.78607e+32  5.77547e+26  2.61867e+32  3.40136e+25  1.47468e+34  3.40136e+25  4.44133e+33  1.07578e+27  9.43368e+30  9.24376e+36  8.89218e+35   5.9162e+34  5.44811e+34  1.10376e+34  3.79973e+36  9.36743e+35  5.44256e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7           B8
     100 3.42725e+225  1.02816e+30  1.82422e+29  3.59409e+38  2.97017e+47 1.37269e+129  2.66912e+20     0.948966  9.38107e-76
     200 9.30996e+127  2.65947e+31   1.3474e+31   5.3462e+31   1.4067e+35   2.5011e+59  1.77655e+26  6.67151e+15   3.0889e-22
     300  5.20946e+95  1.82852e+32  9.34454e+31  1.94043e+31  2.80781e+33  2.63481e+39  3.25537e+28  2.48065e+21   0.00040664
     400  5.44136e+79  7.43446e+32  3.14247e+32  2.19148e+31  8.64445e+32  7.43797e+32  6.85118e+29  2.24136e+24       651820
     500  1.77616e+70  2.27531e+33   7.6354e+32   3.3271e+31  6.11818e+32  2.64767e+31  5.78559e+30  1.76233e+26   2.7229e+11
     600  1.01463e+64  5.83137e+33  1.55861e+33  5.64385e+31  6.25229e+32  1.84524e+31  3.01222e+31  4.01325e+27  1.80785e+15
     700  4.10826e+59  1.32406e+34  2.86953e+33  1.00078e+32  7.71401e+32  2.30412e+31  1.16805e+32    4.443e+28  1.11633e+18
     800  2.37316e+56  2.75326e+34  4.94984e+33  1.80053e+32  1.05646e+33  3.44579e+31  3.71834e+32   3.1024e+29  1.55319e+20
     900   8.0265e+53  5.35429e+34  8.17953e+33  3.23822e+32  1.53628e+33  5.53746e+31  1.02773e+33  1.58057e+30  7.96585e+21
    1000  9.31569e+51  9.87598e+34  1.31263e+34  5.77697e+32  2.31264e+33  9.17219e+31  2.55416e+33  6.41678e+30  2.02406e+23
    1100  2.64113e+50  1.74488e+35  2.06328e+34  1.01822e+33  3.54893e+33  1.53585e+32  5.84183e+33    2.197e+31  3.07609e+24
    1200  1.45853e+49   2.9743e+35  3.19407e+34  1.76961e+33  5.49845e+33  2.57368e+32  1.24971e+34  6.59133e+31  3.17068e+25
    1300  1.34145e+48  4.91797e+35  4.88644e+34  3.03006e+33  8.54709e+33  4.29205e+32  2.52998e+34  1.77997e+32   2.4184e+26
    1400  1.83756e+47  7.92117e+35  7.40326e+34  5.11068e+33  1.32752e+34  7.10056e+32  4.88948e+34  4.41176e+32  1.45279e+27
    1500  3.45451e+46  1.24691e+36  1.11222e+35  8.49252e+33  2.05451e+34  1.16317e+33  9.08149e+34  1.01832e+33  7.19572e+27
    1600  8.38311e+45  1.92344e+36  1.65812e+35  1.39085e+34  3.16247e+34  1.88489e+33  1.62959e+35   2.2134e+33  3.04163e+28
    1700  2.50611e+45  2.91389e+36  2.45402e+35  2.24601e+34  4.83576e+34  3.01995e+33  2.83696e+35  4.56984e+33  1.12662e+29
    1800  8.90066e+44  4.34318e+36  3.60641e+35  3.57809e+34  7.33977e+34  4.78317e+33  4.80794e+35  9.02403e+33  3.73294e+29
    1900  3.64983e+44   6.3789e+36  5.26331e+35  5.62641e+34  1.10527e+35  7.48943e+33  7.95467e+35  1.71386e+34  1.12469e+30
    2000  1.68913e+44  9.24376e+36   7.6289e+35  8.73733e+34  1.65081e+35  1.15951e+34  1.28785e+36  3.14487e+34  3.12202e+30
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D           B8            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0            1           -0
Model::init:  done, cpu time[sec] = 15.453, elapsed time[sec] = 11
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 290 K
      Energy reference = 24839 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -89 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 4.4e-05
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.004812
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.00433
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.63359
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.71935
         W1 Well: minimal relaxation eigenvalue = 0.097837
         W1 Well: maximal relaxation eigenvalue = 0.98145
         W1 Well:       grid size = 568
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3561 1/cm
         B1 Barrier:        grid size = 497
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -11 1/cm
         B2 Barrier:        grid size = 493
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier:        grid size = 589
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 621
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6211 1/cm
         B5 Barrier: nonpositive number of states at -23111 1/cm => truncating
         B5 Barrier:        grid size = 959
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23111 1/cm
         B6 Barrier:        grid size = 467
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 403
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4688 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16739 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.8475, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 568
      MasterEquation::Barrier::truncate: real weight = 3.89834e+58
      MasterEquation::Barrier::truncate: effective weight = 8.88106e+54
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 568
      MasterEquation::Barrier::truncate: real weight = 6.77879e+60
      MasterEquation::Barrier::truncate: effective weight = 1.54367e+57
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 568
      MasterEquation::Barrier::truncate: real weight = 7.69851e+67
      MasterEquation::Barrier::truncate: effective weight = 8.43936e+56
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3561  -3561 1.94e+09 1.37e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -11 2.62e+14
         B2    189 3.54e+13
         B3  -3561 8.22e+12
         B4  -3561 1.08e+13
         B5  -3561  1.1e+12
         B6   1489 1.41e+14
         B7   4689 1.08e+13
         B8  16739 7.61e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.27e-06  3.99e-06  1.81e-15  5.92e-19  6.56e-58    0.0273  3.71e+05  1.52e+32
          R  7.86e+05         1      3.14  1.43e-09  4.65e-13  5.16e-52  2.15e+04  2.91e+11   1.2e+38
         P1  2.51e+05     0.319         1  4.54e-10  1.48e-13  1.64e-52  6.84e+03  9.29e+10  3.81e+37
         P2  5.52e+14  7.02e+08   2.2e+09         1  0.000326  3.62e-43  1.51e+13  2.05e+20   8.4e+46
         P3  1.69e+18  2.15e+12  6.75e+12  3.06e+03         1  1.11e-39  4.62e+16  6.27e+23  2.57e+50
         P4  1.52e+57  1.94e+51  6.08e+51  2.76e+42  9.02e+38         1  4.16e+55  5.65e+62  2.32e+89
         P5      36.6  4.66e-05  0.000146  6.64e-14  2.17e-17   2.4e-56         1  1.36e+07  5.58e+33
         P6   2.7e-06  3.43e-12  1.08e-11  4.89e-21   1.6e-24  1.77e-63  7.37e-08         1  4.11e+26
         P7  6.57e-33  8.36e-39  2.62e-38  1.19e-47  3.89e-51  4.31e-90  1.79e-34  2.44e-27         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.55e+42  2.68e+43  1.22e+34  3.98e+30  4.41e-09  1.84e+47  2.49e+54  1.02e+81
          R  1.17e-43         1      3.14  1.43e-09  4.65e-13  5.16e-52  2.15e+04  2.91e+11   1.2e+38
         P1  3.73e-44     0.319         1  4.54e-10  1.48e-13  1.64e-52  6.84e+03  9.29e+10  3.81e+37
         P2  8.21e-35  7.02e+08   2.2e+09         1  0.000326  3.62e-43  1.51e+13  2.05e+20   8.4e+46
         P3  2.51e-31  2.15e+12  6.75e+12  3.06e+03         1  1.11e-39  4.62e+16  6.27e+23  2.57e+50
         P4  2.27e+08  1.94e+51  6.08e+51  2.76e+42  9.02e+38         1  4.16e+55  5.65e+62  2.32e+89
         P5  5.45e-48  4.66e-05  0.000146  6.64e-14  2.17e-17   2.4e-56         1  1.36e+07  5.58e+33
         P6  4.01e-55  3.43e-12  1.08e-11  4.89e-21   1.6e-24  1.77e-63  7.37e-08         1  4.11e+26
         P7  9.77e-82  8.36e-39  2.62e-38  1.19e-47  3.89e-51  4.31e-90  1.79e-34  2.44e-27         1
   MasterEquation::set:  done, cpu time[sec] = 4.86235, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.82883e+08
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.650306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.14719, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11871.6      1603.57      372.553      487.921      49.8442      6382.92      491.659     0.344875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077624, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005917, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22316e-07  2.22316e-07  2.09546e-09
      low eigenvalue method done, cpu time[sec] = 0.084375, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-07   2.1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-08   2.1e-09         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.09546e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.45437e-62  1.91072e-62  9.99537e-64  1.60028e-62  3.71167e-64  1.75146e-66  3.03605e-75 -4.00879e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.20103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.44865e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.650844, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.06887, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3957.21      534.522      124.184       162.64      16.6147      2127.64      163.886     0.114958
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077687, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084114, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.56345e-08  7.56345e-08  5.56815e-10
      low eigenvalue method done, cpu time[sec] = 0.084419, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.56e-08  5.57e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.94e-09  5.57e-10         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.56815e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07361e-62  5.28846e-63  2.02846e-64   2.5818e-63  6.25732e-65  1.58695e-66  3.04789e-75  1.43058e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         2.41442e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.649126, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.07705, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2374.32      320.713      74.5107      97.5842      9.96885      1276.58      98.3318    0.0689751
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005899, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084388, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.5763e-08   4.5763e-08  2.81951e-10
      low eigenvalue method done, cpu time[sec] = 0.084692, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-08  2.82e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.78e-09  2.82e-10         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.81951e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.7057e-63   2.6431e-63  9.30086e-65  1.08677e-63  2.68841e-65  1.33823e-66  3.06007e-75  1.96208e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0698, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         3.38018e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.650391, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.07673, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1695.95      229.081      53.2219       69.703       7.1206      911.846       70.237    0.0492679
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077969, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084394, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.28562e-08  3.28562e-08  1.75426e-10
      low eigenvalue method done, cpu time[sec] = 0.084695, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.29e-08  1.75e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.42e-09  1.75e-10         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75426e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.6448e-63  1.62161e-63  5.47058e-65  6.08606e-64  1.52501e-65   1.1296e-66  3.07264e-75  4.53331e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.34595e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.649003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14445, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1319.07      178.174      41.3948      54.2134      5.53825      709.213      54.6288    0.0383195
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077896, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005975, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084398, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.5648e-08   2.5648e-08  1.21376e-10
      low eigenvalue method done, cpu time[sec] = 0.084701, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.56e-08  1.21e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.66e-09  1.21e-10         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21376e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.56588e-63  1.10843e-63  3.64581e-65  3.92409e-64  9.92288e-66  9.64514e-67   3.0856e-75 -2.46716e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1367, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.82883e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.652142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.1212, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1187.16      160.357      37.2553      48.7921      4.98442      638.292      49.1659    0.0344875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077947, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00592, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084391, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.31173e-08  2.31173e-08  1.03643e-10
      low eigenvalue method done, cpu time[sec] = 0.084698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.31e-08  1.04e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.4e-09  1.04e-10         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03643e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.20579e-63  9.41417e-64  3.06798e-65  3.25957e-64  8.27295e-66  8.95434e-67  3.09223e-75  3.4647e-100

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.121, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         7.24325e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.652962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.12183, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            791.441      106.904      24.8369      32.5281      3.32295      425.528      32.7773    0.0229917
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079785, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.086214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.54953e-08  1.54953e-08  5.53715e-11
      low eigenvalue method done, cpu time[sec] = 0.086526, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-08  5.54e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-09  5.54e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.53717e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20606e-63  4.92256e-64  1.55827e-65  1.58224e-64  4.06977e-66  6.43594e-67   3.1267e-75 -4.48254e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1214, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         9.65766e+09
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.650875, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08668, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            593.581      80.1783      18.6277       24.396      2.49221      319.146      24.5829    0.0172438
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005899, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084361, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16635e-08  1.16635e-08  3.48649e-11
      low eigenvalue method done, cpu time[sec] = 0.084669, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-08  3.49e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-09  3.49e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.48648e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.7015e-64   3.0521e-64  9.51491e-66  9.39539e-65   2.4375e-66  4.88374e-67  3.16297e-75 -1.97205e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0813, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.20721e+10
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.653067, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.11621, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            474.865      64.1426      14.9021      19.5168      1.99377      255.317      19.6664     0.013795
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.078059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005914, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084497, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.35571e-09  9.35571e-09  2.41187e-11
      low eigenvalue method done, cpu time[sec] = 0.084802, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.36e-09  2.41e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.63e-10  2.41e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.41189e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.37954e-64  2.08679e-64  6.44471e-66   6.2417e-65  1.62929e-66  3.85331e-67  3.20022e-75 -5.71639e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1201, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.44865e+10
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.652468, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.12599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            395.721      53.4522      12.4184       16.264      1.66147      212.764      16.3886    0.0114958
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077945, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005895, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084364, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.81285e-09  7.81283e-09  1.77418e-11
      low eigenvalue method done, cpu time[sec] = 0.084671, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.81e-09  1.77e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.03e-10  1.77e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.77423e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.98569e-64  1.52087e-64  4.66738e-66  4.45564e-65   1.1685e-66  3.12999e-67  3.23753e-75  5.54599e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1208, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.69009e+10
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.649599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13697, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            339.189      45.8162      10.6444      13.9406      1.42412      182.369      14.0474   0.00985358
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.077914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0059, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084346, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.7083e-09  6.70828e-09  1.36302e-11
      low eigenvalue method done, cpu time[sec] = 0.084723, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.71e-09  1.36e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-10  1.36e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36304e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.07915e-64   1.1596e-64  3.54265e-66  3.34409e-65  8.80236e-67  2.60023e-67    3.274e-75  1.28359e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1278, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.93153e+10
      global relaxation matrix dimension = 568
      setting global matrices ... done, cpu time[sec] = 0.65067, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.12008, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            296.791      40.0891      9.31383       12.198      1.24611      159.573      12.2915   0.00862188
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.078003, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005909, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.084439, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.87833e-09  5.87831e-09  1.08164e-11
      low eigenvalue method done, cpu time[sec] = 0.084743, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.88e-09  1.08e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.03e-10  1.08e-11         1
         *Z       ---       ---  1.58e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08167e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.4545e-64   9.1441e-65  2.78418e-66  2.60439e-65    6.876e-67  2.19915e-67  3.30889e-75 -7.89828e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.118, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 300 K
      Energy reference = 25117 1/cm
      Energy step      = 52 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -89 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007725
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.647131
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.424608
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.63305
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.51543
         W1 Well: minimal relaxation eigenvalue = 0.0969128
         W1 Well: maximal relaxation eigenvalue = 0.97993
         W1 Well:       grid size = 553
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3639 1/cm
         B1 Barrier:        grid size = 484
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -50 1/cm
         B2 Barrier:        grid size = 479
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 209 1/cm
         B3 Barrier:        grid size = 572
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4627 1/cm
         B4 Barrier:        grid size = 602
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6187 1/cm
         B5 Barrier: nonpositive number of states at -23139 1/cm => truncating
         B5 Barrier:        grid size = 928
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23139 1/cm
         B6 Barrier:        grid size = 455
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1457 1/cm
         B7 Barrier:        grid size = 393
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16745 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 5.71847, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 553
      MasterEquation::Barrier::truncate: real weight = 2.2614e+57
      MasterEquation::Barrier::truncate: effective weight = 5.3579e+53
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 553
      MasterEquation::Barrier::truncate: real weight = 3.27226e+59
      MasterEquation::Barrier::truncate: effective weight = 7.75141e+55
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 553
      MasterEquation::Barrier::truncate: real weight = 3.07063e+65
      MasterEquation::Barrier::truncate: effective weight = 3.67478e+55
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3639  -3639  1.9e+09 1.44e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -50 2.86e+14
         B2    210  3.9e+13
         B3  -3639 9.11e+12
         B4  -3639 1.19e+13
         B5  -3639 1.22e+12
         B6   1458 1.56e+14
         B7   4682 1.22e+13
         B8  16745 9.32e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.59e-07   2.6e-06  2.64e-15  1.13e-18  2.55e-56    0.0148   1.2e+05  6.73e+30
          R  1.16e+06         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  3.85e+05     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  3.79e+14  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  8.87e+17  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  3.92e+55  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5      67.6   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  8.36e-06  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  1.49e-31  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.26e+40  1.29e+41  1.31e+32   5.6e+28  1.27e-09  7.35e+44  5.94e+51  3.34e+77
          R  2.35e-41         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  7.76e-42     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  7.63e-33  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  1.79e-29  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4   7.9e+08  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5  1.36e-45   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  1.68e-52  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  2.99e-78  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
   MasterEquation::set:  done, cpu time[sec] = 5.73349, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+08
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.620131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.21313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12626.2      1723.95      402.923      526.058      53.9562      6880.39      537.961     0.411806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078586, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.16428e-07  2.16428e-07  2.93703e-09
      low eigenvalue method done, cpu time[sec] = 0.07888, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-07  2.94e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.28e-08  2.94e-09         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.93704e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.02673e-60  3.84712e-60  1.91408e-61  2.88116e-60  6.71781e-62  4.24134e-64  1.25878e-72 -1.19297e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.10341, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.622159, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4208.73       574.65      134.308      175.353      17.9854      2293.46       179.32     0.137269
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07836, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.39994e-08  7.39994e-08   8.1418e-10
      low eigenvalue method done, cpu time[sec] = 0.078656, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.4e-08  8.14e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.71e-09  8.14e-10         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.14179e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.25473e-60  1.09241e-60  4.03554e-62  4.85095e-61  1.18654e-62  3.86405e-64  1.26366e-72  3.77329e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.80433, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         2.35656e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.621946, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91327, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2525.24       344.79      80.5846      105.212      10.7912      1376.08      107.592    0.0823613
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005527, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.48645e-08  4.48645e-08  4.19558e-10
      low eigenvalue method done, cpu time[sec] = 0.078608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.49e-08   4.2e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.65e-09   4.2e-10         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.19558e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21684e-60  5.52792e-61  1.88168e-62  2.07933e-61  5.19931e-63  3.28085e-64   1.2687e-72 -6.44762e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.80091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         3.29919e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.620821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.92061, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1803.74      246.278      57.5604      75.1512      7.70802      982.913      76.8516    0.0588295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072379, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078414, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.22493e-08  3.22493e-08  2.63937e-10
      low eigenvalue method done, cpu time[sec] = 0.078711, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.22e-08  2.64e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.33e-09  2.64e-10         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.63937e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.85248e-61  3.41927e-61  1.11857e-62  1.17748e-61  2.98521e-63  2.78634e-64  1.27389e-72 -1.35484e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.64302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.24181e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.619361, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.92133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1402.91       191.55      44.7692      58.4509      5.99513      764.488      59.7734    0.0457563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07235, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078361, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.51943e-08  2.51943e-08  1.84078e-10
      low eigenvalue method done, cpu time[sec] = 0.078664, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.52e-08  1.84e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.6e-09  1.84e-10         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.84078e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.56972e-61  2.35125e-61   7.5119e-63  7.65173e-62  1.95905e-63  2.39181e-64  1.27925e-72  2.64929e-97

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.8012, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.621554, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1262.62      172.395      40.2923      52.6058      5.39562      688.039      53.7961    0.0411806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078283, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.27155e-08  2.27155e-08  1.57699e-10
      low eigenvalue method done, cpu time[sec] = 0.078583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.27e-08  1.58e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-09  1.58e-10         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57699e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.80304e-61  2.00193e-61  6.34117e-63  6.37606e-62  1.63895e-63  2.22584e-64  1.28198e-72 -2.67951e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.8031, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         7.06969e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.619314, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            841.745       114.93      26.8615      35.0706      3.59708      458.693      35.8641    0.0274538
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.52424e-08  1.52424e-08  8.52823e-11
      low eigenvalue method done, cpu time[sec] = 0.07856, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-08  8.53e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-09  8.53e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.5282e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.65727e-61  1.05654e-61   3.2583e-63  3.13058e-62  8.16411e-64  1.61593e-64  1.29622e-72 -1.19059e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79005, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         9.42625e+09
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.619996, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90516, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            631.309      86.1974      20.1461      26.3029      2.69781       344.02       26.898    0.0205903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078287, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14806e-08  1.14806e-08  5.41388e-11
      low eigenvalue method done, cpu time[sec] = 0.078579, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-08  5.41e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-09  5.41e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.41391e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71056e-61  6.59184e-62  2.00494e-63  1.87271e-62  4.92962e-64   1.2357e-64  1.31117e-72 -8.83197e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.78969, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.17828e+10
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.619017, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91587, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            505.047       68.958      16.1169      21.0423      2.15825      275.216      21.5184    0.0164723
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072226, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078242, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.21311e-09  9.21311e-09  3.76788e-11
      low eigenvalue method done, cpu time[sec] = 0.078541, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.21e-09  3.77e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.41e-10  3.77e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.7679e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20203e-61  4.52782e-62   1.3657e-63  1.25071e-62  3.31444e-64  9.81057e-65  1.32649e-72 -2.20943e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79559, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+10
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.620317, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90461, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            420.873       57.465      13.4308      17.5353      1.79854      229.346       17.932    0.0137269
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072479, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078474, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.69627e-09  7.69626e-09  2.78477e-11
      low eigenvalue method done, cpu time[sec] = 0.078768, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.7e-09  2.78e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.85e-10  2.78e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.78477e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.94803e-62   3.3118e-62  9.93423e-64  8.96427e-63  2.38777e-64  8.01034e-65  1.34181e-72  3.28396e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.78676, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.64959e+10
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.621728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90241, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            360.748      49.2557      11.5121      15.0302       1.5416      196.583      15.3703    0.0117659
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072283, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005524, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078307, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.60986e-09  6.60985e-09  2.14762e-11
      low eigenvalue method done, cpu time[sec] = 0.078602, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.61e-09  2.15e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.73e-10  2.15e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.14762e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.93954e-62  2.53245e-62   7.5671e-64  6.74959e-63  1.80519e-64    6.684e-65  1.35676e-72  3.68539e-97

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.78983, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.88525e+10
      global relaxation matrix dimension = 553
      setting global matrices ... done, cpu time[sec] = 0.619427, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90976, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            315.654      43.0987      10.0731      13.1515       1.3489       172.01       13.449    0.0102952
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072258, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005511, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078266, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.79322e-09  5.79323e-09  1.70973e-11
      low eigenvalue method done, cpu time[sec] = 0.078556, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.79e-09  1.71e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.89e-10  1.71e-11         1
         *Z       ---       ---   3.5e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70979e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.54966e-62  2.00181e-62  5.96456e-64  5.27046e-63   1.4143e-64  5.67473e-65  1.37104e-72  3.83643e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.99641, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 310 K
      Energy reference = 25395 1/cm
      Energy step      = 53 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007841
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.65572
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.418609
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.376052
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.46177
         W1 Well: minimal relaxation eigenvalue = 0.096059
         W1 Well: maximal relaxation eigenvalue = 0.982973
         W1 Well:       grid size = 549
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3701 1/cm
         B1 Barrier:        grid size = 480
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -45 1/cm
         B2 Barrier:        grid size = 476
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 566
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4602 1/cm
         B4 Barrier:        grid size = 596
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23153 1/cm => truncating
         B5 Barrier:        grid size = 916
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23153 1/cm
         B6 Barrier:        grid size = 451
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 391
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4672 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16756 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.39358, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 549
      MasterEquation::Barrier::truncate: real weight = 1.58535e+56
      MasterEquation::Barrier::truncate: effective weight = 3.82838e+52
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 549
      MasterEquation::Barrier::truncate: real weight = 1.93404e+58
      MasterEquation::Barrier::truncate: effective weight = 4.66997e+54
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 549
      MasterEquation::Barrier::truncate: real weight = 1.93679e+63
      MasterEquation::Barrier::truncate: effective weight = 1.86776e+54
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3701  -3701 1.86e+09 1.51e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -45 3.11e+14
         B2    168  4.3e+13
         B3  -3701 1.01e+13
         B4  -3701 1.31e+13
         B5  -3701 1.35e+12
         B6   1493 1.72e+14
         B7   4672 1.36e+13
         B8  16756 1.13e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.65e-07  1.65e-06  3.57e-15  1.96e-18  7.44e-55   0.00793  3.95e+04  3.46e+29
          R  1.77e+06         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  6.06e+05     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2   2.8e+14  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3   5.1e+17  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  1.34e+54  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5       126  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  2.53e-05  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  2.89e-30  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.99e+38  8.72e+38  1.88e+30  1.03e+27  3.93e-10  4.19e+42  2.09e+49  1.83e+74
          R  3.35e-39         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  1.15e-39     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  5.31e-31  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  9.66e-28  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  2.54e+09  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5  2.39e-43  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  4.79e-50  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  5.47e-75  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.40868, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+08
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.611668, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24519, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              13409      1850.57      435.065      566.291      58.3124      7404.15       587.48     0.488461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.071025, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005441, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076968, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.25838e-07  2.25838e-07  4.31315e-09
      low eigenvalue method done, cpu time[sec] = 0.077259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.26e-07  4.31e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-08  4.31e-09         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.31315e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.01387e-57  5.49319e-58  2.61501e-59  3.73453e-58  8.75744e-60  7.19019e-62  3.54102e-70 -1.16121e-92

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.10574, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.61187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86024, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4469.67      616.856      145.022      188.764      19.4375      2468.05      195.827      0.16282
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.071008, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005428, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076929, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.77411e-08  7.77411e-08   1.2428e-09
      low eigenvalue method done, cpu time[sec] = 0.077217, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.77e-08  1.24e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.05e-09  1.24e-09         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2428e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.35369e-58  1.59848e-58  5.71688e-60  6.54916e-59  1.61641e-60   6.5877e-62  3.55471e-70  -1.1928e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.71416, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         2.30227e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.610655, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2681.8      370.114       87.013      113.258      11.6625      1480.83      117.496    0.0976921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005425, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076883, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.7265e-08  4.72649e-08  6.51034e-10
      low eigenvalue method done, cpu time[sec] = 0.077235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.73e-08  6.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.87e-09  6.51e-10         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.51033e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.83686e-58   8.1863e-59  2.70893e-60   2.8564e-59  7.21637e-61  5.63161e-62  3.56883e-70  1.58742e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.71752, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         3.22318e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.612144, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86949, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1915.57      264.367      62.1521      80.8987      8.33034      1057.74      83.9257    0.0697801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070892, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005392, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076782, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40308e-08  3.40308e-08  4.13862e-10
      low eigenvalue method done, cpu time[sec] = 0.077069, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.4e-08  4.14e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.5e-09  4.14e-10         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.13862e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.19702e-58  5.10384e-59  1.62695e-60  1.63493e-59  4.19135e-61  4.81164e-62   3.5834e-70  1.49238e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.72497, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.14409e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.611191, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.79508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1489.89      205.619      48.3405      62.9212      6.47916      822.683      65.2755    0.0542734
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070984, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005444, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076916, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.66158e-08  2.66158e-08   2.9085e-10
      low eigenvalue method done, cpu time[sec] = 0.077203, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-08  2.91e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.73e-09  2.91e-10         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.9085e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.55254e-59  3.53027e-59  1.10077e-60  1.07053e-59   2.7732e-61  4.15191e-62  3.59842e-70   1.2092e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.31019, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.371121, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.5885, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1340.9      185.057      43.5065      56.6291      5.83124      740.415       58.748    0.0488461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07107, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005408, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.077017, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.40077e-08  2.40076e-08  2.49956e-10
      low eigenvalue method done, cpu time[sec] = 0.077308, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-08   2.5e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-09   2.5e-10         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49956e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.3977e-59   3.0131e-59  9.32061e-61  8.94795e-60  2.32779e-61  3.87288e-62   3.6061e-70  -1.6744e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.20041, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         6.90681e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.613349, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.84833, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            893.933      123.371      29.0043      37.7527      3.88749       493.61      39.1653     0.032564
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005425, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.6134e-08   1.6134e-08  1.36775e-10
      low eigenvalue method done, cpu time[sec] = 0.077206, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-08  1.37e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-09  1.37e-10         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36775e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.14015e-59   1.6048e-59  4.84411e-61  4.44272e-60   1.1737e-61  2.83936e-62    3.646e-70   2.2502e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.70615, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         9.20908e+09
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.610988, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86696, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             670.45      92.5284      21.7532      28.3146      2.91562      370.207       29.374     0.024423
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070913, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076826, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21633e-08  1.21633e-08  8.75236e-11
      low eigenvalue method done, cpu time[sec] = 0.077114, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-08  8.75e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-09  8.75e-11         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.75233e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.68631e-59  1.00748e-59  3.00364e-61  2.67706e-60  7.14368e-62   2.1877e-62  3.68783e-70  9.51724e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.7244, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.15114e+10
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.612139, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86279, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             536.36      74.0227      17.4026      22.6516       2.3325      296.166      23.4992    0.0195384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.071136, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.077051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.76718e-09  9.76717e-09  6.12766e-11
      low eigenvalue method done, cpu time[sec] = 0.07734, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.77e-09  6.13e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.91e-10  6.13e-11         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.12765e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89896e-59   6.9522e-60  2.05759e-61  1.79734e-60  4.83097e-62   1.7475e-62  3.73062e-70  2.89559e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.72012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+10
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.611682, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.80487, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            446.967      61.6856      14.5022      18.8764      1.94375      246.805      19.5827     0.016282
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070962, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.1629e-09  8.16288e-09  4.55006e-11
      low eigenvalue method done, cpu time[sec] = 0.077165, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.16e-09  4.55e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.27e-10  4.55e-11         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55005e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42026e-59  5.10348e-60  1.50334e-61  1.29344e-60   3.4959e-62  1.43411e-62   3.7733e-70  4.89321e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.65885, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.61159e+10
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.610076, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.84773, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            383.114      52.8734      12.4304      16.1797      1.66607      211.547      16.7851     0.013956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070879, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005415, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076787, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.01312e-09  7.01312e-09  3.52243e-11
      low eigenvalue method done, cpu time[sec] = 0.077077, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.01e-09  3.52e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.1e-10  3.52e-11         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.52243e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10572e-59  3.91397e-60  1.14924e-61   9.7705e-61  2.65246e-62  1.20186e-62   3.8149e-70  1.03277e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.69961, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.84182e+10
      global relaxation matrix dimension = 549
      setting global matrices ... done, cpu time[sec] = 0.611905, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.84015, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            335.225      46.2642      10.8766      14.1573      1.45781      185.104       14.687    0.0122115
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070953, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005437, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076888, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.14843e-09  6.14843e-09   2.8132e-11
      low eigenvalue method done, cpu time[sec] = 0.077174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.15e-09  2.81e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.21e-10  2.81e-11         1
         *Z       ---       ---  8.34e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.81319e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.87131e-60  3.10143e-60  9.08569e-62  7.64974e-61   2.0843e-62  1.02424e-62  3.85459e-70  2.77088e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.69804, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 320 K
      Energy reference = 25673 1/cm
      Energy step      = 55 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007511
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.628171
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.401203
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.340188
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.35263
         W1 Well: minimal relaxation eigenvalue = 0.0951857
         W1 Well: maximal relaxation eigenvalue = 0.981489
         W1 Well:       grid size = 536
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3807 1/cm
         B1 Barrier:        grid size = 467
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -12 1/cm
         B2 Barrier:        grid size = 463
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 207 1/cm
         B3 Barrier:        grid size = 551
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4632 1/cm
         B4 Barrier:        grid size = 580
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6227 1/cm
         B5 Barrier: nonpositive number of states at -23167 1/cm => truncating
         B5 Barrier:        grid size = 888
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23167 1/cm
         B6 Barrier:        grid size = 440
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1472 1/cm
         B7 Barrier:        grid size = 381
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4717 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.19811, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 1.31915e+55
      MasterEquation::Barrier::truncate: effective weight = 3.30576e+51
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 1.37264e+57
      MasterEquation::Barrier::truncate: effective weight = 3.43967e+53
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 1.85215e+61
      MasterEquation::Barrier::truncate: effective weight = 1.22682e+53
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3807  -3807  1.8e+09 1.59e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -12 3.39e+14
         B2    208 4.73e+13
         B3  -3807 1.12e+13
         B4  -3807 1.45e+13
         B5  -3807  1.5e+12
         B6   1473  1.9e+14
         B7   4718 1.53e+13
         B8  16763 1.37e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.43e-07  1.25e-06   5.5e-15  3.82e-18  2.04e-53   0.00513  1.62e+04  2.49e+28
          R  2.26e+06         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  7.98e+05     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2  1.82e+14  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  2.62e+17  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  4.89e+52  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5       195  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  6.16e-05  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  4.01e-29  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.84e+36  8.04e+36  3.53e+28  2.45e+25  1.31e-10  3.29e+40  1.04e+47   1.6e+71
          R  3.52e-37         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  1.24e-37     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2  2.84e-29  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  4.08e-26  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  7.63e+09  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5  3.04e-41  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6   9.6e-48  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  6.26e-72  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.21294, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+08
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.59054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22563, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14220.6      1983.62      469.051      608.698      62.9231      7955.05      640.369     0.576213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005097, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071975, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03632e-07  2.03632e-07  5.22502e-09
      low eigenvalue method done, cpu time[sec] = 0.072328, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.04e-07  5.23e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.12e-08  5.23e-09         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.22502e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07227e-55  5.74874e-56  2.63236e-57  3.59401e-56  8.48057e-58  8.83468e-60  7.00525e-68 -9.42605e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.0011, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.590777, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67784, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4740.19      661.208       156.35      202.899      20.9744      2651.68      213.456     0.192071
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066296, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071881, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.06528e-08  7.06528e-08  1.56033e-09
      low eigenvalue method done, cpu time[sec] = 0.072162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.07e-08  1.56e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.26e-09  1.56e-09         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56033e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.65165e-56   1.7128e-56  5.95688e-58  6.55127e-57   1.6313e-58    8.142e-60  7.03223e-68 -5.65287e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.44554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          2.2512e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68145, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2844.11      396.725      93.8102       121.74      12.5846      1591.01      128.074     0.115243
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066196, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005142, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.30978e-08  4.30978e-08  8.30178e-10
      low eigenvalue method done, cpu time[sec] = 0.072083, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.31e-08   8.3e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.41e-09   8.3e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.30178e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02879e-56  8.87463e-57  2.86677e-58  2.90504e-57   7.4124e-59   7.0074e-60  7.06007e-68   6.3952e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.44777, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         3.15168e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.588639, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68502, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2031.51      283.375      67.0073      86.9568      8.98901      1136.44      91.4813    0.0823162
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066335, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00509, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071897, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.10913e-08  3.10913e-08  5.33057e-10
      low eigenvalue method done, cpu time[sec] = 0.072176, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-08  5.33e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.17e-09  5.33e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.33057e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33473e-56  5.57602e-57  1.73898e-58  1.67996e-57  4.35274e-59  6.02258e-60   7.0888e-68  2.79552e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.45176, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         4.05216e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.591, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.64698, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1580.06      220.403      52.1168      67.6331      6.99146      883.894      71.1521    0.0640237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00511, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071865, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43492e-08  2.43492e-08  3.77383e-10
      low eigenvalue method done, cpu time[sec] = 0.072146, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.43e-08  3.77e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.48e-09  3.77e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.77383e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.60447e-57  3.87915e-57  1.18516e-58  1.10811e-57  2.90269e-59  5.22339e-60  7.11843e-68  5.66639e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.4123, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67802, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1422.06      198.362      46.9051      60.8698      6.29231      795.505      64.0369    0.0576213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06623, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071808, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19746e-08  2.19746e-08  3.25312e-10
      low eigenvalue method done, cpu time[sec] = 0.072087, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-08  3.25e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-09  3.25e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25313e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.3323e-57  3.31882e-57  1.00653e-58  9.28978e-58  2.44429e-59  4.88355e-60  7.13357e-68 -3.10058e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.44068, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         6.75361e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.588876, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.64673, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            948.038      132.242      31.2701      40.5799      4.19487      530.336      42.6913    0.0384142
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005115, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47945e-08  1.47945e-08  1.80065e-10
      low eigenvalue method done, cpu time[sec] = 0.072161, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-08   1.8e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.5e-09   1.8e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.80065e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.7162e-57  1.78371e-57  5.29024e-59  4.66312e-58  1.24705e-59  3.61482e-60  7.21217e-68  1.33984e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.41543, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         9.00481e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.584222, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.11183, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            711.028      99.1812      23.4526      30.4349      3.14615      397.752      32.0184    0.0288107
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066247, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005097, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11657e-08  1.11657e-08  1.16134e-10
      low eigenvalue method done, cpu time[sec] = 0.072101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-08  1.16e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-09  1.16e-10         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16134e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.0841e-57  1.12676e-57  3.30533e-59  2.83016e-58   7.6496e-60  2.80586e-60  7.29445e-68  5.63697e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.86938, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          1.1256e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.588211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.79914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            568.823       79.345       18.762      24.3479      2.51692      318.202      25.6148    0.0230485
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066283, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005102, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071855, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.9728e-09   8.9728e-09  8.17865e-11
      low eigenvalue method done, cpu time[sec] = 0.07214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.97e-09  8.18e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.04e-10  8.18e-11         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.17866e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.19306e-57  7.81131e-58   2.2771e-59  1.91011e-58   5.2028e-60  2.25472e-60  7.37843e-68  8.33747e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.52086, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.364015, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.61006, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            474.019      66.1208       15.635      20.2899      2.09744      265.168      21.3456    0.0192071
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066298, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005115, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071928, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.50308e-09  7.50309e-09  6.10133e-11
      low eigenvalue method done, cpu time[sec] = 0.072214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.5e-09   6.1e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.54e-10   6.1e-11         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.1013e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.64794e-57  5.75505e-58  1.67114e-59  1.38019e-58  3.78176e-60  1.85964e-60  7.46204e-68  1.73338e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.14755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.57584e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.97028, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            406.302       56.675      13.4015      17.3914       1.7978      227.287      18.2963    0.0164632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072469, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.44896e-09  6.44896e-09  4.74138e-11
      low eigenvalue method done, cpu time[sec] = 0.072749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.45e-09  4.74e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.47e-10  4.74e-11         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.74139e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.28793e-57  4.42682e-58  1.28216e-59  1.04598e-58   2.8797e-60  1.56517e-60  7.54342e-68   4.2653e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.57672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.80096e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.586472, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.76369, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            355.514      49.5906      11.7263      15.2174      1.57308      198.876      16.0092    0.0144053
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.066261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005111, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.071846, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.6557e-09  5.65571e-09  3.79887e-11
      low eigenvalue method done, cpu time[sec] = 0.072124, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.66e-09   3.8e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.67e-10   3.8e-11         1
         *Z       ---       ---  2.35e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.79887e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03669e-57  3.51655e-58  1.01673e-59  8.21161e-59  2.26964e-60  1.33885e-60  7.62097e-68 -1.46118e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.5087, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 330 K
      Energy reference = 25951 1/cm
      Energy step      = 57 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007367
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.609884
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.382047
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.330336
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.16416
         W1 Well: minimal relaxation eigenvalue = 0.0943475
         W1 Well: maximal relaxation eigenvalue = 0.980095
         W1 Well:       grid size = 523
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3860 1/cm
         B1 Barrier:        grid size = 456
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -41 1/cm
         B2 Barrier:        grid size = 452
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 186 1/cm
         B3 Barrier:        grid size = 536
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4601 1/cm
         B4 Barrier:        grid size = 564
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6196 1/cm
         B5 Barrier: nonpositive number of states at -23183 1/cm => truncating
         B5 Barrier:        grid size = 862
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23183 1/cm
         B6 Barrier:        grid size = 429
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1497 1/cm
         B7 Barrier:        grid size = 373
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4690 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16774 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.95455, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 523
      MasterEquation::Barrier::truncate: real weight = 1.2824e+54
      MasterEquation::Barrier::truncate: effective weight = 3.33053e+50
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 523
      MasterEquation::Barrier::truncate: real weight = 1.15008e+56
      MasterEquation::Barrier::truncate: effective weight = 2.98682e+52
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 523
      MasterEquation::Barrier::truncate: real weight = 2.58752e+59
      MasterEquation::Barrier::truncate: effective weight = 8.83311e+51
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3860  -3860 1.78e+09 1.67e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -41 3.69e+14
         B2    187  5.2e+13
         B3  -3860 1.24e+13
         B4  -3860  1.6e+13
         B5  -3860 1.66e+12
         B6   1498 2.09e+14
         B7   4690 1.71e+13
         B8  16774 1.66e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.84e-07  7.79e-07  6.64e-15  5.76e-18   3.7e-52   0.00275  5.68e+03   1.7e+27
          R  3.52e+06         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1  1.28e+06     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  1.51e+14  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.73e+17  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4   2.7e+51  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5       364  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  0.000176     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7   5.9e-28  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.58e+34  9.83e+34  8.38e+26  7.27e+23  4.67e-11  3.46e+38  7.16e+44  2.14e+68
          R  2.79e-35         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1  1.02e-35     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  1.19e-27  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.38e-24  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  2.14e+10  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5  2.89e-39  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6   1.4e-45     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  4.67e-69  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
   MasterEquation::set:  done, cpu time[sec] = 3.96916, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+08
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556266, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.27104, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15061.3      2123.35      504.955      653.359      67.7986      8533.93      696.789     0.677179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061846, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.26791e-07  2.26791e-07  7.75867e-09
      low eigenvalue method done, cpu time[sec] = 0.067417, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.27e-07  7.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-08  7.76e-09         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.75867e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.54614e-54  4.53294e-54  2.00542e-55  2.63349e-54  6.25102e-56  8.15214e-58  1.00527e-65  1.08289e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.94217, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.554787, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51126, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5020.43      707.783      168.318      217.786      22.5995      2844.64      232.263     0.225726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06188, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004847, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067173, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.95307e-08  7.95307e-08  2.39533e-09
      low eigenvalue method done, cpu time[sec] = 0.067441, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.95e-08   2.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.13e-09   2.4e-09         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.39533e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.99262e-54  1.38164e-54  4.68987e-56  4.97973e-55  1.25022e-56   7.5438e-58  1.00912e-65 -1.06942e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.17919, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         2.20306e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.554784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.50624, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3012.26       424.67      100.991      130.672      13.5597      1706.79      139.358     0.135436
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004843, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067116, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.87325e-08  4.87325e-08   1.2934e-09
      low eigenvalue method done, cpu time[sec] = 0.067383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.87e-08  1.29e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.96e-09  1.29e-09         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2934e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68564e-54   7.2402e-55  2.29096e-56  2.24333e-55  5.77674e-57  6.52911e-58   1.0131e-65 -1.31152e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.17783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.08429e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556265, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.5172, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2151.61      303.336      72.1364       93.337      9.68552      1219.13      99.5413    0.0967398
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061871, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067145, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.5251e-08   3.5251e-08  8.38509e-10
      low eigenvalue method done, cpu time[sec] = 0.067413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-08  8.39e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-09  8.39e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.38509e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11923e-54  4.58359e-55  1.40318e-56  1.31019e-55  3.42806e-57  5.64059e-58  1.01721e-65    4.142e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.19041, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.96551e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.557486, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51296, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1673.48      235.928      56.1061      72.5954      7.53318      948.215       77.421    0.0752421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061813, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004833, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067102, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76577e-08  2.76577e-08  5.97859e-10
      low eigenvalue method done, cpu time[sec] = 0.067367, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-08  5.98e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.8e-09  5.98e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.9786e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.10956e-55  3.20677e-55  9.63107e-57  8.70355e-56   2.3034e-57  4.91451e-58  1.02144e-65  1.41576e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.18418, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.555981, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.69958, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1506.13      212.335      50.4955      65.3359      6.77986      853.393      69.6789    0.0677179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061823, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067146, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.49787e-08  2.49786e-08  5.16891e-10
      low eigenvalue method done, cpu time[sec] = 0.067434, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.5e-08  5.17e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.52e-09  5.17e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.16891e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.05577e-55  2.75003e-55  8.20354e-57  7.31767e-56  1.94565e-57  4.60435e-58  1.02361e-65  1.83063e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.37155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         6.60918e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556035, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1004.09      141.557      33.6637      43.5573      4.51991      568.929      46.4526    0.0451452
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.68597e-08  1.68598e-08  2.89322e-10
      low eigenvalue method done, cpu time[sec] = 0.067354, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.69e-08  2.89e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-09  2.89e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.89323e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.03803e-55  1.49128e-55  4.35957e-57  3.71258e-56  1.00408e-57  3.43838e-58  1.03483e-65 -1.69921e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.19144, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         8.81225e+09
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.55548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52361, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            753.064      106.167      25.2478      32.6679      3.38993      426.697      34.8395    0.0338589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06182, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.00483, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067147, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27442e-08  1.27442e-08  1.88042e-10
      low eigenvalue method done, cpu time[sec] = 0.067418, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-08  1.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.28e-09  1.88e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88043e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66101e-55  9.47842e-56  2.74445e-57  2.26929e-56  6.20665e-58  2.68745e-58  1.04656e-65 -1.59471e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.191, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.10153e+10
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556329, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51461, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            602.451       84.934      20.1982      26.1344      2.71195      341.357      27.8716    0.0270871
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004824, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067072, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02522e-08  1.02522e-08  1.33199e-10
      low eigenvalue method done, cpu time[sec] = 0.067342, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-08  1.33e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-09  1.33e-10         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33199e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90327e-55  6.60137e-56   1.9014e-57  1.53957e-56  4.24536e-58  2.17182e-58  1.05851e-65 -4.20761e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.17982, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+10
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.555867, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52109, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            502.043      70.7783      16.8318      21.7786      2.25995      284.464      23.2263    0.0225726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061744, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.57973e-09  8.57973e-09  9.98264e-11
      low eigenvalue method done, cpu time[sec] = 0.067287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.58e-09  9.98e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.57e-10  9.98e-11         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.98264e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.43684e-55  4.88142e-56  1.40164e-57  1.11695e-56  3.09952e-58  1.79982e-58  1.07039e-65  1.53789e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.1924, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.54214e+10
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556623, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51837, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            430.322      60.6671      14.4273      18.6674       1.9371      243.827      19.9083     0.019348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004814, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.37884e-09  7.37884e-09  7.78706e-11
      low eigenvalue method done, cpu time[sec] = 0.067368, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.38e-09  7.79e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.36e-10  7.79e-11         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.78708e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12727e-55  3.76607e-56  1.07932e-57  8.49269e-57  2.36871e-58  1.52104e-58  1.08193e-65  -1.1485e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.18716, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.76245e+10
      global relaxation matrix dimension = 523
      setting global matrices ... done, cpu time[sec] = 0.556003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51475, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            376.532      53.0837      12.6239       16.334      1.69497      213.348      17.4197    0.0169295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.061852, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.067123, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.47438e-09  6.47438e-09  6.25912e-11
      low eigenvalue method done, cpu time[sec] = 0.06745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.47e-09  6.26e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.45e-10  6.26e-11         1
         *Z       ---       ---  6.42e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.25917e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.10321e-56   2.9992e-56  8.58518e-58  6.68549e-57  1.87252e-58  1.30578e-58  1.09292e-65  7.10338e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.18517, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 340 K
      Energy reference = 26229 1/cm
      Energy step      = 59 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007262
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.58765
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.368812
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.273538
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.03314
         W1 Well: minimal relaxation eigenvalue = 0.0935321
         W1 Well: maximal relaxation eigenvalue = 0.978796
         W1 Well:       grid size = 511
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3919 1/cm
         B1 Barrier:        grid size = 445
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -26 1/cm
         B2 Barrier:        grid size = 441
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 209 1/cm
         B3 Barrier:        grid size = 523
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4628 1/cm
         B4 Barrier:        grid size = 550
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6221 1/cm
         B5 Barrier: nonpositive number of states at -23213 1/cm => truncating
         B5 Barrier:        grid size = 838
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23213 1/cm
         B6 Barrier:        grid size = 420
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1448 1/cm
         B7 Barrier:        grid size = 365
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16729 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.72477, elapsed time[sec] = 1
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 511
      MasterEquation::Barrier::truncate: real weight = 1.4364e+53
      MasterEquation::Barrier::truncate: effective weight = 3.86139e+49
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 511
      MasterEquation::Barrier::truncate: real weight = 1.12071e+55
      MasterEquation::Barrier::truncate: effective weight = 3.01271e+51
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 511
      MasterEquation::Barrier::truncate: real weight = 5.11034e+57
      MasterEquation::Barrier::truncate: effective weight = 7.48097e+50
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3919  -3919 1.74e+09 1.75e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -26 4.01e+14
         B2    210 5.71e+13
         B3  -3919 1.37e+13
         B4  -3919 1.76e+13
         B5  -3919 1.84e+12
         B6   1449  2.3e+14
         B7   4694  1.9e+13
         B8  16730    2e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.91e-07   5.1e-07  8.12e-15  8.68e-18  5.78e-51   0.00156  2.16e+03  1.38e+26
          R  5.23e+06         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  1.96e+06     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  1.23e+14  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  1.15e+17   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  1.73e+50  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5       642  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6  0.000463  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  7.22e-27  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.83e+32  1.55e+33  2.48e+25  2.65e+22  1.76e-11  4.75e+36  6.59e+42  4.22e+65
          R  1.72e-33         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  6.43e-34     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  4.04e-26  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  3.78e-23   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  5.68e+10  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5   2.1e-37  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6  1.52e-43  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  2.37e-66  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
   MasterEquation::set:  done, cpu time[sec] = 3.74034, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+08
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.530576, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3278, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15931.8      2269.97      542.852      700.356      72.9497      9141.67      756.902     0.793523
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057952, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004556, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062944, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.4839e-07   2.4839e-07  1.09878e-08
      low eigenvalue method done, cpu time[sec] = 0.063202, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.48e-07   1.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-08   1.1e-08         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09878e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.26303e-52  2.76271e-52  1.18488e-53  1.50409e-52  3.59128e-54  5.73673e-56  1.07915e-63  2.07022e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5310.61      756.657      180.951      233.452      24.3166      3047.22      252.301     0.264508
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05794, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.82017e-08  8.82017e-08  3.49921e-09
      low eigenvalue method done, cpu time[sec] = 0.063136, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.82e-08   3.5e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.97e-09   3.5e-09         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.49921e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89268e-52  8.60557e-53  2.85914e-54   2.9445e-53  7.45039e-55  5.33661e-56  1.08327e-63  1.82546e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.9525, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         2.15759e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.530947, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3186.37      453.994       108.57      140.071      14.5899      1828.33       151.38     0.158705
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.43351e-08  5.43351e-08  1.91619e-09
      low eigenvalue method done, cpu time[sec] = 0.063131, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.43e-08  1.92e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.49e-09  1.92e-09         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91619e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08027e-52  4.55903e-53  1.41687e-54  1.34658e-53  3.49755e-55  4.64706e-56  1.08753e-63 -4.88791e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.95336, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.02062e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531401, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35708, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2275.98      324.282      77.5503      100.051      10.4214      1305.95      108.129      0.11336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057938, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004513, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062883, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.94298e-08  3.94298e-08  1.25376e-09
      low eigenvalue method done, cpu time[sec] = 0.063142, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.94e-08  1.25e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.97e-09  1.25e-09         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25376e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.23686e-53  2.90745e-53  8.75962e-55  7.93941e-54  2.09645e-55  4.03636e-56  1.09193e-63  6.30059e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96104, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.88366e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531322, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36011, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1770.2      252.219      60.3169      77.8174      8.10552      1015.74      84.1002    0.0881692
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004509, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.10046e-08  3.10046e-08  9.00079e-10
      low eigenvalue method done, cpu time[sec] = 0.063116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-08     9e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.12e-09     9e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.00079e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.27881e-53  2.04533e-53  6.05398e-55  5.31031e-54  1.41892e-55  3.53329e-56  1.09646e-63 -4.86111e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.95858, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.530339, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36967, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1593.18      226.997      54.2852      70.0356      7.29497      914.167      75.6902    0.0793523
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05842, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00452, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063369, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80257e-08  2.80257e-08  7.80408e-10
      low eigenvalue method done, cpu time[sec] = 0.063691, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-08   7.8e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.81e-09   7.8e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.80408e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.6058e-53  1.75805e-53  5.17145e-55  4.47727e-54  1.20213e-55  3.31731e-56  1.09877e-63  1.06694e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.79895, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         6.47276e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531913, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36091, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1062.12      151.331      36.1901      46.6904      4.86331      609.445      50.4601    0.0529015
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0584, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004518, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063353, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89743e-08  1.89743e-08  4.41598e-10
      low eigenvalue method done, cpu time[sec] = 0.06362, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.9e-08  4.42e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.9e-09  4.42e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.41598e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66448e-53  9.61751e-54  2.77816e-55  2.29525e-54  6.27316e-56   2.4994e-56  1.11078e-63 -1.09514e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         8.63035e+09
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531698, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            796.592      113.499      27.1426      35.0178      3.64748      457.083      37.8451    0.0396761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062879, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.43696e-08  1.43696e-08  2.89186e-10
      low eigenvalue method done, cpu time[sec] = 0.063139, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.44e-08  2.89e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-09  2.89e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.89186e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.76915e-53  6.15008e-54  1.76198e-55  1.41276e-54  3.90693e-56   1.9671e-56  1.12329e-63  3.11234e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.07879e+10
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.53279, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36004, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            637.274      90.7989      21.7141      28.0142      2.91799      365.667      30.2761    0.0317409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057869, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062829, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15747e-08  1.15747e-08  2.06018e-10
      low eigenvalue method done, cpu time[sec] = 0.063086, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08  2.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-09  2.06e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.06017e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.27267e-53  4.30301e-54  1.22759e-55   9.6342e-55  2.68731e-56  1.59866e-56  1.13602e-63  1.73583e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.79473, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+10
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.530819, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3587, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            531.061      75.6657      18.0951      23.3452      2.43166      304.722      25.2301    0.0264508
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.69573e-09  9.69574e-09  1.55107e-10
      low eigenvalue method done, cpu time[sec] = 0.063137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.7e-09  1.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.62e-10  1.55e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55107e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.65211e-54  3.19351e-54  9.08967e-56  7.01786e-55  1.97063e-56  1.33113e-56  1.14865e-63 -1.70813e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.95654, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.51031e+10
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.531129, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            455.195      64.8563      15.5101      20.0102      2.08428      261.191      21.6258    0.0226721
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057877, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004527, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062831, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.34482e-09  8.34482e-09  1.21449e-10
      low eigenvalue method done, cpu time[sec] = 0.063088, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.34e-09  1.21e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.27e-10  1.21e-10         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21448e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.60145e-54  2.47123e-54  7.02505e-56  5.35351e-55   1.5114e-56  1.12954e-56   1.1609e-63 -7.49537e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.94624, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.72607e+10
      global relaxation matrix dimension = 511
      setting global matrices ... done, cpu time[sec] = 0.529658, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34874, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            398.296      56.7493      13.5713      17.5089      1.82374      228.542      18.9225    0.0198381
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057859, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062825, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.32631e-09   7.3263e-09  9.79305e-11
      low eigenvalue method done, cpu time[sec] = 0.063083, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.33e-09  9.79e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.25e-10  9.79e-11         1
         *Z       ---       ---  1.92e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.79301e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.15839e-54    1.973e-54  5.60517e-56  4.22587e-55   1.1984e-56  9.73153e-57  1.17256e-63  2.39877e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.94285, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 350 K
      Energy reference = 26507 1/cm
      Energy step      = 60 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007149
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.561218
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.361891
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.313945
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.03987
         W1 Well: minimal relaxation eigenvalue = 0.0927629
         W1 Well: maximal relaxation eigenvalue = 0.981531
         W1 Well:       grid size = 509
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4032 1/cm
         B1 Barrier:        grid size = 442
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -13 1/cm
         B2 Barrier:        grid size = 439
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 519
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4633 1/cm
         B4 Barrier:        grid size = 545
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 827
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23113 1/cm
         B6 Barrier:        grid size = 417
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1487 1/cm
         B7 Barrier:        grid size = 364
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4667 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16727 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.72059, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 1.83113e+52
      MasterEquation::Barrier::truncate: effective weight = 5.00594e+48
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 1.25351e+54
      MasterEquation::Barrier::truncate: effective weight = 3.42684e+50
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 1.38583e+56
      MasterEquation::Barrier::truncate: effective weight = 7.55239e+49
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4032  -4032 1.68e+09 1.83e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -13 4.36e+14
         B2    168 6.27e+13
         B3  -4032 1.51e+13
         B4  -4032 1.94e+13
         B5  -4032 2.03e+12
         B6   1488 2.53e+14
         B7   4667 2.12e+13
         B8  16727  2.4e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.63e-07  4.23e-07  1.22e-14  1.58e-17  9.56e-50   0.00113  1.08e+03  1.62e+25
          R  6.14e+06         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  2.36e+06     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  8.22e+13  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3  6.31e+16  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  1.05e+49   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5       884  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  0.000928  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  6.17e-26  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.2e+31  3.11e+31  8.94e+23  1.16e+21  7.02e-12  8.31e+34  7.91e+40  1.19e+63
          R  8.35e-32         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  3.22e-32     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  1.12e-24  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3   8.6e-22  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  1.42e+11   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5   1.2e-35  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  1.26e-41  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  8.41e-64  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
   MasterEquation::set:  done, cpu time[sec] = 3.73514, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+08
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.527057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31304, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16832.5       2423.7      582.819      749.774      78.3871      9779.14      820.873     0.926544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057447, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062389, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2629e-07   2.2629e-07   1.2477e-08
      low eigenvalue method done, cpu time[sec] = 0.062651, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.26e-07  1.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-08  1.25e-08         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2477e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.55909e-50  1.32891e-50  5.54388e-52  6.83042e-51  1.64054e-52  3.17692e-54  8.85696e-62 -1.47303e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88682, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.528833, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5610.84      807.901      194.273      249.925       26.129      3259.71      273.624     0.308848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057374, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004476, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062337, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.14482e-08  8.14482e-08  4.09112e-09
      low eigenvalue method done, cpu time[sec] = 0.062593, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.14e-08  4.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.22e-09  4.09e-09         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.09112e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.4398e-51  4.22708e-51  1.37835e-52  1.38178e-51  3.52248e-53  2.96654e-54  8.89066e-62  -1.6912e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90482, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.11455e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.528688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32012, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3366.5       484.74      116.564      149.955      15.6774      1955.83      164.175     0.185309
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057415, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004489, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062339, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.04674e-08  5.04674e-08  2.27055e-09
      low eigenvalue method done, cpu time[sec] = 0.062594, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.05e-08  2.27e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-09  2.27e-09         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.27055e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.45673e-51  2.26321e-51  6.92558e-53  6.41042e-52  1.67868e-53  2.59665e-54  8.92546e-62  2.84902e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89857, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.96037e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.5283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3282, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2404.64      346.243      83.2599      107.111      11.1982      1397.02      117.268     0.132363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057322, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004481, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062237, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67515e-08  3.67515e-08  1.49883e-09
      low eigenvalue method done, cpu time[sec] = 0.062499, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.68e-08   1.5e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-09   1.5e-09         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.49883e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.68704e-51  1.45366e-51  4.32058e-53  3.81411e-52   1.0159e-53  2.26622e-54   8.9614e-62 -8.38074e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         3.80619e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.52692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31719, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1870.28        269.3      64.7577      83.3082      8.70968      1086.57      91.2081     0.102949
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057313, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004477, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062223, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89683e-08  2.89683e-08  1.08315e-09
      low eigenvalue method done, cpu time[sec] = 0.062483, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.9e-08  1.08e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-09  1.08e-09         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08315e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.70694e-51  1.02812e-51  3.00616e-53  2.56797e-52  6.92404e-54  1.99221e-54  8.99846e-62  1.67173e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.528599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32256, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1683.25       242.37      58.2819      74.9774      7.83871      977.914      82.0873    0.0926544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004515, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062168, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.621e-08    2.621e-08  9.41739e-10
      low eigenvalue method done, cpu time[sec] = 0.062428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.62e-08  9.42e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.61e-09  9.42e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.41739e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.36827e-51  8.85708e-52  2.57511e-53  2.17101e-52  5.88303e-54  1.87406e-54  9.01738e-62  1.48239e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89758, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         6.34365e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.529235, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32669, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1122.17       161.58      38.8546      49.9849      5.22581      651.942      54.7249    0.0617696
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05742, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004487, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.78046e-08  1.78045e-08  5.38551e-10
      low eigenvalue method done, cpu time[sec] = 0.062592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.78e-08  5.39e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-09  5.39e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.38551e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3845e-51  4.88724e-52  1.39812e-53  1.12428e-52  3.10331e-54  1.42369e-54  9.11538e-62  -4.1784e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         8.45821e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.531703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32336, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            841.626      121.185       29.141      37.4887      3.91936      488.957      41.0437    0.0463272
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062273, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35115e-08  1.35115e-08  3.55289e-10
      low eigenvalue method done, cpu time[sec] = 0.062532, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-08  3.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-09  3.55e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.55288e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.26082e-52  3.14405e-52  8.93257e-54  6.96764e-53    1.947e-54  1.12779e-54  9.21741e-62 -1.88706e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.91315, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.05728e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.528153, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32676, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              673.3      96.9481      23.3128      29.9909      3.13549      391.165      32.8349    0.0370618
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062218, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08991e-08  1.08991e-08  2.54535e-10
      low eigenvalue method done, cpu time[sec] = 0.062483, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-08  2.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-09  2.55e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.54534e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.69959e-52  2.20982e-52    6.258e-54  4.77576e-53  1.34659e-54  9.21464e-55  9.32096e-62  1.97634e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532968, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31877, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            561.084      80.7901      19.4273      24.9925       2.6129      325.971      27.3624    0.0308848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05739, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062331, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.13936e-09  9.13935e-09  1.92498e-10
      low eigenvalue method done, cpu time[sec] = 0.062595, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.14e-09  1.92e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     9e-10  1.92e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.92498e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.10416e-52    1.646e-52  4.65427e-54  3.49278e-53  9.91773e-55  7.70732e-55  9.42354e-62  2.33646e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90529, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.48019e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.527718, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32713, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            480.929      69.2486       16.652      21.4221      2.23963      279.404      23.4535    0.0264727
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0045, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062173, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.87235e-09  7.87234e-09  1.51289e-10
      low eigenvalue method done, cpu time[sec] = 0.062433, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.87e-09  1.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-10  1.51e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51289e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.03491e-52  1.27754e-52  3.61026e-54  2.67317e-53  7.63371e-55  6.56572e-55  9.52297e-62  -5.4492e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90161, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.69164e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.531005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32025, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            420.813      60.5926      14.5705      18.7443      1.95968      244.478      20.5218    0.0231636
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05905, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06398, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.91601e-09  6.91598e-09  1.22379e-10
      low eigenvalue method done, cpu time[sec] = 0.064249, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.92e-09  1.22e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.79e-10  1.22e-10         1
         *Z       ---       ---  6.87e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22379e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.27941e-52  1.02256e-52  2.88948e-54   2.1159e-53  6.07102e-55  5.67611e-55  9.61748e-62  2.82488e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.90653, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 360 K
      Energy reference = 26785 1/cm
      Energy step      = 62 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007221
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.544222
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.347444
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.30625
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.91604
         W1 Well: minimal relaxation eigenvalue = 0.091991
         W1 Well: maximal relaxation eigenvalue = 0.980253
         W1 Well:       grid size = 498
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4091 1/cm
         B1 Barrier:        grid size = 433
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -61 1/cm
         B2 Barrier:        grid size = 429
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 507
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4649 1/cm
         B4 Barrier:        grid size = 532
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6199 1/cm
         B5 Barrier: nonpositive number of states at -23125 1/cm => truncating
         B5 Barrier:        grid size = 805
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23125 1/cm
         B6 Barrier:        grid size = 408
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 356
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4712 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16741 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.55439, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 2.62796e+51
      MasterEquation::Barrier::truncate: effective weight = 7.42378e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 1.59059e+53
      MasterEquation::Barrier::truncate: effective weight = 4.4933e+49
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 5.02779e+54
      MasterEquation::Barrier::truncate: effective weight = 8.32539e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4091  -4091 1.65e+09 1.92e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -61 4.73e+14
         B2    188 6.88e+13
         B3  -4091 1.66e+13
         B4  -4091 2.13e+13
         B5  -4091 2.24e+12
         B6   1489 2.78e+14
         B7   4713 2.37e+13
         B8  16741 2.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.12e-07  2.83e-07  1.42e-14  2.23e-17  1.08e-48  0.000667       445   1.7e+24
          R  8.94e+06         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  3.53e+06     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  7.03e+13  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  4.49e+16  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  9.26e+47  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5   1.5e+03  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6   0.00225  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  5.87e-25  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.05e+29  7.72e+29  3.87e+22  6.07e+19  2.94e-12  1.82e+33  1.21e+39  4.64e+60
          R  3.28e-30         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1   1.3e-30     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  2.58e-23  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  1.65e-20  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4   3.4e+11  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5   5.5e-34  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6  8.24e-40  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  2.15e-61  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.56968, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+08
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.505085, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              17764      2584.76      624.935      801.696      84.1222      10447.2      888.874       1.0769
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054034, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058712, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.54806e-07  2.54806e-07  1.73284e-08
      low eigenvalue method done, cpu time[sec] = 0.05896, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.55e-07  1.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-08  1.73e-08         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.73284e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00257e-48  5.15218e-49  2.09614e-50  2.51526e-49  6.07437e-51  1.40559e-52  5.70289e-60   1.6215e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.75883, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.506605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17201, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5921.33      861.587      208.312      267.232      28.0407       3482.4      296.291     0.358967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05391, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    9.321e-08    9.321e-08  5.84059e-09
      low eigenvalue method done, cpu time[sec] = 0.058816, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.32e-08  5.84e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.36e-09  5.84e-09         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.84059e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.78963e-49  1.67217e-49  5.36271e-51  5.24901e-50  1.34737e-51  1.31799e-52  5.72452e-60  1.04792e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.66967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.07375e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.504103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17448, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3552.8      516.952      124.987      160.339      16.8244      2089.44      177.775      0.21538
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0539, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058563, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.81598e-08  5.81598e-08  3.28343e-09
      low eigenvalue method done, cpu time[sec] = 0.058814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-08  3.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.81e-09  3.28e-09         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.28343e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.21766e-49  9.04514e-50   2.7307e-51  2.46876e-50  6.51398e-52  1.15971e-52  5.74686e-60  3.25129e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67081, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.90325e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.503716, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17048, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2537.71      369.251      89.2764      114.528      12.0175      1492.46      126.982     0.153843
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058519, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.25323e-08  4.25323e-08  2.18606e-09
      low eigenvalue method done, cpu time[sec] = 0.058766, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.25e-08  2.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-09  2.19e-09         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18606e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.51097e-49  5.85021e-50   1.7186e-51   1.4818e-50  3.97863e-52  1.01695e-52  5.76994e-60 -5.10499e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67089, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         3.73275e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.5053, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17171, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1973.78      287.196      69.4372      89.0774      9.34691       1160.8      98.7638     0.119656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058556, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.36227e-08  3.36227e-08  1.58995e-09
      low eigenvalue method done, cpu time[sec] = 0.058811, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.36e-08  1.59e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.34e-09  1.59e-09         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58995e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11633e-49  4.15942e-50   1.2036e-51  1.00406e-50  2.73007e-52  8.97747e-53  5.79373e-60  3.66793e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.53337, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.504676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1776.4      258.476      62.4935      80.1696      8.41222      1044.72      88.8874      0.10769
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053932, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004239, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058576, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.04566e-08  3.04565e-08  1.38609e-09
      low eigenvalue method done, cpu time[sec] = 0.05888, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-08  1.39e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-09  1.39e-09         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38609e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.79265e-50  3.59119e-50  1.03384e-51  8.51092e-51   2.3261e-52   8.4612e-53  5.80587e-60 -2.51217e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67465, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         6.22124e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.50529, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.176, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1184.27      172.317      41.6623      53.4464      5.60814      696.481      59.2583    0.0717934
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053881, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004244, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058532, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07739e-08  2.07739e-08  8.00884e-10
      low eigenvalue method done, cpu time[sec] = 0.058778, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-08  8.01e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.05e-09  8.01e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.00884e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.78384e-50  1.99845e-50  5.67182e-52  4.45126e-51  1.24001e-52   6.4801e-53  5.86872e-60 -1.11692e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51732, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         8.29499e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.503348, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.16927, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            888.199      129.238      31.2467      40.0848      4.20611      522.361      44.4437    0.0538451
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058608, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5805e-08   1.5805e-08  5.32193e-10
      low eigenvalue method done, cpu time[sec] = 0.058858, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-08  5.32e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-09  5.32e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.32193e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89688e-50   1.2933e-50  3.65004e-52  2.77728e-51  7.83615e-53  5.16616e-53  5.93403e-60  2.99644e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.66737, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.03687e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.503336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17156, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            710.559       103.39      24.9974      32.0679      3.36489      417.888       35.555    0.0430761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053982, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058635, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27716e-08  1.27716e-08  3.83388e-10
      low eigenvalue method done, cpu time[sec] = 0.058885, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.28e-08  3.83e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-09  3.83e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.83388e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83485e-50  9.13127e-51  2.57127e-52  1.91322e-51  5.44921e-53  4.24322e-53  6.00017e-60   2.0099e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.6656, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.505836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17298, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            592.133      86.1587      20.8312      26.7232      2.80407       348.24      29.6291    0.0358967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058558, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07236e-08  1.07236e-08  2.91239e-10
      low eigenvalue method done, cpu time[sec] = 0.058872, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-08  2.91e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-09  2.91e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.91239e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.16946e-50  6.82616e-51  1.92077e-52  1.40483e-51  4.03074e-53  3.56492e-53  6.06559e-60  6.23607e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67459, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.45162e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.504396, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.17449, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            507.542      73.8503      17.8553      22.9056      2.40349      298.492      25.3964    0.0307686
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00425, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.24643e-09  9.24641e-09  2.29741e-10
      low eigenvalue method done, cpu time[sec] = 0.058801, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.25e-09   2.3e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.04e-10   2.3e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.2974e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7214e-50  5.31403e-51  1.49536e-52   1.0787e-51  3.11353e-53  3.04857e-53  6.12892e-60  3.65188e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.6764, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1           1.659e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.505571, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1737, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            444.099       64.619      15.6234      20.0424      2.10305       261.18      22.2218    0.0269225
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.053836, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.058499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.1298e-09   8.1298e-09  1.86425e-10
      low eigenvalue method done, cpu time[sec] = 0.058745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.13e-09  1.86e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.94e-10  1.86e-10         1
         *Z       ---       ---  2.33e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.86425e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40355e-50  4.26427e-51  1.20053e-52  8.56181e-52  2.48361e-53  2.64444e-53  6.18905e-60 -1.91995e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67141, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 370 K
      Energy reference = 27063 1/cm
      Energy step      = 64 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.009918
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.532836
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.332644
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.305963
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.83167
         W1 Well: minimal relaxation eigenvalue = 0.0912352
         W1 Well: maximal relaxation eigenvalue = 0.97906
         W1 Well:       grid size = 488
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4169 1/cm
         B1 Barrier:        grid size = 423
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -9 1/cm
         B2 Barrier:        grid size = 420
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 495
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4616 1/cm
         B4 Barrier:        grid size = 520
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 784
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23113 1/cm
         B6 Barrier:        grid size = 400
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1462 1/cm
         B7 Barrier:        grid size = 350
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4662 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16759 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.44115, elapsed time[sec] = 1
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 4.20494e+50
      MasterEquation::Barrier::truncate: effective weight = 1.22618e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 2.26607e+52
      MasterEquation::Barrier::truncate: effective weight = 6.60796e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 2.38408e+53
      MasterEquation::Barrier::truncate: effective weight = 1.05152e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4169  -4169 1.62e+09 2.02e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -9 5.13e+14
         B2    183 7.55e+13
         B3  -4169 1.83e+13
         B4  -4169 2.35e+13
         B5  -4169 2.47e+12
         B6   1463 3.06e+14
         B7   4663 2.63e+13
         B8  16759 3.42e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.37e-08  2.07e-07  1.76e-14  3.29e-17  1.14e-47  0.000433       207  2.17e+23
          R  1.19e+07         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.82e+06     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  5.68e+13  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  3.04e+16  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  8.74e+46  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  2.31e+03  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6   0.00484  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  4.62e-24  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.44e+27  2.34e+28  1.99e+21  3.71e+18  1.29e-12  4.88e+31  2.33e+37  2.44e+58
          R  1.06e-28         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.28e-29     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  5.03e-22  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  2.69e-19  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  7.75e+11  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  2.05e-32  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6  4.29e-38  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7   4.1e-59  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.45559, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+08
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.486262, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.09797, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18726.7      2753.45       669.28      856.211      90.1661      11146.8       961.08      1.24615
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05102, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004174, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.69555e-07  2.69555e-07  2.20587e-08
      low eigenvalue method done, cpu time[sec] = 0.055832, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.7e-07  2.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-08  2.21e-08         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.20587e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.21943e-47  1.63725e-47  6.51183e-49  7.63176e-48  1.85286e-49  5.04688e-51  2.92641e-58  3.33152e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.58441, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.488155, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.06358, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6242.22      917.816      223.093      285.404      30.0554       3715.6       320.36     0.415385
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05097, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004076, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055442, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00337e-07  1.00337e-07  7.63158e-09
      low eigenvalue method done, cpu time[sec] = 0.055688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-07  7.63e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     1e-08  7.63e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.63158e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.24573e-47  5.41799e-48   1.7122e-49  1.64031e-48  4.23811e-50  4.75572e-51  2.93745e-58 -1.13644e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.03499e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.484852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05928, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3745.33       550.69      133.856      171.242      18.0332      2229.36      192.216     0.249231
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050888, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055396, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.30787e-08  6.30787e-08  4.34351e-09
      low eigenvalue method done, cpu time[sec] = 0.055635, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.31e-08  4.34e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.26e-09  4.34e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.34351e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.37661e-48  2.95998e-48  8.83143e-50  7.81667e-49  2.07723e-50  4.20804e-51  2.94887e-58  2.54999e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49813, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.84899e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.485518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05584, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2675.24       393.35      95.6114      122.316      12.8809       1592.4      137.297     0.178022
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050896, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004095, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.63397e-08  4.63397e-08  2.91578e-09
      low eigenvalue method done, cpu time[sec] = 0.055634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.63e-08  2.92e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.58e-09  2.92e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.91578e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.06656e-48  1.92745e-48  5.60572e-50  4.73143e-49  1.28003e-50  3.70823e-51  2.96066e-58  3.72451e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49909, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         3.66299e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.48603, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2080.74      305.939      74.3644      95.1346      10.0185      1238.53      106.787     0.138462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051103, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004103, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055601, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67481e-08  3.67481e-08  2.13389e-09
      low eigenvalue method done, cpu time[sec] = 0.055841, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-08  2.13e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.62e-09  2.13e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.13389e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.76621e-48  1.37743e-48  3.95096e-50  3.22588e-49   8.8408e-51  3.28755e-51  2.97281e-58  1.34923e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50215, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.48624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.08714, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1872.67      275.345       66.928      85.6211      9.01661      1114.68       96.108     0.124615
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05088, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004101, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055378, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.33293e-08  3.33293e-08  1.86516e-09
      low eigenvalue method done, cpu time[sec] = 0.055617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.33e-08  1.87e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.28e-09  1.87e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.86516e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.31232e-48  1.19183e-48  3.40274e-50  2.74142e-49  7.55306e-51  3.10449e-51  2.97901e-58  1.53407e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52798, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         6.10498e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.486169, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05298, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1248.44      183.563      44.6186      57.0808      6.01108      743.119       64.072     0.083077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050892, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004105, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055389, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.28344e-08  2.28344e-08  1.08857e-09
      low eigenvalue method done, cpu time[sec] = 0.055628, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.28e-08  1.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-09  1.09e-09         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08857e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    1.976e-48  6.68777e-49  1.88592e-50  1.44767e-49  4.06792e-51  2.39703e-51  3.01107e-58  1.91384e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         8.13998e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.485058, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.08071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            936.333      137.672       33.464      42.8106      4.50831       557.34       48.054    0.0623077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050887, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004091, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055379, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74207e-08  1.74207e-08  7.28511e-10
      low eigenvalue method done, cpu time[sec] = 0.055626, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-08  7.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-09  7.29e-10         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.28511e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3408e-48  4.35342e-49  1.22235e-50  9.09244e-50  2.58895e-51   1.9232e-51  3.04433e-58  1.03204e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51789, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.0175e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.485606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            749.066      110.138      26.7712      34.2485      3.60665      445.872      38.4432    0.0498462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004116, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0554, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41043e-08  1.41043e-08  5.27676e-10
      low eigenvalue method done, cpu time[sec] = 0.055644, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-08  5.28e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-09  5.28e-10         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.27675e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.80722e-49  3.08751e-49  8.65778e-51  6.29489e-50  1.81001e-51  1.58788e-51  3.07796e-58  4.54361e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.54233, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.48661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.07759, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            624.222      91.7816      22.3093      28.5404      3.00554       371.56       32.036    0.0415385
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050941, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004101, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055439, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.18596e-08  1.18596e-08  4.02608e-10
      low eigenvalue method done, cpu time[sec] = 0.055687, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.19e-08  4.03e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-09  4.03e-10         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.02608e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.53848e-49  2.31642e-49  6.49579e-51  4.64051e-50  1.34458e-51  1.33994e-51  3.11117e-58 -6.09679e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52026, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.4245e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.484847, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.07414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            535.047        78.67      19.1223      24.4632      2.57618       318.48      27.4594    0.0356044
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050911, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004111, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055416, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02374e-08  1.02374e-08  3.18757e-10
      low eigenvalue method done, cpu time[sec] = 0.055655, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-08  3.19e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.95e-10  3.19e-10         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.18756e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.00364e-49  1.80869e-49  5.07551e-51  3.57483e-50  1.04229e-51  1.15023e-51  3.14329e-58  7.48015e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50857, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.628e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.483682, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.07721, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            468.166      68.8362       16.732      21.4053      2.25415       278.67       24.027    0.0311539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004104, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055406, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   9.0092e-09  9.00919e-09  2.59467e-10
      low eigenvalue method done, cpu time[sec] = 0.055653, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.01e-09  2.59e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.74e-10  2.59e-10         1
         *Z       ---       ---  8.66e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.59467e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.91053e-49  1.45508e-49  4.08741e-51  2.84523e-50  8.33917e-52   1.0011e-51  3.17377e-58  9.21485e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.5152, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 380 K
      Energy reference = 27341 1/cm
      Energy step      = 66 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007571
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.509394
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.318835
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.285686
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.71751
         W1 Well: minimal relaxation eigenvalue = 0.0905066
         W1 Well: maximal relaxation eigenvalue = 0.977929
         W1 Well:       grid size = 478
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4206 1/cm
         B1 Barrier:        grid size = 415
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -48 1/cm
         B2 Barrier:        grid size = 412
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 149 1/cm
         B3 Barrier:        grid size = 484
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4602 1/cm
         B4 Barrier:        grid size = 508
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6186 1/cm
         B5 Barrier: nonpositive number of states at -23149 1/cm => truncating
         B5 Barrier:        grid size = 765
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23148 1/cm
         B6 Barrier:        grid size = 392
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1469 1/cm
         B7 Barrier:        grid size = 343
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4703 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16715 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.26329, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 478
      MasterEquation::Barrier::truncate: real weight = 7.43671e+49
      MasterEquation::Barrier::truncate: effective weight = 2.23635e+46
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 478
      MasterEquation::Barrier::truncate: real weight = 3.59124e+51
      MasterEquation::Barrier::truncate: effective weight = 1.07995e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 478
      MasterEquation::Barrier::truncate: real weight = 1.44668e+52
      MasterEquation::Barrier::truncate: effective weight = 1.44211e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4206  -4206  1.6e+09 2.12e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -48 5.57e+14
         B2    150 8.27e+13
         B3  -4206 2.02e+13
         B4  -4206 2.58e+13
         B5  -4206 2.72e+12
         B6   1470 3.35e+14
         B7   4703 2.93e+13
         B8  16715 4.06e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.51e-08  1.34e-07  1.87e-14  4.13e-17  9.28e-47  0.000249      86.5  2.66e+22
          R  1.81e+07         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  7.49e+06     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  5.35e+13  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  2.42e+16  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  1.08e+46  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  4.02e+03  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6    0.0116  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  3.76e-23  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.51e+26   8.5e+26  1.19e+20  2.63e+17  5.91e-13  1.58e+30   5.5e+35  1.69e+56
          R  2.85e-27         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  1.18e-27     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  8.41e-21  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  3.81e-18  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  1.69e+12  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  6.32e-31  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6  1.82e-36  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  5.91e-57  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
   MasterEquation::set:  done, cpu time[sec] = 3.27842, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+08
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.464259, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04348, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              19721      2929.94      715.936      913.408      96.5308      11878.8      1037.67      1.43705
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048263, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003972, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052625, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.28896e-07  3.28896e-07  3.19295e-08
      low eigenvalue method done, cpu time[sec] = 0.052855, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.29e-07  3.19e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-08  3.19e-08         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.19295e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60686e-46  4.33189e-46  1.68778e-47  1.93646e-46  4.72491e-48  1.50921e-49   1.2244e-56  1.13446e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41318, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.465604, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.96246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6573.66      976.648      238.645      304.469      32.1769      3959.59       345.89     0.479015
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048094, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05236, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24802e-07  1.24802e-07  1.13241e-08
      low eigenvalue method done, cpu time[sec] = 0.0526, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-07  1.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-08  1.13e-08         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13241e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.40603e-46  1.46062e-46   4.5558e-48  4.28039e-47  1.11273e-48  1.42661e-49    1.229e-56 -2.73931e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.33179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.99813e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.464602, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95859, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3944.19      585.989      143.187      182.682      19.3062      2375.75      207.534     0.287409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048087, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003895, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052365, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.91108e-08  7.91108e-08  6.52195e-09
      low eigenvalue method done, cpu time[sec] = 0.052597, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.91e-08  6.52e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.82e-09  6.52e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.52195e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.04002e-46  8.05694e-47  2.37925e-48  2.06556e-47  5.52595e-49  1.26794e-49  1.23377e-56  1.18253e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.16855, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         2.79738e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.467066, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.96022, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2817.28      418.563      102.277      130.487      13.7901      1696.97      148.239     0.205292
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048132, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003886, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052395, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    5.841e-08    5.841e-08  4.41318e-09
      low eigenvalue method done, cpu time[sec] = 0.052624, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.84e-08  4.41e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.75e-09  4.41e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.41318e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41212e-46  5.28107e-47  1.52275e-48  1.26049e-47  3.43439e-49    1.122e-49  1.23869e-56 -1.98432e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.33515, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.59663e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.466839, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.96533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2191.22      325.549      79.5484       101.49      10.7256      1319.86      115.297     0.159672
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048058, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003887, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052327, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.64818e-08  4.64818e-08  3.24923e-09
      low eigenvalue method done, cpu time[sec] = 0.052557, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.65e-08  3.25e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.56e-09  3.25e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.24923e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05594e-46  3.79298e-47  1.07992e-48  8.64564e-48  2.38707e-49  9.98444e-50  1.24376e-56  3.62694e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34036, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.465464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.97072, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1972.1      292.994      71.5936      91.3408      9.65308      1187.88      103.767     0.143705
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00389, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052376, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.22162e-08  4.22162e-08  2.84725e-09
      low eigenvalue method done, cpu time[sec] = 0.05262, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.22e-08  2.85e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-09  2.85e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84725e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.31011e-47  3.28883e-47   9.3249e-49  7.36555e-48  2.04474e-49  9.44467e-50  1.24635e-56  6.47376e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.33867, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         5.99438e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.465151, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94236, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1314.73       195.33       47.729      60.8939      6.43538      791.917       69.178    0.0958031
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048036, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052314, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.90661e-08  2.90661e-08  1.67811e-09
      low eigenvalue method done, cpu time[sec] = 0.052559, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.91e-08  1.68e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.84e-09  1.68e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.6781e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.60832e-47   1.8606e-47  5.21998e-49  3.92635e-48  1.11232e-49  7.34636e-50  1.25972e-56  3.42581e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.30978, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         7.99251e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.463729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95728, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            986.049      146.497      35.7968      45.6704      4.82654      593.938      51.8835    0.0718523
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048105, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003885, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052374, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22438e-08  2.22438e-08  1.13086e-09
      low eigenvalue method done, cpu time[sec] = 0.052623, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-08  1.13e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-09  1.13e-09         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13086e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.83194e-47  1.21817e-47   3.4071e-49  2.48212e-48  7.12848e-50  5.92894e-50  1.27355e-56  3.17922e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09607, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         9.99064e+09
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.283482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            788.839      117.198      28.6374      36.5363      3.86123       475.15      41.5068    0.0574818
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052072, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003914, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.103725, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80483e-08  1.80483e-08  8.23491e-10
      low eigenvalue method done, cpu time[sec] = 0.105055, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-08  8.23e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-09  8.23e-10         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.23491e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.81789e-47  8.67781e-48  2.42621e-49  1.72689e-48   5.0101e-50   4.9191e-50  1.28752e-56  2.82665e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79665, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+10
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.464334, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.97069, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            657.366      97.6648      23.8645      30.4469      3.21769      395.959       34.589    0.0479015
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00389, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052379, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.52006e-08  1.52006e-08   6.3103e-10
      low eigenvalue method done, cpu time[sec] = 0.052616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-08  6.31e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-09  6.31e-10         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3103e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.17544e-47  6.53385e-48  1.82824e-49  1.27804e-48  3.73758e-50  4.16828e-50  1.30129e-56  4.00404e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34339, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.39869e+10
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.465498, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.96975, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            563.456      83.7127      20.4553      26.0974      2.75802      339.393      29.6477    0.0410585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31381e-08  1.31381e-08  5.01412e-10
      low eigenvalue method done, cpu time[sec] = 0.052637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-08  5.01e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-09  5.01e-10         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.01412e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.73882e-47   5.1169e-48  1.43366e-49   9.8774e-49  2.90748e-50  3.59109e-50  1.31458e-56  3.79722e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18031, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1          1.5985e+10
      global relaxation matrix dimension = 478
      setting global matrices ... done, cpu time[sec] = 0.463888, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.9712, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            493.024      73.2486      17.8984      22.8352      2.41327      296.969      25.9418    0.0359262
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048047, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003895, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15738e-08  1.15738e-08   4.0941e-10
      low eigenvalue method done, cpu time[sec] = 0.052549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08  4.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-09  4.09e-10         1
         *Z       ---       ---  3.16e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.0941e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42666e-47  4.12698e-48  1.15812e-49  7.88311e-49  2.33317e-50  3.13548e-50  1.32719e-56  4.26379e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.33857, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 390 K
      Energy reference = 27619 1/cm
      Energy step      = 67 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007404
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.511722
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.315982
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.2803
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.705
         W1 Well: minimal relaxation eigenvalue = 0.0898201
         W1 Well: maximal relaxation eigenvalue = 0.980398
         W1 Well:       grid size = 476
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4273 1/cm
         B1 Barrier:        grid size = 413
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 410
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 149 1/cm
         B3 Barrier:        grid size = 481
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4608 1/cm
         B4 Barrier:        grid size = 505
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6216 1/cm
         B5 Barrier: nonpositive number of states at -23167 1/cm => truncating
         B5 Barrier:        grid size = 758
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23167 1/cm
         B6 Barrier:        grid size = 390
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 342
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4704 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16764 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.2371, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 476
      MasterEquation::Barrier::truncate: real weight = 1.44247e+49
      MasterEquation::Barrier::truncate: effective weight = 4.40348e+45
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 476
      MasterEquation::Barrier::truncate: real weight = 6.27866e+50
      MasterEquation::Barrier::truncate: effective weight = 1.91671e+47
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 476
      MasterEquation::Barrier::truncate: real weight = 1.10182e+51
      MasterEquation::Barrier::truncate: effective weight = 2.20745e+46
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4273  -4273 1.56e+09 2.22e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 6.03e+14
         B2    149 9.06e+13
         B3  -4273 2.22e+13
         B4  -4273 2.83e+13
         B5  -4273    3e+12
         B6   1489 3.68e+14
         B7   4705 3.25e+13
         B8  16765 4.81e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.13e-08   9.8e-08   2.2e-14   5.7e-17  7.53e-46  0.000164      42.1  4.06e+21
          R  2.42e+07         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  1.02e+07     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  4.54e+13  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  1.76e+16  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  1.33e+45  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  6.12e+03  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6    0.0237   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  2.47e-22  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.54e+25  3.66e+25  8.22e+18  2.13e+16  2.81e-13   6.1e+28  1.57e+34  1.51e+54
          R  6.49e-26         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  2.73e-26     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.22e-19  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3   4.7e-17  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  3.56e+12  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  1.64e-29  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6  6.36e-35   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  6.61e-55  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.25208, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+08
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.372426, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01918, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20747.6      3114.49      764.987      973.376      103.228        12644      1118.83      1.65275
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04762, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.65697e-07  3.65697e-07  4.12368e-08
      low eigenvalue method done, cpu time[sec] = 0.052162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.66e-07  4.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.66e-08  4.12e-08         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.12368e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.9424e-44  9.67545e-45  3.69932e-46  4.16325e-45  1.02073e-46  3.78472e-48  4.22267e-55  3.44037e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.2939, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.460619, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.93572, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6915.87      1038.16      254.996      324.459      34.4093      4214.68      372.943     0.550917
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047566, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003858, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051809, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.4153e-07   1.4153e-07  1.49738e-08
      low eigenvalue method done, cpu time[sec] = 0.052042, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-07   1.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-08   1.5e-08         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.49738e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.8537e-45  3.32153e-45  1.02397e-46  9.45082e-46  2.47123e-47  3.59011e-48   4.2385e-55 -2.08219e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.29528, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1           1.963e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.460815, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94189, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4149.52      622.897      152.997      194.675      20.6456      2528.81      223.766      0.33055
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047505, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003856, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05175, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.04781e-08  9.04781e-08  8.72245e-09
      low eigenvalue method done, cpu time[sec] = 0.051985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.05e-08  8.72e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.9e-09  8.72e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.72245e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.75575e-45  1.84931e-45  5.41208e-47  4.61586e-46  1.24275e-47  3.20508e-48  4.25487e-55  3.95828e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.30491, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          2.7482e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.461906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.92061, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2963.94      444.927      109.284      139.054      14.7469      1806.29      159.833     0.236107
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047502, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003847, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051728, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.71473e-08  6.71473e-08  5.94763e-09
      low eigenvalue method done, cpu time[sec] = 0.051958, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.71e-08  5.95e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.58e-09  5.95e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.94763e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.31678e-45  1.21992e-45  3.49161e-47  2.83894e-46  7.78739e-48  2.84786e-48  4.27179e-55  2.30271e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          3.5334e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.4599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.97293, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2305.29      346.054      84.9986      108.153      11.4698      1404.89      124.314     0.183639
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047499, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003857, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.36263e-08  5.36263e-08  4.40452e-09
      low eigenvalue method done, cpu time[sec] = 0.051968, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.36e-08   4.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.24e-09   4.4e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.40452e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.49442e-45  8.80442e-46  2.49114e-47  1.95852e-46  5.44574e-48  2.54352e-48  4.28921e-55  4.11668e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17308, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.462029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.91832, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2074.76      311.449      76.4987      97.3376      10.3228       1264.4      111.883     0.165275
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047477, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00385, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05171, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.87746e-08  4.87746e-08  3.86909e-09
      low eigenvalue method done, cpu time[sec] = 0.051943, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.88e-08  3.87e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.76e-09  3.87e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.86909e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.20465e-45  7.64986e-46   2.1565e-47  1.67257e-46  4.67667e-48  2.41005e-48   4.2981e-55  3.75132e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28178, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         5.88901e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.460876, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.91531, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1383.17      207.632      50.9991      64.8917      6.88187      842.935      74.5886     0.110183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04749, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003868, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051744, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.37526e-08  3.37526e-08  2.30213e-09
      low eigenvalue method done, cpu time[sec] = 0.051977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.38e-08   2.3e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.28e-09   2.3e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.30213e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34065e-45  4.36241e-46  1.21899e-47  8.99808e-47  2.56892e-48  1.88811e-48  4.34397e-55  5.15662e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.27616, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         7.85201e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.461218, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.92067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1037.38      155.724      38.2494      48.6688       5.1614      632.201      55.9414    0.0826375
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047536, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051804, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.59129e-08  2.59129e-08  1.56191e-09
      low eigenvalue method done, cpu time[sec] = 0.052041, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.59e-08  1.56e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-09  1.56e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56191e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.22216e-46  2.87237e-46  8.01125e-48  5.72465e-47  1.65756e-48  1.53256e-48  4.39137e-55  5.08715e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.2842, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         9.81501e+09
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.4607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.92869, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            829.904      124.579      30.5995       38.935      4.12912      505.761      44.7531      0.06611
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047553, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051795, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.10726e-08  2.10726e-08  1.14334e-09
      low eigenvalue method done, cpu time[sec] = 0.052038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.11e-08  1.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.03e-09  1.14e-09         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14334e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.81722e-46  2.05512e-46  5.73505e-48  4.00215e-47  1.17104e-48  1.27757e-48  4.43912e-55  4.50048e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.2906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+10
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.4608, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.93727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            691.587      103.816      25.4996      32.4459      3.44093      421.468      37.2943    0.0550917
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003842, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051692, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77776e-08  1.77776e-08  8.79845e-10
      low eigenvalue method done, cpu time[sec] = 0.051922, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.78e-08   8.8e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-09   8.8e-10         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79845e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.28536e-46  1.55284e-46  4.34006e-48  2.97342e-47  8.77256e-49  1.08695e-48  4.48613e-55  4.23952e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.29664, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.3741e+10
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.461692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            592.788      88.9853      21.8568      27.8107      2.94937      361.258      31.9665    0.0472214
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047498, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003854, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051733, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.53857e-08  1.53857e-08  7.01604e-10
      low eigenvalue method done, cpu time[sec] = 0.051962, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-08  7.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-09  7.02e-10         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.01605e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.23966e-46  1.21967e-46  3.41553e-48  2.30542e-47  6.84794e-49   9.3974e-49  4.53148e-55  3.42515e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.16846, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.5704e+10
      global relaxation matrix dimension = 476
      setting global matrices ... done, cpu time[sec] = 0.460051, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94332, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             518.69      77.8621      19.1247      24.3344       2.5807      316.101      27.9707    0.0413187
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.047462, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003849, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051686, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35683e-08  1.35683e-08  5.74618e-10
      low eigenvalue method done, cpu time[sec] = 0.051914, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.36e-08  5.75e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-09  5.75e-10         1
         *Z       ---       ---  1.29e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.74618e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.48921e-46  9.86193e-47  2.76752e-48  1.84498e-47  5.51155e-49  8.23069e-49  4.57444e-55    4.849e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.3007, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 400 K
      Energy reference = 27897 1/cm
      Energy step      = 69 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007644
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.496773
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.306178
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.279247
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.59341
         W1 Well: minimal relaxation eigenvalue = 0.0891229
         W1 Well: maximal relaxation eigenvalue = 0.979288
         W1 Well:       grid size = 467
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4325 1/cm
         B1 Barrier:        grid size = 405
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -48 1/cm
         B2 Barrier:        grid size = 402
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 471
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4602 1/cm
         B4 Barrier:        grid size = 494
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23163 1/cm => truncating
         B5 Barrier:        grid size = 740
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23163 1/cm
         B6 Barrier:        grid size = 383
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1469 1/cm
         B7 Barrier:        grid size = 336
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4712 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16719 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.09715, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 467
      MasterEquation::Barrier::truncate: real weight = 3.04721e+48
      MasterEquation::Barrier::truncate: effective weight = 9.58003e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 467
      MasterEquation::Barrier::truncate: real weight = 1.202e+50
      MasterEquation::Barrier::truncate: effective weight = 3.77891e+46
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 467
      MasterEquation::Barrier::truncate: real weight = 1.03424e+50
      MasterEquation::Barrier::truncate: effective weight = 3.75332e+45
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4325  -4325 1.54e+09 2.33e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -48 6.53e+14
         B2    159 9.91e+13
         B3  -4325 2.45e+13
         B4  -4325 3.11e+13
         B5  -4325  3.3e+12
         B6   1470 4.03e+14
         B7   4713 3.61e+13
         B8  16719 5.68e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.94e-08  6.86e-08  2.42e-14  7.27e-17  5.17e-45  0.000103        20  6.38e+20
          R   3.4e+07         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  1.46e+07     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2  4.14e+13  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  1.38e+16  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  1.94e+44   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5   9.7e+03  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6      0.05  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  1.57e-21  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   7.9e+23  1.84e+24  6.48e+17  1.95e+15  1.39e-13  2.77e+27  5.36e+32  1.71e+52
          R  1.27e-24         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  5.43e-25     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2  1.54e-18  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  5.13e-16  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  7.22e+12   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  3.62e-28  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6  1.87e-33  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  5.84e-53  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.11234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+08
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.443608, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.92878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21806.8      3307.38       816.52      1036.21       110.27      13443.5      1204.74      1.89585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045202, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003715, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049277, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.26556e-07  4.26556e-07  5.50775e-08
      low eigenvalue method done, cpu time[sec] = 0.0495, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.27e-07  5.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.25e-08  5.51e-08         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.50775e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.74926e-43  1.84837e-43   6.9476e-45  7.68281e-44  1.89226e-45  8.07727e-47  1.21923e-53  7.51218e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.23549, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.44439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84262, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7268.93      1102.46      272.173      345.403      36.7567      4481.17       401.58     0.631951
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045097, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003679, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.68505e-07  1.68505e-07  2.04558e-08
      low eigenvalue method done, cpu time[sec] = 0.049358, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.69e-07  2.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-08  2.05e-08         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.04558e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54765e-43  6.45714e-44  1.97012e-45  1.78888e-44  4.70344e-46  7.68612e-47  1.22378e-53  3.76836e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.14529, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.92949e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.44471, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4361.36      661.476      163.304      207.242       22.054       2688.7      240.948      0.37917
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003679, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049169, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08673e-07  1.08673e-07  1.20473e-08
      low eigenvalue method done, cpu time[sec] = 0.049397, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-07   1.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08   1.2e-08         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20473e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.47162e-44  3.62783e-44  1.05344e-45  8.83879e-45  2.39404e-46  6.89121e-47  1.22849e-53  3.17828e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.14958, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         2.70128e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.443778, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.85708, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3115.25      472.483      116.646       148.03      15.7529       1920.5      172.106     0.270836
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0451, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.10824e-08  8.10824e-08  8.27613e-09
      low eigenvalue method done, cpu time[sec] = 0.049348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.11e-08  8.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.9e-09  8.28e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.27613e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.65404e-44   2.4081e-44  6.84929e-46  5.47756e-45  1.51213e-46  6.14752e-47  1.23335e-53  3.69064e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.15666, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.47308e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.442764, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84873, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2422.98      367.486      90.7244      115.134      12.2522      1493.72       133.86      0.21065
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045124, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003661, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049156, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.49967e-08  6.49967e-08  6.16363e-09
      low eigenvalue method done, cpu time[sec] = 0.049381, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.5e-08  6.16e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.32e-09  6.16e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.16363e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03221e-44  1.74627e-44  4.91546e-46  3.80019e-45  1.06372e-46   5.5101e-47  1.23836e-53  3.94727e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.15358, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.444753, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84689, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2180.68      330.738       81.652      103.621       11.027      1344.35      120.474     0.189585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045184, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003671, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049219, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.92042e-08  5.92042e-08  5.42732e-09
      low eigenvalue method done, cpu time[sec] = 0.04944, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.92e-08  5.43e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.75e-09  5.43e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.42732e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.45816e-44  1.52034e-44  4.26568e-46  3.25298e-45  9.15766e-47  5.22948e-47  1.24091e-53    3.543e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.15058, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         5.78846e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.443714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.85238, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1453.79      220.492      54.4346      69.0805      7.35133      896.234      80.3161      0.12639
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045265, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003686, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049316, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.11879e-08  4.11879e-08  3.25941e-09
      low eigenvalue method done, cpu time[sec] = 0.049538, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.12e-08  3.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-09  3.26e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25941e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.7361e-44  8.73811e-45  2.43433e-46  1.76581e-45  5.07837e-47  4.12571e-47  1.25407e-53  3.77259e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.00034, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         7.71795e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.444517, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1090.34      165.369       40.826      51.8104       5.5135      672.176      60.2371    0.0947926
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045198, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003658, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049226, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17274e-08  3.17274e-08  2.22609e-09
      low eigenvalue method done, cpu time[sec] = 0.049455, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.17e-08  2.23e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.05e-09  2.23e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22609e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8946e-44  5.78573e-45   1.6107e-46  1.13048e-45  3.29869e-47  3.36755e-47  1.26765e-53  3.90605e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.15272, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         9.64744e+09
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.445794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8446, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            872.271      132.295      32.6608      41.4483       4.4108       537.74      48.1896    0.0758341
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045139, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003679, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049187, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.58621e-08  2.58621e-08  1.63792e-09
      low eigenvalue method done, cpu time[sec] = 0.049411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.59e-08  1.64e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.48e-09  1.64e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63792e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40773e-44  4.15747e-45  1.15908e-46  7.94113e-46  2.34242e-47   2.8203e-47   1.2813e-53  3.72366e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.15357, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+10
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.445214, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.85418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            726.893      110.246      27.2173      34.5403      3.67567      448.117       40.158    0.0631951
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04514, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049205, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.18571e-08  2.18571e-08  1.26572e-09
      low eigenvalue method done, cpu time[sec] = 0.049442, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-08  1.27e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-09  1.27e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26572e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09598e-44  3.15239e-45  8.80863e-47  5.92262e-46  1.76203e-47  2.40902e-47  1.29473e-53  3.55871e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.35064e+10
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.443706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83932, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            623.051      94.4965      23.3291      29.6059      3.15057        384.1      34.4212    0.0541672
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045104, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003682, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049154, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89429e-08  1.89429e-08  1.01285e-09
      low eigenvalue method done, cpu time[sec] = 0.049388, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08  1.01e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.81e-09  1.01e-09         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01285e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.82242e-45   2.4833e-45  6.95678e-47  4.60675e-46   1.3802e-47  2.08996e-47  1.30768e-53  3.70371e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.14196, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.54359e+10
      global relaxation matrix dimension = 467
      setting global matrices ... done, cpu time[sec] = 0.444129, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            545.169      82.6844       20.413      25.9052      2.75675      336.088      30.1185    0.0473963
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045182, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00367, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049222, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.67244e-08  1.67244e-08  8.32034e-10
      low eigenvalue method done, cpu time[sec] = 0.04944, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.67e-08  8.32e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-09  8.32e-10         1
         *Z       ---       ---  5.31e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.32034e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.28278e-45  2.01298e-45  5.65402e-47  3.69674e-46  1.11413e-47  1.83608e-47  1.31993e-53  3.64087e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.57498, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 410 K
      Energy reference = 28175 1/cm
      Energy step      = 71 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00707
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.420963
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.294265
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.244405
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.58846
         W1 Well: minimal relaxation eigenvalue = 0.0884344
         W1 Well: maximal relaxation eigenvalue = 0.978253
         W1 Well:       grid size = 459
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4413 1/cm
         B1 Barrier:        grid size = 397
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -12 1/cm
         B2 Barrier:        grid size = 394
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 462
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4626 1/cm
         B4 Barrier:        grid size = 484
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23229 1/cm => truncating
         B5 Barrier:        grid size = 724
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23228 1/cm
         B6 Barrier:        grid size = 376
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1479 1/cm
         B7 Barrier:        grid size = 331
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4674 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16744 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.05224, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 459
      MasterEquation::Barrier::truncate: real weight = 6.96686e+47
      MasterEquation::Barrier::truncate: effective weight = 2.25378e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 459
      MasterEquation::Barrier::truncate: real weight = 2.50284e+49
      MasterEquation::Barrier::truncate: effective weight = 8.09668e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 459
      MasterEquation::Barrier::truncate: real weight = 1.1757e+49
      MasterEquation::Barrier::truncate: effective weight = 7.10462e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4413  -4413  1.5e+09 2.44e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -12 7.07e+14
         B2    202 1.08e+14
         B3  -4413 2.69e+13
         B4  -4413  3.4e+13
         B5  -4413 3.63e+12
         B6   1480 4.41e+14
         B7   4675    4e+13
         B8  16744  6.7e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.38e-08  5.44e-08  2.94e-14  1.02e-16   3.6e-44  7.41e-05        11  1.23e+20
          R   4.2e+07         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  1.84e+07     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2   3.4e+13  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3   9.8e+15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  2.78e+43  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  1.35e+04  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6    0.0913  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  8.16e-21  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.68e+22  1.07e+23  5.78e+16  2.01e+14  7.07e-14  1.46e+26  2.15e+31  2.41e+50
          R  2.14e-23         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  9.34e-24     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.73e-17  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.99e-15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.41e+13  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  6.87e-27  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6  4.64e-32  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  4.15e-51  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.06657, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+08
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.431757, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.81704, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22899.2      3508.79      870.621         1102      117.669      14278.1       1295.6      2.16775
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042974, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046564, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.46778e-07  4.46778e-07  6.49717e-08
      low eigenvalue method done, cpu time[sec] = 0.046776, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.47e-07   6.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.43e-08   6.5e-08         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49717e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.25979e-42  3.05617e-42  1.13042e-43  1.23012e-42  3.04305e-44  1.48382e-45  2.99552e-52  1.55218e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08018, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.42839, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7633.07       1169.6      290.207      367.333      39.2231      4759.38      431.867     0.722582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046481, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80142e-07  1.80142e-07   2.4654e-08
      low eigenvalue method done, cpu time[sec] = 0.046694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-07  2.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-08  2.47e-08         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.4654e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.63583e-42  1.08556e-42  3.28071e-44   2.9343e-43  7.75561e-45  1.41665e-45  3.00666e-52  2.84825e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.05322, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.89747e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.430391, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7996, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4579.84      701.759      174.124        220.4      23.5339      2855.63       259.12     0.433549
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042951, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003473, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17197e-07  1.17196e-07  1.46738e-08
      low eigenvalue method done, cpu time[sec] = 0.046715, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-07  1.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-08  1.47e-08         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46738e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6297e-42  6.15245e-43  1.77397e-44  1.46604e-43  3.99359e-45  1.27547e-45   3.0182e-52  2.84899e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.05601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         2.65645e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.431532, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78017, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3271.31      501.256      124.374      157.428      16.8099      2039.73      185.086     0.309678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042894, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003524, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046529, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.79065e-08  8.79064e-08  1.01531e-08
      low eigenvalue method done, cpu time[sec] = 0.046756, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.79e-08  1.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.52e-09  1.02e-08         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01531e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    1.153e-42  4.10859e-43  1.16213e-44  9.15202e-44  2.54185e-45  1.14221e-45  3.03012e-52  3.07116e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03879, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.41544e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.428827, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79343, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2544.36      389.866      96.7356      122.444      13.0744      1586.46      143.956     0.240861
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042934, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.07278e-08  7.07278e-08  7.60298e-09
      low eigenvalue method done, cpu time[sec] = 0.046748, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.07e-08   7.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.83e-09   7.6e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.60298e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.76688e-43   2.9932e-43   8.3878e-45  6.38416e-44  1.79837e-45   1.0273e-45  3.04239e-52  2.43227e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04994, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.429765, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2289.92      350.879      87.0621        110.2      11.7669      1427.81       129.56     0.216775
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046505, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.45199e-08  6.45199e-08  6.71026e-09
      low eigenvalue method done, cpu time[sec] = 0.046721, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.45e-08  6.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-09  6.71e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.71026e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.78462e-43  2.61105e-43  7.29652e-45  5.47736e-44  1.55196e-45  9.76517e-46  3.04864e-52  2.65106e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.05013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1          5.6924e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.428576, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78967, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1526.61       233.92      58.0414      73.4666      7.84462      951.875      86.3734     0.144516
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042873, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.51237e-08  4.51237e-08  4.06642e-09
      low eigenvalue method done, cpu time[sec] = 0.046694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.51e-08  4.07e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.33e-09  4.07e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.06642e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.82064e-43  1.51221e-43  4.20288e-45  2.99938e-44  8.68641e-46  7.75631e-46  3.08085e-52  2.69096e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04483, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         7.58986e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.428628, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79092, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1144.96       175.44       43.531      55.0999      5.88346      713.906        64.78     0.108387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003496, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48757e-08  3.48757e-08  2.79528e-09
      low eigenvalue method done, cpu time[sec] = 0.04669, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.49e-08   2.8e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.34e-09   2.8e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.79528e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.35959e-43  1.00677e-43  2.79936e-45  1.93204e-44  5.67929e-46  6.36527e-46  3.11402e-52  2.76064e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04522, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         9.48733e+09
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.429091, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79018, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            915.968      140.352      34.8248      44.0799      4.70677      571.125       51.824    0.0867099
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046485, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.84958e-08  2.84958e-08  2.06707e-09
      low eigenvalue method done, cpu time[sec] = 0.046704, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.85e-08  2.07e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-09  2.07e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.06707e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.50882e-43  7.26512e-44  2.02481e-45  1.36358e-44  4.05321e-46  5.35488e-46  3.14731e-52   2.6935e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04639, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+10
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.430194, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79566, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            763.307       116.96      29.0207      36.7333      3.92231      475.938      43.1867    0.0722582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042913, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003509, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046503, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.4126e-08   2.4126e-08  1.60391e-09
      low eigenvalue method done, cpu time[sec] = 0.046723, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.41e-08   1.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-09   1.6e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.60391e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.96125e-43  5.52779e-44   1.5452e-45  1.02084e-44  3.06135e-46   4.5916e-46     3.18e-52  2.60343e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.05173, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.32823e+10
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.427755, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            654.263      100.251      24.8749      31.4857      3.36198      407.947      37.0172    0.0619356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042944, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046532, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.09387e-08  2.09387e-08  1.28791e-09
      low eigenvalue method done, cpu time[sec] = 0.04676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.09e-08  1.29e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.99e-09  1.29e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28791e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.58422e-43  4.36715e-44  1.22463e-45  7.96549e-45  2.40614e-46  3.99684e-46  3.21145e-52  2.70971e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04105, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.51797e+10
      global relaxation matrix dimension = 459
      setting global matrices ... done, cpu time[sec] = 0.429208, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79129, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             572.48      87.7198      21.7655        27.55      2.94173      356.953        32.39    0.0541937
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0035, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85077e-08  1.85076e-08  1.06113e-09
      low eigenvalue method done, cpu time[sec] = 0.046712, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-08  1.06e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-09  1.06e-09         1
         *Z       ---       ---  2.42e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06113e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.31165e-43  3.54885e-44  9.98292e-46   6.4093e-45  1.94796e-46  3.52178e-46  3.24121e-52   2.6604e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04268, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 420 K
      Energy reference = 28453 1/cm
      Energy step      = 72 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006065
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.486642
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.292888
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.50336
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.55814
         W1 Well: minimal relaxation eigenvalue = 0.0877837
         W1 Well: maximal relaxation eigenvalue = 0.980577
         W1 Well:       grid size = 458
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4523 1/cm
         B1 Barrier:        grid size = 396
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -59 1/cm
         B2 Barrier:        grid size = 393
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier:        grid size = 460
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4667 1/cm
         B4 Barrier:        grid size = 481
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6178 1/cm
         B5 Barrier: nonpositive number of states at -23099 1/cm => truncating
         B5 Barrier:        grid size = 716
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23099 1/cm
         B6 Barrier:        grid size = 375
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1452 1/cm
         B7 Barrier:        grid size = 330
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4692 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16717 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.23915, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 1.71411e+47
      MasterEquation::Barrier::truncate: effective weight = 5.62323e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 5.63409e+48
      MasterEquation::Barrier::truncate: effective weight = 1.8483e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 1.59106e+48
      MasterEquation::Barrier::truncate: effective weight = 1.45109e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4523  -4523 1.45e+09 2.56e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -59 7.65e+14
         B2    157 1.18e+14
         B3  -4523 2.95e+13
         B4  -4523 3.73e+13
         B5  -4523 3.99e+12
         B6   1453 4.82e+14
         B7   4693 4.43e+13
         B8  16717 7.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.1e-08  4.72e-08  3.83e-14  1.52e-16  2.46e-43  5.83e-05      6.67  2.75e+19
          R  4.77e+07         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  2.12e+07     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  2.61e+13  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  6.57e+15  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  4.06e+42   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5  1.71e+04  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6      0.15  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  3.64e-20  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.16e+21  7.12e+21  5.78e+15   2.3e+13  3.72e-14  8.81e+24  1.01e+30  4.15e+48
          R  3.16e-22         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1   1.4e-22     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.73e-16  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  4.35e-14  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  2.69e+13   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5  1.14e-25  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6  9.92e-31  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  2.41e-49  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
   MasterEquation::set:  done, cpu time[sec] = 4.25369, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+08
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.428964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7649, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24025.2      3719.09      927.379      1170.84      125.438      15148.8       1391.6      2.47011
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04643, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.4077e-07   4.4077e-07  7.12148e-08
      low eigenvalue method done, cpu time[sec] = 0.04665, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.41e-07  7.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.34e-08  7.12e-08         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.12148e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.1297e-41  4.41161e-41  1.60862e-42  1.72457e-41  4.28426e-43  2.36566e-44  6.31169e-51  2.40536e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.01417, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.430643, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.77126, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8008.41       1239.7      309.126      390.281      41.8128       5049.6      463.867      0.82337
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046226, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.81378e-07  1.81378e-07  2.75867e-08
      low eigenvalue method done, cpu time[sec] = 0.046457, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.81e-07  2.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-08  2.76e-08         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.75867e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91845e-41  1.59277e-41  4.77401e-43  4.21004e-42  1.11836e-43  2.26682e-44  6.33509e-51  1.49264e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.88959, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.86683e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427562, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.77438, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4805.04      743.818      185.476      234.168      25.0877      3029.76       278.32     0.494022
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042627, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003603, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046306, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.19026e-07  1.19026e-07  1.65875e-08
      low eigenvalue method done, cpu time[sec] = 0.046522, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.19e-07  1.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  1.66e-08         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65875e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.44674e-41  9.10431e-42  2.60958e-43   2.1261e-42  5.82344e-44  2.04986e-44  6.35932e-51  1.66424e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0255, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         2.61356e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427403, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3432.17      531.298      132.483      167.263      17.9198      2164.11        198.8     0.352873
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042649, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046228, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.97491e-08  8.97491e-08  1.15573e-08
      low eigenvalue method done, cpu time[sec] = 0.046443, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.97e-08  1.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.64e-09  1.16e-08         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.15573e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74286e-41  6.11573e-42  1.72209e-43  1.33669e-42  3.73411e-44  1.84294e-44  6.38435e-51  1.50953e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04109, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.36029e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.425982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2669.47      413.232      103.042      130.094      13.9376       1683.2      154.622     0.274457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046285, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.24757e-08  7.24757e-08  8.70053e-09
      low eigenvalue method done, cpu time[sec] = 0.046497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.25e-08   8.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.96e-09   8.7e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.70053e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33213e-41  4.47562e-42  1.24984e-43  9.37389e-43  2.65666e-44   1.6633e-44   6.4101e-51  1.54947e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.88385, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.426501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78384, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2402.52      371.909      92.7379      117.084      12.5438      1514.88       139.16     0.247011
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003511, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046237, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.62115e-08  6.62115e-08  7.69624e-09
      low eigenvalue method done, cpu time[sec] = 0.04645, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.62e-08   7.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.35e-09   7.7e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.69624e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18551e-41  3.91171e-42  1.08978e-43  8.06033e-43  2.29802e-44  1.58358e-44  6.42322e-51  1.55733e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03243, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         5.60049e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79441, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1601.68      247.939      61.8253      78.0561      8.36257      1009.92      92.7734     0.164674
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043024, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003497, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046606, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.65508e-08  4.65508e-08  4.70505e-09
      low eigenvalue method done, cpu time[sec] = 0.04684, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.66e-08  4.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-09  4.71e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.70505e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.4054e-42  2.28253e-42  6.33455e-44  4.45165e-43  1.29788e-44  1.26633e-44  6.49073e-51  1.53088e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04219, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         7.46731e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1201.26      185.954       46.369      58.5421      6.27192       757.44      69.5801     0.123506
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046258, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.60992e-08  3.60992e-08  3.25475e-09
      low eigenvalue method done, cpu time[sec] = 0.046478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.61e-08  3.25e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.43e-09  3.25e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25475e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.19343e-42  1.52781e-42  4.24662e-44  2.88484e-43  8.54013e-45  1.04481e-44  6.56013e-51  1.57673e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87786, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         9.33414e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.425514, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.77843, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            961.009      148.764      37.0952      46.8337      5.01754      605.952      55.6641    0.0988045
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042657, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046225, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.95655e-08  2.95655e-08   2.4187e-09
      low eigenvalue method done, cpu time[sec] = 0.046436, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.96e-08  2.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.8e-09  2.42e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.4187e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8973e-42  1.10713e-42  3.08713e-44  2.04547e-43   6.1251e-45  8.82873e-45  6.62968e-51  1.56579e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.02567, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427092, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79632, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            800.841       123.97      30.9126      39.0281      4.18128       504.96      46.3867     0.082337
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04625, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.50765e-08  2.50765e-08  1.88429e-09
      low eigenvalue method done, cpu time[sec] = 0.046465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.51e-08  1.88e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-09  1.88e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88429e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.0589e-42  8.45257e-43  2.36557e-44  1.53708e-43   4.6448e-45  7.59903e-45  6.69787e-51  1.54543e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04344, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.30678e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.425522, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78919, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            686.435       106.26      26.4966      33.4526      3.58396      432.823        39.76    0.0705746
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046266, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.17945e-08  2.17945e-08  1.51818e-09
      low eigenvalue method done, cpu time[sec] = 0.046485, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.18e-08  1.52e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-09  1.52e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51818e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.47924e-42    6.697e-43  1.88127e-44  1.20312e-43  3.66296e-45  6.63661e-45  6.76343e-51  1.54418e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.90616, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.49346e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.427082, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.78399, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             600.63      92.9772      23.1845       29.271      3.13596       378.72        34.79    0.0617528
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003515, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046211, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.92863e-08  1.92863e-08  1.25451e-09
      low eigenvalue method done, cpu time[sec] = 0.046424, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.93e-08  1.25e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-09  1.25e-09         1
         *Z       ---       ---  1.19e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25451e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05868e-42  5.45557e-43  1.53813e-44  9.70673e-44  2.97402e-45  5.86494e-45  6.82542e-51  1.56384e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03067, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 430 K
      Energy reference = 28731 1/cm
      Energy step      = 74 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007045
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.47909
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.283627
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.27024
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.48421
         W1 Well: minimal relaxation eigenvalue = 0.0871335
         W1 Well: maximal relaxation eigenvalue = 0.979544
         W1 Well:       grid size = 450
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4568 1/cm
         B1 Barrier:        grid size = 389
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -55 1/cm
         B2 Barrier:        grid size = 386
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 451
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 472
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6196 1/cm
         B5 Barrier: nonpositive number of states at -23143 1/cm => truncating
         B5 Barrier:        grid size = 701
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23143 1/cm
         B6 Barrier:        grid size = 368
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1499 1/cm
         B7 Barrier:        grid size = 325
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16743 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.91021, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 4.51508e+46
      MasterEquation::Barrier::truncate: effective weight = 1.52234e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 1.3636e+48
      MasterEquation::Barrier::truncate: effective weight = 4.59761e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 2.52039e+47
      MasterEquation::Barrier::truncate: effective weight = 3.179e+43
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4568  -4568 1.43e+09 2.68e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -55 8.27e+14
         B2    168 1.29e+14
         B3  -4568 3.24e+13
         B4  -4568 4.08e+13
         B5  -4568 4.39e+12
         B6   1500 5.27e+14
         B7   4682  4.9e+13
         B8  16743 9.22e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.5e-08  3.33e-08  3.99e-14  1.81e-16  1.25e-42  3.76e-05      3.37  5.37e+18
          R  6.65e+07         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1     3e+07     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  2.51e+13  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  5.54e+15  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  7.99e+41   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  2.66e+04    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6     0.297  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.86e-19   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.42e+20  5.37e+20  6.43e+14  2.91e+12  2.02e-14  6.06e+23  5.43e+28  8.64e+46
          R  4.12e-21         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1  1.86e-21     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  1.56e-15  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.44e-13  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.96e+13   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.65e-24    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6  1.84e-29  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.16e-47   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
   MasterEquation::set:  done, cpu time[sec] = 2.92432, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+08
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.414459, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71169, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25185.3      3938.46      986.887      1242.84      133.591      16056.5      1492.94      2.80613
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041357, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003376, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053801, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.29479e-07  5.29479e-07  9.44766e-08
      low eigenvalue method done, cpu time[sec] = 0.054977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.29e-07  9.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.2e-08  9.45e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.44766e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.17498e-39  5.62366e-40  2.02284e-41  2.13897e-40   5.3348e-42  3.31504e-43  1.15457e-49  8.09425e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.414617, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72704, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8395.09      1312.82      328.962      414.279      44.5302      5352.15      497.648     0.935376
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040625, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003323, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22491e-07  2.22491e-07  3.73263e-08
      low eigenvalue method done, cpu time[sec] = 0.044234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-07  3.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.15e-08  3.73e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.73263e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.13661e-40  2.06215e-40  6.13364e-42   5.3384e-41  1.42484e-42  3.18857e-43  1.15884e-49  7.29055e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93434, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.83748e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.413347, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71346, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5037.05      787.692      197.377      248.567      26.7181      3211.29      298.589     0.561225
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040624, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00332, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47304e-07  1.47304e-07  2.26653e-08
      low eigenvalue method done, cpu time[sec] = 0.044239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-07  2.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-08  2.27e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26653e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.23811e-40  1.18844e-40  3.38813e-42   2.7239e-41  7.49961e-43  2.89573e-43  1.16326e-49   7.3093e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92335, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         2.57247e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.415387, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3597.9      562.637      140.984      177.548      19.0844      2293.78      213.278     0.400875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040796, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11672e-07  1.11672e-07  1.58986e-08
      low eigenvalue method done, cpu time[sec] = 0.044394, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-07  1.59e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  1.59e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58986e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.32184e-40   8.0289e-41  2.25179e-42  1.72432e-41  4.84356e-43  2.61336e-43  1.16782e-49  7.58958e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.80243, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.30747e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.417476, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71602, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2798.36      437.607      109.654      138.093      14.8434      1784.05      165.883     0.311792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040754, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003329, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044163, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    9.052e-08  9.05199e-08  1.20306e-08
      low eigenvalue method done, cpu time[sec] = 0.04438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.05e-08   1.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.65e-09   1.2e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20306e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7837e-40  5.90156e-41  1.64312e-42  1.21547e-41  3.46467e-43  2.36653e-43  1.17251e-49  7.47553e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92989, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416035, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72408, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2518.53      393.846      98.6887      124.284      13.3591      1605.65      149.294     0.280613
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040745, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003303, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044124, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.28214e-08  8.28214e-08  1.06652e-08
      low eigenvalue method done, cpu time[sec] = 0.044331, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.28e-08  1.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.9e-09  1.07e-08         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06652e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.59081e-40  5.16764e-41  1.43597e-42  1.04741e-41   3.0038e-43  2.25655e-43   1.1749e-49  7.54377e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         5.51244e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416717, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72548, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1679.02      262.564      65.7924      82.8557      8.90604      1070.43      99.5296     0.187075
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040772, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003319, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.85462e-08  5.85462e-08  6.57613e-09
      low eigenvalue method done, cpu time[sec] = 0.044372, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.85e-08  6.58e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.56e-09  6.58e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.57613e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00217e-40  3.03753e-41  8.42126e-43  5.83319e-42   1.7115e-43  1.81627e-43  1.18719e-49   7.4097e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.94162, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         7.34992e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.413037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1259.26      196.923      49.3443      62.1418      6.67953      802.823      74.6472     0.140306
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040773, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003313, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044163, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55598e-08  4.55598e-08  4.57722e-09
      low eigenvalue method done, cpu time[sec] = 0.044378, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-08  4.58e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.31e-09  4.58e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.57722e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.07147e-41  2.04393e-41  5.68155e-43  3.80252e-42  1.13326e-43  1.50634e-43   1.1998e-49  7.43565e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93733, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1          9.1874e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.41477, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72556, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1007.41      157.538      39.4755      49.7134      5.34362      642.259      59.7178     0.112245
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040753, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044142, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.74066e-08  3.74067e-08  3.41789e-09
      low eigenvalue method done, cpu time[sec] = 0.044359, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.74e-08  3.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-09  3.42e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.41789e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.33215e-41  1.48724e-41  4.15074e-43  2.70846e-42  8.16749e-44  1.27837e-43  1.21241e-49  7.56771e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93862, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416907, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71009, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            839.509      131.282      32.8962      41.4279      4.45302      535.215      49.7648    0.0935376
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04062, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003335, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044026, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17873e-08  3.17873e-08  2.67323e-09
      low eigenvalue method done, cpu time[sec] = 0.044239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-08  2.67e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-09  2.67e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.67323e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.20158e-41  1.13928e-41  3.19346e-43  2.04282e-42   6.2181e-44  1.10437e-43  1.22476e-49  7.51971e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.76454, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.28624e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416493, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.70838, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            719.579      112.527      28.1968      35.5096      3.81687      458.756      42.6556    0.0801751
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040785, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044176, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76685e-08  2.76684e-08  2.16101e-09
      low eigenvalue method done, cpu time[sec] = 0.044386, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-08  2.16e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.6e-09  2.16e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.16101e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.41672e-41  9.05214e-42  2.54832e-43  1.60395e-42     4.92e-44  9.67607e-44  1.23662e-49  7.50012e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92204, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.46998e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416632, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.6942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            629.632      98.4615      24.6722      31.0709      3.33977      401.412      37.3236    0.0701532
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051702, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06334, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45144e-08  2.45144e-08  1.79084e-09
      low eigenvalue method done, cpu time[sec] = 0.064456, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-08  1.79e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-09  1.79e-09         1
         *Z       ---       ---  5.46e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79084e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.8453e-41  7.39215e-42  2.08964e-43   1.2975e-42  4.00606e-44   8.5754e-44  1.24783e-49  7.44243e-69

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92696, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 440 K
      Energy reference = 29009 1/cm
      Energy step      = 76 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006695
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.459309
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.27466
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.266141
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.43227
         W1 Well: minimal relaxation eigenvalue = 0.0864872
         W1 Well: maximal relaxation eigenvalue = 0.978583
         W1 Well:       grid size = 443
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4659 1/cm
         B1 Barrier:        grid size = 382
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -23 1/cm
         B2 Barrier:        grid size = 379
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 204 1/cm
         B3 Barrier:        grid size = 443
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4659 1/cm
         B4 Barrier:        grid size = 463
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6178 1/cm
         B5 Barrier: nonpositive number of states at -23127 1/cm => truncating
         B5 Barrier:        grid size = 686
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23127 1/cm
         B6 Barrier:        grid size = 362
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1497 1/cm
         B7 Barrier:        grid size = 320
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4688 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16773 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.824, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 443
      MasterEquation::Barrier::truncate: real weight = 3.53062e+47
      MasterEquation::Barrier::truncate: effective weight = 1.22259e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 443
      MasterEquation::Barrier::truncate: real weight = 4.59753e+46
      MasterEquation::Barrier::truncate: effective weight = 7.61133e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4659  -4659 1.39e+09 2.81e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -23 8.94e+14
         B2    205 1.41e+14
         B3  -4659 3.55e+13
         B4  -4659 4.47e+13
         B5  -4659 4.82e+12
         B6   1498 5.76e+14
         B7   4689 5.42e+13
         B8  16773 1.08e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.25e-08  2.72e-08  4.71e-14  2.41e-16   6.7e-42  2.81e-05      1.99  1.28e+18
          R  8.03e+07         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  3.68e+07     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  2.12e+13  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  4.14e+15  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  1.49e+41  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  3.56e+04  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6     0.502  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  7.81e-19  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.09e+19  4.55e+19  7.89e+13  4.04e+11  1.12e-14  4.71e+22  3.34e+27  2.14e+45
          R  4.79e-20         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1   2.2e-20     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.27e-14  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.47e-12  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  8.91e+13  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  2.12e-23  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6     3e-28  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.66e-46  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.83771, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+08
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.399666, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.53131, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              26380      4167.18      1049.24      1318.08      142.139        17002      1599.83      3.17992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.176834, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003266, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.189502, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.58911e-07  5.58911e-07  1.08755e-07
      low eigenvalue method done, cpu time[sec] = 0.190641, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.59e-07  1.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.45e-08  1.09e-07         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08755e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34519e-38  6.37466e-39  2.26521e-40  2.36466e-39  5.92029e-41  4.12726e-42   1.8487e-48  3.01993e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.84813, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.400327, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.54194, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8793.32      1389.06      349.745       439.36      47.3796      5667.35      533.278      1.05997
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.151889, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003205, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.163494, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39665e-07  2.39665e-07  4.37932e-08
      low eigenvalue method done, cpu time[sec] = 0.164617, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-07  4.38e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-08  4.38e-08         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.37932e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.98602e-39  2.37347e-39  7.01267e-41  6.02836e-40  1.61636e-41  3.98126e-42   1.8555e-48  3.00068e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69273, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.80933e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.400519, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.56873, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5275.99      833.436      209.847      263.616      28.4278      3400.41      319.967     0.635984
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.119035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003201, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.130659, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60034e-07  1.60034e-07  2.68464e-08
      low eigenvalue method done, cpu time[sec] = 0.131798, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  2.68e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-08  2.68e-08         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68464e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.80855e-39   1.3789e-39  3.91331e-41  3.10683e-40  8.59665e-42  3.62913e-42  1.86255e-48  2.95653e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.67021, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         2.53307e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.401832, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.56613, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3768.57      595.312      149.891      188.297      20.3056      2428.86      228.548     0.454274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.147876, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003191, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.159449, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21954e-07  1.21954e-07  1.89549e-08
      low eigenvalue method done, cpu time[sec] = 0.160599, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-07   1.9e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-08   1.9e-08         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89549e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.74838e-39  9.36772e-40  2.61885e-41  1.97987e-40  5.59089e-42  3.28659e-42  1.86982e-48  3.02105e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85255, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          3.2568e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.40137, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.5271, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2931.11       463.02      116.582      146.453      15.7932      1889.12      177.759     0.353324
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.161811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003226, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.173251, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.92149e-08  9.92149e-08  1.44153e-08
      low eigenvalue method done, cpu time[sec] = 0.174392, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.92e-08  1.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.42e-09  1.44e-08         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44153e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.12181e-39  6.91533e-40  1.92104e-41  1.40261e-40  4.02036e-42  2.98539e-42  1.87729e-48  2.99033e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.82745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.401597, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.53576, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2638      416.718      104.924      131.808      14.2139       1700.2      159.983     0.317992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.152861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003187, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.164286, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.09096e-08  9.09096e-08  1.28065e-08
      low eigenvalue method done, cpu time[sec] = 0.165414, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.09e-08  1.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.62e-09  1.28e-08         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28065e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89633e-39  6.06644e-40  1.68259e-41  1.21123e-40  3.49331e-42  2.85072e-42   1.8811e-48  3.03185e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.82755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1           5.428e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.402005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55311, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1758.66      277.812       69.949      87.8719      9.47593      1133.47      106.656     0.211995
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.139629, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003186, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.151777, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.46027e-08  6.46027e-08   7.9626e-09
      low eigenvalue method done, cpu time[sec] = 0.152896, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.46e-08  7.96e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.1e-09  7.96e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.9626e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20453e-39  3.59155e-40  9.95355e-42  6.80081e-41  2.00762e-42  2.30864e-42  1.90065e-48  3.02338e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.84131, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         7.23734e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.402362, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.54445, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1319      208.359      52.4618       65.904      7.10694      850.102      79.9917     0.158996
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.143021, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003192, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.154071, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.04429e-08  5.04429e-08  5.57575e-09
      low eigenvalue method done, cpu time[sec] = 0.155185, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.04e-08  5.58e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.74e-09  5.58e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.57575e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.55036e-40   2.4293e-40  6.75732e-42  4.45906e-41  1.33754e-42  1.92416e-42  1.92067e-48  2.99956e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.82734, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         9.04667e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.401034, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.54955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1055.2      166.687      41.9694      52.7232      5.68556      680.082      63.9933     0.127197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.139795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003189, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.151233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.1516e-08   4.1516e-08  4.18318e-09
      low eigenvalue method done, cpu time[sec] = 0.152428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.15e-08  4.18e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.89e-09  4.18e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.18318e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.47759e-40  1.77484e-40  4.96071e-42  3.19038e-41  9.68579e-43   1.6397e-42  1.94068e-48  3.00638e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.83167, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.403665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.54324, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            879.332      138.906      34.9745       43.936      4.73796      566.735      53.3278     0.105997
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.144021, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003187, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.155506, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.53443e-08  3.53443e-08  3.28446e-09
      low eigenvalue method done, cpu time[sec] = 0.156652, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-08  3.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-09  3.28e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.28446e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.12383e-40  1.36411e-40  3.83182e-42  2.41509e-41  7.40275e-43  1.42154e-42  1.96024e-48  3.00415e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.83378, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.26653e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.401695, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.56456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            753.713      119.062      29.9781      37.6594      4.06111      485.773      45.7095    0.0908548
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.128936, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003192, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.140066, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.08096e-08  3.08096e-08  2.66382e-09
      low eigenvalue method done, cpu time[sec] = 0.14154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.08e-08  2.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.88e-09  2.66e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.66382e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.1803e-40  1.08689e-40    3.068e-42  1.90206e-41  5.87657e-43  1.24936e-42  1.97902e-48  3.02549e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.83295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.44747e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.401924, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55406, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            659.499       104.18      26.2309       32.952      3.55347      425.051      39.9958     0.079498
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.13532, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.146985, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.73303e-08  2.73303e-08  2.21378e-09
      low eigenvalue method done, cpu time[sec] = 0.14811, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.73e-08  2.21e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-09  2.21e-09         1
         *Z       ---       ---  2.77e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21378e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.49102e-40  8.89727e-41  2.52308e-42  1.54271e-41  4.79847e-43   1.1103e-42  1.99676e-48  3.02153e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.82663, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 450 K
      Energy reference = 29288 1/cm
      Energy step      = 78 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00796
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.453995
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.266271
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.218792
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.37021
         W1 Well: minimal relaxation eigenvalue = 0.0858606
         W1 Well: maximal relaxation eigenvalue = 0.977665
         W1 Well:       grid size = 436
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4720 1/cm
         B1 Barrier:        grid size = 376
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -40 1/cm
         B2 Barrier:        grid size = 373
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 193 1/cm
         B3 Barrier:        grid size = 435
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 455
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23129 1/cm => truncating
         B5 Barrier:        grid size = 672
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23129 1/cm
         B6 Barrier:        grid size = 357
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1441 1/cm
         B7 Barrier:        grid size = 315
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4717 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16729 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.69999, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 436
      MasterEquation::Barrier::truncate: real weight = 9.73524e+46
      MasterEquation::Barrier::truncate: effective weight = 3.45984e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 436
      MasterEquation::Barrier::truncate: real weight = 9.50838e+45
      MasterEquation::Barrier::truncate: effective weight = 1.9415e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4720  -4720 1.36e+09 2.94e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -40 9.65e+14
         B2    194 1.54e+14
         B3  -4643  3.9e+13
         B4  -4720 4.88e+13
         B5  -4720 5.28e+12
         B6   1442 6.29e+14
         B7   4718 5.99e+13
         B8  16730 1.26e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.55e-09  2.05e-08  5.07e-14  2.93e-16  3.06e-41  1.95e-05      1.11  2.99e+17
          R  1.05e+08         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  4.87e+07     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  1.97e+13  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  3.42e+15  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  3.27e+40  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  5.12e+04  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6     0.902  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  3.34e-18  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1     2e+18   4.3e+18  1.06e+13  6.13e+10  6.41e-15  4.09e+21  2.32e+26  6.27e+43
          R     5e-19         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.32e-19     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  9.42e-14  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.63e-11  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  1.56e+14  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.45e-22  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6  4.31e-27  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7   1.6e-44  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.71376, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+08
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.391504, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.15679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27609.5      4405.53      1114.52      1396.67      151.097      17986.5      1712.47       3.5956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.452913, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.464479, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.40966e-07  6.40966e-07  1.35117e-07
      low eigenvalue method done, cpu time[sec] = 0.465635, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.41e-07  1.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.23e-08  1.35e-07         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35117e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38087e-37  6.48281e-38  2.27696e-39  2.34852e-38  5.90133e-40  4.60575e-41  2.61208e-47  1.08997e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71278, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.388619, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.21736, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9203.18      1468.51      371.506      465.557      50.3656       5995.5      570.825      1.19853
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.407, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.418407, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80429e-07  2.80429e-07  5.54081e-08
      low eigenvalue method done, cpu time[sec] = 0.419547, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-07  5.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.69e-08  5.54e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.54081e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.2506e-38  2.44909e-38  7.19125e-40  6.11019e-39  1.64546e-40  4.45092e-41  2.62163e-47  1.02662e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72355, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.78231e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.389142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.23817, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5521.91      881.106      222.904      279.334      30.2193       3597.3      342.495      0.71912
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.386476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.397913, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88841e-07  1.88841e-07  3.42797e-08
      low eigenvalue method done, cpu time[sec] = 0.399026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-07  3.43e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-08  3.43e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.42797e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.01247e-38  1.43388e-38  4.05265e-40  3.17947e-39  8.83967e-41  4.06979e-41  2.63152e-47  1.03049e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57504, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         2.49523e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.3878, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.26904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3944.22      629.361      159.217      199.525      21.5852       2569.5      244.639     0.513657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.351016, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003095, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.362159, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.44649e-07  1.44649e-07  2.43565e-08
      low eigenvalue method done, cpu time[sec] = 0.363273, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-07  2.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-08  2.44e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.43565e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91352e-38  9.79402e-39  2.73033e-40  2.03926e-39  5.78786e-41  3.69686e-41  2.64173e-47  1.03328e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71854, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.20816e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.388238, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.2133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3067.73      489.503      123.835      155.186      16.7885       1998.5      190.275     0.399511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.425588, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003121, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.436876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.18104e-07  1.18104e-07  1.86134e-08
      low eigenvalue method done, cpu time[sec] = 0.438015, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-07  1.86e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-08  1.86e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.86134e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26007e-38  7.26025e-39  2.01307e-40  1.45174e-39  4.18332e-41  3.36746e-41  2.65222e-47  1.02468e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.73809, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.389575, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.12741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2760.95      440.553      111.452      139.667      15.1097      1798.65      171.247      0.35956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.482851, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.494257, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08375e-07  1.08375e-07  1.65703e-08
      low eigenvalue method done, cpu time[sec] = 0.495371, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-07  1.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-08  1.66e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65703e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02402e-38  6.38037e-39  1.76703e-40  1.25624e-39  3.64277e-41  3.21974e-41  2.65756e-47  1.02537e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         5.34693e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.388479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.15261, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1840.64      293.702      74.3013      93.1115      10.0731       1199.1      114.165     0.239707
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.463338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003089, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.473608, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.74196e-08  7.74196e-08  1.03866e-08
      low eigenvalue method done, cpu time[sec] = 0.474206, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.74e-08  1.04e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.27e-09  1.04e-08         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03866e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29599e-38  3.80393e-39  1.05418e-40  7.10983e-40  2.11116e-41  2.62236e-41  2.68496e-47  1.02922e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71629, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         7.12924e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.389346, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.24818, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1380.48      220.276       55.726      69.8336      7.55484      899.325      85.6237      0.17978
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.371323, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003096, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.382637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.06559e-08  6.06559e-08  7.31601e-09
      low eigenvalue method done, cpu time[sec] = 0.383762, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.07e-08  7.32e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.68e-09  7.32e-09         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.31601e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.2533e-39  2.58605e-39  7.20046e-41  4.68822e-40    1.415e-41   2.1958e-41  2.71298e-47  1.02484e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72194, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         8.91155e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.389549, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.25756, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1104.38      176.221      44.5808      55.8669      6.04387       719.46       68.499     0.143824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.361075, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003096, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.37236, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.00434e-08  5.00434e-08  5.51415e-09
      low eigenvalue method done, cpu time[sec] = 0.373484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     5e-08  5.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.67e-09  5.51e-09         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.51415e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.04228e-39  1.89689e-39  5.31127e-41  3.36914e-40  1.02948e-41   1.8785e-41  2.74094e-47  1.02794e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72515, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.391441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.25977, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            920.318      146.851      37.1506      46.5557      5.03656       599.55      57.0825     0.119853
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.350526, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.362006, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.26836e-08  4.26836e-08  4.34589e-09
      low eigenvalue method done, cpu time[sec] = 0.36313, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.27e-08  4.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.97e-09  4.35e-09         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.34589e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.59152e-39  1.46267e-39  4.11864e-41  2.55959e-40  7.89836e-42  1.63408e-41  2.76826e-47  1.02744e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71953, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.24762e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.39227, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.08184, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            788.844      125.872      31.8434      39.9049      4.31705        513.9      48.9278     0.102731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.539788, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003092, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.551189, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.72627e-08  3.72627e-08    3.536e-09
      low eigenvalue method done, cpu time[sec] = 0.5523, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.73e-08  3.54e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.46e-09  3.54e-09         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.536e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.57646e-39  1.16865e-39  3.30855e-41  2.02195e-40  6.29027e-42  1.44042e-41  2.79448e-47  1.02824e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72581, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.42585e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.389495, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.22068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            690.239      110.138       27.863      34.9168      3.77742      449.662      42.8119      0.08989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.402633, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003102, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.414006, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30951e-08  3.30952e-08  2.94678e-09
      low eigenvalue method done, cpu time[sec] = 0.415137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-08  2.95e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-09  2.95e-09         1
         *Z       ---       ---  1.39e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.94678e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.83246e-39  9.58934e-40  2.72869e-41  1.64424e-40  5.15061e-42  1.28348e-41  2.81924e-47  1.02714e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72572, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 460 K
      Energy reference = 29565 1/cm
      Energy step      = 79 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006727
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.453283
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.266721
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.261254
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.37464
         W1 Well: minimal relaxation eigenvalue = 0.0852673
         W1 Well: maximal relaxation eigenvalue = 0.979807
         W1 Well:       grid size = 435
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4800 1/cm
         B1 Barrier:        grid size = 375
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -60 1/cm
         B2 Barrier:        grid size = 372
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 433
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4642 1/cm
         B4 Barrier:        grid size = 453
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23207 1/cm => truncating
         B5 Barrier:        grid size = 668
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23207 1/cm
         B6 Barrier:        grid size = 356
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1440 1/cm
         B7 Barrier:        grid size = 315
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4679 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16766 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.74075, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 435
      MasterEquation::Barrier::truncate: real weight = 2.84691e+46
      MasterEquation::Barrier::truncate: effective weight = 1.02474e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 435
      MasterEquation::Barrier::truncate: real weight = 2.19782e+45
      MasterEquation::Barrier::truncate: effective weight = 5.2483e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4800  -4800 1.33e+09 3.08e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -60 1.04e+15
         B2    177 1.68e+14
         B3  -4642 4.27e+13
         B4  -4800 5.33e+13
         B5  -4800 5.79e+12
         B6   1441 6.86e+14
         B7   4680 6.61e+13
         B8  16767 1.46e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.85e-09  1.67e-08  5.77e-14  3.73e-16  1.39e-40  1.46e-05     0.671  7.91e+16
          R  1.27e+08         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1     6e+07     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  1.73e+13  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  2.68e+15  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4  7.21e+39  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  6.84e+04  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6      1.49  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7  1.26e-17  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.12e+17   4.5e+17  1.56e+12  1.01e+10  3.75e-15  3.95e+20  1.81e+25  2.14e+42
          R  4.72e-18         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1  2.22e-18     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  6.42e-13  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  9.93e-11  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4  2.67e+14  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  2.53e-21  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6  5.52e-26  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7  4.68e-43  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.75532, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+08
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388192, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.19272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28874.7      4653.78      1182.83      1478.72      160.478      19010.7      1831.08      4.05607
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.424137, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003103, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.434852, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.99863e-07  6.99863e-07  1.58464e-07
      low eigenvalue method done, cpu time[sec] = 0.435959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     7e-07  1.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.77e-08  1.58e-07         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58464e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.27964e-36  5.95242e-37  2.06799e-38   2.1089e-37  5.31792e-39  4.61665e-40  3.30555e-46  2.93513e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388304, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.23031, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9624.89      1551.26      394.278      492.905      53.4926      6336.91      610.359      1.35202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.384012, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003064, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.395259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.12208e-07  3.12209e-07  6.61279e-08
      low eigenvalue method done, cpu time[sec] = 0.396389, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.12e-07  6.61e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.98e-08  6.61e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.61279e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.88836e-37  2.28042e-37   6.6583e-39  5.59493e-38  1.51306e-39  4.47211e-40  3.31762e-46  3.00413e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.75633e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388146, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.2447, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5774.93      930.756      236.567      295.743      32.0956      3802.15      366.215     0.811214
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.367162, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.377907, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.11959e-07  2.11959e-07  4.12753e-08
      low eigenvalue method done, cpu time[sec] = 0.378476, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-07  4.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.01e-08  4.13e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.12753e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.81256e-37  1.34515e-37  3.78822e-39  2.93856e-38  8.20758e-40   4.1026e-40  3.33013e-46   2.9869e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70623, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         2.45887e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.10699, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4124.95      664.826      168.976      211.245      22.9254      2715.82      261.582     0.579438
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.495894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.507118, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63165e-07  1.63165e-07  2.95067e-08
      low eigenvalue method done, cpu time[sec] = 0.508226, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-07  2.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-08  2.95e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.95067e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.78496e-37   9.2362e-38  2.56881e-39  1.89655e-38  5.40923e-40  3.73822e-40  3.34304e-46  3.00257e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70194, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          3.1614e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.38821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.25271, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3208.3      517.087      131.426      164.302      17.8309       2112.3      203.453     0.450674
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.355093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003092, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.366277, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33688e-07  1.33688e-07  2.26555e-08
      low eigenvalue method done, cpu time[sec] = 0.367399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-07  2.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-08  2.27e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26555e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.17035e-37  6.87455e-38  1.90341e-39  1.35655e-38  3.92911e-40  3.41469e-40   3.3563e-46  3.00574e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57731, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.38877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.2409, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2887.47      465.378      118.283      147.872      16.0478      1901.07      183.108     0.405607
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.367278, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003067, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.378641, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22848e-07  1.22848e-07  2.02092e-08
      low eigenvalue method done, cpu time[sec] = 0.379801, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-07  2.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  2.02e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.02092e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.94751e-37  6.05188e-38  1.67429e-39  1.17621e-38   3.4286e-40  3.26913e-40  3.36304e-46  3.01675e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70481, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1           5.269e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.38816, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.27731, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1924.98      310.252      78.8556      98.5811      10.6985      1267.38      122.072     0.270405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.344024, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003072, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.355278, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.82067e-08  8.82067e-08  1.27677e-08
      low eigenvalue method done, cpu time[sec] = 0.356411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.82e-08  1.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.24e-09  1.28e-08         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27677e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25674e-37  3.63278e-38  1.00713e-39  6.70875e-39  2.00335e-40  2.67761e-40   3.3976e-46   3.0123e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.71826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         7.02534e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388311, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.25289, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1443.73      232.689      59.1417      73.9358       8.0239      950.537      91.5539     0.202803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.369683, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.381055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.93358e-08  6.93358e-08   9.0447e-09
      low eigenvalue method done, cpu time[sec] = 0.382176, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.93e-08  9.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.45e-09  9.04e-09         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.0447e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.02401e-38  2.48197e-38  6.92012e-40  4.44838e-39  1.35065e-40  2.25232e-40  3.43289e-46  3.00215e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72001, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         8.78167e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388304, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.23611, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1154.99      186.151      47.3134      59.1486      6.41912      760.429      73.2431     0.162243
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.392657, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.403672, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.73409e-08  5.73409e-08  6.84776e-09
      low eigenvalue method done, cpu time[sec] = 0.404805, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.73e-08  6.85e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.32e-09  6.85e-09         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.84776e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.89846e-38  1.82765e-38  5.12833e-40  3.21062e-39  9.87176e-41  1.93425e-40  3.46803e-46  3.00907e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72391, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.387774, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.26983, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            962.489      155.126      39.4278      49.2905      5.34926      633.691      61.0359     0.135202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.345609, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.356861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.89972e-08  4.89972e-08  5.41694e-09
      low eigenvalue method done, cpu time[sec] = 0.357981, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.9e-08  5.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.54e-09  5.42e-09         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.41694e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.49748e-38   1.4138e-38  3.99202e-40  2.44778e-39  7.60227e-41  1.68813e-40  3.50231e-46  3.00678e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7221, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.22943e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.391241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.28547, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            824.991      132.965      33.7953       42.249      4.58508      543.164      52.3165     0.115888
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.331272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00306, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.342485, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28371e-08  4.28371e-08   4.4213e-09
      low eigenvalue method done, cpu time[sec] = 0.343585, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.28e-08  4.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-09  4.42e-09         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.4213e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.51355e-38  1.13266e-38  3.21724e-40  1.93939e-39   6.0737e-41  1.49239e-40  3.53516e-46  3.00985e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72494, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.40507e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.388083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.28108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            721.867      116.345      29.5709      36.9679      4.01195      475.268      45.7769     0.101402
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.334999, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003096, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.345887, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.8092e-08   3.8092e-08  3.69459e-09
      low eigenvalue method done, cpu time[sec] = 0.347029, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.81e-08  3.69e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.51e-09  3.69e-09         1
         *Z       ---       ---   7.4e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.69459e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.79003e-38  9.31594e-39  2.66085e-40  1.58115e-39  4.98695e-41  1.33323e-40  3.56615e-46  3.00785e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7127, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 470 K
      Energy reference = 29843 1/cm
      Energy step      = 81 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006798
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.44422
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.257487
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.249469
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.31807
         W1 Well: minimal relaxation eigenvalue = 0.0846739
         W1 Well: maximal relaxation eigenvalue = 0.978887
         W1 Well:       grid size = 428
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4825 1/cm
         B1 Barrier:        grid size = 369
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -45 1/cm
         B2 Barrier:        grid size = 366
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 197 1/cm
         B3 Barrier:        grid size = 426
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 445
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23131 1/cm => truncating
         B5 Barrier:        grid size = 654
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23131 1/cm
         B6 Barrier:        grid size = 350
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 311
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4651 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16721 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.65468, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 428
      MasterEquation::Barrier::truncate: real weight = 8.79602e+45
      MasterEquation::Barrier::truncate: effective weight = 3.24628e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 428
      MasterEquation::Barrier::truncate: real weight = 5.60531e+44
      MasterEquation::Barrier::truncate: effective weight = 1.51847e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4825  -4825 1.32e+09 3.22e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -45 1.12e+15
         B2    198 1.83e+14
         B3  -4662 4.67e+13
         B4  -4825 5.82e+13
         B5  -4825 6.34e+12
         B6   1493 7.47e+14
         B7   4652 7.28e+13
         B8  16721  1.7e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.52e-09  1.16e-08  5.53e-14  3.99e-16     5e-40  9.38e-06     0.351  1.88e+16
          R  1.81e+08         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  8.64e+07     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  1.81e+13  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3  2.51e+15  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4     2e+39   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5  1.07e+05  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6      2.85  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7  5.33e-17  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.47e+16  5.18e+16  2.48e+11  1.79e+09  2.24e-15   4.2e+19  1.57e+24   8.4e+40
          R  4.05e-17         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  1.93e-17     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  4.03e-12  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3   5.6e-10  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4  4.46e+14   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5  2.38e-20  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6  6.35e-25  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7  1.19e-41  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.66865, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+08
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.374244, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.87615, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30175.6      4912.16      1254.28      1564.32      170.296      20075.7      1955.86      4.56344
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.63584, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002974, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.646545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.85593e-07  8.85593e-07  2.14646e-07
      low eigenvalue method done, cpu time[sec] = 0.647703, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.86e-07  2.15e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.55e-08  2.15e-07         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.14646e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07784e-35  4.96458e-36  1.70862e-37  1.72383e-36  4.36157e-38  4.17601e-39   3.7423e-45  7.58149e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57289, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.374866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.87607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10058.5      1637.39      418.093      521.438      56.7655      6691.92      651.954      1.52115
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.653946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002959, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.66494, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.02771e-07  4.02771e-07  9.11105e-08
      low eigenvalue method done, cpu time[sec] = 0.666076, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.03e-07  9.11e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-08  9.11e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.11105e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03935e-36  1.92876e-36  5.60511e-38  4.66048e-37  1.26546e-38  4.05981e-39  3.75591e-45  7.62196e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58899, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.73134e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.375849, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.91837, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6035.13      982.432      250.856      312.863      34.0593      4015.15      391.173     0.912689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.616277, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002947, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.627336, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.75664e-07  2.75665e-07  5.73616e-08
      low eigenvalue method done, cpu time[sec] = 0.628475, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.76e-07  5.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.61e-08  5.74e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.73616e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.29021e-36  1.14617e-36  3.21874e-38  2.47002e-37  6.92952e-39  3.73882e-39  3.77001e-45  7.62668e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59465, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         2.42388e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.375964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.93128, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4310.81      701.737      179.183      223.474      24.3281      2867.96      279.409     0.651921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.601581, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.612995, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.1326e-07   2.1326e-07  4.12516e-08
      low eigenvalue method done, cpu time[sec] = 0.614184, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.13e-07  4.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.01e-08  4.13e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.12516e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.41743e-36  7.91067e-37  2.19654e-38   1.6039e-37  4.59613e-39  3.41842e-39  3.78455e-45  7.61629e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59244, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.11641e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.375599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.91488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3352.85      545.796      139.364      173.813      18.9218      2230.64      217.318     0.507049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.602753, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002957, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.613756, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75345e-07  1.75345e-07   3.1819e-08
      low eigenvalue method done, cpu time[sec] = 0.614864, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-07  3.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.64e-08  3.18e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.1819e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89243e-36  5.91153e-37  1.63548e-38  1.15254e-37  3.35472e-39  3.13193e-39  3.79948e-45  7.64408e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58133, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.379216, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9292, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3017.56      491.216      125.428      156.432      17.0296      2007.57      195.586     0.456344
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.591448, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002964, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.602427, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.61355e-07  1.61355e-07  2.84389e-08
      low eigenvalue method done, cpu time[sec] = 0.603567, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-07  2.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-08  2.84e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84389e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7014e-36  5.21301e-37  1.44159e-38  1.00128e-37   2.9334e-39  3.00251e-39  3.80708e-45  7.65028e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58394, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         5.19402e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.37648, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.76733, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2011.71      327.477      83.6186      104.288      11.3531      1338.38      130.391      0.30423
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746267, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002956, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.757267, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16453e-07  1.16453e-07  1.81059e-08
      low eigenvalue method done, cpu time[sec] = 0.758848, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-07  1.81e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-08  1.81e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81059e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10629e-36  3.15036e-37  8.74177e-39  5.75462e-38  1.72779e-39  2.47358e-39  3.84595e-45  7.63104e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5774, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         6.92537e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.376152, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.88246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1508.78      245.608       62.714      78.2158      8.51482      1003.79      97.7931     0.228172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.632211, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002942, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.643097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.18466e-08  9.18466e-08  1.28985e-08
      low eigenvalue method done, cpu time[sec] = 0.644249, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.18e-08  1.29e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.52e-09  1.29e-08         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28985e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.98786e-37  2.16294e-37   6.0418e-39  3.83662e-38  1.17161e-39  2.09037e-39  3.88556e-45  7.61657e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57227, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         8.65671e+09
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.374856, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.93181, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1207.03      196.486      50.1712      62.5726      6.81186       803.03      78.2345     0.182538
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.583946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002956, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.594644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.61424e-08  7.61424e-08   9.8086e-09
      low eigenvalue method done, cpu time[sec] = 0.595759, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.61e-08  9.81e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.04e-09  9.81e-09         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.8086e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.13309e-37  1.59887e-37  4.49799e-39   2.7809e-38  8.60191e-40  1.80212e-39  3.92497e-45  7.62238e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46163, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+10
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.373771, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9706, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1005.85      163.739      41.8093      52.1438      5.67655      669.192      65.1954     0.152115
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.548649, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002977, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.559295, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.51852e-08  6.51852e-08  7.78735e-09
      low eigenvalue method done, cpu time[sec] = 0.560633, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.52e-08  7.79e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.01e-09  7.79e-09         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.78735e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.9052e-37  1.24075e-37  3.51456e-39  2.12756e-38  6.64891e-40  1.57803e-39  3.96336e-45  7.62561e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.44294, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.21194e+10
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.374243, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9633, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            862.161      140.347      35.8365      44.6947      4.86561      573.593      55.8818     0.130384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.563969, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.574707, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.70759e-08  5.70759e-08  6.37566e-09
      low eigenvalue method done, cpu time[sec] = 0.575831, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.71e-08  6.38e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.26e-09  6.38e-09         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.37566e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.03963e-37  9.96703e-38  2.84152e-39  1.69065e-38   5.3287e-40  1.39911e-39  4.00013e-45  7.62753e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58345, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.38507e+10
      global relaxation matrix dimension = 428
      setting global matrices ... done, cpu time[sec] = 0.375938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            754.391      122.804       31.357      39.1079      4.25741      501.894      48.8966     0.114086
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.60647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00296, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617204, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.08169e-08  5.08169e-08  5.34201e-09
      low eigenvalue method done, cpu time[sec] = 0.61832, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.08e-08  5.34e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.67e-09  5.34e-09         1
         *Z       ---       ---  3.73e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.34201e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.40112e-37  8.21683e-38  2.35662e-39  1.38187e-38  4.38713e-40  1.25313e-39   4.0348e-45  7.62609e-63

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57289, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 480 K
      Energy reference = 30122 1/cm
      Energy step      = 83 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006828
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.42678
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.251012
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.248602
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.26185
         W1 Well: minimal relaxation eigenvalue = 0.0840787
         W1 Well: maximal relaxation eigenvalue = 0.978036
         W1 Well:       grid size = 422
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4905 1/cm
         B1 Barrier:        grid size = 363
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -7 1/cm
         B2 Barrier:        grid size = 361
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 419
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4655 1/cm
         B4 Barrier:        grid size = 438
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 642
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 345
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1486 1/cm
         B7 Barrier:        grid size = 307
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4640 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.56838, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 422
      MasterEquation::Barrier::truncate: real weight = 2.86139e+45
      MasterEquation::Barrier::truncate: effective weight = 1.08211e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 422
      MasterEquation::Barrier::truncate: real weight = 1.55968e+44
      MasterEquation::Barrier::truncate: effective weight = 4.70342e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4905  -4905 1.29e+09 3.37e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -7 1.21e+15
         B2    159 1.99e+14
         B3  -4655 5.11e+13
         B4  -4905 6.36e+13
         B5  -4905 6.94e+12
         B6   1487 8.14e+14
         B7   4641 8.02e+13
         B8  16759 1.97e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.55e-09  9.43e-09  6.15e-14  4.92e-16  1.98e-39  7.09e-06     0.219  5.46e+15
          R   2.2e+08         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1  1.06e+08     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  1.63e+13   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  2.03e+15  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  5.06e+38   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  1.41e+05  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6      4.57  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  1.83e-16  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.15e+15  6.53e+15  4.25e+10   3.4e+08  1.37e-15  4.91e+18  1.51e+23  3.78e+39
          R  3.17e-16         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1  1.53e-16     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  2.35e-11   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  2.94e-09  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  7.31e+14   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  2.04e-19  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6  6.61e-24  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  2.64e-40  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.58311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+08
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.36481, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.69714, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31512.9      5181.03      1328.95      1653.57      180.566      21182.5      2087.04      5.12109
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.762435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002879, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.773147, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.64632e-07  9.64632e-07  2.48007e-07
      low eigenvalue method done, cpu time[sec] = 0.77436, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.65e-07  2.48e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.26e-08  2.48e-07         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.48007e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.30054e-35  3.79026e-35    1.292e-36  1.29043e-35   3.2756e-37  3.45849e-38  3.82752e-44  1.68277e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.364595, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75226, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10504.3      1727.01      442.984      551.191      60.1888      7060.83      695.681      1.70703
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.731209, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00287, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.741899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.46799e-07  4.46799e-07  1.06996e-07
      low eigenvalue method done, cpu time[sec] = 0.743518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.47e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-08  1.07e-07         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06996e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.94098e-35  1.49192e-35   4.3154e-37  3.55241e-36  9.68353e-38  3.36982e-38  3.84136e-44  1.69665e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51203, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.70727e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.364927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74726, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6302.58      1036.21       265.79      330.715      36.1133       4236.5      417.409      1.02422
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.729149, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002856, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.739884, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.08137e-07  3.08137e-07  6.79247e-08
      low eigenvalue method done, cpu time[sec] = 0.741036, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.08e-07  6.79e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.9e-08  6.79e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.79247e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.59394e-35  8.92851e-36  2.50046e-37  1.89924e-36    5.351e-38  3.11291e-38   3.8557e-44  1.69068e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50665, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         2.39018e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.365441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4501.85      740.147       189.85      236.225      25.7952      3026.07      298.149     0.731584
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.737399, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002868, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.748106, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39497e-07  2.39497e-07  4.91301e-08
      low eigenvalue method done, cpu time[sec] = 0.749218, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-07  4.91e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-08  4.91e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.91301e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91664e-35  6.19298e-36  1.71689e-37  1.24057e-36  3.57111e-38   2.8544e-38   3.8705e-44  1.69063e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51198, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.07309e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.364215, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74182, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3501.44       575.67      147.661       183.73      20.0629      2353.61      231.894      0.56901
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002869, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.752008, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97568e-07  1.97568e-07  3.80648e-08
      low eigenvalue method done, cpu time[sec] = 0.753131, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.98e-07  3.81e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-08  3.81e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.80648e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.50697e-35   4.6458e-36  1.28439e-37  8.95464e-37  2.61885e-38  2.62206e-38  3.88568e-44  1.69138e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.35316, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.363831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74119, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3151.29      518.103      132.895      165.357      18.0566      2118.25      208.704     0.512109
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.742664, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002866, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.753484, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.82047e-07  1.82047e-07  3.40859e-08
      low eigenvalue method done, cpu time[sec] = 0.755284, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.82e-07  3.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-08  3.41e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.40859e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35738e-35  4.10361e-36  1.13439e-37   7.7942e-37  2.29452e-38  2.51677e-38  3.89339e-44  1.69016e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51136, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         5.12181e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.365852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.55168, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2100.86      345.402      88.5968      110.238      12.0378      1412.17      139.136     0.341406
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.922269, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002863, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.932981, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32026e-07  1.32026e-07  2.18641e-08
      low eigenvalue method done, cpu time[sec] = 0.934525, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-07  2.19e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-08  2.19e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18641e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.89137e-36  2.49615e-36  6.93324e-38  4.51288e-37  1.36207e-38  2.08441e-38  3.93286e-44  1.69001e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50242, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         6.82909e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.3652, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.76936, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1575.65      259.051      66.4476      82.6787      9.02832      1059.12      104.352     0.256054
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.714818, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002866, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.725456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04461e-07  1.04461e-07  1.56609e-08
      low eigenvalue method done, cpu time[sec] = 0.726575, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  1.57e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.64e-09  1.57e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56609e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.45469e-36  1.72198e-36  4.81927e-38  3.02486e-37  9.28839e-39  1.76909e-38  3.97301e-44  1.69103e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51376, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         8.53636e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.364576, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74621, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1260.52      207.241      53.1581       66.143      7.22266      847.299      83.4817     0.204843
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.735878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002866, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.746581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.68002e-08  8.68002e-08  1.19607e-08
      low eigenvalue method done, cpu time[sec] = 0.747701, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.68e-08   1.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.99e-09   1.2e-08         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19607e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.97709e-36   1.2777e-36  3.60397e-38  2.20167e-37  6.84968e-39  1.53068e-38  4.01291e-44  1.68971e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51195, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.366295, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75459, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1050.43      172.701      44.2984      55.1191      6.01888      706.083      69.5681     0.170703
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.730525, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002868, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.741284, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.44419e-08  7.44419e-08   9.5297e-09
      low eigenvalue method done, cpu time[sec] = 0.742396, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.44e-08  9.53e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.83e-09  9.53e-09         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.5297e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.99468e-36  9.94597e-37  2.82643e-38  1.69019e-37  5.31376e-39  1.34454e-38  4.05175e-44  1.69084e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5191, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.19509e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.364873, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.76476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            900.369      148.029      37.9701       47.245      5.15904      605.214      59.6298     0.146317
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.717161, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002875, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.72783, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.52748e-08  6.52748e-08  7.82575e-09
      low eigenvalue method done, cpu time[sec] = 0.728928, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.53e-08  7.83e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.98e-09  7.83e-09         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.82575e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.29966e-36  8.01074e-37  2.29234e-38  1.34699e-37  4.27178e-39  1.19538e-38  4.08892e-44  1.69059e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.38162, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.36582e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.365455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.77434, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            787.823      129.526      33.2238      41.3394      4.51416      529.562      52.1761     0.128027
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.708231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002869, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.718978, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.8186e-08   5.8186e-08  6.57424e-09
      low eigenvalue method done, cpu time[sec] = 0.720105, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-08  6.57e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.32e-09  6.57e-09         1
         *Z       ---       ---  2.09e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.57424e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.78537e-36  6.61919e-37  1.90634e-38  1.10374e-37  3.52637e-39  1.07329e-38  4.12398e-44  1.69065e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51248, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 490 K
      Energy reference = 30399 1/cm
      Energy step      = 84 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007264
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.434072
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.248869
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.243637
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.25633
         W1 Well: minimal relaxation eigenvalue = 0.0835225
         W1 Well: maximal relaxation eigenvalue = 0.980057
         W1 Well:       grid size = 421
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4965 1/cm
         B1 Barrier:        grid size = 362
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -9 1/cm
         B2 Barrier:        grid size = 360
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 417
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4628 1/cm
         B4 Barrier:        grid size = 436
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6225 1/cm
         B5 Barrier: nonpositive number of states at -23109 1/cm => truncating
         B5 Barrier:        grid size = 637
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23109 1/cm
         B6 Barrier:        grid size = 344
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 306
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4694 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16707 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.56399, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 421
      MasterEquation::Barrier::truncate: real weight = 9.76935e+44
      MasterEquation::Barrier::truncate: effective weight = 3.73904e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 421
      MasterEquation::Barrier::truncate: real weight = 4.689e+43
      MasterEquation::Barrier::truncate: effective weight = 1.51927e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4965  -4965 1.26e+09 3.53e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -9  1.3e+15
         B2    159 2.17e+14
         B3  -4628 5.58e+13
         B4  -4965 6.93e+13
         B5  -4965 7.59e+12
         B6   1503 8.86e+14
         B7   4695 8.83e+13
         B8  16707 2.28e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.62e-09  7.43e-09  6.51e-14  5.76e-16  7.07e-39  5.19e-06     0.133   1.6e+15
          R  2.76e+08         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  1.35e+08     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  1.54e+13  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3  1.74e+15  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4  1.41e+38  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5  1.93e+05  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6      7.53  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7  6.23e-16  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.36e+14  8.94e+14  7.84e+09  6.93e+07  8.52e-16  6.25e+17   1.6e+22  1.93e+38
          R  2.29e-15         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  1.12e-15     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  1.27e-10  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3  1.44e-08  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4  1.17e+15  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5   1.6e-18  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6  6.25e-23  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7  5.18e-39  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.57766, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+08
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.365155, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              32887      5460.59      1406.95       1746.6      191.302      22331.8      2224.85       5.7339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.836298, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002863, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.846582, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10477e-06  1.10477e-06  3.00076e-07
      low eigenvalue method done, cpu time[sec] = 0.84771, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-06     3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07     3e-07         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.00076e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.87527e-34  2.65865e-34  8.98448e-36   8.8873e-35  2.26305e-36  2.62563e-37  3.56048e-43   3.3143e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.53502, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10962.3       1820.2      468.985        582.2      63.7675      7443.95      741.616       1.9113
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.931612, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00281, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.20879e-07  5.20879e-07  1.31509e-07
      low eigenvalue method done, cpu time[sec] = 0.94311, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.21e-07  1.32e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.91e-08  1.32e-07         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.31509e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83106e-34     1.06e-34  3.05365e-36  2.48966e-35  6.81231e-37  2.56354e-37   3.5733e-43  3.29855e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49019, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.68407e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363553, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.71513, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6577.41      1092.12      281.391       349.32      38.2605      4466.37      444.969      1.14678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.759545, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.7699, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.619e-07    3.619e-07  8.41601e-08
      low eigenvalue method done, cpu time[sec] = 0.771011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.62e-07  8.42e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-08  8.42e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.41601e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.87798e-34  6.38751e-35  1.78484e-36  1.34237e-35  3.79773e-37  2.37506e-37  3.58657e-43  3.29671e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49605, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          2.3577e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363053, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.72526, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4698.15      780.084      200.993      249.514      27.3289      3190.26      317.835     0.819129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.744669, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002836, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.755614, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.82568e-07  2.82568e-07   6.1214e-08
      low eigenvalue method done, cpu time[sec] = 0.757552, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.83e-07  6.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-08  6.12e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.1214e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39521e-34    4.452e-35  1.23287e-36  8.81862e-36  2.54974e-37  2.18392e-37  3.60026e-43  3.29756e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49539, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.03132e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363447, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.72292, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3654.12      606.732      156.328      194.067      21.2558      2481.32      247.205       0.6371
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.747052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002846, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.757705, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.33852e-07  2.33852e-07  4.76321e-08
      low eigenvalue method done, cpu time[sec] = 0.75882, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.34e-07  4.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.17e-08  4.76e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.76321e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10164e-34  3.35236e-35  9.26534e-37  6.39331e-36  1.87842e-37  2.01126e-37   3.6143e-43  3.29711e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.362371, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.70434, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3288.7      546.059      140.695       174.66      19.1302      2233.18      222.485      0.57339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.762706, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002843, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.773342, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15763e-07  2.15763e-07  4.27318e-08
      low eigenvalue method done, cpu time[sec] = 0.774905, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-07  4.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-08  4.27e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.27318e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.94085e-35   2.9659e-35  8.19926e-37  5.57512e-36  1.64899e-37  1.93278e-37  3.62143e-43   3.2977e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48857, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          5.0522e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.362976, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.69259, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2192.47      364.039      93.7969       116.44      12.7535      1488.79      148.323      0.38226
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.775109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002855, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785745, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57228e-07  1.57228e-07    2.761e-08
      low eigenvalue method done, cpu time[sec] = 0.787212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-07  2.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-08  2.76e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.761e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.55844e-35  1.81565e-35  5.04986e-37  3.25147e-36   9.8635e-38  1.60899e-37  3.65787e-43  3.30072e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49245, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         6.73627e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.364368, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74022, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1644.35       273.03      70.3477        87.33      9.56512      1116.59      111.242     0.286695
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.732033, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002827, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.742447, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24793e-07  1.24793e-07   1.9882e-08
      low eigenvalue method done, cpu time[sec] = 0.74391, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-07  1.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  1.99e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.9882e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.78615e-35  1.25839e-35  3.52975e-37  2.19078e-36  6.76338e-38   1.3713e-37  3.69491e-43  3.29979e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49771, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         8.42034e+09
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.364791, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.68203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1315.48      218.424      56.2782       69.864      7.65209      893.274      88.9939     0.229356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.78761, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002836, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.798358, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03933e-07  1.03933e-07  1.52482e-08
      low eigenvalue method done, cpu time[sec] = 0.799842, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  1.52e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.52e-09  1.52e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52482e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.70585e-35  9.37169e-36  2.65124e-37  1.60112e-36  5.00924e-38  1.19069e-37  3.73165e-43  3.29991e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49135, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+10
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363186, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.73264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1096.23       182.02      46.8985        58.22      6.37675      744.395      74.1616      0.19113
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741088, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002842, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.75136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.92941e-08  8.92941e-08  1.21912e-08
      low eigenvalue method done, cpu time[sec] = 0.752446, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.93e-08  1.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.16e-09  1.22e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21912e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.98459e-35  7.31743e-36  2.08677e-37  1.23329e-36  3.89986e-38  1.04908e-37   3.7674e-43  3.29945e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49835, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.17885e+10
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.363022, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.56821, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             939.63      156.017      40.1987      49.9028      5.46578      638.053       63.567     0.163826
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.898362, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002836, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.908867, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.84107e-08  7.84107e-08   1.0041e-08
      low eigenvalue method done, cpu time[sec] = 0.910484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.84e-08     1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.15e-09     1e-08         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0041e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.47254e-35  5.90894e-36  1.69766e-37  9.85669e-37  3.14462e-38  9.35202e-38   3.8016e-43  3.29949e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.34725e+10
      global relaxation matrix dimension = 421
      setting global matrices ... done, cpu time[sec] = 0.358295, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.68562, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            822.176      136.515      35.1739       43.665      4.78256      558.296      55.6212     0.143348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.688064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002827, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.698442, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.99789e-08  6.99789e-08  8.45689e-09
      low eigenvalue method done, cpu time[sec] = 0.699636, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     7e-08  8.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.37e-09  8.46e-09         1
         *Z       ---       ---  1.17e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.45689e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.09249e-35  4.89351e-36  1.41558e-37  8.09663e-37  2.60271e-38    8.417e-38  3.83384e-43  3.29975e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24512, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 500 K
      Energy reference = 30677 1/cm
      Energy step      = 86 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007039
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.411174
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.240382
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.258226
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.2027
         W1 Well: minimal relaxation eigenvalue = 0.0829345
         W1 Well: maximal relaxation eigenvalue = 0.979242
         W1 Well:       grid size = 416
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5099 1/cm
         B1 Barrier:        grid size = 357
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -24 1/cm
         B2 Barrier:        grid size = 355
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 146 1/cm
         B3 Barrier:        grid size = 411
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4669 1/cm
         B4 Barrier:        grid size = 429
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23159 1/cm => truncating
         B5 Barrier:        grid size = 626
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23159 1/cm
         B6 Barrier:        grid size = 340
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1437 1/cm
         B7 Barrier:        grid size = 302
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4705 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16745 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.48524, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 416
      MasterEquation::Barrier::truncate: real weight = 3.49043e+44
      MasterEquation::Barrier::truncate: effective weight = 1.36771e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 416
      MasterEquation::Barrier::truncate: real weight = 1.5105e+43
      MasterEquation::Barrier::truncate: effective weight = 5.26494e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5099  -5099 1.21e+09  3.7e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -24 1.41e+15
         B2    147 2.36e+14
         B3  -4669  6.1e+13
         B4  -5099 7.55e+13
         B5  -5099  8.3e+12
         B6   1438 9.64e+14
         B7   4706 9.71e+13
         B8  16745 2.63e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.46e-09  7.02e-09  8.19e-14  7.97e-16  2.86e-38  4.58e-06     0.098  5.89e+14
          R  2.89e+08         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  1.42e+08     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2  1.22e+13  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3  1.25e+15  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  3.49e+37  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5  2.18e+05  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6      10.2  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7   1.7e-15  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.54e+13  1.33e+14  1.55e+09   1.5e+07   5.4e-16  8.64e+16  1.85e+21  1.11e+37
          R  1.53e-14         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.54e-15     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2  6.47e-10  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3  6.64e-08  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.85e+15  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5  1.16e-17  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6  5.41e-22  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7     9e-38  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.49945, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+08
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349031, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.40624, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34298.2       5751.2      1488.39       1843.5      202.519      23524.8       2369.5      6.40754
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.941914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002805, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.952033, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05111e-06  1.05111e-06  2.98935e-07
      low eigenvalue method done, cpu time[sec] = 0.953153, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-06  2.99e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.98e-08  2.99e-07         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.98935e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8428e-33  1.72312e-33  5.77778e-35  5.66341e-34  1.44652e-35  1.84634e-36  3.03013e-42  5.73372e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32686, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+08
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.34795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.4535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11432.7      1917.07      496.129        614.5      67.5063      7841.61      789.833      2.13585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.890126, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.900361, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.03876e-07  5.03876e-07  1.33019e-07
      low eigenvalue method done, cpu time[sec] = 0.902169, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.04e-07  1.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-08  1.33e-07         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33019e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.87842e-33  6.95703e-34   1.9972e-35  1.61348e-34  4.43102e-36  1.80392e-36  3.04099e-42  5.71051e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.66168e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349253, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.44988, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6859.64      1150.24      297.678        368.7      40.5038      4704.97        473.9      1.28151
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.890408, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.900662, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.52515e-07  3.52515e-07  8.57953e-08
      low eigenvalue method done, cpu time[sec] = 0.901784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-07  8.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.28e-08  8.58e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.57952e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25552e-33  4.22068e-34  1.17729e-35  8.77124e-35  2.49144e-36  1.67473e-36  3.05223e-42  5.71836e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.32635e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349168, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.46874, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4899.75      821.601      212.627      263.357      28.9313      3360.69        338.5     0.915363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.872438, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.882805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76412e-07  2.76412e-07  6.27438e-08
      low eigenvalue method done, cpu time[sec] = 0.883906, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.76e-07  6.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.56e-08  6.27e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.27438e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.3773e-34  2.95575e-34  8.17952e-36   5.7945e-35  1.68251e-36  1.54338e-36  3.06383e-42  5.72341e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.99103e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.348139, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.60949, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3810.91      639.023      165.376      204.833      22.5021      2613.87      263.278     0.711949
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.841946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002764, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.851957, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.29448e-07  2.29448e-07  4.90283e-08
      low eigenvalue method done, cpu time[sec] = 0.853242, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.29e-07   4.9e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.12e-08   4.9e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.90283e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.43478e-34  2.23392e-34  6.17471e-36  4.21884e-35  1.24507e-36   1.4244e-36  3.07571e-42  5.71943e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30691, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.346789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.45209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3429.82       575.12      148.839       184.35      20.2519      2352.48       236.95     0.640754
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.888723, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00275, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899029, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.11958e-07  2.11958e-07  4.40636e-08
      low eigenvalue method done, cpu time[sec] = 0.900637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-07  4.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-08  4.41e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.40636e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.72078e-34  1.97953e-34  5.47467e-36   3.6856e-35  1.09507e-36  1.37021e-36  3.08174e-42  5.71909e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         4.98504e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349842, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.46667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2286.55      383.414      99.2259        122.9      13.5013      1568.32      157.967     0.427169
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.876175, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.886275, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.55148e-07  1.55148e-07  2.86736e-08
      low eigenvalue method done, cpu time[sec] = 0.887376, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-07  2.87e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-08  2.87e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.86736e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.46512e-34  1.21944e-34  3.39719e-36  2.16476e-35  6.59917e-37  1.14588e-36  3.11254e-42  5.72194e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         6.64672e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349873, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.452, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1714.91       287.56      74.4194       92.175      10.1259      1176.24      118.475     0.320377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.88189, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.892149, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23505e-07  1.23505e-07  2.07555e-08
      low eigenvalue method done, cpu time[sec] = 0.893232, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-07  2.08e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-08  2.08e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.07555e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.27527e-34  8.49061e-35  2.38758e-36  1.46608e-35  4.54955e-37  9.80344e-37  3.14379e-42  5.71955e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31908, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1          8.3084e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.348998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.54199, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1371.93      230.048      59.5355        73.74      8.10076      940.993      94.7799     0.256302
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.851159, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.861366, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03082e-07  1.03082e-07  1.59837e-08
      low eigenvalue method done, cpu time[sec] = 0.862497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-07   1.6e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.37e-09   1.6e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.59837e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.54632e-34  6.34628e-35  1.80107e-36  1.07579e-35  3.38392e-37  8.54007e-37  3.17476e-42  5.71891e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37503, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.349094, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.48034, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1143.27      191.707      49.6129        61.45      6.75063      784.161      78.9833     0.213585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.852363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002747, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.862598, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.87114e-08  8.87114e-08  1.28228e-08
      low eigenvalue method done, cpu time[sec] = 0.864107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.87e-08  1.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.05e-09  1.28e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28228e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05765e-34  4.97009e-35  1.42266e-36  8.31393e-36  2.64373e-37  7.54593e-37  3.20485e-42  5.72036e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31901, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.16318e+10
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.348896, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.43877, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            979.949       164.32      42.5254      52.6714      5.78626      672.138      67.6999     0.183073
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.89559, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002751, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.90595, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.80043e-08  7.80043e-08  1.05918e-08
      low eigenvalue method done, cpu time[sec] = 0.907065, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-08  1.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.06e-09  1.06e-08         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05918e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70952e-34  4.02371e-35  1.16089e-36  6.66334e-36   2.1381e-37  6.74384e-37  3.23363e-42  5.72048e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32188, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.32934e+10
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.3525, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.48528, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            857.455       143.78      37.2097      46.0875      5.06297      588.121      59.2374     0.160189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.856442, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002749, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.866767, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.96946e-08  6.96946e-08  8.94338e-09
      low eigenvalue method done, cpu time[sec] = 0.868012, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.97e-08  8.94e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-09  8.94e-09         1
         *Z       ---       ---  7.33e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.94338e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.45038e-34  3.33968e-35  9.70545e-37  5.48686e-36  1.77423e-37  6.08339e-37  3.26076e-42  5.72126e-59

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33025, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 510 K
      Energy reference = 30956 1/cm
      Energy step      = 88 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007326
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.406942
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.232668
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.245697
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.16095
         W1 Well: minimal relaxation eigenvalue = 0.0823843
         W1 Well: maximal relaxation eigenvalue = 0.978424
         W1 Well:       grid size = 410
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5124 1/cm
         B1 Barrier:        grid size = 352
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -20 1/cm
         B2 Barrier:        grid size = 350
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 155 1/cm
         B3 Barrier:        grid size = 405
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4684 1/cm
         B4 Barrier:        grid size = 422
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6180 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 615
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 335
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 299
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4643 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.41543, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 410
      MasterEquation::Barrier::truncate: real weight = 1.30151e+44
      MasterEquation::Barrier::truncate: effective weight = 5.21848e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 410
      MasterEquation::Barrier::truncate: real weight = 5.17712e+42
      MasterEquation::Barrier::truncate: effective weight = 1.90237e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5124  -5124  1.2e+09 3.87e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -20 1.51e+15
         B2    156 2.56e+14
         B3  -4684 6.66e+13
         B4  -5124 8.23e+13
         B5  -5124 9.06e+12
         B6   1476 1.05e+15
         B7   4644 1.07e+14
         B8  16700 3.02e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.52e-09  5.06e-09  7.76e-14  8.29e-16  8.34e-38  3.09e-06    0.0556  1.71e+14
          R  3.96e+08         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  1.97e+08     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2  1.29e+13  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  1.21e+15  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4   1.2e+37  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5  3.24e+05  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6        18  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7  5.85e-15  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.05e+13  2.12e+13  3.25e+08  3.47e+06  3.49e-16  1.29e+16  2.33e+20  7.14e+35
          R  9.48e-14         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  4.72e-14     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2  3.08e-09  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  2.89e-07  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4  2.87e+15  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5  7.75e-17  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6   4.3e-21  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7   1.4e-36  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.42883, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+08
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.340308, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.17735, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35747.1      6053.06      1573.36      1944.38      214.231      24762.3      2521.22      7.14689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09744, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002689, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1067, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31002e-06  1.31003e-06  3.91004e-07
      low eigenvalue method done, cpu time[sec] = 1.10715, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-06  3.91e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-07  3.91e-07         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.91004e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.33292e-32   1.0371e-32  3.45109e-34  3.35332e-33  8.58995e-35  1.19082e-35  2.37834e-41  8.77142e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.23041, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+08
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.340348, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.21479, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11915.7      2017.69      524.453      648.127      71.4104      8254.11      840.408       2.3823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05309, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002666, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06241, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.38583e-07  6.38583e-07   1.7656e-07
      low eigenvalue method done, cpu time[sec] = 1.06285, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.39e-07  1.77e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.96e-08  1.77e-07         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.7656e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.15629e-32  4.23803e-33  1.21262e-34  9.71036e-34  2.67613e-35  1.16757e-35  2.38686e-41  8.88271e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.08306, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.64006e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.338027, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.20744, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7149.42      1210.61      314.672      388.876      42.8462      4952.47      504.245      1.42938
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06433, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002671, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07356, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.49896e-07  4.49896e-07  1.14744e-07
      low eigenvalue method done, cpu time[sec] = 1.07401, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.5e-07  1.15e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.17e-08  1.15e-07         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14744e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.78553e-33  2.58794e-33  7.20705e-35  5.32101e-34  1.51727e-35  1.08784e-35  2.39568e-41  8.85784e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.22579, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.29609e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.342393, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.04149, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5106.73      864.723      224.765      277.769      30.6045      3537.48      360.175      1.02098
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25183, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002683, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.54301e-07  3.54301e-07  8.43581e-08
      low eigenvalue method done, cpu time[sec] = 1.26338, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.54e-07  8.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-08  8.44e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.43581e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.84491e-33   1.8207e-33  5.03574e-35  3.53434e-34  1.03047e-35  1.00564e-35  2.40477e-41  8.86552e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26514, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.95211e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348532, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.2961, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3971.9      672.562      174.818      216.042      23.8035      2751.37      280.136     0.794099
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06659, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002687, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07661, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.95012e-07  2.95012e-07  6.61877e-08
      low eigenvalue method done, cpu time[sec] = 1.0778, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.95e-07  6.62e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.71e-08  6.62e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.61877e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.65271e-33  1.38101e-33  3.81807e-35  2.58398e-34  7.65878e-36  9.30621e-36  2.41408e-41  8.86416e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34183, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.347217, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.31939, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3574.71      605.306      157.336      194.438      21.4231      2476.23      252.122     0.714689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04409, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002675, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05425, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72868e-07  2.72868e-07  5.95894e-08
      low eigenvalue method done, cpu time[sec] = 1.05548, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.73e-07  5.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-08  5.96e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.95894e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.21311e-33  1.22562e-33  3.39151e-35  2.26137e-34  6.74861e-36  8.96313e-36  2.41881e-41  8.86607e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.338, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         4.92019e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348242, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.3141, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2383.14      403.537      104.891      129.625      14.2821      1650.82      168.082      0.47646
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04889, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002673, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.00658e-07  2.00658e-07  3.90458e-08
      low eigenvalue method done, cpu time[sec] = 1.06017, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.01e-07   3.9e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.83e-08   3.9e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.90458e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.81819e-33  7.59638e-34  2.11998e-35  1.33746e-34  4.09653e-36  7.53483e-36   2.4429e-41  8.86432e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3384, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         6.56025e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348016, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.30017, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1787.36      302.653      78.6679      97.2191      10.7116      1238.12      126.061     0.357345
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06198, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002686, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07212, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60225e-07  1.60225e-07  2.84071e-08
      low eigenvalue method done, cpu time[sec] = 1.07364, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  2.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-08  2.84e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84071e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.07756e-33  5.31294e-34  1.49791e-35  9.10346e-35  2.83916e-36  6.47319e-36   2.4673e-41  8.86393e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33902, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         8.20031e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348302, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.30084, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1429.88      242.122      62.9343      77.7753      8.56925      990.494      100.849     0.285876
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06146, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002687, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07145, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34033e-07  1.34033e-07  2.19641e-08
      low eigenvalue method done, cpu time[sec] = 1.07265, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-07   2.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-08   2.2e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.19641e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62159e-33  3.98528e-34  1.13472e-35  6.70643e-35  2.12056e-36  5.65857e-36  2.49144e-41  8.86439e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33883, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348044, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32033, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1191.57      201.769      52.4453      64.8127      7.14104      825.411      84.0408      0.23823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00268, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05244, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15551e-07  1.15551e-07  1.76792e-08
      low eigenvalue method done, cpu time[sec] = 1.05367, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-07  1.77e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-08  1.77e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.76792e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3147e-33  3.13028e-34  8.99436e-36  5.19972e-35  1.66241e-36  5.01476e-36  2.51485e-41  8.86472e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19253, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.14804e+10
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.345413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.31431, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1021.35      172.945      44.9531      55.5538      6.12089      707.495      72.0349     0.204197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04953, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002671, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05949, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.01751e-07  1.01751e-07  1.46447e-08
      low eigenvalue method done, cpu time[sec] = 1.06116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-07  1.46e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.18e-09  1.46e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46447e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09534e-33   2.5406e-34  7.36119e-36  4.17893e-35   1.3484e-36  4.49344e-36  2.53722e-41   8.8652e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33785, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.31205e+10
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.34837, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32253, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            893.678      151.327      39.3339      48.6096      5.35578      619.059      63.0306     0.178672
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04155, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002674, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0516, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.10208e-08  9.10208e-08  1.23961e-08
      low eigenvalue method done, cpu time[sec] = 1.05314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.1e-08  1.24e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.2e-09  1.24e-08         1
         *Z       ---       ---  4.08e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.23961e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.31582e-34  2.11332e-34  6.17015e-36  3.44936e-35  1.12177e-36  4.06284e-36  2.55828e-41  8.86458e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34031, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 520 K
      Energy reference = 31233 1/cm
      Energy step      = 90 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008467
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.406379
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.230317
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.233623
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.13515
         W1 Well: minimal relaxation eigenvalue = 0.0818267
         W1 Well: maximal relaxation eigenvalue = 0.977673
         W1 Well:       grid size = 405
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5217 1/cm
         B1 Barrier:        grid size = 348
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -86 1/cm
         B2 Barrier:        grid size = 345
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 399
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4676 1/cm
         B4 Barrier:        grid size = 416
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6207 1/cm
         B5 Barrier: nonpositive number of states at -23127 1/cm => truncating
         B5 Barrier:        grid size = 604
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23126 1/cm
         B6 Barrier:        grid size = 331
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1442 1/cm
         B7 Barrier:        grid size = 295
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4682 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16742 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.37803, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 5.05228e+43
      MasterEquation::Barrier::truncate: effective weight = 2.07179e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 1.87658e+42
      MasterEquation::Barrier::truncate: effective weight = 7.23072e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5217  -5217 1.16e+09 4.05e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -86 1.63e+15
         B2    183 2.78e+14
         B3  -4676 7.26e+13
         B4  -5217 8.96e+13
         B5  -5217  9.9e+12
         B6   1443 1.14e+15
         B7   4683 1.17e+14
         B8  16743 3.48e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.18e-09  4.34e-09  8.65e-14  1.01e-15  2.73e-37  2.47e-06    0.0378   6.1e+13
          R  4.59e+08         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  2.31e+08     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2  1.16e+13  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3  9.91e+14  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4  3.66e+36  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  4.04e+05  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6      26.4  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  1.64e-14  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.82e+12  3.63e+12  7.23e+07  8.44e+05  2.29e-16  2.07e+15  3.16e+19  5.11e+34
          R  5.48e-13         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  2.76e-13     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2  1.38e-08  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3  1.18e-06  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4  4.37e+15  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  4.83e-16  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6  3.16e-20  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  1.96e-35  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.39202, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.337007, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.13075, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            37233.9      6366.58      1661.97      2049.36      226.454      26045.5      2680.26      7.95529
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.20557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002664, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.38575e-06  1.38575e-06  4.30801e-07
      low eigenvalue method done, cpu time[sec] = 1.21675, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-06  4.31e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-07  4.31e-07         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.30801e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.32012e-31  5.81363e-32  1.92238e-33  1.85231e-32  4.75851e-34  7.21693e-35  1.71579e-40  1.22629e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28342, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.17533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12411.3      2122.19       553.99       683.12      75.4848      8681.82       893.42      2.65176
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002592, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.17577, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.86157e-07  6.86157e-07  1.97337e-07
      low eigenvalue method done, cpu time[sec] = 1.17692, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-07  1.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.37e-08  1.97e-07         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97337e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.63146e-32  2.40461e-32  6.86298e-34  5.44918e-33  1.50695e-34   7.0787e-35  1.72189e-40  1.23241e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.17555, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.61917e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.333328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.1844, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7446.78      1273.32      332.394      409.872      45.2909      5209.09      536.052      1.59106
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1577, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002604, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16694, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.8659e-07   4.8659e-07  1.29198e-07
      low eigenvalue method done, cpu time[sec] = 1.16746, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.87e-07  1.29e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.49e-08  1.29e-07         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29198e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.49703e-32  1.47789e-32  4.11176e-34  3.00927e-33  8.61326e-35  6.60694e-35  1.72821e-40  1.23683e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28107, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.26684e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.336277, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.18834, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5319.13      909.511      237.424      292.766      32.3506      3720.78      382.894      1.13647
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15365, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16287, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.84756e-07  3.84756e-07  9.54752e-08
      low eigenvalue method done, cpu time[sec] = 1.16337, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.85e-07  9.55e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-08  9.55e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.54751e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.39305e-32  1.04448e-32   2.8889e-34  2.00945e-33  5.88227e-35  6.11982e-35  1.73471e-40   1.2372e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.91451e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.338988, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.18676, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4137.1      707.398      184.663      227.707      25.1616      2893.94      297.807     0.883921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002602, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16368, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.21299e-07  3.21299e-07  7.52096e-08
      low eigenvalue method done, cpu time[sec] = 1.1642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.21e-07  7.52e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.94e-08  7.52e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.52096e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.71151e-32  7.95047e-33  2.19969e-34   1.4751e-33   4.3905e-35   5.6743e-35  1.74138e-40  1.23645e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28783, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.338335, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.16434, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3723.39      636.658      166.197      204.936      22.6454      2604.55      268.026     0.795529
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.18394, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.97532e-07  2.97532e-07  6.78277e-08
      low eigenvalue method done, cpu time[sec] = 1.18504, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.98e-07  6.78e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-08  6.78e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.78277e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.45942e-32  7.06666e-33  1.95749e-34  1.29317e-33  3.87573e-35   5.4702e-35  1.74476e-40  1.23661e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28824, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         4.85751e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.19138, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2482.26      424.439      110.798      136.624       15.097      1736.36      178.684     0.530353
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002588, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19748e-07  2.19748e-07  4.47453e-08
      low eigenvalue method done, cpu time[sec] = 1.16021, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-07  4.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-08  4.47e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.47453e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.65608e-32  4.40634e-33  1.23238e-34   7.7003e-34  2.36943e-35  4.61788e-35  1.76197e-40  1.23638e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.15802, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         6.47668e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.334358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.18508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1861.7      318.329      83.0984      102.468      11.3227      1302.27      134.013     0.397764
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15542, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002576, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75978e-07  1.75978e-07  3.27156e-08
      low eigenvalue method done, cpu time[sec] = 1.1669, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.76e-07  3.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-08  3.27e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.27156e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.22683e-32  3.09549e-33  8.75328e-35  5.26712e-34   1.6507e-35  3.98137e-35  1.77939e-40  1.23636e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         8.09585e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.338582, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.03082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1489.36      254.663      66.4788      81.9744      9.05817      1041.82       107.21     0.318212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30051, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002581, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47525e-07  1.47525e-07   2.5395e-08
      low eigenvalue method done, cpu time[sec] = 1.31125, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-07  2.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-08  2.54e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.5395e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.61289e-33  2.33011e-33  6.65834e-35   3.8953e-34  1.23794e-35  3.49099e-35   1.7966e-40  1.23634e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339295, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.19807, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1241.13      212.219       55.399       68.312      7.54848      868.182       89.342     0.265176
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14831, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002585, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15824, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27396e-07  1.27396e-07  2.05074e-08
      low eigenvalue method done, cpu time[sec] = 1.15931, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  2.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  2.05e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.05074e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.81871e-33  1.83554e-33  5.29579e-35  3.02983e-34  9.73763e-36   3.1021e-35   1.8133e-40   1.2364e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29738, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.13342e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.33963, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.19716, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1063.83      181.902      47.4848      58.5531      6.47012      744.156      76.5788     0.227294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14156, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002565, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15084, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12333e-07  1.12333e-07  1.70348e-08
      low eigenvalue method done, cpu time[sec] = 1.15214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-07   1.7e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-08   1.7e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70348e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.5321e-33  1.49346e-33  4.34684e-35  2.44166e-34  7.92103e-36  2.78625e-35  1.82924e-40  1.23646e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.29534e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339924, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.21254, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            930.848      159.164      41.5492       51.234      5.66136      651.136      67.0065     0.198882
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12175, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13162, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00601e-07  1.00601e-07  1.44543e-08
      low eigenvalue method done, cpu time[sec] = 1.13273, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-07  1.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.01e-09  1.45e-08         1
         *Z       ---       ---  2.52e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44543e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.56885e-33  1.24498e-33  3.65279e-35  2.02016e-34  6.60622e-36  2.52465e-35  1.84426e-40  1.23649e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28412, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 530 K
      Energy reference = 31511 1/cm
      Energy step      = 91 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007595
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.407232
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.229753
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.22914
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.14413
         W1 Well: minimal relaxation eigenvalue = 0.0813142
         W1 Well: maximal relaxation eigenvalue = 0.979559
         W1 Well:       grid size = 404
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5253 1/cm
         B1 Barrier:        grid size = 347
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -65 1/cm
         B2 Barrier:        grid size = 344
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 206 1/cm
         B3 Barrier:        grid size = 397
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4615 1/cm
         B4 Barrier:        grid size = 415
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6253 1/cm
         B5 Barrier: nonpositive number of states at -23271 1/cm => truncating
         B5 Barrier:        grid size = 602
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23271 1/cm
         B6 Barrier:        grid size = 330
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1480 1/cm
         B7 Barrier:        grid size = 295
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4666 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16769 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.3762, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 404
      MasterEquation::Barrier::truncate: real weight = 2.03707e+43
      MasterEquation::Barrier::truncate: effective weight = 8.44621e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 404
      MasterEquation::Barrier::truncate: real weight = 7.15693e+41
      MasterEquation::Barrier::truncate: effective weight = 2.83389e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5253  -5253 1.15e+09 4.23e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -65 1.75e+15
         B2    207 3.02e+14
         B3  -4615 7.92e+13
         B4  -5253 9.74e+13
         B5  -5253 1.08e+13
         B6   1481 1.24e+15
         B7   4667 1.28e+14
         B8  16770 3.99e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.67e-09   3.3e-09  8.46e-14  1.08e-15  7.57e-37  1.76e-06     0.023     2e+13
          R  5.98e+08         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  3.03e+08     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  1.18e+13  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3   9.3e+14  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  1.32e+36  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  5.67e+05  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6      43.4  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7     5e-14  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.37e+11  6.64e+11  1.71e+07  2.17e+05  1.52e-16  3.55e+14  4.64e+18  4.03e+33
          R  2.97e-12         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.51e-12     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  5.86e-08  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3  4.61e-06  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  6.56e+15  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  2.81e-15  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6  2.16e-19  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7  2.48e-34  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.39002, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+08
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.335102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.04925, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38759.1      6691.94      1754.33      2158.54      239.204        27375      2846.84      8.83621
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25909, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002605, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26845, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.67021e-06  1.67021e-06  5.40834e-07
      low eigenvalue method done, cpu time[sec] = 1.26955, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.67e-06  5.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-07  5.41e-07         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.40834e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.99093e-31  3.05134e-31  1.00262e-32  9.58305e-32  2.46867e-33  4.03382e-34  1.15296e-39  1.56172e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24842, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+08
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.334535, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08554, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12919.7      2230.65      584.776      719.515      79.7345         9125      948.948       2.9454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002586, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22967, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.3982e-07  8.39821e-07  2.51166e-07
      low eigenvalue method done, cpu time[sec] = 1.23079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.4e-07  2.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.78e-08  2.51e-07         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.51166e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.55744e-31  1.27667e-31  3.63483e-33  2.86239e-32  7.94238e-34  3.97165e-34  1.15705e-39  1.56098e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24327, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.59896e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.337018, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09559, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7751.82      1338.39      350.866      431.709      47.8407         5475      569.369      1.76724
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22932, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.9942e-07   5.9942e-07  1.65615e-07
      low eigenvalue method done, cpu time[sec] = 1.23043, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.99e-07  1.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.51e-08  1.66e-07         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65615e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.42907e-31  7.89533e-32  2.19468e-33  1.59266e-32  4.57533e-34  3.72079e-34  1.16129e-39  1.56047e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26014, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.23855e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.337472, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09499, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5537.01      955.991      250.618      308.363      34.1719      3910.72      406.692      1.26232
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22605, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002582, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23591, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.7588e-07   4.7588e-07  1.22997e-07
      low eigenvalue method done, cpu time[sec] = 1.23702, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.76e-07  1.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.36e-08  1.23e-07         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22997e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84164e-31  5.60444e-32  1.55026e-33  1.06899e-32  3.14147e-34  3.45736e-34  1.16565e-39  1.56022e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.87813e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.33813, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10672, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4306.57      743.549      194.925      239.838      26.5782      3041.67      316.316     0.981801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21515, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002592, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22487, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.98541e-07  3.98541e-07   9.7264e-08
      low eigenvalue method done, cpu time[sec] = 1.22599, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.99e-07  9.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.64e-08  9.73e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.7264e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.47727e-31  4.28066e-32   1.1853e-33  7.87829e-33  2.35448e-34  3.21436e-34  1.17011e-39  1.56022e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.2695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.337758, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10225, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3875.91      669.194      175.433      215.854      23.9204       2737.5      284.684     0.883621
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.20121, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002584, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21087, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.69495e-07  3.69495e-07  8.78625e-08
      low eigenvalue method done, cpu time[sec] = 1.212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.69e-07  8.79e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-08  8.79e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.78625e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3421e-31   3.8104e-32  1.05665e-33   6.9182e-33  2.08209e-34  3.10253e-34  1.17238e-39  1.56085e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.2511, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         4.79689e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.338084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.15531, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2583.94      446.129      116.955      143.903      15.9469         1825       189.79     0.589081
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19767, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20691, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.74088e-07  2.74088e-07   5.8343e-08
      low eigenvalue method done, cpu time[sec] = 1.20802, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-07  5.83e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.48e-08  5.83e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.8343e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.09544e-32  2.38985e-32  6.69889e-34  4.14681e-33  1.28173e-34  2.63263e-34  1.18389e-39  1.56084e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29683, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         6.39585e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.336966, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.12099, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1937.96      334.597      87.7164      107.927      11.9602      1368.75      142.342      0.44181
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19465, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20454, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.20135e-07  2.20135e-07  4.28635e-08
      low eigenvalue method done, cpu time[sec] = 1.20564, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-07  4.29e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.98e-08  4.29e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.28635e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.76993e-32  1.68613e-32  4.78232e-34  2.85015e-33  8.97456e-35  2.27899e-34  1.19552e-39  1.56097e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26157, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         7.99482e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.336521, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.12672, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1550.36      267.677      70.1732      86.3418      9.56814         1095      113.874     0.353448
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19222, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00258, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.84942e-07  1.84942e-07  3.33995e-08
      low eigenvalue method done, cpu time[sec] = 1.20324, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-07  3.34e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-08  3.34e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.33995e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.32462e-32  1.27357e-32  3.65244e-34  2.11583e-33  6.75737e-35  2.00503e-34  1.20699e-39  1.56085e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26218, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+09
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.336916, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.12293, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1291.97      223.065      58.4776      71.9515      7.97345        912.5      94.8948      0.29454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00258, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.59979e-07  1.59979e-07   2.7057e-08
      low eigenvalue method done, cpu time[sec] = 1.19745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  2.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-08  2.71e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.7057e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.34438e-32   1.0061e-32  2.91472e-34  1.65089e-33   5.3329e-35  1.78681e-34  1.21811e-39  1.56091e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25207, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.11927e+10
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.337025, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.11634, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1107.4      191.198      50.1237      61.6727      6.83439      782.143      81.3384     0.252463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002585, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.4126e-07   1.4126e-07  2.25363e-08
      low eigenvalue method done, cpu time[sec] = 1.20177, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-07  2.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-08  2.25e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.25363e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.63922e-32  8.20587e-33  2.39926e-34  1.33396e-33  4.35024e-35  1.60893e-34  1.22872e-39  1.56097e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.27917e+10
      global relaxation matrix dimension = 404
      setting global matrices ... done, cpu time[sec] = 0.336836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.11979, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            968.978      167.298      43.8582      53.9636      5.98009      684.375      71.1711     0.220905
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19633, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002579, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20615, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26654e-07  1.26654e-07  1.91677e-08
      low eigenvalue method done, cpu time[sec] = 1.20725, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  1.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-08  1.92e-08         1
         *Z       ---       ---  1.49e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91677e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.10983e-32  6.85508e-33   2.0212e-34  1.10624e-33  3.63706e-35  1.46115e-34   1.2387e-39  1.56099e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25905, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 540 K
      Energy reference = 31790 1/cm
      Energy step      = 93 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007377
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.398704
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.224725
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.23069
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.10226
         W1 Well: minimal relaxation eigenvalue = 0.0807818
         W1 Well: maximal relaxation eigenvalue = 0.978808
         W1 Well:       grid size = 399
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5317 1/cm
         B1 Barrier:        grid size = 342
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -16 1/cm
         B2 Barrier:        grid size = 340
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 169 1/cm
         B3 Barrier:        grid size = 392
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4666 1/cm
         B4 Barrier:        grid size = 409
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6247 1/cm
         B5 Barrier: nonpositive number of states at -23267 1/cm => truncating
         B5 Barrier:        grid size = 592
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23266 1/cm
         B6 Barrier:        grid size = 326
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1471 1/cm
         B7 Barrier:        grid size = 292
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4633 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16723 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.32285, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 399
      MasterEquation::Barrier::truncate: real weight = 8.51285e+42
      MasterEquation::Barrier::truncate: effective weight = 3.60722e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 399
      MasterEquation::Barrier::truncate: real weight = 2.85923e+41
      MasterEquation::Barrier::truncate: effective weight = 1.17181e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5317  -5317 1.13e+09 4.42e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -16 1.88e+15
         B2    170 3.28e+14
         B3  -4666 8.63e+13
         B4  -5317 1.06e+14
         B5  -5317 1.18e+13
         B6   1472 1.34e+15
         B7   4634 1.41e+14
         B8  16724 4.57e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.37e-09  2.67e-09  8.75e-14  1.21e-15  2.13e-36  1.34e-06    0.0151  7.21e+12
          R  7.32e+08         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1  3.74e+08     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2  1.14e+13  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  8.29e+14  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4   4.7e+35  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  7.44e+05   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6      66.4  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7  1.39e-13  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.62e+10  1.29e+11  4.24e+06  5.85e+04  1.03e-16  6.51e+13   7.3e+17  3.49e+32
          R  1.51e-11         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1  7.73e-12     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2  2.36e-07  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  1.71e-05  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4   9.7e+15  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  1.54e-14   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6  1.37e-18  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7  2.86e-33  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.33681, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+08
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.32714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40323.1      7029.55      1850.55      2272.05      252.495        28752      3021.22      9.79507
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.36018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87743e-06  1.87743e-06  6.30391e-07
      low eigenvalue method done, cpu time[sec] = 1.36129, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-06   6.3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-07   6.3e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3039e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.47742e-30  1.50596e-30  4.91582e-32  4.66248e-31  1.20431e-32  2.13051e-33   7.2105e-39   1.7938e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20218, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+08
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.325377, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97684, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              13441      2343.18      616.849       757.35      84.1649      9584.01      1007.07      3.26502
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30979, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31946, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.57904e-07  9.57904e-07  2.96672e-07
      low eigenvalue method done, cpu time[sec] = 1.32058, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.58e-07  2.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.84e-08  2.97e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.96672e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79203e-30     6.37e-31  1.80894e-32  1.41334e-31  3.93436e-33   2.1011e-33  7.23601e-39  1.79197e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19848, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.57941e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.326349, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.99582, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8064.63      1405.91      370.109       454.41      50.4989       5750.4      604.243      1.95901
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002509, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.87911e-07  6.87911e-07  1.96978e-07
      low eigenvalue method done, cpu time[sec] = 1.30216, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.88e-07  1.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-08  1.97e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.96978e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.23186e-30  3.96299e-31  1.10051e-32   7.9216e-32  2.28377e-33  1.97306e-33  7.26243e-39  1.79294e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.08242, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.21117e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.328172, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.02139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5760.45      1004.22      264.364      324.578      36.0707      4107.43      431.602       1.3993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27502, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2852, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.48228e-07  5.48228e-07  1.46998e-07
      low eigenvalue method done, cpu time[sec] = 1.2863, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.48e-07  1.47e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     5e-08  1.47e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46998e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.38378e-31  2.82504e-31  7.81443e-33  5.34368e-32  1.57629e-33  1.83759e-33   7.2896e-39  1.79421e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21877, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.84293e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.32916, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.004, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4480.35      781.061      205.616       252.45       28.055      3194.67      335.691      1.08834
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28838, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29798, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.60395e-07  4.60395e-07  1.16682e-07
      low eigenvalue method done, cpu time[sec] = 1.2991, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.6e-07  1.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.18e-08  1.17e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16682e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.55496e-31  2.16493e-31  5.99891e-33   3.9534e-32  1.18617e-33  1.71204e-33  7.31739e-39  1.79339e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.32927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.00396, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4032.31      702.955      185.055      227.205      25.2495       2875.2      302.122     0.979507
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28294, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29258, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.27321e-07  4.27321e-07  1.05574e-07
      low eigenvalue method done, cpu time[sec] = 1.29368, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.27e-07  1.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.88e-08  1.06e-07         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05574e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.87455e-31  1.92985e-31  5.35703e-33  3.47732e-32  1.05074e-33  1.65411e-33  7.33147e-39  1.79351e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21481, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         4.73822e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.330243, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.00482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2688.21      468.637       123.37       151.47       16.833       1916.8      201.414     0.653005
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28408, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002497, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.18309e-07  3.18309e-07  7.05535e-08
      low eigenvalue method done, cpu time[sec] = 1.29487, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-07  7.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.87e-08  7.06e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.05535e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.68825e-31  1.21728e-31   3.4194e-33  2.09783e-32  6.51231e-34  1.40968e-33  7.40306e-39  1.79326e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         6.31762e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.329909, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.0142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2016.16      351.477      92.5273      113.602      12.6247       1437.6      151.061     0.489754
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28269, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56369e-07  2.56369e-07   5.2079e-08
      low eigenvalue method done, cpu time[sec] = 1.28376, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.56e-07  5.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-08  5.21e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.2079e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.50578e-31  8.62456e-32   2.4533e-33  1.44868e-32  4.58248e-34  1.22467e-33  7.47522e-39  1.79342e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         7.89703e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.329548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.01574, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1612.93      281.182      74.0219       90.882      10.0998      1150.08      120.849     0.391803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27677, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15833e-07  2.15833e-07  4.07323e-08
      low eigenvalue method done, cpu time[sec] = 1.28765, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-07  4.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-08  4.07e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.07323e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76753e-31  6.53614e-32   1.8811e-33  1.07945e-32  3.46389e-34  1.08072e-33  7.54632e-39  1.79346e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21552, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+09
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.330037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.01228, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1344.1      234.318      61.6849       75.735      8.41649      958.401      100.707     0.326502
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27961, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28859, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87007e-07  1.87007e-07     3.31e-08
      low eigenvalue method done, cpu time[sec] = 1.2891, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.87e-07  3.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-08  3.31e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.31e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26497e-31  5.17782e-32  1.50608e-33  8.44838e-33  2.74256e-34  9.65637e-34  7.61514e-39  1.79354e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.2136, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.10558e+10
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.329797, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.83933, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1152.09      200.844      52.8728      64.9157      7.21413      821.486      86.3205     0.279859
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.44162, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.45121, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65347e-07  1.65347e-07  2.76431e-08
      low eigenvalue method done, cpu time[sec] = 1.4523, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.65e-07  2.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-08  2.76e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76431e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90232e-31  4.23316e-32  1.24321e-33  6.84442e-33   2.2434e-34  8.71535e-34  7.68074e-39  1.79353e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20314, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.26352e+10
      global relaxation matrix dimension = 399
      setting global matrices ... done, cpu time[sec] = 0.329413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.02709, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1008.08      175.739      46.2637      56.8012      6.31237      718.801      75.5304     0.244877
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002493, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.27218, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48419e-07  1.48419e-07  2.35659e-08
      low eigenvalue method done, cpu time[sec] = 1.27329, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-07  2.36e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.32e-08  2.36e-08         1
         *Z       ---       ---  9.25e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.35659e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62934e-31  3.54369e-32  1.04987e-33  5.68904e-33  1.88015e-34  7.93139e-34  7.74248e-39  1.79362e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21267, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 550 K
      Energy reference = 32067 1/cm
      Energy step      = 95 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007929
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.390169
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.219832
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.2209
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.07297
         W1 Well: minimal relaxation eigenvalue = 0.0802373
         W1 Well: maximal relaxation eigenvalue = 0.978128
         W1 Well:       grid size = 395
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5457 1/cm
         B1 Barrier:        grid size = 338
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 336
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 146 1/cm
         B3 Barrier:        grid size = 386
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4602 1/cm
         B4 Barrier:        grid size = 403
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23223 1/cm => truncating
         B5 Barrier:        grid size = 582
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23223 1/cm
         B6 Barrier:        grid size = 322
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1477 1/cm
         B7 Barrier:        grid size = 288
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4706 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16772 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.2676, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 395
      MasterEquation::Barrier::truncate: real weight = 3.67994e+42
      MasterEquation::Barrier::truncate: effective weight = 1.59287e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 395
      MasterEquation::Barrier::truncate: real weight = 1.192e+41
      MasterEquation::Barrier::truncate: effective weight = 5.04375e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5457  -5457 1.08e+09 4.63e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 2.02e+15
         B2    147 3.55e+14
         B3  -4602  9.4e+13
         B4  -5457 1.15e+14
         B5  -5457 1.28e+13
         B6   1478 1.45e+15
         B7   4707 1.54e+14
         B8  16772 5.22e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.33e-09  2.58e-09  1.07e-13   1.6e-15  6.83e-36  1.22e-06    0.0119   3.2e+12
          R   7.5e+08         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  3.87e+08     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  9.35e+12  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  6.26e+14  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4  1.47e+35  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  8.16e+05   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6      84.3  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7  3.13e-13  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.38e+10  2.68e+10  1.11e+06  1.65e+04  7.07e-17  1.27e+13  1.23e+17  3.31e+31
          R  7.25e-11         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  3.74e-11     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  9.03e-07  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  6.04e-05  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4  1.41e+16  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  7.88e-14   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6  8.14e-18  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7  3.02e-32  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.28104, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+08
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.322283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.77174, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41926.2      7379.57      1950.73      2389.99      266.343      30177.4      3203.62      10.8388
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47408, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.48302, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.78163e-06  1.78164e-06  6.15896e-07
      low eigenvalue method done, cpu time[sec] = 1.48413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.78e-06  6.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-07  6.16e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.15896e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.63058e-29  7.00559e-30  2.27301e-31  2.14008e-30  5.54213e-32  1.05682e-32  4.20784e-38  1.88744e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.14843, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+08
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.311338, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.82353, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13975.4      2459.86      650.244      796.663      88.7812      10059.1      1067.87      3.61294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.42146, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002447, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.43087, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.21361e-07  9.21362e-07  2.93588e-07
      low eigenvalue method done, cpu time[sec] = 1.43196, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.21e-07  2.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.44e-08  2.94e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.93588e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.50557e-30  2.99485e-30  8.48593e-32  6.58005e-31  1.83748e-32  1.04424e-32  4.22263e-38  1.88534e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.13154, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.56046e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.320643, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.83094, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8385.24      1475.91      390.146      477.998      53.2687      6035.48      640.725      2.16777
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41537, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.42454, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.65425e-07  6.65425e-07  1.96242e-07
      low eigenvalue method done, cpu time[sec] = 1.42595, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.65e-07  1.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.05e-08  1.96e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.96242e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.88492e-30  1.87406e-30  5.20062e-32  3.71425e-31   1.0745e-32  9.83091e-33  4.23794e-38  1.88558e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1426, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.18465e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.321072, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.84908, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5989.46      1054.22      278.676      341.427      38.0491      4311.06       457.66       1.5484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40251, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002446, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41142, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.32184e-07  5.32184e-07  1.47139e-07
      low eigenvalue method done, cpu time[sec] = 1.41253, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.32e-07  1.47e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.82e-08  1.47e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47139e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50345e-30  1.34147e-30  3.71164e-32  2.51776e-31  7.45421e-33  9.17772e-33  4.25368e-38  1.88582e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1517, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.80883e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.322979, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.85088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4658.47      819.952      216.748      265.554      29.5937      3353.05      355.958      1.20431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40202, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.4115, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.48058e-07  4.48058e-07  1.17221e-07
      low eigenvalue method done, cpu time[sec] = 1.41259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.48e-07  1.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.04e-08  1.17e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17221e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.63875e-30  1.03135e-30  2.86053e-32   1.8697e-31  5.63137e-33  8.56915e-33  4.26976e-38  1.88539e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.15675, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.323924, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.83214, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4192.62      737.957      195.073      238.999      26.6343      3017.74      320.362      1.08388
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.42274, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.16303e-07  4.16303e-07  1.06228e-07
      low eigenvalue method done, cpu time[sec] = 1.42383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.16e-07  1.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.75e-08  1.06e-07         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06228e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.31613e-30  9.20648e-31  2.55875e-32  1.64718e-31  4.99679e-33  8.28745e-33  4.27791e-38  1.88547e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00597, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         4.68139e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.320495, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.84941, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2795.08      491.971      130.049      159.333      17.7562      2011.83      213.575     0.722589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.39882, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002444, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40828, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.11302e-07  3.11302e-07  7.14343e-08
      low eigenvalue method done, cpu time[sec] = 1.40938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-07  7.14e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.79e-08  7.14e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.14343e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27538e-30  5.83953e-31  1.64413e-32  1.00002e-31  3.11744e-33   7.0936e-33  4.31929e-38  1.88561e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.14964, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         6.24185e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.323626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64826, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2096.31      368.978      97.5366      119.499      13.3172      1508.87      160.181     0.541942
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59352, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002443, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60271, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.51379e-07  2.51379e-07   5.2972e-08
      low eigenvalue method done, cpu time[sec] = 1.60382, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.51e-07   5.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-08   5.3e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.2972e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70919e-30  4.15442e-31  1.18537e-32   6.9376e-32  2.20426e-33  6.18459e-33  4.36096e-38  1.88565e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.14371, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         7.80231e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.313634, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.86989, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1677.05      295.183      78.0293      95.5996      10.6537       1207.1      128.145     0.433553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40486, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002433, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.12043e-07  2.12043e-07  4.15824e-08
      low eigenvalue method done, cpu time[sec] = 1.41482, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-07  4.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.88e-08  4.16e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.15824e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35413e-30  3.15878e-31  9.12415e-33  5.18827e-32  1.67259e-33  5.47404e-33  4.40199e-38  1.88574e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.16831, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.325858, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.84805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1397.54      245.986      65.0244      79.6663      8.87812      1005.91      106.787     0.361294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.39773, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002449, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.84003e-07  1.84003e-07  3.38936e-08
      low eigenvalue method done, cpu time[sec] = 1.40828, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-07  3.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-08  3.39e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.38936e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11156e-30  2.50917e-31   7.3286e-33  4.07292e-32   1.3285e-33   4.9039e-33  4.44168e-38  1.88579e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.15592, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.09232e+10
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.323537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.87204, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1197.89      210.845      55.7352      68.2854      7.60981      862.212      91.5321     0.309681
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37977, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002454, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62895e-07  1.62895e-07  2.83796e-08
      low eigenvalue method done, cpu time[sec] = 1.39016, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-07  2.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-08  2.84e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.83796e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.35985e-31   2.0562e-31  6.06607e-33  3.30817e-32  1.08966e-33  4.43621e-33  4.47952e-38  1.88585e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.15361, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.24837e+10
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.321095, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.8563, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1048.15      184.489      48.7683      59.7497      6.65859      754.435      80.0906     0.270971
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.39086, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002453, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40032, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.46371e-07  1.46371e-07  2.42489e-08
      low eigenvalue method done, cpu time[sec] = 1.40139, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.46e-07  2.42e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-08  2.42e-08         1
         *Z       ---       ---  6.36e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42489e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.03475e-31  1.72482e-31    5.135e-33  2.75591e-32  9.15384e-34   4.0455e-33  4.51514e-38  1.88586e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.14673, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 560 K
      Energy reference = 32345 1/cm
      Energy step      = 97 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006979
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.382777
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.215537
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.226369
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.04336
         W1 Well: minimal relaxation eigenvalue = 0.0797322
         W1 Well: maximal relaxation eigenvalue = 0.977429
         W1 Well:       grid size = 390
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5485 1/cm
         B1 Barrier:        grid size = 334
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 332
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 140 1/cm
         B3 Barrier:        grid size = 381
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 398
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23139 1/cm => truncating
         B5 Barrier:        grid size = 572
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23139 1/cm
         B6 Barrier:        grid size = 318
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1498 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16728 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.22941, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 1.64251e+42
      MasterEquation::Barrier::truncate: effective weight = 7.2593e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 5.16858e+40
      MasterEquation::Barrier::truncate: effective weight = 2.24603e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5485  -5485 1.07e+09 4.84e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 2.17e+15
         B2    141 3.85e+14
         B3  -4611 1.02e+14
         B4  -5485 1.25e+14
         B5  -5485  1.4e+13
         B6   1499 1.57e+15
         B7   4700 1.69e+14
         B8  16728 5.96e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.01e-09  1.94e-09     1e-13  1.62e-15  1.62e-35  8.66e-07   0.00728  1.13e+12
          R  9.94e+08         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  5.17e+08      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2  9.96e+12     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  6.18e+14  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  6.16e+34  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  1.16e+06   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6       137  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7  8.86e-13  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.04e+09  5.85e+09  3.04e+05   4.9e+03  4.91e-17  2.62e+12   2.2e+16  3.41e+30
          R  3.29e-10         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  1.71e-10      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2  3.29e-06     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  0.000204  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  2.04e+16  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  3.82e-13   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6  4.55e-17  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7  2.93e-31  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.24286, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.314792, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60545, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            43568.9      7742.45         2055      2512.48      280.766      31652.2       3394.3      11.9744
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5938, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002458, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60261, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.17503e-06  2.17503e-06  7.77513e-07
      low eigenvalue method done, cpu time[sec] = 1.60402, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.18e-06  7.78e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-07  7.78e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.77512e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.22845e-29  3.08008e-29  9.94028e-31  9.29204e-30  2.41244e-31  4.97447e-32  2.30827e-37  1.82021e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.07047, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.300084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6642, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14523      2580.82      684.999      837.494      93.5887      10550.7      1131.43      3.99148
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14033e-06  1.14033e-06  3.75295e-07
      low eigenvalue method done, cpu time[sec] = 1.55032, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.14e-06  3.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-07  3.75e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.75294e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.81533e-29  1.33064e-29  3.76366e-31  2.89687e-30  8.11441e-32  4.91793e-32  2.31635e-37  1.82089e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06114, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1          1.5421e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.301061, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66254, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8713.78      1548.49      410.999      502.496      56.1532      6330.43       678.86      2.39489
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53731, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002402, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54642, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.28377e-07  8.28377e-07  2.52503e-07
      low eigenvalue method done, cpu time[sec] = 1.54753, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.28e-07  2.53e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.52e-08  2.53e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.52503e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.65652e-29  8.37444e-30  2.32315e-31  1.64656e-30  4.77943e-32  4.63763e-32   2.3247e-37  1.82268e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06096, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.15894e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303016, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6224.13      1106.06      293.571      358.926      40.1094      4521.74        484.9      1.71063
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54054, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0024, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.64935e-07  6.64936e-07  1.90192e-07
      low eigenvalue method done, cpu time[sec] = 1.5495, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.65e-07   1.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     6e-08   1.9e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.90192e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.04199e-29  6.01893e-30  1.66627e-31  1.12148e-30   3.3322e-32  4.33731e-32  2.33328e-37  1.82232e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06525, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.77579e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4840.99      860.273      228.333      279.165      31.1962      3516.91      377.145      1.33049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54232, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55095, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.61307e-07  5.61307e-07  1.52062e-07
      low eigenvalue method done, cpu time[sec] = 1.55176, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.61e-07  1.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.05e-08  1.52e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52062e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.65566e-29  4.64224e-30  1.28912e-31  8.35877e-31  2.52702e-32  4.05678e-32  2.34205e-37  1.82216e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.07198, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4356.89      774.245        205.5      251.248      28.0766      3165.22       339.43      1.19744
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53712, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54661, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.22093e-07  5.22093e-07  1.38012e-07
      low eigenvalue method done, cpu time[sec] = 1.548, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.22e-07  1.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.69e-08  1.38e-07         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38012e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.51112e-29  4.14962e-30  1.15501e-31  7.37551e-31  2.24594e-32  3.92668e-32  2.34649e-37  1.82239e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06561, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         4.62631e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305223, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68977, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2904.59      516.164          137      167.499      18.7177      2110.14      226.287     0.798295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.514, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52312, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.91996e-07  3.91996e-07  9.33745e-08
      low eigenvalue method done, cpu time[sec] = 1.52421, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.92e-07  9.34e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.5e-08  9.34e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.33744e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04306e-29  2.64646e-30  7.46992e-32  4.50549e-31  1.41031e-32  3.37369e-32  2.36902e-37  1.82241e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.07299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         6.16841e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68092, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2178.44      387.123       102.75      125.624      14.0383      1582.61      169.715     0.598721
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52228, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002383, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53149, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17414e-07  3.17414e-07  6.95532e-08
      low eigenvalue method done, cpu time[sec] = 1.53259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.17e-07  6.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-08  6.96e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.95531e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.86974e-30  1.89041e-30  5.41134e-32  3.13984e-31  1.00193e-32  2.95073e-32  2.39167e-37  1.82232e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06856, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         7.71052e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305793, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68004, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1742.76      309.698      82.1999      100.499      11.2306      1266.09      135.772     0.478977
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.521, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002384, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53018, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.68297e-07  2.68297e-07  5.47937e-08
      low eigenvalue method done, cpu time[sec] = 1.53162, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-07  5.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.38e-08  5.48e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.47937e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.25686e-30    1.442e-30  4.18106e-32  2.35654e-31  7.63124e-33  2.61888e-32  2.41395e-37   1.8224e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.07275, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304613, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1452.3      258.082      68.4999      83.7494      9.35887      1055.07      113.143     0.399148
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51756, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52678, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.33199e-07  2.33199e-07  4.47951e-08
      low eigenvalue method done, cpu time[sec] = 1.52786, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-07  4.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-08  4.48e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.47951e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.1511e-30  1.14853e-30  3.36883e-32  1.85544e-31  6.08022e-33  2.35176e-32  2.43549e-37   1.8224e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06911, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.07947e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303897, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68391, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1244.83      221.213      58.7142      71.7852      8.02189      904.348        96.98     0.342127
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51568, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00239, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06725e-07  2.06725e-07  3.76032e-08
      low eigenvalue method done, cpu time[sec] = 1.52587, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-07  3.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-08  3.76e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.76032e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.34838e-30  9.43357e-31  2.79598e-32  1.51088e-31  5.00041e-33  2.13203e-32  2.45601e-37   1.8225e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.067, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.23368e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304476, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.68562, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1089.22      193.561      51.3749       62.812      7.01915      791.304      84.8575     0.299361
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52452, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85966e-07  1.85966e-07  3.22017e-08
      low eigenvalue method done, cpu time[sec] = 1.52559, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07  3.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.64e-08  3.22e-08         1
         *Z       ---       ---   3.9e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.22017e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.74098e-30  7.92925e-31   2.3724e-32  1.26144e-31  4.21046e-33  1.94801e-32  2.47533e-37  1.82251e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.073, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 570 K
      Energy reference = 32624 1/cm
      Energy step      = 98 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007685
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.378669
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.206035
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.21585
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.04278
         W1 Well: minimal relaxation eigenvalue = 0.0792305
         W1 Well: maximal relaxation eigenvalue = 0.979245
         W1 Well:       grid size = 390
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5597 1/cm
         B1 Barrier:        grid size = 333
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -11 1/cm
         B2 Barrier:        grid size = 331
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 185 1/cm
         B3 Barrier:        grid size = 380
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4616 1/cm
         B4 Barrier:        grid size = 396
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6185 1/cm
         B5 Barrier: nonpositive number of states at -23139 1/cm => truncating
         B5 Barrier:        grid size = 569
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23139 1/cm
         B6 Barrier:        grid size = 318
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1458 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16747 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.20271, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 7.5568e+41
      MasterEquation::Barrier::truncate: effective weight = 3.37427e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 2.32415e+40
      MasterEquation::Barrier::truncate: effective weight = 1.02573e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5597  -5597 1.03e+09 5.06e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -11 2.33e+15
         B2    186 4.17e+14
         B3  -4616 1.11e+14
         B4  -5597 1.36e+14
         B5  -5597 1.52e+13
         B6   1459 1.71e+15
         B7   4694 1.85e+14
         B8  16748 6.79e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.33e-10  1.78e-09  1.15e-13     2e-15  4.56e-35  7.53e-07   0.00553  5.03e+11
          R  1.07e+09         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  5.61e+08     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2   8.7e+12  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3  5.01e+14  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4  2.19e+34  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  1.33e+06   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6       181  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  1.99e-12  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.06e+08  1.35e+09   8.7e+04  1.51e+03  3.45e-17   5.7e+11  4.19e+15  3.81e+29
          R  1.42e-09         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  7.41e-10     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2  1.15e-05  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3  0.000662  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4  2.89e+16  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  1.75e-12   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6  2.39e-16  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  2.62e-30  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.21612, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.314064, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60771, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45251.4      8118.35      2163.45      2639.64      295.779      33177.3      3593.51      13.2073
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.56822, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57782, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19713e-06  2.19714e-06  8.06399e-07
      low eigenvalue method done, cpu time[sec] = 1.57892, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-06  8.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.03e-07  8.06e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.06398e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.03772e-28  1.28232e-28  4.12216e-30  3.82638e-29  9.95925e-31  2.20163e-31  1.19267e-36  1.62659e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06333, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.299416, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62896, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15083.8      2706.12      721.152      879.881       98.593      11059.1      1197.84      4.40242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.55937, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56865, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16668e-06  1.16668e-06  3.94059e-07
      low eigenvalue method done, cpu time[sec] = 1.56973, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-06  3.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07  3.94e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.94059e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62186e-28  5.59943e-29  1.58236e-30  1.20914e-29  3.39725e-31  2.18157e-31  1.19682e-36  1.62614e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04591, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          1.5243e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.300094, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65362, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9050.27      1623.67      432.691      527.928      59.1558      6635.45      718.702      2.64145
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002374, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54821, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.52096e-07  8.52096e-07   2.6683e-07
      low eigenvalue method done, cpu time[sec] = 1.54929, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.52e-07  2.67e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.68e-08  2.67e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.6683e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13621e-28  3.54424e-29  9.83583e-31  6.91934e-30  2.01515e-31  2.06261e-31  1.20111e-36  1.62634e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.13402e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303764, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6495, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6464.48      1159.76      309.065      377.092      42.2541      4739.61      513.359      1.88675
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54285, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002366, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55184, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.86296e-07  6.86296e-07  2.01886e-07
      low eigenvalue method done, cpu time[sec] = 1.55297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-07  2.02e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.16e-08  2.02e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01886e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.7716e-29  2.55764e-29  7.08896e-31   4.7348e-30   1.4118e-31  1.93361e-31  1.20553e-36  1.62628e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06006, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.74374e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304344, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65154, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5027.93      902.039      240.384      293.294      32.8643      3686.36      399.279      1.46747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54196, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55109, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.80759e-07   5.8076e-07  1.61975e-07
      low eigenvalue method done, cpu time[sec] = 1.55219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.81e-07  1.62e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.19e-08  1.62e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61975e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.1362e-29  1.97887e-29    5.505e-31  3.54171e-30  1.07468e-31  1.81237e-31  1.21003e-36  1.62643e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06146, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304528, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64012, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4525.14      811.835      216.345      263.964      29.5779      3317.73      359.351      1.32073
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54995, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.40731e-07  5.40731e-07   1.4723e-07
      low eigenvalue method done, cpu time[sec] = 1.56013, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.41e-07  1.47e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.83e-08  1.47e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4723e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52271e-29  1.77127e-29  4.94024e-31  3.12989e-30  9.56671e-32  1.75596e-31  1.21231e-36  1.62628e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05788, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         4.57289e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304271, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3016.76      541.223       144.23      175.976      19.7186      2211.82      239.567     0.880485
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53392, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.0752e-07   4.0752e-07  1.00205e-07
      low eigenvalue method done, cpu time[sec] = 1.54449, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.08e-07     1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.62e-08     1e-07         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.00205e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.52851e-29  1.13576e-29  3.21539e-31  1.92356e-30  6.04541e-32  1.51502e-31  1.22386e-36  1.62632e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05443, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         6.09719e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305001, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65491, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2262.57      405.918      108.173      131.982      14.7889      1658.86      179.676     0.660364
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30828e-07  3.30828e-07  7.49692e-08
      low eigenvalue method done, cpu time[sec] = 1.53915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-07   7.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.92e-08   7.5e-08         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.49692e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.43141e-29  8.14539e-30  2.34017e-31  1.34647e-30  4.31484e-32  1.32961e-31  1.23546e-36  1.62629e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05107, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         7.62149e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304603, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.67586, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1810.05      324.734      86.5382      105.586      11.8312      1327.09       143.74     0.528291
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50829, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.8017e-07   2.8017e-07  5.92672e-08
      low eigenvalue method done, cpu time[sec] = 1.51848, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-07  5.93e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.47e-08  5.93e-08         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.92672e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.73752e-29   6.2331e-30  1.81483e-31  1.01412e-30  3.29853e-32  1.18347e-31  1.24686e-36  1.62638e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05109, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65516, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1508.38      270.612      72.1152      87.9881       9.8593      1105.91      119.784     0.440242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5322, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54141, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43889e-07  2.43889e-07  4.85933e-08
      low eigenvalue method done, cpu time[sec] = 1.5425, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.44e-07  4.86e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.14e-08  4.86e-08         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.85933e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26017e-29  4.97775e-30  1.46678e-31    8.008e-31  2.63615e-32  1.06541e-31  1.25787e-36  1.62641e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05392, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.06701e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66561, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1292.9      231.953       61.813      75.4183      8.45083      947.922      102.672     0.377351
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52175, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.16471e-07  2.16471e-07  4.08934e-08
      low eigenvalue method done, cpu time[sec] = 1.53248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-07  4.09e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.9e-08  4.09e-08         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.08934e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91264e-29  4.09783e-30  1.22057e-31  6.53713e-31  2.17366e-32  9.67986e-32  1.26836e-36  1.62643e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.21944e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305165, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.66398, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1131.28      202.959      54.0864      65.9911      7.39447      829.432      89.8378     0.330182
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52095, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52997, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.94939e-07  1.94939e-07  3.50958e-08
      low eigenvalue method done, cpu time[sec] = 1.53107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.95e-07  3.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-08  3.51e-08         1
         *Z       ---       ---  2.68e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50958e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.64902e-29  3.45124e-30  1.03805e-31  5.46978e-31  1.83446e-32  8.86182e-32  1.27824e-36  1.62646e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05404, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 580 K
      Energy reference = 32901 1/cm
      Energy step      = 100 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006933
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.342076
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.203775
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.215793
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.00548
         W1 Well: minimal relaxation eigenvalue = 0.0787483
         W1 Well: maximal relaxation eigenvalue = 0.978542
         W1 Well:       grid size = 385
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5599 1/cm
         B1 Barrier:        grid size = 330
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -99 1/cm
         B2 Barrier:        grid size = 327
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 200 1/cm
         B3 Barrier:        grid size = 376
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4699 1/cm
         B4 Barrier:        grid size = 391
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6199 1/cm
         B5 Barrier: nonpositive number of states at -23099 1/cm => truncating
         B5 Barrier:        grid size = 560
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23099 1/cm
         B6 Barrier:        grid size = 314
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1500 1/cm
         B7 Barrier:        grid size = 282
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4700 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16700 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.1242, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 385
      MasterEquation::Barrier::truncate: real weight = 3.57803e+41
      MasterEquation::Barrier::truncate: effective weight = 1.63027e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 385
      MasterEquation::Barrier::truncate: real weight = 1.08104e+40
      MasterEquation::Barrier::truncate: effective weight = 4.88181e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5599  -5599 1.03e+09 5.28e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -99  2.5e+15
         B2    201 4.52e+14
         B3  -4699 1.21e+14
         B4  -5599 1.47e+14
         B5  -5599 1.65e+13
         B6   1501 1.85e+15
         B7   4701 2.02e+14
         B8  16701 7.72e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.75e-10  1.28e-09  1.02e-13   1.9e-15  9.62e-35  5.12e-07    0.0033  1.79e+11
          R  1.48e+09         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1   7.8e+08     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  9.82e+12  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3  5.26e+14  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  1.04e+34  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  1.95e+06   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6       303  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7  5.57e-12  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.73e+08  3.27e+08   2.6e+04       486  2.46e-17  1.31e+11  8.43e+14  4.59e+28
          R   5.8e-09         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1  3.05e-09     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  3.84e-05  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3   0.00206  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  4.07e+16  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  7.64e-12   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6  1.19e-15  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7  2.18e-29  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.13756, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+08
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.307401, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.50423, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            46974.1       8507.7      2276.22      2771.59      311.399      34753.6       3801.5      14.5417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002339, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.67839, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80616e-06  2.80616e-06  1.06239e-06
      low eigenvalue method done, cpu time[sec] = 1.67946, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.81e-06  1.06e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-07  1.06e-06         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06239e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21423e-27  5.08613e-28  1.62693e-29   1.5001e-28  3.91381e-30   9.3137e-31  5.82653e-36   1.3457e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02879, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+08
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.295465, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.53181, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              15658       2835.9       758.74      923.864        103.8      11584.5      1267.17      4.84722
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.63437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64344, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5093e-06   1.5093e-06  5.25278e-07
      low eigenvalue method done, cpu time[sec] = 1.64453, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-06  5.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-07  5.25e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.25278e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.55517e-28   2.2429e-28   6.3287e-30  4.80249e-29  1.35327e-30    9.233e-31  5.84676e-36   1.3451e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.01119, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.50702e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.293784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.55665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9394.82      1701.54      455.244      554.318      62.2797      6950.73        760.3      2.90833
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6079, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002318, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.617, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1084e-06   1.1084e-06  3.57885e-07
      low eigenvalue method done, cpu time[sec] = 1.61809, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-06  3.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.99e-08  3.58e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.57885e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.61974e-28  1.42738e-28  3.96066e-30   2.7663e-29  8.08227e-31  8.74265e-31  5.86767e-36  1.34518e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00583, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.10983e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.294634, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.54676, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6710.58      1215.39      325.174      395.942      44.4855       4964.8      543.072      2.07738
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002319, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63177, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.9584e-07   8.9584e-07  2.71956e-07
      low eigenvalue method done, cpu time[sec] = 1.63287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.96e-07  2.72e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.03e-08  2.72e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.71956e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.58154e-28  1.03402e-28  2.86806e-30  1.90153e-29  5.68921e-31  8.20947e-31  5.88913e-36   1.3453e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00828, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.71263e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.295392, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.554, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5219.34        945.3      252.913      307.955      34.5998      3861.51      422.389      1.61574
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.61602, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002311, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6253, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.60001e-07  7.60001e-07  2.18932e-07
      low eigenvalue method done, cpu time[sec] = 1.62642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.6e-07  2.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.79e-08  2.19e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18932e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.92341e-28  8.02451e-29  2.23536e-30  1.42736e-29  4.34654e-31  7.70715e-31  5.91102e-36  1.34534e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.01009, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.295061, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.56306, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4697.41       850.77      227.622      277.159      31.1399      3475.36       380.15      1.45417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.61203, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.08357e-07  7.08357e-07  1.99291e-07
      low eigenvalue method done, cpu time[sec] = 1.622, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.08e-07  1.99e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.32e-08  1.99e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.99291e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.67588e-28  7.19207e-29  2.00917e-30  1.26328e-29  3.87531e-31  7.47303e-31   5.9221e-36  1.34523e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.01443, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         4.52106e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.295215, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.56347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3131.61       567.18      151.748      184.773      20.7599      2316.91      253.433     0.969444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60332, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002313, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61237, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.35948e-07  5.35948e-07  1.36424e-07
      low eigenvalue method done, cpu time[sec] = 1.61348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.36e-07  1.36e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.75e-08  1.36e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36424e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86832e-28  4.63573e-29  1.31581e-30  7.80982e-30  2.46406e-31  6.47027e-31  5.97818e-36   1.3453e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00629, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         6.02808e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.293472, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.55374, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2348.7      425.385      113.811       138.58      15.5699      1737.68      190.075     0.727083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002323, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62485, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.36257e-07  4.36257e-07  1.02504e-07
      low eigenvalue method done, cpu time[sec] = 1.62592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-07  1.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.85e-08  1.03e-07         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02504e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42165e-28  3.33752e-29  9.62022e-31  5.49054e-30  1.76669e-31  5.69535e-31   6.0344e-36   1.3454e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1          7.5351e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.294853, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.56118, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1878.96      340.308      91.0488      110.864      12.4559      1390.15       152.06     0.581666
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6082, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61756, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.70204e-07  3.70204e-07  8.13116e-08
      low eigenvalue method done, cpu time[sec] = 1.61867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-07  8.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.25e-08  8.13e-08         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.13116e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13797e-28  2.56188e-29  7.48768e-31  4.14954e-30  1.35544e-31  5.08244e-31  6.08958e-36  1.34539e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00831, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+09
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.294976, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.57966, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1565.8       283.59       75.874      92.3864        10.38      1158.45      126.717     0.484722
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002322, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.59767, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.22783e-07  3.22783e-07  6.68573e-08
      low eigenvalue method done, cpu time[sec] = 1.59878, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.23e-07  6.69e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.83e-08  6.69e-08         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.68573e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.42171e-29   2.0512e-29  6.06996e-31  3.28606e-30   1.0865e-31  4.58578e-31  6.14285e-36  1.34541e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0083, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.05491e+10
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.294426, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.57444, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1342.12      243.077      65.0349      79.1883       8.8971      992.961      108.614     0.415476
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59214, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00232, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60113, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.86877e-07  2.86877e-07  5.64007e-08
      low eigenvalue method done, cpu time[sec] = 1.60222, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.87e-07  5.64e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-08  5.64e-08         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.64007e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.99217e-29  1.69236e-29  5.06415e-31  2.68906e-30  8.98183e-32   4.1749e-31  6.19355e-36  1.34545e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00664, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.20562e+10
      global relaxation matrix dimension = 385
      setting global matrices ... done, cpu time[sec] = 0.293432, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.56674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1174.35      212.692      56.9055      69.2898      7.78496      868.841      95.0375     0.363541
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60214, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61118, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.58633e-07  2.58633e-07  4.85081e-08
      low eigenvalue method done, cpu time[sec] = 1.61224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.59e-07  4.85e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-08  4.85e-08         1
         *Z       ---       ---  1.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.85081e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.90513e-29  1.42809e-29  4.31662e-31  2.25481e-30  7.59723e-32  3.82907e-31  6.24127e-36  1.34548e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00704, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 590 K
      Energy reference = 33179 1/cm
      Energy step      = 102 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00728
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.364725
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.19791
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.206953
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.949276
         W1 Well: minimal relaxation eigenvalue = 0.0782502
         W1 Well: maximal relaxation eigenvalue = 0.977912
         W1 Well:       grid size = 381
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5683 1/cm
         B1 Barrier:        grid size = 326
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -73 1/cm
         B2 Barrier:        grid size = 324
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 130 1/cm
         B3 Barrier:        grid size = 371
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 386
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23125 1/cm => truncating
         B5 Barrier:        grid size = 552
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23124 1/cm
         B6 Barrier:        grid size = 311
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1456 1/cm
         B7 Barrier:        grid size = 280
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4619 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.07971, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 1.74094e+41
      MasterEquation::Barrier::truncate: effective weight = 8.09095e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 5.18927e+39
      MasterEquation::Barrier::truncate: effective weight = 2.39651e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5683  -5683    1e+09 5.52e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -73 2.67e+15
         B2    131 4.89e+14
         B3  -4662 1.31e+14
         B4  -5683  1.6e+14
         B5  -5683  1.8e+13
         B6   1457    2e+15
         B7   4619 2.21e+14
         B8  16757 8.77e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.86e-10  1.11e-09  1.08e-13  2.15e-15  2.35e-34  4.19e-07   0.00238  7.87e+10
          R  1.71e+09         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1  9.04e+08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  9.29e+12  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3  4.65e+14  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  4.26e+33   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5  2.39e+06    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6       421  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7  1.27e-11  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.42e+07  8.33e+07  8.11e+03       162  1.77e-17  3.16e+10  1.79e+14  5.93e+27
          R  2.26e-08         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1   1.2e-08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  0.000123  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3   0.00617  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  5.65e+16   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5  3.17e-11    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6  5.59e-15  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7  1.69e-28  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.09342, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.300142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35736, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48737.4      8910.82      2393.41      2908.45      327.642      36382.2      4018.53      15.9832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002291, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81045, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.00667e-06  3.00667e-06  1.16641e-06
      low eigenvalue method done, cpu time[sec] = 1.81148, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.01e-06  1.17e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-07  1.17e-06         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16641e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.62745e-27   1.9245e-27  6.12451e-29  5.61092e-28  1.46733e-29  3.71879e-30  2.70117e-35   1.0362e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99339, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.28661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16245.8      2970.27      797.803      969.483      109.214      12127.4      1339.51      5.32773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71554, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63631e-06  1.63631e-06  5.83254e-07
      low eigenvalue method done, cpu time[sec] = 1.74962, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-06  5.83e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-07  5.83e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.83253e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.52514e-27  8.56608e-28  2.41331e-29  1.81909e-28  5.14052e-30  3.69634e-30  2.71053e-35  1.03582e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.49024e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.285515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36232, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9747.49      1782.16      478.682       581.69      65.5283      7276.44      803.706      3.19664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70665, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.20774e-06  1.20774e-06  3.99761e-07
      low eigenvalue method done, cpu time[sec] = 1.7408, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-06     4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-07     4e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.99761e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.78989e-27   5.4798e-28   1.5203e-29   1.0545e-28  3.09054e-30  3.50974e-30  2.72021e-35  1.03596e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91283, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.08634e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.287743, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37346, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6962.49      1272.97      341.916      415.493       46.806      5197.46      574.076      2.28331
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69747, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73102, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.79252e-07  9.79253e-07  3.05057e-07
      low eigenvalue method done, cpu time[sec] = 1.7321, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.79e-07  3.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.74e-08  3.05e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.05057e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39333e-27  3.98444e-28  1.10596e-29  7.28049e-29  2.18548e-30  3.30373e-30  2.73014e-35  1.03609e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9207, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.68243e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291725, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36715, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5415.27      990.091      265.934      323.161      36.4046      4042.47      446.503      1.77591
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70216, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73517, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.32699e-07  8.32699e-07  2.46385e-07
      low eigenvalue method done, cpu time[sec] = 1.73625, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.33e-07  2.46e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.4e-08  2.46e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.46385e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14094e-27  3.10119e-28  8.65052e-30  5.48363e-29  1.67564e-30  3.10821e-30  2.74027e-35   1.0361e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92308, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37971, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4873.74      891.082      239.341      290.845      32.7642      3638.22      401.853      1.59832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72353, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.7686e-07   7.7686e-07  2.24598e-07
      low eigenvalue method done, cpu time[sec] = 1.72464, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.77e-07  2.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.89e-08  2.25e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.24598e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04578e-27    2.783e-28  7.78705e-30  4.86032e-29  1.49625e-30  3.01673e-30  2.74538e-35  1.03608e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92282, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         4.47072e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.288995, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38538, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3249.16      594.055      159.561      193.897      21.8428      2425.48      267.902      1.06555
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69219, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002251, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72567, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.89902e-07  5.89902e-07  1.54614e-07
      low eigenvalue method done, cpu time[sec] = 1.72676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.9e-07  1.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.2e-08  1.55e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54614e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.34205e-28  1.80291e-28   5.1306e-30   3.0221e-29  9.57112e-31  2.62284e-30  2.77127e-35   1.0361e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92806, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         5.96096e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291361, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38528, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2436.87      445.541      119.671      145.423      16.3821      1819.11      200.927      0.79916
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69206, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72479, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.81365e-07  4.81365e-07  1.16657e-07
      low eigenvalue method done, cpu time[sec] = 1.72585, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.81e-07  1.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-08  1.17e-07         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16657e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.60961e-28  1.30292e-28  3.76785e-30  2.13364e-29   6.8928e-31  2.31645e-30  2.79717e-35  1.03614e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93076, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         7.45121e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1949.5      356.433      95.7364      116.338      13.1057      1455.29      160.741     0.639328
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69445, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72742, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.09245e-07  4.09245e-07  9.28465e-08
      low eigenvalue method done, cpu time[sec] = 1.72852, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.09e-07  9.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.58e-08  9.28e-08         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.28465e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50496e-28  1.00314e-28  2.94302e-30  1.61796e-29  5.30694e-31  2.07296e-30  2.82255e-35  1.03617e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9259, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1624.58      297.027      79.7803      96.9483      10.9214      1212.74      133.951     0.532773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71357, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.57354e-07  3.57354e-07  7.65537e-08
      low eigenvalue method done, cpu time[sec] = 1.71469, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.57e-07  7.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.12e-08  7.66e-08         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.65537e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.74004e-28  8.05208e-29  2.39283e-30  1.28487e-29  4.26645e-31  1.87492e-30  2.84703e-35   1.0362e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92455, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.04317e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290904, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39944, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1392.5      254.595      68.3831      83.0986      9.36119      1039.49      114.815     0.456663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.67599, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.70899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17993e-07  3.17993e-07  6.47347e-08
      low eigenvalue method done, cpu time[sec] = 1.7101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-07  6.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.77e-08  6.47e-08         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.47347e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.18002e-28  6.65784e-29  2.00139e-30  1.05395e-29  3.53583e-31  1.71057e-30   2.8703e-35   1.0362e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93122, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.19219e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290197, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38656, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1218.44       222.77      59.8353      72.7113      8.19104      909.556      100.463      0.39958
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68074, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002253, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7137, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.86986e-07  2.86986e-07  5.57923e-08
      low eigenvalue method done, cpu time[sec] = 1.71478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.87e-07  5.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-08  5.58e-08         1
         *Z       ---       ---  1.13e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.57923e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.75316e-28  5.62891e-29  1.70974e-30  8.85609e-30  2.99734e-31  1.57187e-30  2.89219e-35  1.03623e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91927, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 600 K
      Energy reference = 33457 1/cm
      Energy step      = 103 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007635
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.366406
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.20053
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.204967
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.946803
         W1 Well: minimal relaxation eigenvalue = 0.0777716
         W1 Well: maximal relaxation eigenvalue = 0.979654
         W1 Well:       grid size = 381
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5785 1/cm
         B1 Barrier:        grid size = 325
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -17 1/cm
         B2 Barrier:        grid size = 323
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 370
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4652 1/cm
         B4 Barrier:        grid size = 385
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23193 1/cm => truncating
         B5 Barrier:        grid size = 550
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23192 1/cm
         B6 Barrier:        grid size = 311
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1424 1/cm
         B7 Barrier:        grid size = 280
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4616 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16771 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.08092, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 8.69284e+40
      MasterEquation::Barrier::truncate: effective weight = 4.07957e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 2.56552e+39
      MasterEquation::Barrier::truncate: effective weight = 1.19875e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5785  -5785 9.71e+08 5.77e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -17 2.87e+15
         B2    188 5.29e+14
         B3  -4652 1.43e+14
         B4  -5785 1.73e+14
         B5  -5785 1.95e+13
         B6   1425 2.16e+15
         B7   4617 2.41e+14
         B8  16772 9.95e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.37e-10  1.01e-09  1.19e-13  2.54e-15  5.84e-34  3.62e-07   0.00181  3.72e+10
          R  1.86e+09         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  9.94e+08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2   8.4e+12  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3  3.93e+14  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4  1.71e+33  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  2.76e+06   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6       551  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  2.69e-11  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.18e+07  2.22e+07  2.63e+03      56.1  1.29e-17  7.98e+09     4e+13  8.21e+26
          R  8.45e-08         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  4.51e-08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2  0.000381  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3    0.0178  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4  7.76e+16  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  1.25e-10   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6   2.5e-14  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  1.22e-27  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.09482, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.296183, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36248, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50541.6      9327.93      2515.14      3050.34      344.525        38064      4244.86      17.5396
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77516, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002253, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78472, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.09249e-06  3.09249e-06  1.22609e-06
      low eigenvalue method done, cpu time[sec] = 1.7858, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.09e-06  1.23e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-07  1.23e-06         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22608e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68421e-26  6.94311e-27   2.2025e-28  2.00493e-27  5.25545e-29  1.43032e-29  1.18706e-34   7.4498e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99642, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.4029, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16847.2      3109.31       838.38      1016.78      114.842        12688      1414.95      5.84653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7294, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73828, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70231e-06  1.70231e-06  6.20067e-07
      low eigenvalue method done, cpu time[sec] = 1.73939, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-06   6.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-07   6.2e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.20067e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.28789e-27  3.12125e-27  8.78935e-29  6.58125e-28  1.86507e-29  1.42172e-29  1.19116e-34  7.45201e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95655, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.47394e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.286754, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42271, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10108.3      1865.59      503.028      610.068      68.9051       7612.8      848.972      3.50792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70927, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002273, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71819, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26262e-06  1.26262e-06  4.27512e-07
      low eigenvalue method done, cpu time[sec] = 1.71956, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-06  4.28e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-07  4.28e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.27512e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.62087e-27  2.00732e-27  5.57296e-29  3.83904e-28  1.12864e-29  1.35155e-29   1.1954e-34  7.45182e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95648, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.06352e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.288612, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40444, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7220.23      1332.56      359.306      435.763      49.2179      5437.71      606.408      2.50566
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72887, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73778, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02693e-06  1.02693e-06  3.27589e-07
      low eigenvalue method done, cpu time[sec] = 1.73888, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-06  3.28e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.11e-08  3.28e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.27589e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.17467e-27  1.46504e-27  4.07241e-29  2.66207e-28  8.01735e-30  1.27403e-29  1.19974e-34  7.45209e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96191, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.65309e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.288905, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42793, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5615.73      1036.44       279.46      338.926      38.2806      4229.33      471.651      1.94884
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70874, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71757, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.75218e-07  8.75218e-07  2.65441e-07
      low eigenvalue method done, cpu time[sec] = 1.71865, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.75e-07  2.65e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-08  2.65e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.65441e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.25063e-27  1.14363e-27  3.19645e-29  2.01178e-28  6.16853e-30  1.20034e-29  1.20417e-34  7.45176e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96409, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291201, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43112, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5054.16      932.793      251.514      305.034      34.4525       3806.4      424.486      1.75396
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002244, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71421, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.17292e-07  8.17292e-07  2.42305e-07
      low eigenvalue method done, cpu time[sec] = 1.7153, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.17e-07  2.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.21e-08  2.42e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42305e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.90136e-27  1.02759e-27  2.88169e-29  1.78566e-28  5.51636e-30  1.16583e-29   1.2064e-34  7.45192e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96414, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         4.42182e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.289859, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42143, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3369.44      621.862      167.676      203.356      22.9684       2537.6      282.991      1.16931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71874, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002244, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72762, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.22791e-07  6.22791e-07  1.67727e-07
      low eigenvalue method done, cpu time[sec] = 1.72868, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.23e-07  1.68e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.46e-08  1.68e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.67727e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.75379e-27  6.69076e-28  1.90992e-29  1.11662e-28  3.54962e-30  1.01685e-29  1.21769e-34  7.45224e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96795, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         5.89576e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.288487, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.41734, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2527.08      466.396      125.757      152.517      17.2263       1903.2      212.243      0.87698
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71914, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72817, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.09432e-07  5.09432e-07  1.27069e-07
      low eigenvalue method done, cpu time[sec] = 1.72927, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.09e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.45e-08  1.27e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27069e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.11243e-27  4.85341e-28  1.40876e-29  7.91641e-29  2.56746e-30   9.0054e-30  1.22898e-34  7.45213e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96666, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1          7.3697e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42915, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2021.66      373.117      100.606      122.014       13.781      1522.56      169.794     0.701584
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70592, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71485, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.33898e-07  4.33898e-07  1.01464e-07
      low eigenvalue method done, cpu time[sec] = 1.71591, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.34e-07  1.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.77e-08  1.01e-07         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01464e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70188e-27  3.74796e-28  1.10419e-29  6.02299e-29  1.98361e-30  8.07817e-30  1.24003e-34  7.45235e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96283, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.2902, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.45506, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1684.72      310.931       83.838      101.678      11.4842       1268.8      141.495     0.584653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68484, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69358, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.79434e-07  3.79434e-07  8.38872e-08
      low eigenvalue method done, cpu time[sec] = 1.69467, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.79e-07  8.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.29e-08  8.39e-08         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.38872e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41669e-27  3.01597e-28  9.00365e-30  4.79619e-29   1.5993e-30  7.32189e-30  1.25067e-34  7.45242e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9678, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.03176e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290694, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43975, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1444.05      266.512      71.8612      87.1525      9.84358      1087.54      121.282     0.501131
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70014, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00223, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.709, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.38048e-07  3.38048e-07   7.1102e-08
      low eigenvalue method done, cpu time[sec] = 1.71009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.38e-07  7.11e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.92e-08  7.11e-08         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.1102e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20733e-27  2.49912e-28  7.54943e-30  3.94352e-29  1.32869e-30  6.69274e-30  1.26079e-34  7.45263e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96701, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.17915e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290471, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42525, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1263.54      233.198      62.8785      76.2585      8.61313        951.6      106.121      0.43849
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7133, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002243, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72211, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.05398e-07  3.05398e-07  6.14058e-08
      low eigenvalue method done, cpu time[sec] = 1.72317, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-07  6.14e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-08  6.14e-08         1
         *Z       ---       ---     8e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.14058e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04737e-27  2.11688e-28  6.46335e-30  3.32048e-29  1.12878e-30  6.16063e-30  1.27031e-34  7.45279e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96909, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 610 K
      Energy reference = 33735 1/cm
      Energy step      = 105 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007057
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.360132
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.196469
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.192216
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.934511
         W1 Well: minimal relaxation eigenvalue = 0.077293
         W1 Well: maximal relaxation eigenvalue = 0.979023
         W1 Well:       grid size = 377
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5850 1/cm
         B1 Barrier:        grid size = 322
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -75 1/cm
         B2 Barrier:        grid size = 320
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 134 1/cm
         B3 Barrier:        grid size = 366
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4695 1/cm
         B4 Barrier:        grid size = 381
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6270 1/cm
         B5 Barrier: nonpositive number of states at -23175 1/cm => truncating
         B5 Barrier:        grid size = 542
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23175 1/cm
         B6 Barrier:        grid size = 307
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1499 1/cm
         B7 Barrier:        grid size = 277
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4649 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16724 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.03777, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 377
      MasterEquation::Barrier::truncate: real weight = 4.44855e+40
      MasterEquation::Barrier::truncate: effective weight = 2.12825e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 377
      MasterEquation::Barrier::truncate: real weight = 1.30391e+39
      MasterEquation::Barrier::truncate: effective weight = 6.21849e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5850  -5850 9.51e+08 6.02e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -75 3.07e+15
         B2    135 5.72e+14
         B3  -4695 1.55e+14
         B4  -5850 1.87e+14
         B5  -5850 2.12e+13
         B6   1500 2.33e+15
         B7   4650 2.63e+14
         B8  16725 1.13e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.49e-10  8.37e-10   1.2e-13  2.73e-15  1.28e-33  2.86e-07   0.00127  1.64e+10
          R  2.23e+09         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1   1.2e+09     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2  8.36e+12  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3  3.67e+14  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  7.78e+32  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5   3.5e+06   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6       784  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  6.08e-11  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.31e+06  6.17e+06       882      20.1  9.47e-18  2.11e+09   9.4e+12  1.21e+26
          R  3.02e-07         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1  1.62e-07     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2   0.00113  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3    0.0497  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  1.06e+17  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5  4.74e-10   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6  1.06e-13  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  8.25e-27  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.05142, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+08
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.293085, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23863, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            52387.1      9759.37      2641.53      3197.38      362.067      39799.9      4480.74      19.2198
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86217, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.44635e-06  3.44635e-06  1.39762e-06
      low eigenvalue method done, cpu time[sec] = 1.89538, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.45e-06   1.4e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.13e-07   1.4e-06         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39762e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.87407e-26  2.40502e-26  7.59343e-28  6.87063e-27  1.80498e-28  5.23573e-29  4.96163e-34  5.02346e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+08
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.283077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17462.4      3253.12      880.511      1065.79      120.689      13266.6      1493.58      6.40659
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.80452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002199, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83674, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.91809e-06  1.91809e-06  7.14355e-07
      low eigenvalue method done, cpu time[sec] = 1.83814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.92e-06  7.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-07  7.14e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.14355e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.27226e-26  1.09066e-26  3.06739e-28  2.28227e-27  6.48535e-29   5.2115e-29  4.97866e-34  5.02242e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87349, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1          1.4581e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.285379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26194, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10477.4      1951.87      528.307      639.476      72.4133      7959.98      896.148      3.84395
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81523, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.42944e-06  1.42944e-06  4.95305e-07
      low eigenvalue method done, cpu time[sec] = 1.8163, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-06  4.95e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-07  4.95e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.95305e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.3454e-26  7.04873e-27  1.95712e-28  1.33937e-27  3.94937e-29  4.96396e-29  4.99624e-34  5.02264e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.04133e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286568, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.25966, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7483.87       1394.2      377.362      456.768      51.7238       5685.7      640.106      2.74568
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77666, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002194, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80892, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16615e-06  1.16615e-06  3.81052e-07
      low eigenvalue method done, cpu time[sec] = 1.81001, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-06  3.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-07  3.81e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.81052e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84021e-26  5.16272e-27   1.4364e-28  9.32645e-28  2.81774e-29  4.68805e-29  5.01425e-34  5.02263e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88054, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.62457e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.284926, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.27014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5820.78      1084.37      293.504      355.264      40.2296      4422.21       497.86      2.13553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77592, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002198, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80764, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.96086e-07  9.96086e-07  3.09724e-07
      low eigenvalue method done, cpu time[sec] = 1.80873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.96e-07   3.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.77e-08   3.1e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.09724e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5162e-26  4.04135e-27  1.13126e-28  7.07111e-28  2.17532e-29  4.42453e-29  5.03258e-34  5.02271e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88445, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.285779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26852, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5238.71      975.937      264.153      319.738      36.2067      3979.99      448.074      1.92198
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77022, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002189, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80247, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.31017e-07  9.31018e-07  2.83108e-07
      low eigenvalue method done, cpu time[sec] = 1.80358, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.31e-07  2.83e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.18e-08  2.83e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.83107e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39344e-26  3.63567e-27  1.02135e-28  6.28507e-28  1.94816e-29  4.30075e-29  5.04184e-34  5.02274e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87585, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         4.37429e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286907, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2759, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3492.47      650.624      176.102      213.159      24.1378      2653.33      298.716      1.28132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002194, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.11928e-07  7.11928e-07  1.97023e-07
      low eigenvalue method done, cpu time[sec] = 1.80609, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.12e-07  1.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-08  1.97e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97023e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.88724e-27  2.37871e-27  6.80839e-29  3.95194e-28  1.26082e-29  3.76449e-29   5.0886e-34  5.02283e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.89103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         5.83238e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26873, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2619.35      487.968      132.077      159.869      18.1033      1989.99      224.037     0.960988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76898, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002201, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.83749e-07  5.83749e-07  1.49857e-07
      low eigenvalue method done, cpu time[sec] = 1.80289, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.84e-07   1.5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-08   1.5e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.49857e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.61409e-27  1.73173e-27  5.04328e-29  2.81318e-28  9.15837e-30  3.34367e-29  5.13527e-34  5.02297e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88026, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         7.29048e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286749, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.27205, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2095.48      390.375      105.661      127.895      14.4827         1592       179.23     0.768791
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76353, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002198, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79605, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.98105e-07  4.98105e-07  1.20041e-07
      low eigenvalue method done, cpu time[sec] = 1.79713, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.98e-07   1.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.32e-08   1.2e-07         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20041e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.15347e-27  1.34118e-27  3.96638e-29  2.14726e-28  7.09965e-30  3.00689e-29  5.18095e-34  5.02306e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8749, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.288564, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2862, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1746.24      325.312      88.0511      106.579      12.0689      1326.66      149.358     0.640659
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.75372, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002205, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78606, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.3622e-07   4.3622e-07  9.95094e-08
      low eigenvalue method done, cpu time[sec] = 1.78714, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-07  9.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.77e-08  9.95e-08         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.95094e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.13566e-27  1.08187e-27  3.24337e-29   1.7145e-28  5.74026e-30  2.73133e-29  5.22494e-34  5.02319e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88495, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.02067e+10
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286285, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.29193, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1496.77      278.839      75.4724      91.3537      10.3448      1137.14      128.021     0.549136
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74889, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002211, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.89113e-07  3.89113e-07  8.45358e-08
      low eigenvalue method done, cpu time[sec] = 1.78208, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.89e-07  8.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.35e-08  8.45e-08         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.45358e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.38655e-27  8.98338e-28  2.72613e-29  1.41295e-28  4.78053e-30  2.50148e-29  5.26676e-34  5.02327e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88121, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.16648e+10
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.287705, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.28585, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1309.68      243.984      66.0383      79.9345      9.05167      994.997      112.019     0.480494
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.75737, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002186, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78972, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51894e-07  3.51894e-07   7.3154e-08
      low eigenvalue method done, cpu time[sec] = 1.79082, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.52e-07  7.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.03e-08  7.32e-08         1
         *Z       ---       ---  5.48e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.3154e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8129e-27  7.62338e-28  2.33892e-29  1.19213e-28  4.06986e-30  2.30661e-29  5.30611e-34  5.02339e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88496, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 620 K
      Energy reference = 34013 1/cm
      Energy step      = 107 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007545
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.353135
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.190185
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.195031
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.902698
         W1 Well: minimal relaxation eigenvalue = 0.076826
         W1 Well: maximal relaxation eigenvalue = 0.978412
         W1 Well:       grid size = 373
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5897 1/cm
         B1 Barrier:        grid size = 318
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -12 1/cm
         B2 Barrier:        grid size = 316
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 361
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4614 1/cm
         B4 Barrier:        grid size = 376
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6219 1/cm
         B5 Barrier: nonpositive number of states at -23125 1/cm => truncating
         B5 Barrier:        grid size = 534
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23125 1/cm
         B6 Barrier:        grid size = 304
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1485 1/cm
         B7 Barrier:        grid size = 274
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4695 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16679 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.99556, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 373
      MasterEquation::Barrier::truncate: real weight = 2.33041e+40
      MasterEquation::Barrier::truncate: effective weight = 1.13614e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 373
      MasterEquation::Barrier::truncate: real weight = 6.80147e+38
      MasterEquation::Barrier::truncate: effective weight = 3.30825e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5897  -5897 9.37e+08 6.29e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -12 3.29e+15
         B2    202 6.18e+14
         B3  -4614 1.68e+14
         B4  -5897 2.03e+14
         B5  -5897  2.3e+13
         B6   1486 2.52e+15
         B7   4696 2.86e+14
         B8  16679 1.27e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.65e-10  6.77e-10  1.16e-13  2.82e-15  2.66e-33   2.2e-07  0.000875  7.21e+09
          R  2.74e+09         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  1.48e+09     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2  8.61e+12  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3  3.55e+14   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  3.76e+32  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  4.54e+06   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6  1.14e+03  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  1.39e-10  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.65e+05  1.79e+06       307      7.44  7.03e-18  5.82e+08  2.31e+12  1.91e+25
          R  1.04e-06         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  5.59e-07     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2   0.00326  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3     0.134   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  1.42e+17  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  1.72e-09   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6  4.32e-13  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  5.25e-26  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.00876, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+08
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.288045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              54274      10205.5      2772.71       3349.7      380.283      41590.9      4726.45      21.0316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96693, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.94974e-06  3.94975e-06  1.63808e-06
      low eigenvalue method done, cpu time[sec] = 1.96802, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.95e-06  1.64e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.58e-07  1.64e-06         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63807e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.96555e-25  7.98209e-26  2.51237e-27  2.25965e-26  5.94947e-28  1.83213e-28   1.9812e-33  3.18275e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87071, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+08
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.277679, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13047, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18091.3      3401.84      924.235      1116.57      126.761      13863.6      1575.48      7.01054
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88663, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91858, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22229e-06  2.22229e-06  8.46185e-07
      low eigenvalue method done, cpu time[sec] = 1.91965, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-06  8.46e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.98e-07  8.46e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.46184e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10586e-25  3.65337e-26  1.02712e-27  7.59446e-27  2.16389e-28   1.8274e-28  1.98797e-33  3.18249e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8274, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.44268e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.279052, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11823, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10854.8      2041.11      554.541      669.939      76.0566      8318.17       945.29      4.20633
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89703, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.66398e-06  1.66398e-06  5.89995e-07
      low eigenvalue method done, cpu time[sec] = 1.93009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-06   5.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-07   5.9e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.89995e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.96883e-26  2.37297e-26  6.59387e-28  4.48348e-27  1.32593e-28  1.74462e-28  1.99494e-33  3.18267e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82625, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.01976e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.277138, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14128, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7753.42      1457.93      396.101      478.528      54.3262      5941.55      675.207      3.00452
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002147, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9061, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3616e-06   1.3616e-06  4.55686e-07
      low eigenvalue method done, cpu time[sec] = 1.90768, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.36e-06  4.56e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-07  4.56e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55686e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.27612e-26  1.74424e-26  4.86027e-28   3.1349e-27  9.50083e-29  1.65107e-28  2.00209e-33  3.18256e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83043, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.59683e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.277057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13452, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6030.44      1133.95      308.078      372.189      42.2537      4621.21      525.161      2.33685
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002135, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90628, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16562e-06  1.16562e-06  3.71525e-07
      low eigenvalue method done, cpu time[sec] = 1.90737, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-06  3.72e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-07  3.72e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.71525e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.18648e-26   1.3692e-26  3.84053e-28  2.38442e-27  7.35919e-29  1.56114e-28  2.00936e-33   3.1827e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.275994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13916, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5427.4      1020.55      277.271       334.97      38.0283      4159.09      472.645      2.10316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90814, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09048e-06  1.09048e-06  3.40046e-07
      low eigenvalue method done, cpu time[sec] = 1.9092, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-06   3.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.56e-08   3.4e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.40046e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.77266e-26  1.23324e-26  3.47232e-28  2.12226e-27  6.60011e-29  1.51875e-28  2.01303e-33  3.18277e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82853, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         4.32805e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.274906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14462, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3618.26      680.369      184.847      223.313      25.3522      2772.72      315.097      1.40211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86918, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002135, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.36775e-07  8.36775e-07  2.37896e-07
      low eigenvalue method done, cpu time[sec] = 1.9024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.37e-07  2.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.29e-08  2.38e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.37896e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.40388e-26  8.10775e-27  2.32781e-28   1.3417e-27  4.29572e-29  1.33426e-28  2.03155e-33  3.18284e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         5.77074e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.276125, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14927, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2713.7      510.276      138.635      167.485      19.0142      2079.54      236.322      1.05158
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86333, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002136, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.87777e-07  6.87777e-07  1.81653e-07
      low eigenvalue method done, cpu time[sec] = 1.89663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.88e-07  1.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.96e-08  1.82e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81653e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.63132e-26   5.9238e-27  1.73153e-28  9.58911e-28  3.13338e-29  1.18865e-28  2.05001e-33  3.18291e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82926, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         7.21342e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.277287, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15627, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2170.96      408.221      110.908      133.988      15.2113      1663.63      189.058     0.841265
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.85642, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88847, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.87949e-07  5.87949e-07  1.45965e-07
      low eigenvalue method done, cpu time[sec] = 1.88956, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.88e-07  1.46e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-08  1.46e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45965e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.13305e-26  4.60104e-27  1.36634e-28  7.34256e-28  2.43711e-29  1.07163e-28  2.06806e-33  3.18295e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82787, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.27748, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15079, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1809.13      340.184      92.4235      111.657      12.6761      1386.36      157.548     0.701054
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.1566e-07   5.1566e-07  1.21315e-07
      low eigenvalue method done, cpu time[sec] = 1.90001, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.16e-07  1.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-08  1.21e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21315e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.78479e-26  3.72038e-27  1.12038e-28   5.8783e-28  1.97593e-29  9.75549e-29  2.08543e-33  3.18303e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83142, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.00988e+10
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.278437, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15966, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1550.68      291.587      79.2202      95.7056      10.8652      1188.31      135.041     0.600904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.856, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88762, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.60538e-07  4.60538e-07  1.03292e-07
      low eigenvalue method done, cpu time[sec] = 1.88868, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.61e-07  1.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.95e-08  1.03e-07         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03292e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52781e-26  3.09567e-27  9.43954e-29  4.85544e-28  1.64948e-29  8.95181e-29  2.10195e-33  3.18308e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83429, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.15415e+10
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.278195, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1356.85      255.138      69.3176      83.7424      9.50708      1039.77      118.161     0.525791
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.85084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8825, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.16922e-07  4.16922e-07  8.95607e-08
      low eigenvalue method done, cpu time[sec] = 1.88357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.17e-07  8.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-08  8.96e-08         1
         *Z       ---       ---  3.74e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.95607e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33058e-26   2.6318e-27  8.11571e-29  4.10476e-28  1.40719e-29  8.26881e-29  2.11748e-33  3.18316e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83023, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 630 K
      Energy reference = 34291 1/cm
      Energy step      = 109 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006734
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.348609
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.182695
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.186648
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.881354
         W1 Well: minimal relaxation eigenvalue = 0.0763705
         W1 Well: maximal relaxation eigenvalue = 0.977818
         W1 Well:       grid size = 369
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5929 1/cm
         B1 Barrier:        grid size = 315
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 313
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 174 1/cm
         B3 Barrier:        grid size = 357
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4621 1/cm
         B4 Barrier:        grid size = 372
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6256 1/cm
         B5 Barrier: nonpositive number of states at -23261 1/cm => truncating
         B5 Barrier:        grid size = 528
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23261 1/cm
         B6 Barrier:        grid size = 301
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1482 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4643 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16742 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.95221, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 369
      MasterEquation::Barrier::truncate: real weight = 1.24828e+40
      MasterEquation::Barrier::truncate: effective weight = 6.19947e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 369
      MasterEquation::Barrier::truncate: real weight = 3.63565e+38
      MasterEquation::Barrier::truncate: effective weight = 1.80248e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5929  -5929 9.28e+08 6.57e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 3.52e+15
         B2    175 6.67e+14
         B3  -4621 1.82e+14
         B4  -5929 2.19e+14
         B5  -5929  2.5e+13
         B6   1483 2.72e+15
         B7   4643 3.12e+14
         B8  16743 1.44e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.89e-10  5.33e-10  1.09e-13  2.81e-15  5.22e-33  1.65e-07  0.000588  3.14e+09
          R  3.46e+09         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  1.88e+09     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2  9.16e+12  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3  3.55e+14  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4  1.92e+32  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5  6.05e+06   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6   1.7e+03  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  3.18e-10  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.92e+05  5.39e+05       110      2.84  5.27e-18  1.67e+08  5.95e+11  3.17e+24
          R  3.42e-06         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  1.86e-06     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2   0.00906  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3     0.352  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4   1.9e+17  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5  5.99e-09   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6  1.68e-12  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  3.15e-25  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.96579, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+08
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.281608, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01761, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            56202.8      10666.6      2908.78      3507.42      399.192      43437.8      4982.25      22.9813
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02747, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002177, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05824, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.65004e-06  4.65005e-06  1.97204e-06
      low eigenvalue method done, cpu time[sec] = 2.0593, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.65e-06  1.97e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.21e-07  1.97e-06         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97204e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.32365e-25  2.54758e-25  7.99509e-27  7.14888e-26  1.88634e-27   6.1713e-28  7.57695e-33  1.90174e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85055, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+08
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01726, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18734.3      3555.54      969.594      1169.14      133.064      14479.3      1660.75      7.66045
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99351, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.64425e-06  2.64426e-06   1.0293e-06
      low eigenvalue method done, cpu time[sec] = 1.99512, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.64e-06  1.03e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-07  1.03e-06         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0293e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.59245e-25  1.17659e-25  3.30705e-27   2.4303e-26    6.943e-28  6.16346e-28  7.60272e-33   1.9019e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77999, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.42769e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.272598, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.02497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11240.6      2133.33      581.756      701.483      79.8385      8687.57      996.449      4.59627
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95661, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00207, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98779, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.98914e-06  1.98914e-06  7.21593e-07
      low eigenvalue method done, cpu time[sec] = 1.98885, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.99e-06  7.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-07  7.22e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.21593e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.60226e-25  7.67981e-26  2.13586e-27  1.44312e-26   4.2802e-28  5.89512e-28  7.62931e-33  1.90181e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.99876e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.27218, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05263, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8028.97       1523.8       415.54      501.059      57.0275       6205.4       711.75      3.28305
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94008, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002066, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97083, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63254e-06  1.63254e-06  5.59468e-07
      low eigenvalue method done, cpu time[sec] = 1.97197, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-06  5.59e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-07  5.59e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.59468e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0571e-25  5.66469e-26  1.58092e-27  1.01313e-26  3.07986e-28  5.58894e-28  7.65651e-33  1.90186e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7881, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.56984e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.273321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.03521, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6244.75      1185.18      323.198      389.713      44.3547      4826.43      553.583      2.55348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.84065, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.87173, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40062e-06  1.40062e-06  4.57508e-07
      low eigenvalue method done, cpu time[sec] = 1.87305, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-06  4.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-07  4.58e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.57508e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7049e-25  4.45887e-26  1.25329e-27  7.73004e-27  2.39339e-28  5.29319e-28  7.68417e-33   1.9019e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78239, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.273292, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0398, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5620.28      1066.66      290.878      350.742      39.9192      4343.78      498.225      2.29813
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93692, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31153e-06  1.31153e-06  4.19284e-07
      low eigenvalue method done, cpu time[sec] = 1.96999, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-06  4.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-07  4.19e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.19284e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57083e-25  4.02086e-26  1.13471e-27  6.88939e-27  2.14952e-28  5.15341e-28  7.69812e-33  1.90187e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78414, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         4.28306e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04899, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3746.85      711.109      193.919      233.828      26.6128      2895.86       332.15      1.53209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93131, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96278, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00989e-06  1.00989e-06  2.94843e-07
      low eigenvalue method done, cpu time[sec] = 1.96387, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-06  2.95e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.77e-08  2.95e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.94843e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12595e-25  2.65596e-26  7.64922e-28   4.3787e-27   1.4068e-28  4.54271e-28  7.76844e-33  1.90194e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78848, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         5.71075e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04609, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2810.14      533.331      145.439      175.371      19.9596      2171.89      249.112      1.14907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97196, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.3206e-07   8.3206e-07  2.25997e-07
      low eigenvalue method done, cpu time[sec] = 1.97303, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.32e-07  2.26e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.19e-08  2.26e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.25997e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.73649e-26  1.94738e-26  5.71315e-28  3.14174e-27  1.03035e-28  4.05828e-28  7.83846e-33  1.90197e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79714, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         7.13844e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04587, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2248.11      426.665      116.351      140.297      15.9677      1737.51       199.29     0.919254
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93797, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002076, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9689, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.12593e-07  7.12594e-07  1.82153e-07
      low eigenvalue method done, cpu time[sec] = 1.96996, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.13e-07  1.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.14e-08  1.82e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.82153e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.10335e-26  1.51681e-26  4.52292e-28  2.41321e-27  8.04004e-29  3.66746e-28  7.90685e-33  1.90202e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78961, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275079, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05479, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1873.43      355.554      96.9594      116.914      13.3064      1447.93      166.075     0.766045
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93145, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002083, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    6.259e-07    6.259e-07  1.51778e-07
      low eigenvalue method done, cpu time[sec] = 1.96402, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.26e-07  1.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.37e-08  1.52e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51778e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.95849e-26  1.22938e-26  3.71885e-28    1.937e-27  6.53631e-29  3.34562e-28  7.97263e-33  1.90207e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79229, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         9.99382e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274943, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.06418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1605.79      304.761       83.108      100.212      11.4055      1241.08       142.35      0.65661
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92804, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002076, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95903, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.59679e-07  5.59679e-07  1.29513e-07
      low eigenvalue method done, cpu time[sec] = 1.96008, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.6e-07   1.3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.79e-08   1.3e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29513e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.11155e-26  1.02503e-26  3.14057e-28  1.60352e-27  5.46917e-29  3.07569e-28  8.03515e-33   1.9021e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79865, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.14215e+10
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275081, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04766, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1405.07      266.666      72.7195      87.6854      9.97981      1085.95      124.556     0.574534
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93482, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96579, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.07205e-07  5.07205e-07  1.12513e-07
      low eigenvalue method done, cpu time[sec] = 1.96682, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.07e-07  1.13e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.33e-08  1.13e-07         1
         *Z       ---       ---  2.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12513e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.46014e-26  8.72996e-27  2.70567e-28  1.35826e-27  4.67537e-29  2.84577e-28  8.09394e-33  1.90214e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79072, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 640 K
      Energy reference = 34569 1/cm
      Energy step      = 110 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007684
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.350216
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.187563
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.195546
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.886999
         W1 Well: minimal relaxation eigenvalue = 0.07592
         W1 Well: maximal relaxation eigenvalue = 0.979473
         W1 Well:       grid size = 369
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6021 1/cm
         B1 Barrier:        grid size = 315
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 313
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 138 1/cm
         B3 Barrier:        grid size = 357
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4701 1/cm
         B4 Barrier:        grid size = 371
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6241 1/cm
         B5 Barrier: nonpositive number of states at -23181 1/cm => truncating
         B5 Barrier:        grid size = 525
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23181 1/cm
         B6 Barrier:        grid size = 301
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1458 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4648 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16748 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.9756, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 369
      MasterEquation::Barrier::truncate: real weight = 6.82974e+39
      MasterEquation::Barrier::truncate: effective weight = 3.42304e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 369
      MasterEquation::Barrier::truncate: real weight = 1.98877e+38
      MasterEquation::Barrier::truncate: effective weight = 9.95561e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6021  -6021    9e+08 6.86e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 3.76e+15
         B2    139 7.21e+14
         B3  -4701 1.97e+14
         B4  -6021 2.37e+14
         B5  -6021 2.71e+13
         B6   1459 2.93e+15
         B7   4649 3.39e+14
         B8  16749 1.62e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.61e-10  4.78e-10  1.16e-13  3.17e-15  1.13e-32  1.41e-07  0.000452  1.59e+09
          R  3.84e+09         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  2.09e+09     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2  8.61e+12  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3  3.15e+14  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4  8.85e+31  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5  7.08e+06   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6  2.21e+03  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  6.31e-10  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.19e+04  1.69e+05        41      1.12  3.98e-18  4.98e+07  1.59e+11  5.59e+23
          R  1.09e-05         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  5.93e-06     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2    0.0244  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3     0.893  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4  2.51e+17  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5  2.01e-08   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6  6.27e-12  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  1.79e-24  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.98996, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+08
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.281129, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.03617, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            58173.7      11143.1      3049.88      3670.66      418.812      45341.8      5248.41      25.0747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00494, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002096, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.01348, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.8835e-06  4.88351e-06  2.10733e-06
      low eigenvalue method done, cpu time[sec] = 2.01453, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.88e-06  2.11e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.4e-07  2.11e-06         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.10732e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.96022e-24   7.8446e-25   2.4522e-26  2.18038e-25  5.76541e-27  1.99775e-27  2.77501e-32   1.0744e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84707, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+08
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.270585, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05625, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19391.2      3714.36      1016.63      1223.55      139.604      15113.9      1749.47      8.35823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002074, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80404e-06  2.80405e-06   1.1107e-06
      low eigenvalue method done, cpu time[sec] = 1.99172, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-06  1.11e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-07  1.11e-06         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1107e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12395e-24  3.65268e-25  1.02581e-26  7.49399e-26  2.14644e-27  1.99874e-27   2.7844e-32  1.07441e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81343, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.41309e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.272463, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.07173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11634.7      2228.61      609.976      734.133      83.7624      9068.36      1049.68      5.01494
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.1183e-06   2.1183e-06  7.82722e-07
      low eigenvalue method done, cpu time[sec] = 1.97413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-06  7.83e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-07  7.83e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.82721e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.1826e-25  2.39509e-25  6.66375e-27  4.47495e-26  1.33098e-27   1.9156e-27  2.79408e-32  1.07444e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.80987, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.97832e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.273732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.06693, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8310.53      1591.87      435.697      524.381      59.8303       6477.4      749.773       3.5821
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97053, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002077, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9789, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74328e-06  1.74328e-06  6.09101e-07
      low eigenvalue method done, cpu time[sec] = 1.97998, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-06  6.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-07  6.09e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.09101e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.49156e-25  1.77246e-25  4.95241e-27  3.15386e-26  9.61625e-28  1.81949e-27  2.80398e-32  1.07446e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81841, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.54356e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274937, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.06934, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6463.75      1238.12      338.876      407.852      46.5347      5037.98      583.157      2.78608
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97793, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.49865e-06  1.49865e-06  4.99534e-07
      low eigenvalue method done, cpu time[sec] = 1.97898, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.5e-06     5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-07     5e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.99534e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.39523e-25  1.39879e-25  3.93846e-27  2.41365e-26  7.49651e-28  1.72608e-27  2.81404e-32  1.07446e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82135, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275621, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.07586, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5817.37      1114.31      304.988      367.066      41.8812      4534.18      524.841      2.50747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002072, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97774, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40449e-06   1.4045e-06  4.58368e-07
      low eigenvalue method done, cpu time[sec] = 1.97881, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-06  4.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-07  4.58e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.58368e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.97701e-25   1.2628e-25  3.57065e-27  2.15396e-26  6.74178e-28   1.6818e-27  2.81911e-32  1.07445e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.825, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         4.23927e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.272545, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08145, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3878.25      742.872      203.325      244.711      27.9208      3022.79      349.894      1.67165
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9667, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08492e-06  1.08492e-06  3.23932e-07
      low eigenvalue method done, cpu time[sec] = 1.96776, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-06  3.24e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.38e-08  3.24e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.23932e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.58478e-25  8.37914e-26  2.41998e-27  1.37607e-26  4.43608e-28  1.48749e-27  2.84465e-32  1.07448e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81028, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         5.65236e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.270331, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0287, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2908.69      557.154      152.494      183.533      20.9406      2267.09      262.421      1.25373
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95474, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.95865e-07  8.95865e-07  2.49213e-07
      low eigenvalue method done, cpu time[sec] = 1.96459, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.96e-07  2.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.71e-08  2.49e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49213e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.7916e-25   6.1645e-26  1.81467e-27   9.9111e-27  3.26194e-28  1.33252e-27  2.87006e-32   1.0745e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         7.06544e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.07546, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2326.95      445.723      121.995      146.827      16.7525      1813.67      209.936      1.00299
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96045, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002067, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.68538e-07  7.68538e-07   2.0146e-07
      low eigenvalue method done, cpu time[sec] = 1.96978, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.69e-07  2.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.59e-08  2.01e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.0146e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27636e-25  4.81461e-26  1.44118e-27  7.63603e-27  2.55346e-28  1.20702e-27  2.89485e-32  1.07452e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81558, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275244, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08797, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1939.12      371.436      101.663      122.355      13.9604      1511.39      174.947     0.835823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94962, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.7596e-07   6.7596e-07  1.68283e-07
      low eigenvalue method done, cpu time[sec] = 1.95893, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.76e-07  1.68e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.78e-08  1.68e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.68283e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91412e-25  3.91119e-26  1.18812e-27  6.14472e-27  2.08138e-28  1.10334e-27  2.91869e-32  1.07454e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81727, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         9.89162e+09
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.275089, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08338, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1662.11      318.374      87.1395      104.876      11.9661      1295.48      149.955     0.716419
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95542, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96367, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.0513e-07   6.0513e-07  1.43903e-07
      low eigenvalue method done, cpu time[sec] = 1.96468, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.05e-07  1.44e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.16e-08  1.44e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43903e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6455e-25  3.26749e-26  1.00566e-27  5.09794e-27  1.74553e-28  1.01616e-27  2.94134e-32  1.07457e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82257, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.13047e+10
      global relaxation matrix dimension = 369
      setting global matrices ... done, cpu time[sec] = 0.274648, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1454.34      278.577       76.247      91.7666      10.4703      1133.54       131.21     0.626867
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94469, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9528, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.48928e-07  5.48928e-07  1.25249e-07
      low eigenvalue method done, cpu time[sec] = 1.95427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.49e-07  1.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.67e-08  1.25e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25249e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.43845e-25  2.78768e-26  8.68132e-28  4.32647e-27  1.49516e-28  9.41726e-28  2.96264e-32  1.07459e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82013, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 650 K
      Energy reference = 34847 1/cm
      Energy step      = 112 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007055
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.345156
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.184265
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.183468
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.868298
         W1 Well: minimal relaxation eigenvalue = 0.075448
         W1 Well: maximal relaxation eigenvalue = 0.978939
         W1 Well:       grid size = 366
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6145 1/cm
         B1 Barrier:        grid size = 312
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -97 1/cm
         B2 Barrier:        grid size = 310
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 126 1/cm
         B3 Barrier:        grid size = 353
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4689 1/cm
         B4 Barrier:        grid size = 367
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6257 1/cm
         B5 Barrier: nonpositive number of states at -23169 1/cm => truncating
         B5 Barrier:        grid size = 518
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23169 1/cm
         B6 Barrier:        grid size = 298
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1470 1/cm
         B7 Barrier:        grid size = 270
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4607 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.93776, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 366
      MasterEquation::Barrier::truncate: real weight = 3.81307e+39
      MasterEquation::Barrier::truncate: effective weight = 1.94584e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 366
      MasterEquation::Barrier::truncate: real weight = 1.1119e+38
      MasterEquation::Barrier::truncate: effective weight = 5.66952e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6145  -6145 8.65e+08 7.16e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -97 4.02e+15
         B2    127 7.78e+14
         B3  -4689 2.14e+14
         B4  -6145 2.57e+14
         B5  -6145 2.93e+13
         B6   1471 3.16e+15
         B7   4607 3.69e+14
         B8  16703 1.83e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.48e-10  4.52e-10   1.3e-13  3.75e-15  2.51e-32  1.28e-07  0.000368  8.59e+08
          R  4.04e+09         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1  2.21e+09     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2  7.71e+12  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3  2.67e+14   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  3.98e+31  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  7.83e+06   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6  2.72e+03  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7  1.16e-09  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.99e+04  5.47e+04      15.7     0.453  3.04e-18  1.54e+07  4.45e+10  1.04e+23
          R  3.34e-05         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1  1.83e-05     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2    0.0638  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3      2.21   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  3.29e+17  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  6.48e-08   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6  2.25e-11  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7  9.62e-24  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.95258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+08
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.278434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.91903, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              60187      11635.2      3196.13      3839.57      439.161      47303.6      5525.21      27.3197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.09443, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12587, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.83304e-06  4.83305e-06  2.11589e-06
      low eigenvalue method done, cpu time[sec] = 2.12696, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.83e-06  2.12e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.32e-07  2.12e-06         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11589e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.86382e-24  2.32998e-24  7.26041e-26  6.42056e-25  1.70124e-26  6.24644e-27  9.78676e-32  5.75291e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81302, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+08
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.27315, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.91997, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20062.3       3878.4      1065.38      1279.86      146.387      15767.9      1841.74      9.10657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04426, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002046, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07472, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80081e-06  2.80081e-06  1.12601e-06
      low eigenvalue method done, cpu time[sec] = 2.07577, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-06  1.13e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.47e-07  1.13e-06         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12601e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.39288e-24  1.09387e-24  3.07087e-26  2.23054e-25  6.40485e-27  6.25548e-27  9.81987e-32  5.75256e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75599, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.39887e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.277748, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92546, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12037.4      2327.04      639.227      767.913      87.8322      9460.73      1105.04      5.46394
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03587, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002027, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.12443e-06  2.12443e-06  7.97584e-07
      low eigenvalue method done, cpu time[sec] = 2.06822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-06  7.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-07  7.98e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.97584e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.48228e-24  7.20535e-25  2.00626e-26  1.33928e-25  3.99438e-27  6.00484e-27  9.85397e-32  5.75275e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75806, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.95842e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.273543, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93641, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8598.14      1662.17       456.59       548.51      62.7373      6757.66      789.316      3.90281
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02836, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75291e-06  1.75291e-06  6.22919e-07
      low eigenvalue method done, cpu time[sec] = 2.0598, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-06  6.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.52e-07  6.23e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.22919e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.9762e-24  5.34969e-25  1.49696e-26  9.47518e-26  2.89745e-27  5.71267e-27  9.88881e-32  5.75276e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75566, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.51796e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.26717, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.935, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6687.44       1292.8      355.126      426.619      48.7956      5255.96      613.912      3.03552
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02997, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06053, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50983e-06  1.50983e-06  5.12317e-07
      low eigenvalue method done, cpu time[sec] = 2.0616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-06  5.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-07  5.12e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.12317e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.64698e-24  4.23278e-25  1.19416e-26  7.27295e-26  2.26576e-27  5.42751e-27  9.92418e-32  5.75281e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74995, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.265598, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92391, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6018.7      1163.52      319.613      383.957      43.9161      4730.36      552.521      2.73197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03805, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002054, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06849, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41611e-06  1.41611e-06  4.70673e-07
      low eigenvalue method done, cpu time[sec] = 2.06952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-06  4.71e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-07  4.71e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.70673e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52111e-24  3.82554e-25  1.08408e-26  6.49871e-26  2.04036e-27  5.29199e-27  9.94201e-32  5.75286e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74854, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         4.19661e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.276236, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93993, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4012.47      775.679      213.076      255.971      29.2774      3153.58      368.347      1.82131
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02298, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002033, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05383, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09724e-06  1.09724e-06  3.34255e-07
      low eigenvalue method done, cpu time[sec] = 2.0549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-06  3.34e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.42e-08  3.34e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.34255e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10084e-24  2.54978e-25  7.38612e-27  4.17286e-26  1.34966e-27  4.69526e-27  1.00317e-31    5.753e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         5.59548e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.272777, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.94395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3009.35      581.759      159.807      191.978       21.958      2365.18       276.26      1.36598
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01846, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002064, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.07976e-07  9.07976e-07  2.58092e-07
      low eigenvalue method done, cpu time[sec] = 2.05008, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.08e-07  2.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.76e-08  2.58e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.58091e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60312e-25  1.88216e-25   5.5603e-27  3.01677e-26  9.96321e-28  4.21714e-27  1.01207e-31  5.75312e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75196, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         6.99435e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.268908, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9255, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2407.48      465.408      127.845      153.583      17.5664      1892.15      221.008      1.09279
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002038, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06824, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    7.802e-07  7.80201e-07  2.09245e-07
      low eigenvalue method done, cpu time[sec] = 2.06931, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-07  2.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.64e-08  2.09e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.09245e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.03527e-25  1.47398e-25  4.42972e-27  2.33124e-26  7.82358e-28  3.82853e-27  1.02075e-31  5.75325e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.268767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.94232, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2006.23       387.84      106.538      127.986      14.6387      1576.79      184.174     0.910657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01593, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002037, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04637, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.87121e-07  6.87121e-07  1.75212e-07
      low eigenvalue method done, cpu time[sec] = 2.04744, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.87e-07  1.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.83e-08  1.75e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75212e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.9299e-25  1.20011e-25  3.66141e-27  1.88065e-26   6.3938e-28  3.50657e-27  1.02908e-31  5.75336e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74628, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         9.79209e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.277572, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93956, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1719.63      332.434      91.3181      109.702      12.5475      1351.53      157.863     0.780563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02055, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.15799e-07  6.15799e-07  1.50143e-07
      low eigenvalue method done, cpu time[sec] = 2.05208, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.16e-07   1.5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.21e-08   1.5e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.50143e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.10822e-25  1.00455e-25  3.10607e-27  1.56362e-26  5.37411e-28  3.23514e-27  1.03699e-31  5.75348e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1          1.1191e+10
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.274069, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93553, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1504.68       290.88      79.9033      95.9892       10.979      1182.59       138.13     0.682992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02823, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05888, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.59132e-07  5.59132e-07  1.30921e-07
      low eigenvalue method done, cpu time[sec] = 2.05996, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.59e-07  1.31e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-08  1.31e-07         1
         *Z       ---       ---  1.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30921e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.47356e-25  8.58509e-26   2.6866e-27   1.3295e-26  4.61233e-28  3.00291e-27  1.04442e-31   5.7536e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75892, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 660 K
      Energy reference = 35125 1/cm
      Energy step      = 114 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006942
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.340905
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.184248
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.189189
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.847993
         W1 Well: minimal relaxation eigenvalue = 0.0750217
         W1 Well: maximal relaxation eigenvalue = 0.978358
         W1 Well:       grid size = 362
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6142 1/cm
         B1 Barrier:        grid size = 309
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -100 1/cm
         B2 Barrier:        grid size = 307
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 127 1/cm
         B3 Barrier:        grid size = 349
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4661 1/cm
         B4 Barrier:        grid size = 363
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6257 1/cm
         B5 Barrier: nonpositive number of states at -23129 1/cm => truncating
         B5 Barrier:        grid size = 511
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23129 1/cm
         B6 Barrier:        grid size = 295
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1494 1/cm
         B7 Barrier:        grid size = 267
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4686 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16771 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.91714, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 362
      MasterEquation::Barrier::truncate: real weight = 2.17031e+39
      MasterEquation::Barrier::truncate: effective weight = 1.12731e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 362
      MasterEquation::Barrier::truncate: real weight = 6.34626e+37
      MasterEquation::Barrier::truncate: effective weight = 3.29428e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6142  -6142 8.66e+08 7.47e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -100  4.3e+15
         B2    128 8.39e+14
         B3  -4661 2.31e+14
         B4  -6142 2.77e+14
         B5  -6142 3.18e+13
         B6   1495 3.41e+15
         B7   4687 4.01e+14
         B8  16771 2.05e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.86e-10  3.39e-10  1.14e-13  3.48e-15  4.31e-32  9.13e-08  0.000238  3.75e+08
          R  5.37e+09         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  2.95e+09      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2  8.78e+12  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3  2.87e+14  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4  2.32e+31  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5   1.1e+07   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6   4.2e+03  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  2.67e-09  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.01e+04  1.83e+04      6.17     0.189  2.33e-18  4.95e+06  1.29e+10  2.03e+22
          R  9.92e-05         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  5.45e-05      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2     0.162  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3       5.3  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4  4.28e+17  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5  2.02e-07   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6  7.75e-11  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  4.92e-23  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.93102, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+08
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.272913, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82574, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            62243.1      12143.3      3347.66      4014.25      460.256      49324.3      5812.92      29.7268
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.11368, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.030124, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17402, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.00387e-06  6.00389e-06  2.68545e-06
      low eigenvalue method done, cpu time[sec] = 2.17507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     6e-06  2.69e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.38e-07  2.69e-06         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68544e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69526e-23  6.68631e-24  2.07797e-25  1.82768e-24  4.85264e-26   1.8927e-26  3.30854e-31  2.92751e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75335, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+08
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.273192, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81162, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20747.7      4047.75      1115.89      1338.08      153.419      16441.4      1937.64      9.90892
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.11127, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.010799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15178, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51334e-06  3.51335e-06  1.44269e-06
      low eigenvalue method done, cpu time[sec] = 2.15286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.51e-06  1.44e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.09e-07  1.44e-06         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44269e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.89631e-24   3.1649e-24  8.88457e-26  6.41669e-25  1.84711e-26  1.89522e-26  3.31964e-31   2.9276e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71489, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.38501e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.27309, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.80512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12448.6      2428.65      669.532      802.851      92.0513      9864.86      1162.58      5.94535
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.11667, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.010894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15711, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.67643e-06  2.67643e-06  1.02704e-06
      low eigenvalue method done, cpu time[sec] = 2.15815, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-06  1.03e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-07  1.03e-06         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02704e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.2752e-24  2.09417e-24  5.83693e-26  3.87361e-25  1.15845e-26  1.82099e-26  3.33107e-31  2.92759e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71812, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.93902e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.274345, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8891.87      1734.75      478.237      573.465      65.7509      7046.33      830.417      4.24668
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.10576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003326, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13906, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21458e-06  2.21458e-06  8.04977e-07
      low eigenvalue method done, cpu time[sec] = 2.14009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.21e-06  8.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-07  8.05e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.04977e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.8118e-24  1.55986e-24  4.37221e-26  2.75085e-25  8.43613e-27  1.73442e-26  3.34274e-31  2.92761e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71832, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.49302e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.274155, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82655, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6915.9      1349.25      371.962      446.028      51.1396      5480.48       645.88      3.30297
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.10628, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002065, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13748, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.91145e-06  1.91145e-06   6.6389e-07
      low eigenvalue method done, cpu time[sec] = 2.13852, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.91e-06  6.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-07  6.64e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.6389e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.85663e-24  1.23734e-24  3.49839e-26  2.11767e-25  6.61703e-27  1.64982e-26  3.35458e-31  2.92765e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72055, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.27339, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82295, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6224.31      1214.33      334.766      401.425      46.0256      4932.43      581.292      2.97268
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.10764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1384, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.79436e-06  1.79436e-06  6.10655e-07
      low eigenvalue method done, cpu time[sec] = 2.13944, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.79e-06  6.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-07  6.11e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.10655e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.49069e-24  1.11952e-24  3.18002e-26  1.89461e-25  5.96654e-27  1.60957e-26  3.36055e-31  2.92764e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71633, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         4.15504e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.274485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82744, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4149.54      809.551      223.177      267.617      30.6838      3288.29      387.528      1.98178
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.10362, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002053, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13389, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39494e-06  1.39494e-06  4.35743e-07
      low eigenvalue method done, cpu time[sec] = 2.13496, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-06  4.36e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-07  4.36e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.35743e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.26508e-24  7.49477e-25  2.17787e-26  1.22261e-25  3.96727e-27  1.43196e-26  3.39053e-31  2.92772e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71606, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         5.54005e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.272907, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.84282, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3112.15      607.163      167.383      200.713      23.0128      2466.21      290.646      1.48634
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0857, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.11589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15701e-06  1.15701e-06  3.37653e-07
      low eigenvalue method done, cpu time[sec] = 2.11692, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-06  3.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.88e-08  3.38e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.37652e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.56055e-24  5.55068e-25   1.6458e-26  8.87151e-26  2.93988e-27  1.28918e-26  3.42028e-31  2.92778e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         6.92507e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.274982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.84352, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2489.72       485.73      133.906       160.57      18.4103      1972.97      232.517      1.18907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.09286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002932, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12543, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.95967e-07  9.95967e-07   2.7453e-07
      low eigenvalue method done, cpu time[sec] = 2.12648, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.96e-07  2.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.47e-08  2.75e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.7453e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.09976e-24  4.35845e-25  1.31517e-26  6.87574e-26  2.31561e-27  1.17279e-26  3.44926e-31  2.92784e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.273563, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.8307, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2074.77      404.775      111.589      133.808      15.3419      1644.14      193.764     0.990892
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.09991, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.78414e-07  8.78414e-07  2.30428e-07
      low eigenvalue method done, cpu time[sec] = 2.13132, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.78e-07   2.3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.45e-08   2.3e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.30427e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.77399e-24  3.55654e-25  1.08984e-26  5.56038e-26  1.89727e-27  1.07613e-26   3.4771e-31   2.9279e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71472, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         9.69509e+09
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.273366, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.85256, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1778.37       346.95      95.6475      114.693      13.1502      1409.27      166.083     0.849336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08708, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002023, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.11732, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.88187e-07  7.88187e-07  1.97865e-07
      low eigenvalue method done, cpu time[sec] = 2.11836, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.88e-07  1.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.67e-08  1.98e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97865e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.53126e-24  2.98272e-25   9.2658e-27  4.63281e-26  1.59819e-27   9.9446e-27  3.50353e-31  2.92796e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72454, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.10801e+10
      global relaxation matrix dimension = 362
      setting global matrices ... done, cpu time[sec] = 0.27344, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83101, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1556.08      303.581      83.6915      100.356      11.5064      1233.11      145.323     0.743169
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.09562, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002027, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12584, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.16397e-07  7.16397e-07  1.72846e-07
      low eigenvalue method done, cpu time[sec] = 2.12687, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.16e-07  1.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.04e-08  1.73e-07         1
         *Z       ---       ---  9.57e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.72846e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34339e-24  2.55341e-25  8.02994e-27  3.94645e-26   1.3743e-27   9.2445e-27  3.52839e-31  2.92803e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71207, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 670 K
      Energy reference = 35403 1/cm
      Energy step      = 116 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007616
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.343298
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.183291
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.178494
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.826385
         W1 Well: minimal relaxation eigenvalue = 0.0745694
         W1 Well: maximal relaxation eigenvalue = 0.977859
         W1 Well:       grid size = 359
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6241 1/cm
         B1 Barrier:        grid size = 306
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -93 1/cm
         B2 Barrier:        grid size = 304
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 138 1/cm
         B3 Barrier:        grid size = 345
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4617 1/cm
         B4 Barrier:        grid size = 359
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6241 1/cm
         B5 Barrier: nonpositive number of states at -23177 1/cm => truncating
         B5 Barrier:        grid size = 505
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23177 1/cm
         B6 Barrier:        grid size = 293
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1414 1/cm
         B7 Barrier:        grid size = 265
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4662 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16726 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.88865, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 359
      MasterEquation::Barrier::truncate: real weight = 3.69382e+37
      MasterEquation::Barrier::truncate: effective weight = 1.95145e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6241  -6241 8.39e+08  7.8e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -93 4.59e+15
         B2    139 9.04e+14
         B3  -4617  2.5e+14
         B4  -6241 2.99e+14
         B5  -6241 3.44e+13
         B6   1415 3.67e+15
         B7   4663 4.36e+14
         B8  16727 2.31e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.69e-10  3.06e-10   1.2e-13  3.88e-15  8.71e-32   7.9e-08  0.000187  2.01e+08
          R  5.92e+09         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1  3.27e+09     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2  8.31e+12   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3  2.58e+14  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  1.15e+31  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5  1.27e+07   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  5.35e+03  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7  4.98e-09  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.51e+03  6.36e+03       2.5    0.0806  1.81e-18  1.64e+06  3.88e+09  4.17e+21
          R  0.000285         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1  0.000157     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2       0.4   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3      12.4  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  5.53e+17  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5   6.1e-07   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  2.58e-10  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7   2.4e-22  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.9034, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.267017, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.74845, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              64342      12667.6      3504.59      4194.86      482.117      51404.7      6111.81      32.3064
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06026, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.160379, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.2494, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.21755e-06  6.21756e-06  2.82129e-06
      low eigenvalue method done, cpu time[sec] = 2.25077, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.22e-06  2.82e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.54e-07  2.82e-06         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.82128e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.74412e-23  1.85697e-23  5.75867e-25  5.03847e-24  1.34045e-25   5.5183e-26  1.07937e-30  1.41872e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74329, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.267906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.78086, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21447.3      4222.54       1168.2      1398.29      160.706      17134.9      2037.27      10.7688
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06002, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081447, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67071e-06  3.67072e-06  1.52975e-06
      low eigenvalue method done, cpu time[sec] = 2.17167, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-06  1.53e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.22e-07  1.53e-06         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52975e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79346e-23  8.86161e-24  2.48829e-25  1.78717e-24  5.15716e-26  5.53404e-26  1.08297e-30  1.41873e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.37151e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.267212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.76774, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12868.4      2533.52      700.918      838.971      96.4234      10280.9      1222.36      6.46129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.05863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09188, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80729e-06  2.80729e-06  1.09438e-06
      low eigenvalue method done, cpu time[sec] = 2.18097, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.81e-06  1.09e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.44e-07  1.09e-06         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09438e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.06324e-23  5.88971e-24  1.64367e-25  1.08457e-24  3.25219e-26  5.32677e-26  1.08667e-30  1.41877e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.68786, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.92011e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269539, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.7811, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9191.72      1809.66      500.656      599.265      68.8739      7343.53      873.116      4.61521
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07016, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.067583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16701, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.32877e-06  2.32877e-06   8.6073e-07
      low eigenvalue method done, cpu time[sec] = 2.16808, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-06  8.61e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.01e-07  8.61e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.6073e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.65373e-23  4.40096e-24   1.2359e-25  7.73044e-25  2.37741e-26  5.08192e-26  1.09045e-30  1.41877e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69586, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.46871e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.26962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.79215, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7149.11      1407.51      389.399      466.095      53.5686      5711.64       679.09      3.58961
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.065852, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16046, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0138e-06   2.0138e-06    7.118e-07
      low eigenvalue method done, cpu time[sec] = 2.16184, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.01e-06  7.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-07  7.12e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.11799e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38557e-23  3.49973e-24  9.91822e-26  5.96808e-25  1.87031e-26  4.84127e-26  1.09429e-30  1.41879e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69665, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270717, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.78342, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6434.2      1266.76      350.459      419.486      48.2117      5140.47      611.181      3.23064
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06908, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.069572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1675, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89192e-06  1.89193e-06  6.55488e-07
      low eigenvalue method done, cpu time[sec] = 2.16855, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-06  6.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-07  6.55e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.55488e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.28262e-23  3.16992e-24  9.02708e-26  5.34599e-25   1.6886e-26  4.72643e-26  1.09621e-30  1.41879e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69555, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         4.11452e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.268665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.7667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4289.47      844.508      233.639      279.657      32.1411      3426.98      407.454      2.15376
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079259, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17622, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47521e-06  1.47521e-06  4.69925e-07
      low eigenvalue method done, cpu time[sec] = 2.17729, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-06   4.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-07   4.7e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.69924e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.36807e-24  2.13136e-24  6.21361e-26  3.46667e-25  1.12849e-26  4.21769e-26  1.10591e-30  1.41882e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.68622, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         5.48602e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270698, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.78938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3217.1      633.381       175.23      209.743      24.1059      2570.24      305.591      1.61532
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06601, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.068628, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16425, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22618e-06  1.22618e-06  3.65409e-07
      low eigenvalue method done, cpu time[sec] = 2.16535, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-06  3.65e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-07  3.65e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.65409e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.37163e-24  1.58362e-24  4.71319e-26  2.52457e-25  8.39389e-27  3.80669e-26  1.11551e-30  1.41886e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70107, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         6.85753e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269617, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.7821, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2573.68      506.705      140.184      167.794      19.2847      2056.19      244.473      1.29226
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06547, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.066119, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16098, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05722e-06  1.05722e-06  2.97928e-07
      low eigenvalue method done, cpu time[sec] = 2.16264, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-06  2.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.95e-08  2.98e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.97928e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.06155e-24  1.24672e-24  3.77764e-26  1.96228e-25  6.63131e-27  3.47047e-26  1.12487e-30  1.41889e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69129, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.77853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2144.73      422.254       116.82      139.829      16.0706      1713.49      203.727      1.07688
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07343, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.068331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.33659e-07   9.3366e-07  2.50652e-07
      low eigenvalue method done, cpu time[sec] = 2.17174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.34e-07  2.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.88e-08  2.51e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.50652e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.13285e-24  1.01957e-24  3.13826e-26   1.5907e-25  5.44691e-27   3.1904e-26  1.13385e-30  1.41892e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69212, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         9.60054e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.268825, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.78801, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1838.34      361.932      100.131      119.853      13.7748      1468.71      174.623     0.923041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06676, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.064255, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15977, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.38678e-07  8.38678e-07  2.15665e-07
      low eigenvalue method done, cpu time[sec] = 2.16079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.39e-07  2.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.06e-08  2.16e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15665e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.43929e-24  8.56686e-25  2.67389e-26   1.3281e-25  4.59818e-27   2.9532e-26  1.14238e-30  1.41895e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69125, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1          1.0972e+10
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.79067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1608.55      316.691      87.6148      104.871      12.0529      1285.12      152.795     0.807661
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06947, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.063203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.63007e-07  7.63007e-07   1.8873e-07
      low eigenvalue method done, cpu time[sec] = 2.16291, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.63e-07  1.89e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.4e-08  1.89e-07         1
         *Z       ---       ---   7.2e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.8873e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.90142e-24    7.346e-25  2.32164e-26  1.13339e-25  3.96151e-27  2.74943e-26   1.1504e-30  1.41898e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69913, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 680 K
      Energy reference = 35682 1/cm
      Energy step      = 117 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007391
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.343085
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.182992
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.184953
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.828151
         W1 Well: minimal relaxation eigenvalue = 0.0741438
         W1 Well: maximal relaxation eigenvalue = 0.979439
         W1 Well:       grid size = 359
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6320 1/cm
         B1 Barrier:        grid size = 305
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -2 1/cm
         B2 Barrier:        grid size = 304
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 114 1/cm
         B3 Barrier:        grid size = 345
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4682 1/cm
         B4 Barrier:        grid size = 358
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6203 1/cm
         B5 Barrier: nonpositive number of states at -23169 1/cm => truncating
         B5 Barrier:        grid size = 503
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23168 1/cm
         B6 Barrier:        grid size = 293
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1401 1/cm
         B7 Barrier:        grid size = 265
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4677 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16728 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.89403, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 359
      MasterEquation::Barrier::truncate: real weight = 2.19497e+37
      MasterEquation::Barrier::truncate: effective weight = 1.16975e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6320  -6320 8.17e+08 8.14e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -2  4.9e+15
         B2    115 9.74e+14
         B3  -4682 2.71e+14
         B4  -6203 3.23e+14
         B5  -6320 3.72e+13
         B6   1402 3.95e+15
         B7   4678 4.74e+14
         B8  16729 2.59e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.5e-10  2.71e-10  1.24e-13  4.21e-15  1.68e-31   6.7e-08  0.000144  1.07e+08
          R  6.66e+09         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1  3.69e+09     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2  8.08e+12  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3  2.38e+14  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  5.95e+30  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  1.49e+07   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  6.94e+03  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7  9.35e-09   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.26e+03  2.27e+03      1.04    0.0353  1.41e-18  5.62e+05  1.21e+09  8.97e+20
          R  0.000794         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1   0.00044     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2     0.963  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3      28.3  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  7.09e+17  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  1.78e-06   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  8.27e-10  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7  1.11e-21   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.90833, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.26746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.76858, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            66489.7      13210.2      3667.52      4382.03      504.827      53551.8       6423.1      35.0764
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06673, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.145268, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.21997, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.6409e-06  6.64092e-06   3.0578e-06
      low eigenvalue method done, cpu time[sec] = 2.22105, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.64e-06  3.06e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.89e-07  3.06e-06         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.05779e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.28705e-22  5.00522e-23  1.54745e-24  1.34701e-23  3.59065e-25  1.56165e-25  3.40396e-30  6.56197e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75682, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.267669, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.80612, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22163.2       4403.4      1222.51      1460.68      168.276      17850.6      2141.03      11.6921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06541, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.109746, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18275, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.95429e-06  3.95429e-06   1.6727e-06
      low eigenvalue method done, cpu time[sec] = 2.18383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.95e-06  1.67e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-07  1.67e-06         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.6727e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.64201e-23  2.40642e-23  6.75523e-25   4.8256e-24  1.39585e-25  1.56711e-25  3.41528e-30  6.56241e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73546, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.35833e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.268478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.79534, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13297.9      2642.04      733.504      876.406      100.965      10710.4      1284.62      7.01527
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06144, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114821, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18376, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.03569e-06  3.03569e-06  1.20231e-06
      low eigenvalue method done, cpu time[sec] = 2.18484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.04e-06   1.2e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-07   1.2e-06         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2023e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.67006e-23  1.60611e-23  4.48594e-25   2.9435e-24   8.8495e-26  1.51038e-25  3.42691e-30   6.5624e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72308, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.90167e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.268306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81478, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9498.53      1887.17      523.932      626.005      72.1182      7650.25      917.585      5.01091
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06251, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1661, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.52449e-06  2.52449e-06  9.48788e-07
      low eigenvalue method done, cpu time[sec] = 2.16713, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.52e-06  9.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.17e-07  9.49e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.48787e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.55942e-23  1.20376e-23  3.38555e-25  2.10553e-24  6.49326e-26  1.44291e-25  3.43877e-30  6.56249e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           2.445e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.268711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7387.74       1467.8      407.502      486.892      56.0919      5950.19      713.678      3.89737
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091965, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.18709e-06  2.18709e-06  7.86683e-07
      low eigenvalue method done, cpu time[sec] = 2.16647, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-06  7.87e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.88e-07  7.87e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.86683e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.82983e-23  9.59543e-24  2.72478e-25  1.63004e-24  5.12305e-26  1.37636e-25  3.45079e-30  6.56251e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73375, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81851, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6648.97      1321.02      366.752      438.203      50.4827      5355.18       642.31      3.50764
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06095, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101883, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17045, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05631e-06  2.05631e-06  7.25269e-07
      low eigenvalue method done, cpu time[sec] = 2.17154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-06  7.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-07  7.25e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.25268e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.54918e-23  8.70017e-24  2.48303e-25  1.46187e-24  4.63106e-26  1.34454e-25  3.45683e-30  6.56254e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74058, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           4.075e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269386, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.80264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4432.65       880.68      244.501      292.135      33.6552      3570.12      428.207      2.33842
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07002, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104859, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60814e-06  1.60814e-06  5.22313e-07
      low eigenvalue method done, cpu time[sec] = 2.18365, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-06  5.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-07  5.22e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.22313e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.60374e-23  5.87418e-24  1.71759e-25  9.52485e-25  3.11027e-26  1.20315e-25  3.48718e-30  6.56267e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73251, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         5.43333e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270376, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.8188, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3324.48       660.51      183.376      219.102      25.2414      2677.59      321.155      1.75382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06659, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16542, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33946e-06  1.33946e-06  4.07522e-07
      low eigenvalue method done, cpu time[sec] = 2.16647, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-06  4.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-07  4.08e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.07522e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05564e-23  4.37827e-24  1.30761e-25  6.96084e-25  2.32196e-26  1.08845e-25  3.51723e-30  6.56283e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73161, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         6.79166e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269945, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83424, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2659.59      528.408      146.701      175.281      20.1931      2142.07      256.924      1.40305
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06752, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15498, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15674e-06  1.15674e-06  3.33167e-07
      low eigenvalue method done, cpu time[sec] = 2.15604, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-06  3.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.75e-08  3.33e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.33167e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6948e-23  3.45554e-24  1.05112e-25  5.42572e-25  1.83977e-26  9.94327e-26  3.54646e-30  6.56296e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73611, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271484, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83352, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2216.32       440.34      122.251      146.068      16.8276      1785.06      214.103      1.16921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06652, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07825, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15232, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02288e-06  1.02288e-06  2.80937e-07
      low eigenvalue method done, cpu time[sec] = 2.15335, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06  2.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.59e-08  2.81e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.80937e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.43834e-23  2.83194e-24  8.75353e-26  4.40868e-25  1.51487e-26  9.15715e-26  3.57451e-30  6.56309e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73221, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         9.50833e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270253, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83312, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1899.71      377.434      104.786      125.201      14.4236      1530.05      183.517      1.00218
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06847, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076374, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15238, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.19824e-07  9.19824e-07  2.42198e-07
      low eigenvalue method done, cpu time[sec] = 2.15346, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.2e-07  2.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.7e-08  2.42e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42198e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.24639e-23  2.38388e-24  7.47397e-26  3.68831e-25  1.28152e-26  8.48985e-26  3.60113e-30  6.56323e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73117, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.08667e+10
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.267034, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1662.24      330.255       91.688      109.551      12.6207      1338.79      160.577     0.876909
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06469, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090433, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16272, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.37617e-07  8.37617e-07  2.12316e-07
      low eigenvalue method done, cpu time[sec] = 2.16378, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.38e-07  2.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     7e-08  2.12e-07         1
         *Z       ---       ---  5.41e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.12316e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09723e-23  2.04747e-24   6.5014e-26   3.1532e-25  1.10613e-26  7.91546e-26  3.62618e-30  6.56337e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72561, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 690 K
      Energy reference = 35960 1/cm
      Energy step      = 119 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007269
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.340854
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.178896
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.177063
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.812366
         W1 Well: minimal relaxation eigenvalue = 0.0737066
         W1 Well: maximal relaxation eigenvalue = 0.97894
         W1 Well:       grid size = 356
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6404 1/cm
         B1 Barrier:        grid size = 303
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -96 1/cm
         B2 Barrier:        grid size = 301
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 141 1/cm
         B3 Barrier:        grid size = 341
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4619 1/cm
         B4 Barrier:        grid size = 355
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6284 1/cm
         B5 Barrier: nonpositive number of states at -23183 1/cm => truncating
         B5 Barrier:        grid size = 497
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23182 1/cm
         B6 Barrier:        grid size = 290
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1449 1/cm
         B7 Barrier:        grid size = 263
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4662 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16682 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.86353, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 356
      MasterEquation::Barrier::truncate: real weight = 1.32472e+37
      MasterEquation::Barrier::truncate: effective weight = 7.18111e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6404  -6404 7.95e+08 8.49e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -96 5.23e+15
         B2    142 1.05e+15
         B3  -4619 2.92e+14
         B4  -6284 3.49e+14
         B5  -6404 4.03e+13
         B6   1450 4.25e+15
         B7   4663 5.14e+14
         B8  16682  2.9e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.33e-10  2.39e-10  1.26e-13  4.52e-15  3.17e-31  5.67e-08  0.000111  5.76e+07
          R  7.52e+09         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1  4.18e+09     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2  7.91e+12  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3  2.21e+14  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  3.16e+30   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5  1.77e+07   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  8.98e+03  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7  1.74e-08  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       466       837     0.443    0.0158  1.11e-18  1.98e+05   3.9e+08  2.02e+20
          R   0.00215         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1   0.00119     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2      2.26  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3      63.2  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  9.02e+17   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5  5.04e-06   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  2.57e-09  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7  4.96e-21  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.87777, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+08
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.262867, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.64953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            68675.4      13768.3      3835.66      4574.87      528.277      55754.6      6745.25       38.026
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01768, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.180411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.05427e-06  7.05429e-06  3.29358e-06
      low eigenvalue method done, cpu time[sec] = 2.24336, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.05e-06  3.29e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.23e-07  3.29e-06         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.29357e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.38903e-22  1.30797e-22  4.03714e-24   3.4965e-23  9.33858e-25   4.2603e-25  1.03727e-29  2.90264e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.64911, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+08
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.263746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66361, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22891.8      4589.42      1278.55      1524.96      176.092      18584.9      2248.42      12.6753
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01639, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.23594e-06  4.23594e-06  1.81769e-06
      low eigenvalue method done, cpu time[sec] = 2.24032, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.24e-06  1.82e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-07  1.82e-06         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81768e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02889e-22  6.33833e-23  1.78021e-24  1.26494e-23   3.6676e-25  4.28506e-25   1.0407e-29  2.90268e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.65816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.34548e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.263232, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.65402, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13735.1      2753.65      767.132      914.974      105.655      11150.9      1349.05      7.60521
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01735, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178644, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22643, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.26417e-06  3.26417e-06  1.31266e-06
      low eigenvalue method done, cpu time[sec] = 2.24134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.26e-06  1.31e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.81e-07  1.31e-06         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.31266e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5121e-22  4.24853e-23  1.18836e-24  7.75481e-24  2.33747e-25  4.13928e-25  1.04423e-29  2.90269e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.64907, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.88367e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.263276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66085, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9810.78      1966.89      547.952      653.553      75.4682      7964.95      963.607      5.43229
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01762, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178671, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22627, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72117e-06  2.72118e-06  1.03932e-06
      low eigenvalue method done, cpu time[sec] = 2.24163, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.72e-06  1.04e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.33e-07  1.04e-06         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03932e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21979e-22  3.19398e-23  9.00129e-25  5.56671e-24   1.7214e-25  3.96205e-25  1.04782e-29  2.90273e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.65816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.42186e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.263311, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66258, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7630.6      1529.81      426.185      508.319      58.6975      6194.96      749.472      4.22512
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02219, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23059, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.3618e-06   2.3618e-06  8.63986e-07
      low eigenvalue method done, cpu time[sec] = 2.24578, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.36e-06  8.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-07  8.64e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.63985e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02718e-22  2.55213e-23  7.26505e-25  4.32142e-24  1.36202e-25  3.78566e-25  1.05145e-29  2.90276e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.66658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267002, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.65929, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6867.54      1376.83      383.566      457.487      52.8277      5575.46      674.525       3.8026
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178557, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22699, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22227e-06  2.22227e-06  7.97428e-07
      low eigenvalue method done, cpu time[sec] = 2.2422, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-06  7.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.89e-07  7.97e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.97427e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.52935e-23  2.31642e-23  6.62854e-25  3.88015e-24  1.23273e-25  3.70096e-25  1.05328e-29  2.90277e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.66226, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         4.03644e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.264858, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66229, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4578.36      917.884      255.711      304.991      35.2185      3716.97      449.683      2.53507
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02233, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.17822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23076, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74303e-06  1.74303e-06  5.76856e-07
      low eigenvalue method done, cpu time[sec] = 2.24621, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-06  5.77e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-07  5.77e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.76856e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.02135e-23  1.57055e-23  4.60745e-25  2.53998e-24  8.31953e-26  3.32254e-25  1.06245e-29  2.90283e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.66263, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         5.38192e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.26419, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.65531, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3433.77      688.413      191.783      228.744      26.4139      2787.73      337.262       1.9013
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01605, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178654, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.45482e-06  1.45482e-06  4.51581e-07
      low eigenvalue method done, cpu time[sec] = 2.24005, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-06  4.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-07  4.52e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.51581e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.56133e-23  1.17426e-23   3.5203e-25   1.8627e-24  6.23336e-26  3.01364e-25  1.07152e-29  2.90289e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.65441, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1          6.7274e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.264489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66827, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2747.02       550.73      153.426      182.995      21.1311      2230.18       269.81      1.52104
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178117, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22466, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.25837e-06  1.25837e-06  3.70177e-07
      low eigenvalue method done, cpu time[sec] = 2.23989, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-06   3.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07   3.7e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.70176e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.59712e-23  9.29118e-24  2.83795e-25  1.45594e-24  4.95315e-26  2.75904e-25  1.08033e-29  2.90295e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.66216, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.264344, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2289.18      458.942      127.855      152.496      17.6092      1858.49      224.842      1.26753
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.177474, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22792, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11419e-06  1.11419e-06  3.12846e-07
      low eigenvalue method done, cpu time[sec] = 2.2432, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-06  3.13e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.32e-08  3.13e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.12846e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91004e-23  7.63054e-24  2.36908e-25  1.18577e-24  4.08828e-26  2.54571e-25  1.08879e-29  2.90301e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.66013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         9.41836e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.264671, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1962.16      393.379       109.59      130.711      15.0936      1592.99      192.721      1.08646
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0184, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.178035, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22614, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00302e-06  1.00302e-06  2.70229e-07
      low eigenvalue method done, cpu time[sec] = 2.24143, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-06   2.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.36e-08   2.7e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.70229e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.39464e-23  6.43501e-24  2.02697e-25  9.94002e-25  3.46572e-26  2.36414e-25  1.09682e-29  2.90307e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.67189, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.07638e+10
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.264683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68869, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1716.89      344.206      95.8915      114.372      13.2069      1393.87      168.631     0.950651
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.177753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.232, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.14233e-07  9.14233e-07  2.37293e-07
      low eigenvalue method done, cpu time[sec] = 2.24234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.14e-07  2.37e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.6e-08  2.37e-07         1
         *Z       ---       ---  4.09e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.37293e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.9934e-23  5.53578e-24  1.76642e-25  8.51281e-25  2.99684e-26   2.2075e-25  1.10437e-29  2.90313e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.67201, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 700 K
      Energy reference = 36238 1/cm
      Energy step      = 121 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006919
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.329972
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.176958
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.178319
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.790696
         W1 Well: minimal relaxation eigenvalue = 0.0732786
         W1 Well: maximal relaxation eigenvalue = 0.978456
         W1 Well:       grid size = 353
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6474 1/cm
         B1 Barrier:        grid size = 300
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -61 1/cm
         B2 Barrier:        grid size = 298
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 180 1/cm
         B3 Barrier:        grid size = 338
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 351
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23173 1/cm => truncating
         B5 Barrier:        grid size = 491
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23172 1/cm
         B6 Barrier:        grid size = 288
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1390 1/cm
         B7 Barrier:        grid size = 261
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4657 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.83055, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 353
      MasterEquation::Barrier::truncate: real weight = 8.13069e+36
      MasterEquation::Barrier::truncate: effective weight = 4.48187e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6474  -6474 7.77e+08 8.86e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -61 5.58e+15
         B2    181 1.13e+15
         B3  -4660 3.16e+14
         B4  -6232 3.76e+14
         B5  -6474 4.35e+13
         B6   1391 4.57e+15
         B7   4658 5.58e+14
         B8  16757 3.24e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.16e-10  2.07e-10  1.26e-13  4.74e-15  5.73e-31  4.71e-08  8.46e-05  3.09e+07
          R  8.65e+09         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1  4.83e+09     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2  7.93e+12       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3  2.11e+14  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4  1.75e+30  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5  2.12e+07   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  1.18e+04  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  3.24e-08  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       177       317     0.193   0.00726  8.77e-19  7.21e+04   1.3e+08  4.73e+19
          R   0.00565         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1   0.00315     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2      5.17       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3       138  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4  1.14e+18  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5  1.39e-05   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  7.71e-09  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  2.11e-20  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.84524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+08
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.259112, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.60484, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70904.8      14343.6      4009.59      4774.02      552.549        58020      7079.44       41.172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97167, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.17582, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1774, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.64168e-06   7.6417e-06  3.61813e-06
      low eigenvalue method done, cpu time[sec] = 2.19266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.64e-06  3.62e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.72e-07  3.62e-06         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.61811e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.67384e-22  3.32504e-22    1.024e-23  8.82521e-23  2.36155e-24  1.13996e-24  3.06195e-29  1.23054e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.54241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+08
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.259036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.57556, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23634.9      4781.21      1336.53      1591.34      184.183        19340      2359.81       13.724
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96832, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.175318, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1745, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.6264e-06  4.62641e-06  2.01394e-06
      low eigenvalue method done, cpu time[sec] = 2.18951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.63e-06  2.01e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     4e-07  2.01e-06         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01394e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.23451e-22  1.62333e-22  4.56005e-24  3.22336e-23  9.36762e-25  1.14605e-24  3.07204e-29  1.23057e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.50766, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.33294e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.258607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.59585, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14181      2868.73      801.919      954.804       110.51        11604      1415.89      8.23441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96924, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.175352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.57819e-06  3.57819e-06  1.46102e-06
      low eigenvalue method done, cpu time[sec] = 2.18874, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.58e-06  1.46e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-07  1.46e-06         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46102e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91823e-22  1.09258e-22  3.05954e-24  1.98587e-23  6.00096e-25   1.1077e-24  3.08239e-29  1.23058e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.52619, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.86611e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.259835, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.59843, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10129.3      2049.09      572.799      682.003      78.9356      8288.57      1011.35      5.88172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97115, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.175774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17705, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.99015e-06  2.99015e-06  1.16051e-06
      low eigenvalue method done, cpu time[sec] = 2.1934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.99e-06  1.16e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-07  1.16e-06         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16051e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.17062e-22  8.23807e-23  2.32573e-24  1.43045e-23  4.43519e-25   1.0612e-24  3.09292e-29   1.2306e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.53962, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.39928e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.61435, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7878.31      1593.74       445.51      530.447      61.3944      6446.67      786.604      4.57467
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9688, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.174682, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17339, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.59991e-06  2.59991e-06  9.67173e-07
      low eigenvalue method done, cpu time[sec] = 2.1895, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.6e-06  9.67e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-07  9.67e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.67172e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.67648e-22  6.59788e-23  1.88233e-24  1.11343e-23  3.51904e-25  1.01492e-24  3.10359e-29  1.23061e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.55133, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260216, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.61281, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7090.48      1434.36      400.959      477.402      55.2549         5802      707.944       4.1172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97518, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.17412, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17901, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.44816e-06  2.44816e-06  8.93639e-07
      low eigenvalue method done, cpu time[sec] = 2.1951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-06  8.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-07  8.94e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.93638e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.48565e-22  5.99455e-23  1.71946e-24  1.00088e-23  3.18879e-25  9.92689e-25  3.10894e-29  1.23061e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.55801, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         3.99881e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.60372, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4726.99      956.243      267.306      318.268      36.8366         3868      471.963       2.7448
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96754, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.174004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17147, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.92577e-06  1.92577e-06  6.49277e-07
      low eigenvalue method done, cpu time[sec] = 2.18754, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.93e-06  6.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-07  6.49e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49277e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.83924e-22  4.08081e-23  1.20086e-24  6.58195e-24  2.16234e-25   8.9321e-25   3.1358e-29  1.23064e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.54034, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         5.33174e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.60772, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3545.24      717.182       200.48      238.701      27.6275         2901      353.972       2.0586
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97103, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.173363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.61063e-06  1.61063e-06   5.0993e-07
      low eigenvalue method done, cpu time[sec] = 2.19067, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-06   5.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.35e-07   5.1e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.0993e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46142e-22   3.0604e-23  9.20741e-25  4.84329e-24  1.62584e-25  8.11804e-25  3.16233e-29  1.23066e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.54484, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         6.66468e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.61606, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2836.19      573.746      160.384      190.961       22.102       2320.8      283.178      1.64688
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97747, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.173326, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39534e-06  1.39534e-06    4.191e-07
      low eigenvalue method done, cpu time[sec] = 2.19679, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-06  4.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.17e-07  4.19e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.191e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21113e-22  2.42743e-23  7.44362e-25  3.79596e-24  1.29558e-25  7.44554e-25   3.1881e-29  1.23069e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.55929, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.61136, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2363.49      478.121      133.653      159.134      18.4183         1934      235.981       1.3724
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97212, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.174346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23705e-06  1.23705e-06  3.54969e-07
      low eigenvalue method done, cpu time[sec] = 2.19283, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-06  3.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-07  3.55e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.54969e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03232e-22  1.99767e-23  6.22847e-25  3.09861e-24  1.07188e-25  6.88087e-25  3.21281e-29  1.23071e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.55288, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         9.33055e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260263, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.62379, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2025.85      409.818       114.56      136.401      15.7871      1657.71       202.27      1.17634
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96629, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.173265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11483e-06  1.11483e-06  3.07195e-07
      low eigenvalue method done, cpu time[sec] = 2.18417, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-06  3.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.26e-08  3.07e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.07195e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.97911e-23  1.68768e-23  5.33986e-25  2.60257e-24  9.10505e-26  6.39936e-25  3.23626e-29  1.23074e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.55076, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.06635e+10
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.259897, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.62335, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1772.62      358.591       100.24      119.351      13.8137       1450.5      176.986       1.0293
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.173228, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.17564, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.01709e-06  1.01709e-06  2.70202e-07
      low eigenvalue method done, cpu time[sec] = 2.19229, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06   2.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.43e-08   2.7e-07         1
         *Z       ---       ---  3.08e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.70202e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.93074e-23  1.45412e-23  4.66179e-25  2.23273e-24  7.88731e-26  5.98324e-25  3.25832e-29  1.23077e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.56148, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 800 K
      Energy reference = 39018 1/cm
      Energy step      = 138 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -84.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007324
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.309657
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.158884
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.159612
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.695205
         W1 Well: minimal relaxation eigenvalue = 0.0692823
         W1 Well: maximal relaxation eigenvalue = 0.979927
         W1 Well:       grid size = 335
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7211 1/cm
         B1 Barrier:        grid size = 283
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -35 1/cm
         B2 Barrier:        grid size = 282
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 102 1/cm
         B3 Barrier:        grid size = 317
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4727 1/cm
         B4 Barrier:        grid size = 328
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6245 1/cm
         B5 Barrier: nonpositive number of states at -23634 1/cm => truncating
         B5 Barrier:        grid size = 454
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23634 1/cm
         B6 Barrier:        grid size = 272
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1482 1/cm
         B7 Barrier:        grid size = 249
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4656 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16662 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.67263, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 335
      MasterEquation::Barrier::truncate: real weight = 1.33608e+35
      MasterEquation::Barrier::truncate: effective weight = 8.40085e+31
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7211  -7211 6.08e+08 1.34e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -35 1.04e+16
         B2    103 2.31e+15
         B3  -4727 6.66e+14
         B4  -6245  7.8e+14
         B5  -7211 9.23e+13
         B6   1483 9.21e+15
         B7   4657 1.22e+15
         B8  16663 9.38e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.36e-11  5.87e-11   1.2e-13  6.91e-15  9.22e-29  9.18e-09  7.68e-06   1.4e+05
          R  2.98e+10         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1   1.7e+10     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2  8.31e+12       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  1.45e+14  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  1.08e+28  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5  1.09e+08   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6   1.3e+05  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  7.15e-06   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1    0.0423    0.0739  0.000151  8.69e-06  1.16e-19      11.6  9.66e+03  1.76e+14
          R      23.7         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1      13.5     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2   6.6e+03       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  1.15e+05  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  8.62e+18  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5    0.0866   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6  0.000103  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  5.69e-15   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
   MasterEquation::set:  done, cpu time[sec] = 1.68703, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+08
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.233462, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.14873, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            95646.2      21125.6      6097.08      7142.41      844.789      84308.2      11147.5       85.909
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70395, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15864, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.53096e-05  1.53098e-05  8.09681e-06
      low eigenvalue method done, cpu time[sec] = 1.90301, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.53e-05   8.1e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-06   8.1e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.09675e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76404e-18  9.93347e-19  3.01407e-20  2.48502e-19  6.76723e-21  5.16597e-21  3.41958e-25  3.12653e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.72052, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+08
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.233894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31882.1      7041.86      2032.36       2380.8      281.596      28102.7      3715.84      28.6363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70516, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88776, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.93523e-06  9.93528e-06  4.85658e-06
      low eigenvalue method done, cpu time[sec] = 1.90134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.94e-06  4.86e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.28e-07  4.86e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.85656e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.78858e-18  5.17915e-19  1.46406e-20  9.87316e-20   2.9313e-21  5.23355e-21  3.43038e-25  3.12658e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.73472, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          1.2221e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.233541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15308, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19129.2      4225.12      1219.42      1428.48      168.958      16861.6       2229.5      17.1818
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70492, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.155181, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88738, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.93334e-06  7.93337e-06  3.66729e-06
      low eigenvalue method done, cpu time[sec] = 1.90114, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.93e-06  3.67e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.56e-07  3.67e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.66728e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39098e-18  3.61559e-19  1.02767e-20  6.35472e-20   1.9654e-21  5.11916e-21  3.44135e-25  3.12662e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.72353, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         1.71094e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.234298, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.1521, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13663.7      3017.94      871.011      1020.34      120.684        12044       1592.5      12.2727
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70353, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88576, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.7714e-06  6.77142e-06  2.99708e-06
      low eigenvalue method done, cpu time[sec] = 1.89987, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.77e-06     3e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.56e-07     3e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99707e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.15678e-18  2.79878e-19  8.06302e-21  4.72005e-20   1.4997e-21  4.96296e-21  3.45243e-25  3.12664e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.72056, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         2.19978e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.232864, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15379, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10627.4      2347.29      677.453      793.601      93.8654      9367.57      1238.61      9.54545
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70702, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155668, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89061, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.98222e-06  5.98223e-06  2.55425e-06
      low eigenvalue method done, cpu time[sec] = 1.90546, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.98e-06  2.55e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.89e-07  2.55e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.55424e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.9778e-19  2.28868e-19  6.68877e-21  3.76299e-20  1.21987e-21  4.79977e-21  3.46356e-25  3.12667e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.7329, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.235284, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.15395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9564.62      2112.56      609.708      714.241      84.4789      8430.82      1114.75       8.5909
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7053, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88732, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.67096e-06  5.67098e-06  2.38294e-06
      low eigenvalue method done, cpu time[sec] = 1.90228, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.67e-06  2.38e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.63e-07  2.38e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.38294e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.35331e-19  2.09824e-19  6.17518e-21  3.41765e-20  1.11727e-21  4.71941e-21  3.46913e-25  3.12668e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.72875, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         3.66629e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.236059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6376.41      1408.37      406.472      476.161      56.3192      5620.54      743.168      5.72727
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7045, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88759, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.57835e-06  4.57836e-06  1.79969e-06
      low eigenvalue method done, cpu time[sec] = 1.90244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-06   1.8e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.71e-07   1.8e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79969e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.18563e-19   1.4813e-19  4.49915e-21   2.3418e-20  7.90617e-22  4.34764e-21  3.49682e-25  3.12675e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.74379, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         4.88839e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.234903, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16789, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4782.31      1056.28      304.854       357.12      42.2394      4215.41      557.376      4.29545
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70487, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155291, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88702, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.90094e-06  3.90095e-06  1.45499e-06
      low eigenvalue method done, cpu time[sec] = 1.90182, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.9e-06  1.45e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-07  1.45e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45499e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.87272e-19  1.14173e-19  3.55996e-21   1.7767e-20   6.1359e-22  4.03051e-21  3.52389e-25  3.12681e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.74338, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         6.11049e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.235217, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.16536, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3825.85      845.024      243.883      285.696      33.7915      3372.33      445.901      3.43636
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70139, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.155457, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88421, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.42875e-06  3.42875e-06  1.22403e-06
      low eigenvalue method done, cpu time[sec] = 1.89899, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.43e-06  1.22e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.75e-07  1.22e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22403e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.97883e-19  9.25847e-20  2.95156e-21  1.42706e-20  5.01519e-22  3.76043e-21  3.55001e-25  3.12687e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.73708, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.235463, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17494, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3188.21      704.186      203.236       238.08      28.1596      2810.27      371.584      2.86363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.156282, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88924, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.07596e-06  3.07596e-06  1.05725e-06
      low eigenvalue method done, cpu time[sec] = 1.90403, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.08e-06  1.06e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-07  1.06e-06         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05724e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.32574e-19  7.76264e-20  2.52252e-21  1.18907e-20  4.23845e-22  3.52802e-21  3.57496e-25  3.12693e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.75537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         8.55469e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.235414, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17358, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2732.75      603.588      174.202      204.069      24.1368       2408.8      318.501      2.45454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70895, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15556, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89191, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7999e-06   2.7999e-06  9.30583e-07
      low eigenvalue method done, cpu time[sec] = 1.90679, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-06  9.31e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-07  9.31e-07         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.30582e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.82533e-19  6.66477e-20  2.20246e-21  1.01658e-20  3.66697e-22   3.3257e-21  3.59861e-25    3.127e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.7545, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         9.77678e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.235541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.17832, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2391.15       528.14      152.427       178.56      21.1197       2107.7      278.688      2.14773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.154158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.57661e-06  2.57661e-06  8.30845e-07
      low eigenvalue method done, cpu time[sec] = 1.90823, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-06  8.31e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.05e-07  8.31e-07         1
         *Z       ---       ---   2.7e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.30845e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.42846e-19  5.82491e-20  1.95394e-21  8.85834e-21  3.22826e-22  3.14768e-21  3.62088e-25  3.12706e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.76099, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 900 K
      Energy reference = 41798 1/cm
      Energy step      = 155 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -83.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006746
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.285695
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.146124
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.150545
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.622597
         W1 Well: minimal relaxation eigenvalue = 0.0657202
         W1 Well: maximal relaxation eigenvalue = 0.981591
         W1 Well:       grid size = 320
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7802 1/cm
         B1 Barrier:        grid size = 270
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 269
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 103 1/cm
         B3 Barrier:        grid size = 300
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4702 1/cm
         B4 Barrier:        grid size = 310
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6252 1/cm
         B5 Barrier: nonpositive number of states at -23147 1/cm => truncating
         B5 Barrier:        grid size = 419
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23146 1/cm
         B6 Barrier:        grid size = 260
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1497 1/cm
         B7 Barrier:        grid size = 240
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4597 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16687 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.55119, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 320
      MasterEquation::Barrier::truncate: real weight = 6.29584e+33
      MasterEquation::Barrier::truncate: effective weight = 4.44632e+30
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7802  -7802 4.99e+08    2e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 1.88e+16
         B2    104 4.53e+15
         B3  -4702 1.35e+15
         B4  -6252 1.55e+15
         B5  -7802 1.87e+14
         B6   1498 1.78e+16
         B7   4598 2.53e+15
         B8  16688 2.47e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.27e-12   1.6e-11  8.33e-14  6.65e-15  3.46e-27  1.83e-09  8.45e-07  1.52e+03
          R  1.08e+11         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  6.25e+10     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2   1.2e+13       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3   1.5e+14  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  2.89e+26  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5  5.48e+08   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6  1.18e+06   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7  0.000659  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.43e-05  0.000111  5.77e-07  4.61e-08  2.39e-20    0.0127      5.86  1.05e+10
          R  1.56e+04         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  9.01e+03     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2  1.73e+06       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3  2.17e+07  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  4.18e+19  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5        79   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6     0.171   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7  9.51e-11  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
   MasterEquation::set:  done, cpu time[sec] = 1.56557, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+08
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.213568, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79575, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             124759      29977.2      8915.85      10294.5      1241.44       117798      16746.2      163.409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50406, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139695, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66849, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.34987e-05  3.34994e-05  1.93695e-05
      low eigenvalue method done, cpu time[sec] = 1.68118, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.35e-05  1.94e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.77e-06  1.94e-05         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93691e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.9984e-15  1.37505e-15  4.66393e-16  1.40669e-17  1.11659e-16  3.08827e-18  3.44428e-18  4.67839e-22  4.90266e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.08988, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+08
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.213083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78056, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41586.4       9992.4      2971.95      3431.49      413.812        39266      5582.05      54.4698
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50458, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.138706, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66828, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.29597e-05    2.296e-05  1.23381e-05
      low eigenvalue method done, cpu time[sec] = 1.68088, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.3e-05  1.23e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-06  1.23e-05         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.23379e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22125e-15  9.40753e-16  2.56673e-16  7.33531e-18  4.75136e-17  1.43751e-18  3.50927e-18  4.69255e-22   4.9027e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.07182, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.13212e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.213488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78091, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24951.9      5995.44      1783.17       2058.9      248.287      23559.6      3349.23      32.6819
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50609, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.13924, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.67039, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88165e-05  1.88167e-05  9.62375e-06
      low eigenvalue method done, cpu time[sec] = 1.68325, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-05  9.62e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-06  9.62e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.62366e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.99201e-16  7.54469e-16  1.84662e-16  5.34289e-18  3.17022e-17  1.00066e-18  3.46384e-18  4.70677e-22  4.90273e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.07255, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.58497e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.213767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77844, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17822.8      4282.46      1273.69      1470.64      177.348      16828.3      2392.31      23.3442
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.140878, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63453e-05  1.63454e-05  8.04872e-06
      low eigenvalue method done, cpu time[sec] = 1.68018, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-05  8.05e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-06  8.05e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.04865e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16  6.41439e-16  1.46083e-16  4.30228e-18  2.41516e-17  7.83909e-19  3.38892e-18    4.721e-22  4.90277e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.06836, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.03782e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.213586, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78193, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13862.1       3330.8       990.65      1143.83      137.937      13088.7      1860.68      18.1566
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50489, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138942, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.669, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.46348e-05   1.4635e-05  6.98533e-06
      low eigenvalue method done, cpu time[sec] = 1.68244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.46e-05  6.99e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-06  6.99e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.98528e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  5.63019e-16  1.21533e-16  3.64209e-18  1.96399e-17   6.5087e-19  3.30582e-18  4.73521e-22   4.9028e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.07547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.212966, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78355, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12475.9      2997.72      891.585      1029.45      124.144      11779.8      1674.62      16.3409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50185, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.140233, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.667, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39524e-05  1.39525e-05   6.5683e-06
      low eigenvalue method done, cpu time[sec] = 1.67965, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-05  6.57e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-06  6.57e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.56825e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.66134e-16  5.31792e-16  1.12257e-16   3.3919e-18  1.79904e-17  6.01419e-19  3.26377e-18  4.74228e-22  4.90282e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.07482, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         3.39637e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.212989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78967, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8317.29      1998.48       594.39      686.299      82.7624      7853.21      1116.41       10.894
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50341, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139233, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66738, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15175e-05  1.15176e-05  5.11992e-06
      low eigenvalue method done, cpu time[sec] = 1.68024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-05  5.12e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.07e-07  5.12e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.11989e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.55112e-16   4.2121e-16  8.16819e-17  2.55897e-18  1.27554e-17  4.40872e-19  3.06236e-18  4.77721e-22  4.90291e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.08068, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         4.52849e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.21362, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6237.97      1498.86      445.793      514.724      62.0718      5889.91      837.308      8.17047
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50531, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139091, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66848, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.97296e-06    9.973e-06  4.23869e-06
      low eigenvalue method done, cpu time[sec] = 1.68134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.97e-06  4.24e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.81e-07  4.24e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.23867e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  3.52262e-16  6.44119e-17  2.07811e-18  9.92723e-18  3.51273e-19  2.88353e-18  4.81107e-22  4.90301e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.09025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         5.66062e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.214371, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79976, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4990.37      1199.09      356.634      411.779      49.6574      4711.92      669.846      6.53638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51033, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6741, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.87774e-06  8.87777e-06  3.63484e-06
      low eigenvalue method done, cpu time[sec] = 1.6873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.88e-06  3.63e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.92e-07  3.63e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.63482e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  3.04256e-16  5.32083e-17  1.75932e-18  8.13871e-18  2.93243e-19   2.7269e-18  4.84357e-22   4.9031e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.10101, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.214631, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79861, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4158.64       999.24      297.195      343.149      41.3812       3926.6      558.205      5.44698
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139438, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.04814e-06  8.04817e-06  3.19062e-06
      low eigenvalue method done, cpu time[sec] = 1.6822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.05e-06  3.19e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.25e-07  3.19e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.19061e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.68532e-16  4.53148e-17  1.53018e-18  6.89917e-18  2.52258e-19  2.58914e-18  4.87455e-22  4.90319e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.09284, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         7.92486e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.214081, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79439, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3564.55      856.492      254.739      294.128      35.4696      3365.66      478.462      4.66884
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6699, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.39148e-06   7.3915e-06  2.84791e-06
      low eigenvalue method done, cpu time[sec] = 1.6828, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.39e-06  2.85e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-07  2.85e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.8479e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.40726e-16  3.94377e-17  1.35644e-18  5.98674e-18  2.21615e-19  2.46701e-18  4.90388e-22  4.90329e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.08969, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         9.05698e+09
      global relaxation matrix dimension = 320
      setting global matrices ... done, cpu time[sec] = 0.214379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.81012, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3118.98       749.43      222.896      257.362      31.0359      2944.95      418.654      4.08524
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50387, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138779, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66774, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.85505e-06  6.85506e-06   2.5743e-06
      low eigenvalue method done, cpu time[sec] = 1.68053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-06  2.57e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.29e-07  2.57e-06         1
         *Z       ---       ---  3.63e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57429e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16   2.1837e-16  3.48849e-17  1.21959e-18   5.2857e-18  1.97755e-19  2.35786e-18  4.93154e-22  4.90338e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.10465, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1000 K
      Energy reference = 44578 1/cm
      Energy step      = 172 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -81.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006869
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.272104
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.13551
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.116271
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.567722
         W1 Well: minimal relaxation eigenvalue = 0.0623841
         W1 Well: maximal relaxation eigenvalue = 0.983709
         W1 Well:       grid size = 309
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -8570 1/cm
         B1 Barrier:        grid size = 260
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -141 1/cm
         B2 Barrier:        grid size = 258
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 286
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4614 1/cm
         B4 Barrier:        grid size = 296
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6334 1/cm
         B5 Barrier: nonpositive number of states at -23706 1/cm => truncating
         B5 Barrier:        grid size = 397
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23706 1/cm
         B6 Barrier:        grid size = 251
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1405 1/cm
         B7 Barrier:        grid size = 232
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4674 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16714 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.43062, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 309
      MasterEquation::Barrier::truncate: real weight = 6.09148e+32
      MasterEquation::Barrier::truncate: effective weight = 4.77383e+29
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -8570  -8570 3.82e+08 2.94e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -141 3.27e+16
         B2    202  8.5e+15
         B3  -4614 2.62e+15
         B4  -6334 2.98e+15
         B5  -8570 3.66e+14
         B6   1406  3.3e+16
         B7   4675 5.02e+15
         B8  16714 5.99e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.6e-12  6.18e-12   6.7e-14  6.99e-15   6.8e-26  5.37e-10  1.55e-07      44.1
          R  2.78e+11         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  1.62e+11     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2  1.49e+13      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3  1.43e+14       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4  1.47e+25  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5  1.86e+09    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6  6.46e+06  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7    0.0227  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.59e-07  6.17e-07  6.68e-09  6.97e-10  6.78e-21  5.36e-05    0.0154   4.4e+06
          R  2.79e+06         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  1.62e+06     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2   1.5e+08      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3  1.44e+09       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4  1.47e+20  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5  1.87e+04    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6      64.8  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7  2.27e-07  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
   MasterEquation::set:  done, cpu time[sec] = 1.44443, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199985, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59405, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             157508      40958.2      12613.4      14376.3      1764.16       158702      24184.5      288.446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35849, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51106, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.45472e-05   5.4549e-05  3.34943e-05
      low eigenvalue method done, cpu time[sec] = 1.52352, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.45e-05  3.35e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.35e-06  3.35e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.34932e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.63234e-13   1.8647e-13  6.00342e-14   1.8101e-15  1.38971e-14  3.89804e-16  5.99931e-16  1.46967e-19  1.09248e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68318, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199923, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.55934, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            52502.8      13652.7      4204.46      4792.11      588.052      52900.7      8061.51      96.1488
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128415, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51277, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.90324e-05  3.90333e-05  2.24121e-05
      low eigenvalue method done, cpu time[sec] = 1.52509, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.9e-05  2.24e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.05e-06  2.24e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.24116e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.76081e-13   1.3349e-13  3.45591e-14  1.00131e-15  6.26061e-15  1.92658e-16  6.13912e-16  1.47395e-19  1.09249e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.65384, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1          1.0573e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.198898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56254, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31501.7      8191.64      2522.68      2875.27      352.831      31740.4       4836.9      57.6893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36079, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.12849, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51291, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.26699e-05  3.26705e-05  1.79546e-05
      low eigenvalue method done, cpu time[sec] = 1.52522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.27e-05   1.8e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-06   1.8e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79543e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.41109e-13  1.09787e-13  2.54977e-14  7.52168e-16   4.3049e-15  1.38383e-16  6.10222e-16  1.47818e-19   1.0925e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.657, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.48022e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199776, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22501.2      5851.17      1801.91      2053.76      252.022      22671.7      3454.93      41.2066
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36805, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128142, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52003, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.87915e-05   2.8792e-05  1.53051e-05
      low eigenvalue method done, cpu time[sec] = 1.53249, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.88e-05  1.53e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-06  1.53e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53049e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.20237e-13  9.50477e-14  2.05414e-14  6.18936e-16  3.35002e-15  1.10825e-16  6.01271e-16  1.48239e-19  1.09251e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66681, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.90315e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56402, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17500.9      4550.91      1401.49      1597.37      196.017      17633.6      2687.17      32.0496
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36774, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127849, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6066e-05  2.60663e-05  1.34843e-05
      low eigenvalue method done, cpu time[sec] = 1.53224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.61e-05  1.35e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-06  1.35e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34841e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.05915e-13  8.46361e-14  1.73385e-14  5.32901e-16  2.76993e-15  9.36142e-17  5.90486e-16  1.48655e-19  1.09252e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66991, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200128, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56356, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15750.8      4095.82      1261.34      1437.63      176.416      15870.2      2418.45      28.8446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127893, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51645, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.49683e-05  2.49686e-05  1.27621e-05
      low eigenvalue method done, cpu time[sec] = 1.52956, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.5e-05  1.28e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-06  1.28e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27619e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.00253e-13  8.04427e-14  1.61162e-14  4.99925e-16  2.55557e-15  8.71454e-17  5.84844e-16  1.48862e-19  1.09252e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         3.17191e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200128, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56454, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10500.6      2730.55      840.893      958.422       117.61      10580.1       1612.3      19.2298
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51913, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0999e-05  2.09992e-05  1.02121e-05
      low eigenvalue method done, cpu time[sec] = 1.53255, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.1e-05  1.02e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-06  1.02e-05         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0212e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.02691e-14  6.53438e-14  1.20292e-14  3.88316e-16  1.86477e-15  6.58039e-17  5.56751e-16  1.49875e-19  1.09254e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67037, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         4.22921e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200322, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57197, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7875.42      2047.91       630.67      718.817      88.2078      7935.11      1209.23      14.4223
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128875, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52118, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8433e-05  1.84332e-05  8.62293e-06
      low eigenvalue method done, cpu time[sec] = 1.53434, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-05  8.62e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-06  8.62e-06         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.62286e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.77236e-14  5.57003e-14   9.6707e-15  3.22284e-16  1.48285e-15  5.36029e-17  5.30762e-16   1.5085e-19  1.09256e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.6783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         5.28652e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200159, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6300.34      1638.33      504.536      575.053      70.5662      6348.09      967.381      11.5379
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36217, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51357, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65875e-05  1.65876e-05  7.51348e-06
      low eigenvalue method done, cpu time[sec] = 1.52675, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-05  7.51e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-06  7.51e-06         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.51343e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.90639e-14  4.88599e-14   8.1148e-15  2.77664e-16  1.23693e-15  4.55506e-17  5.07378e-16  1.51782e-19  1.09258e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66391, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200259, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.56857, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5250.28      1365.27      420.446      479.211      58.8052      5290.07      806.151      9.61488
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36275, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128567, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51449, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51733e-05  1.51734e-05  6.68469e-06
      low eigenvalue method done, cpu time[sec] = 1.52768, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-05  6.68e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-06  6.68e-06         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.68465e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.25135e-14  4.36911e-14  7.00324e-15  2.45081e-16  1.06392e-15  3.97744e-17  4.86387e-16  1.52669e-19   1.0926e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66852, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         7.40112e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57092, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4500.24      1170.23      360.383      410.752      50.4044      4534.35      690.986      8.24133
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36546, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128612, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5181, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40431e-05  1.40432e-05  6.03685e-06
      low eigenvalue method done, cpu time[sec] = 1.53126, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-05  6.04e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-06  6.04e-06         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.03682e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.74065e-14  3.96151e-14  6.16568e-15  2.20039e-16   9.3493e-16  3.53974e-17  4.67468e-16  1.53508e-19  1.09262e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67586, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         8.45843e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.5764, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3937.71      1023.95      315.335      359.408      44.1039      3967.55      604.613      7.21116
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36904, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127864, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52035, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3112e-05  1.31121e-05  5.51366e-06
      low eigenvalue method done, cpu time[sec] = 1.53368, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-05  5.51e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.74e-07  5.51e-06         1
         *Z       ---       ---  7.88e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.51363e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.32987e-14  3.63002e-14  5.50997e-15  2.00077e-16  8.34697e-16  3.19492e-17   4.5032e-16    1.543e-19  1.09264e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68354, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1100 K
      Energy reference = 47358 1/cm
      Energy step      = 190 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -80.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006108
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.255275
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.126555
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.122456
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.527672
         W1 Well: minimal relaxation eigenvalue = 0.0593136
         W1 Well: maximal relaxation eigenvalue = 0.984739
         W1 Well:       grid size = 298
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -9262 1/cm
         B1 Barrier:        grid size = 250
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -141 1/cm
         B2 Barrier:        grid size = 249
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 48 1/cm
         B3 Barrier:        grid size = 274
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4701 1/cm
         B4 Barrier:        grid size = 282
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23702 1/cm => truncating
         B5 Barrier:        grid size = 374
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23701 1/cm
         B6 Barrier:        grid size = 242
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1378 1/cm
         B7 Barrier:        grid size = 225
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4608 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16768 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.36805, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 298
      MasterEquation::Barrier::truncate: real weight = 9.85019e+31
      MasterEquation::Barrier::truncate: effective weight = 8.52734e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -9262  -9262    3e+08 4.28e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -141 5.49e+16
         B2     49 1.54e+16
         B3  -4701 4.92e+15
         B4  -6222 5.55e+15
         B5  -9262 6.92e+14
         B6   1379 5.87e+16
         B7   4609 9.56e+15
         B8  16769 1.36e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.37e-12  2.36e-12  4.63e-14     6e-15  6.43e-25  1.61e-10  3.16e-08      2.01
          R  7.29e+11         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  4.24e+11     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2  2.16e+13      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3  1.67e+14       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  1.56e+24  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5   6.2e+09    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  3.17e+07  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7     0.497  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.16e-09  8.89e-09  1.74e-10  2.26e-11  2.42e-21  6.07e-07  0.000119  7.58e+03
          R  1.94e+08         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  1.13e+08     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2  5.74e+09      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3  4.43e+10       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  4.13e+20  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5  1.65e+06    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  8.42e+03  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7  0.000132  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.38195, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.18641, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.35079, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             193414      54161.5      17344.5      19539.4      2435.81       206883      33672.3      478.784
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37278, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.16524e-05  9.16579e-05  5.94619e-05
      low eigenvalue method done, cpu time[sec] = 1.38437, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.17e-05  5.95e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.09e-06  5.95e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.94584e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.36737e-11  9.82662e-12  3.01743e-12  9.12977e-14  6.80126e-13  1.93271e-14  3.94786e-14  1.57907e-17   5.8853e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.26586, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186756, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64471.4      18053.8      5781.51      6513.12      811.938        68961      11224.1      159.595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22978, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37005, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.79967e-05  6.79995e-05  4.14651e-05
      low eigenvalue method done, cpu time[sec] = 1.38179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.8e-05  4.15e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.16e-06  4.15e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.14633e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.53537e-12  7.30541e-12  1.80501e-12  5.31029e-14  3.21615e-13  1.00533e-14  4.04969e-14  1.58346e-17  5.88534e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.24638, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         9.93901e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.185831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33538, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38682.9      10832.3      3468.91      3907.87      487.163      41376.6      6734.47      95.7568
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23369, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118972, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37475, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.79483e-05  5.79503e-05  3.39719e-05
      low eigenvalue method done, cpu time[sec] = 1.3865, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.8e-05   3.4e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.36e-06   3.4e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.39707e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.81231e-12  6.13613e-12  1.36067e-12  4.09489e-14  2.26904e-13  7.41705e-15  4.04531e-14  1.58775e-17  5.88538e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25146, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.39146e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.185373, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.32806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27630.6      7737.35      2477.79      2791.34      347.974      29554.7      4810.33      68.3977
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22955, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.118844, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37032, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.17092e-05  5.17107e-05  2.94271e-05
      low eigenvalue method done, cpu time[sec] = 1.38217, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.17e-05  2.94e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.86e-06  2.94e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.94262e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.76714e-12  5.39375e-12  1.11336e-12  3.43213e-14  1.79809e-13  6.05276e-15  4.00698e-14  1.59197e-17  5.88542e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.2393, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.78902e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.185507, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33337, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21490.5      6017.94      1927.17      2171.04      270.646        22987      3741.37      53.1982
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118539, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.72672e-05  4.72684e-05  2.62565e-05
      low eigenvalue method done, cpu time[sec] = 1.38546, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.73e-05  2.63e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.51e-06  2.63e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.62558e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.03806e-12  4.86127e-12  9.51448e-13  2.99783e-14  1.50802e-13  5.18846e-15  3.95527e-14  1.59613e-17  5.88546e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.24876, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.185696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33436, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19341.4      5416.15      1734.45      1953.94      243.581      20688.3      3367.23      47.8784
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23697, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118807, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37782, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.54638e-05  4.54649e-05   2.4987e-05
      low eigenvalue method done, cpu time[sec] = 1.39024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.55e-05   2.5e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-06   2.5e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49863e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.74618e-12  4.64471e-12  8.89144e-13  2.82979e-14  1.39989e-13  4.86058e-15  3.92713e-14  1.59818e-17  5.88548e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25645, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          2.9817e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186332, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33017, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12894.3      3610.76       1156.3      1302.62      162.388      13792.2      2244.82      31.9189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23708, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37731, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.88662e-05   3.8867e-05  2.04415e-05
      low eigenvalue method done, cpu time[sec] = 1.3894, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.89e-05  2.04e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.86e-06  2.04e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.04411e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.70091e-12  3.85389e-12  6.78278e-13  2.25314e-14  1.04692e-13  3.76427e-15  3.78096e-14   1.6082e-17  5.88558e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         3.97561e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186292, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.32713, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9670.71      2708.07      867.227      976.968      121.791      10344.2      1683.62      23.9392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119304, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.45307e-05  3.45313e-05  1.75507e-05
      low eigenvalue method done, cpu time[sec] = 1.38797, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.45e-05  1.76e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.52e-06  1.76e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75504e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   4.0361e-12   3.3384e-12  5.54379e-13  1.90491e-14  8.47964e-14  3.12477e-15  3.63998e-14   1.6178e-17  5.88568e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.24852, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         4.96951e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186655, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.32829, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7736.57      2166.46      693.781      781.575      97.4326      8275.32      1346.89      19.1514
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23253, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118486, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37318, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.13734e-05  3.13739e-05  1.55005e-05
      low eigenvalue method done, cpu time[sec] = 1.38521, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.14e-05  1.55e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.28e-06  1.55e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55002e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.56459e-12  2.96694e-12  4.71481e-13  1.66581e-14  7.17907e-14  2.69601e-15  3.50981e-14  1.62694e-17  5.88578e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.24542, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.18723, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33755, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6447.14      1805.38      578.151      651.312      81.1938       6896.1      1122.41      15.9595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2351, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.118498, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37568, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89297e-05  2.89301e-05  1.39489e-05
      low eigenvalue method done, cpu time[sec] = 1.38769, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.89e-05  1.39e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-06  1.39e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39487e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.20777e-12  2.68259e-12  4.11558e-13  1.48886e-14  6.25257e-14   2.3844e-15  3.39071e-14  1.63563e-17  5.88588e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25822, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         6.95731e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33464, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5526.12      1547.47      495.558      558.268      69.5947      5910.94      962.067      13.6795
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23699, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119047, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37838, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.69598e-05  2.69601e-05  1.27226e-05
      low eigenvalue method done, cpu time[sec] = 1.39044, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.7e-05  1.27e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-06  1.27e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27224e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.92577e-12  2.45587e-12  3.65947e-13  1.35131e-14  5.55424e-14   2.1456e-15  3.28171e-14  1.64387e-17  5.88598e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25776, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         7.95121e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.33179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4835.36      1354.04      433.613      488.484      60.8954      5172.08      841.808      11.9696
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23319, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.53249e-05  2.53252e-05  1.17225e-05
      low eigenvalue method done, cpu time[sec] = 1.38537, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.53e-05  1.17e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-06  1.17e-05         1
         *Z       ---       ---  2.12e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17224e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.69584e-12  2.26968e-12   3.2992e-13  1.24056e-14  5.00643e-14  1.95559e-15  3.18166e-14  1.65166e-17  5.88608e-26

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.25095, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1200 K
      Energy reference = 50138 1/cm
      Energy step      = 207 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -78.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00621
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.247685
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.118893
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.110077
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.495217
         W1 Well: minimal relaxation eigenvalue = 0.0564867
         W1 Well: maximal relaxation eigenvalue = 0.987454
         W1 Well:       grid size = 290
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -9891 1/cm
         B1 Barrier:        grid size = 243
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -162 1/cm
         B2 Barrier:        grid size = 242
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 44 1/cm
         B3 Barrier:        grid size = 265
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4716 1/cm
         B4 Barrier:        grid size = 273
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6373 1/cm
         B5 Barrier: nonpositive number of states at -23347 1/cm => truncating
         B5 Barrier:        grid size = 355
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23346 1/cm
         B6 Barrier:        grid size = 235
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1493 1/cm
         B7 Barrier:        grid size = 220
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4598 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16604 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.30635, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 290
      MasterEquation::Barrier::truncate: real weight = 2.32674e+31
      MasterEquation::Barrier::truncate: effective weight = 2.19449e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -9891  -9891 2.39e+08 6.16e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -162 8.95e+16
         B2     45 2.69e+16
         B3  -4716 8.98e+15
         B4  -6373    1e+16
         B5  -9891 1.27e+15
         B6   1494 1.01e+17
         B7   4599 1.75e+16
         B8  16604 2.91e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.33e-13  9.23e-13  2.94e-14  4.58e-15  3.62e-24  5.09e-11  7.21e-09     0.133
          R  1.87e+12         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  1.08e+12     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2   3.4e+13      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3  2.18e+14       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  2.76e+23  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  1.97e+10    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  1.39e+08   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7      7.51  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.51e-10  2.62e-10  8.34e-12   1.3e-12  1.03e-21  1.44e-08  2.04e-06      37.8
          R  6.61e+09         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  3.82e+09     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2   1.2e+11      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3   7.7e+11       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  9.73e+20  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  6.93e+07    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  4.89e+05   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7    0.0265  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.32032, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+08
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.177668, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16435, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             231982      69650.1      23269.3      25938.2      3280.16       262247      45286.5      754.878
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14879, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113469, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28337, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000154269  0.000154286  0.000105518
      low eigenvalue method done, cpu time[sec] = 1.29491, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000154  0.000106         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-05  0.000106         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000105506
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.50679e-10  2.55167e-10  7.49764e-11  2.28377e-12  1.65453e-11  4.75995e-13  1.25359e-12  7.59968e-16  1.09267e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.96258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+08
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.17706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            77327.4      23216.7      7756.44      8646.08      1093.39      87415.7      15095.5      251.626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14813, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11329, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28244, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00011803  0.000118039  7.62024e-05
      low eigenvalue method done, cpu time[sec] = 1.29405, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000118  7.62e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.73e-06  7.62e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.61966e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.5326e-10   1.9582e-10  4.63619e-11  1.38708e-12  8.15833e-12  2.58797e-13  1.28712e-12  7.61999e-16  1.09268e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.96626, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          9.3935e+08
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.176073, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17701, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            46396.4        13930      4653.86      5187.65      656.032      52449.4      9057.29      150.976
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14918, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112451, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28241, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000102171  0.000102178  6.36349e-05
      low eigenvalue method done, cpu time[sec] = 1.29421, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000102  6.36e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.49e-06  6.36e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.36309e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.11494e-10  1.67434e-10  3.56056e-11  1.09401e-12  5.88518e-12  1.95408e-13  1.28996e-12  7.63954e-16  1.09269e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.97093, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.31509e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.173645, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.29439, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            33140.3      9950.01      3324.19      3705.46      468.594      37463.9      6469.49       107.84
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.21679e-05  9.21731e-05  5.58801e-05
      low eigenvalue method done, cpu time[sec] = 1.29486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.22e-05  5.59e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.71e-06  5.59e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.58769e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.85722e-10  1.49087e-10  2.95292e-11  9.31573e-13  4.73752e-12  1.62079e-13  1.28258e-12  7.65861e-16  1.09269e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.08769, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.69083e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.176747, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17697, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25775.8       7738.9      2585.48      2882.03      364.462      29138.6      5031.83      83.8753
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14936, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112987, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2836, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.4965e-05  8.49692e-05  5.04006e-05
      low eigenvalue method done, cpu time[sec] = 1.29484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.5e-05  5.04e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.15e-06  5.04e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.0398e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.67511e-10  1.35754e-10  2.55068e-11  8.23813e-13  4.02249e-12  1.40711e-13  1.27086e-12  7.67728e-16   1.0927e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.97417, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.177511, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.18109, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23198.2      6965.01      2326.93      2593.82      328.016      26224.7      4528.65      75.4878
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15139, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113003, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.20201e-05   8.2024e-05  4.81886e-05
      low eigenvalue method done, cpu time[sec] = 1.29698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.2e-05  4.82e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-06  4.82e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.81863e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.6016e-10  1.30286e-10  2.39479e-11  7.81786e-13  3.75394e-12  1.32541e-13  1.26418e-12  7.68648e-16   1.0927e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.98359, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         2.81805e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.17684, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17808, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15465.5      4643.34      1551.29      1729.22      218.677      17483.1       3019.1      50.3252
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113428, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28439, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.11367e-05  7.11395e-05  4.01739e-05
      low eigenvalue method done, cpu time[sec] = 1.29608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.11e-05  4.02e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.09e-06  4.02e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.01723e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.33524e-10  1.10075e-10  1.86171e-11  6.35872e-13  2.86783e-12  1.04914e-13  1.22781e-12  7.73114e-16  1.09272e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.97778, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          3.7574e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.177136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23056, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11599.1       3482.5      1163.47      1296.91      164.008      13112.4      2264.32      37.7439
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28267, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.38813e-05  6.38836e-05  3.49876e-05
      low eigenvalue method done, cpu time[sec] = 1.29435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.39e-05   3.5e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.54e-06   3.5e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.49864e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.16287e-10  9.66679e-11  1.54362e-11  5.46215e-13  2.36016e-12  8.85224e-14  1.19122e-12  7.77365e-16  1.09274e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.02971, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         4.69675e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.177232, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.18107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9279.29         2786      930.772      1037.53      131.206      10489.9      1811.46      30.1951
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112175, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28438, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.85395e-05  5.85413e-05  3.12597e-05
      low eigenvalue method done, cpu time[sec] = 1.296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.85e-05  3.13e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-06  3.13e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.12587e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.03897e-10  8.68758e-11  1.32821e-11  4.83811e-13  2.02402e-12   7.7385e-14  1.15659e-12  7.81407e-16  1.09276e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.98147, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.17692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7732.74      2321.67      775.644      864.608      109.339      8741.57      1509.55      25.1626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112031, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.43678e-05  5.43693e-05   2.8407e-05
      low eigenvalue method done, cpu time[sec] = 1.29499, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.44e-05  2.84e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-06  2.84e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84062e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.44157e-11  7.92961e-11  1.17093e-11  4.37106e-13  1.78198e-12     6.92e-14  1.12433e-12  7.85243e-16  1.09277e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.97859, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         6.57545e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.177241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17642, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6628.06         1990      664.837      741.092      93.7189      7492.78       1293.9      21.5679
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.112256, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28261, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.09794e-05  5.09807e-05  2.61307e-05
      low eigenvalue method done, cpu time[sec] = 1.29435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.1e-05  2.61e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-06  2.61e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.613e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.68502e-11  7.31948e-11  1.05018e-11  4.00443e-13  1.59788e-12  6.28672e-14   1.0944e-12   7.8888e-16  1.09279e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.97554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          7.5148e+09
      global relaxation matrix dimension = 290
      setting global matrices ... done, cpu time[sec] = 0.176575, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5799.56      1741.25      581.733      648.456       82.004      6556.18      1132.16      18.8719
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11207, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28241, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.81487e-05  4.81498e-05  2.42588e-05
      low eigenvalue method done, cpu time[sec] = 1.29407, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.81e-05  2.43e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.36e-06  2.43e-05         1
         *Z       ---       ---  6.82e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42582e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.06288e-11  6.81425e-11  9.54067e-12   3.7067e-13  1.45227e-12  5.77858e-14   1.0666e-12  7.92324e-16  1.09281e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.98806, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1300 K
      Energy reference = 52918 1/cm
      Energy step      = 224 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -76.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005608
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.236086
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.115309
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.124561
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.476718
         W1 Well: minimal relaxation eigenvalue = 0.0537419
         W1 Well: maximal relaxation eigenvalue = 0.990758
         W1 Well:       grid size = 284
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10698 1/cm
         B1 Barrier:        grid size = 237
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -170 1/cm
         B2 Barrier:        grid size = 236
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 53 1/cm
         B3 Barrier:        grid size = 257
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4650 1/cm
         B4 Barrier:        grid size = 264
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6218 1/cm
         B5 Barrier: nonpositive number of states at -23690 1/cm => truncating
         B5 Barrier:        grid size = 342
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23690 1/cm
         B6 Barrier:        grid size = 230
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1397 1/cm
         B7 Barrier:        grid size = 216
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4533 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16630 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.28092, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 284
      MasterEquation::Barrier::truncate: real weight = 7.32288e+30
      MasterEquation::Barrier::truncate: effective weight = 7.47387e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10698 -10698 1.77e+08 8.76e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -170 1.42e+17
         B2     54 4.56e+16
         B3  -4650 1.59e+16
         B4  -6218 1.76e+16
         B5 -10698 2.25e+15
         B6   1398 1.69e+17
         B7   4534 3.08e+16
         B8  16630 5.94e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.52e-13  4.39e-13   2.1e-14  3.82e-15  1.64e-23     2e-11  2.15e-09     0.014
          R  3.97e+12         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  2.28e+12     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  4.76e+13        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3  2.62e+14        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4   6.1e+22  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  5.01e+10    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  4.65e+08  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7      71.5   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.68e-12  1.34e-11   6.4e-13  1.16e-13  4.99e-22  6.08e-10  6.55e-08     0.426
          R   1.3e+11         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  7.47e+10     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  1.56e+12        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3   8.6e+12        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4     2e+21  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  1.64e+09    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  1.53e+07  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7      2.35   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.29456, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             272690      87440.6      30550.9      33728.9      4321.51       324537        59129      1139.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10861, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000220107  0.000220141  0.000156206
      low eigenvalue method done, cpu time[sec] = 1.22813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00022  0.000156         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-05  0.000156         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000156182
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.23423e-09   3.8495e-09  1.08669e-09  3.33781e-11  2.35662e-10  6.85925e-12  2.26261e-11  1.97011e-14  8.94068e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.76425, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169163, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06158, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            90896.7      29146.9      10183.6        11243       1440.5       108179      19709.7      379.817
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09154, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21931, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000172821  0.000172841  0.000116253
      low eigenvalue method done, cpu time[sec] = 1.23025, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000173  0.000116         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-05  0.000116         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000116239
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.89562e-09  3.03548e-09  6.91726e-10  2.10525e-11  1.20524e-10  3.87658e-12  2.32515e-11  1.97518e-14  8.94074e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.77414, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         8.91816e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.16881, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0511, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              54538      17488.1      6110.18      6745.78      864.302      64907.5      11825.8       227.89
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08639, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10657, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2134, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000151601  0.000151616  9.86859e-05
      low eigenvalue method done, cpu time[sec] = 1.22455, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000152  9.87e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-05  9.87e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.86761e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.30701e-09  2.63538e-09   5.3992e-10  1.69332e-11  8.86447e-11  2.98683e-12  2.33677e-11  1.97998e-14  8.94079e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.75575, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.24854e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.168568, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05625, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38955.7      12491.5      4364.41      4818.41      617.359      46362.5         8447      162.779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.106589, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21639, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000138034  0.000138046   8.7684e-05
      low eigenvalue method done, cpu time[sec] = 1.22731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000138  8.77e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.69e-06  8.77e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.76763e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.93836e-09  2.37271e-09  4.53058e-10  1.46186e-11  7.23426e-11  2.51278e-12  2.33073e-11  1.98463e-14  8.94084e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.76376, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.60527e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06422, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30298.9      9715.63      3394.54      3747.65      480.168      36059.7      6569.89      126.606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08499, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21322, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000128171  0.000128181  7.98242e-05
      low eigenvalue method done, cpu time[sec] = 1.22445, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000128  7.98e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.95e-06  7.98e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.98178e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1    2.675e-09  2.17962e-09   3.9501e-10   1.3067e-11  6.20871e-11  2.20576e-12  2.31676e-11  1.98915e-14   8.9409e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.76892, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06918, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              27269      8744.06      3055.09      3372.89      432.151      32453.7       5912.9      113.945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09408, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107966, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22239, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000124114  0.000124124  7.66291e-05
      low eigenvalue method done, cpu time[sec] = 1.23348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000124  7.66e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.64e-06  7.66e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.66232e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.56793e-09  2.09987e-09  3.72377e-10  1.24578e-11   5.8211e-11  2.08761e-12  2.30814e-11  1.99138e-14  8.94092e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         2.67545e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.170084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.07068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18179.3      5829.38      2036.73      2248.59      288.101      21635.8      3941.93      75.9634
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22108, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000108992  0.000108999  6.49324e-05
      low eigenvalue method done, cpu time[sec] = 1.2325, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000109  6.49e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.52e-06  6.49e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49282e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.17599e-09  1.80192e-09   2.9429e-10  1.03215e-11  4.53038e-11  1.68421e-12  2.25805e-11  2.00212e-14  8.94106e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.28777, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         3.56726e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.168989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0619, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13634.5      4372.03      1527.54      1686.44      216.076      16226.9      2956.45      56.9726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09184, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107146, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21965, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.87854e-05   9.8791e-05  5.72497e-05
      low eigenvalue method done, cpu time[sec] = 1.23071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.88e-05  5.72e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.77e-06  5.72e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.72464e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.91854e-09  1.60126e-09  2.47079e-10  8.98931e-12   3.7806e-11  1.44139e-12  2.20493e-11   2.0123e-14  8.94119e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.77657, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         4.45908e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169793, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0709, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10907.6      3497.63      1222.04      1349.16       172.86      12981.5      2365.16      45.5781
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09145, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107243, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21896, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.11998e-05  9.12045e-05   5.1663e-05
      low eigenvalue method done, cpu time[sec] = 1.23008, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.12e-05  5.17e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-06  5.17e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.16603e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.73133e-09  1.45298e-09  2.14776e-10  8.05124e-12  3.27871e-11  1.27452e-12   2.1532e-11  2.02195e-14  8.94133e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169147, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06094, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9089.67      2914.69      1018.36       1124.3       144.05      10817.9      1970.97      37.9817
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08723, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10703, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21493, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.52302e-05  8.52342e-05  4.73468e-05
      low eigenvalue method done, cpu time[sec] = 1.22597, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.52e-05  4.73e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.78e-06  4.73e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.73445e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.58669e-09  1.33709e-09  1.90987e-10  7.34236e-12  2.91403e-11  1.15071e-12  2.10409e-11  2.03111e-14  8.94146e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.77027, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         6.24271e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.170218, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.07593, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7791.15       2498.3      872.882      963.682      123.472       9272.5       1689.4      32.5558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09129, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21869, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.03497e-05  8.03533e-05  4.38742e-05
      low eigenvalue method done, cpu time[sec] = 1.22975, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.04e-05  4.39e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.43e-06  4.39e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.38723e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.47033e-09  1.24303e-09  1.72585e-10  6.78122e-12  2.63444e-11  1.05414e-12  2.05785e-11  2.03979e-14   8.9416e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         7.13453e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169792, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.07111, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6817.25      2186.02      763.772      843.222      108.038      8113.43      1478.23      28.4863
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21913, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.62492e-05  7.62523e-05  4.09979e-05
      low eigenvalue method done, cpu time[sec] = 1.23046, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.63e-05   4.1e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.14e-06   4.1e-05         1
         *Z       ---       ---  2.74e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.09962e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.37394e-09  1.16458e-09  1.57843e-10  6.32218e-12  2.41179e-11   9.7609e-13   2.0144e-11  2.04803e-14  8.94173e-22

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78724, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1400 K
      Energy reference = 55699 1/cm
      Energy step      = 241 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -75 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006231
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.231217
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.109899
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.115322
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.450539
         W1 Well: minimal relaxation eigenvalue = 0.0512594
         W1 Well: maximal relaxation eigenvalue = 0.994116
         W1 Well:       grid size = 278
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -11298 1/cm
         B1 Barrier:        grid size = 232
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -213 1/cm
         B2 Barrier:        grid size = 231
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 28 1/cm
         B3 Barrier:        grid size = 251
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4792 1/cm
         B4 Barrier:        grid size = 257
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6238 1/cm
         B5 Barrier: nonpositive number of states at -23349 1/cm => truncating
         B5 Barrier:        grid size = 328
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23348 1/cm
         B6 Barrier:        grid size = 225
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1474 1/cm
         B7 Barrier:        grid size = 212
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4607 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16657 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.23418, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 278
      MasterEquation::Barrier::truncate: real weight = 2.88039e+30
      MasterEquation::Barrier::truncate: effective weight = 3.16288e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -11298 -11298 1.42e+08 1.23e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -213  2.2e+17
         B2     29 7.52e+16
         B3  -4792 2.75e+16
         B4  -6238 3.01e+16
         B5 -11298 3.91e+15
         B6   1475 2.75e+17
         B7   4607 5.27e+16
         B8  16657 1.16e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.07e-13  1.87e-13  1.26e-14  2.62e-15   4.8e-23  7.15e-12  6.08e-10   0.00162
          R  9.39e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  5.33e+12     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  7.92e+13      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  3.81e+14      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4  2.08e+22  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5   1.4e+11    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  1.65e+09  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7       616  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.99e-13  1.05e-12   7.1e-14  1.48e-14   2.7e-22  4.02e-11  3.42e-09   0.00913
          R  1.67e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  9.49e+11     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  1.41e+13      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  6.78e+13      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4   3.7e+21  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5  2.49e+10    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  2.93e+08  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7       109  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.24813, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+08
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.16301, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.93973, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             315023       107513      39356.4      43069.8      5584.88       393382      75260.6      1657.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02524, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14967, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000351197  0.000351289  0.000261613
      low eigenvalue method done, cpu time[sec] = 1.16041, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000351  0.000262         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-05  0.000262         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000261544
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.10831e-08  3.79211e-08  1.03192e-08   3.1985e-10  2.20318e-09  6.48603e-11  2.62363e-10  3.14309e-13  3.84357e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.56204, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+08
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162542, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.94917, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             105008      35837.8      13118.8      14356.6      1861.63       131127      25086.9      552.395
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0269, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102863, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1496, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000282219  0.000282276  0.000199852
      low eigenvalue method done, cpu time[sec] = 1.1601, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000282    0.0002         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.97e-05    0.0002         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000199812
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.9026e-08  3.06133e-08  6.73722e-09  2.08599e-10  1.16395e-09  3.79433e-11  2.69816e-10  3.15092e-13  3.84359e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57166, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         8.49955e+08
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.161531, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95669, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            63004.6      21502.7      7871.28      8613.96      1116.98      78676.3      15052.1      331.437
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02613, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.1026, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14842, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00025057  0.000250613  0.000172097
      low eigenvalue method done, cpu time[sec] = 1.15932, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000251  0.000172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-05  0.000172         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000172067
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.3607e-08  2.69334e-08  5.33418e-09  1.70716e-10  8.70973e-10  2.97649e-11  2.71784e-10  3.15822e-13  3.84361e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.18994e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.161352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95297, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45003.3      15359.1      5622.35      6152.83       797.84      56197.4      10751.5      236.741
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02745, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15036, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000230089  0.000230124  0.000154487
      low eigenvalue method done, cpu time[sec] = 1.16111, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00023  0.000154         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-05  0.000154         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000154464
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.01688e-08  2.44836e-08  4.52253e-09  1.49179e-10  7.19507e-10   2.5358e-11  2.71786e-10  3.16522e-13  3.84363e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.52992e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.161715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.94684, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35002.5      11945.9      4372.94      4785.53      620.542      43709.1      8362.28      184.132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0277, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102814, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15013, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000215069  0.000215099  0.000141786
      low eigenvalue method done, cpu time[sec] = 1.16115, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000215  0.000142         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-05  0.000142         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000141766
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.76887e-08  2.26644e-08  3.97568e-09  1.34613e-10  6.23426e-10  2.24791e-11   2.7086e-10  3.17201e-13  3.84365e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57105, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.163119, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96474, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31502.3      10751.3      3935.64      4306.98      558.488      39338.2      7526.06      165.718
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02981, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102719, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000208857  0.000208886  0.000136591
      low eigenvalue method done, cpu time[sec] = 1.16304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000209  0.000137         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-05  0.000137         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000136572
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.66744e-08  2.19082e-08  3.76134e-09  1.28861e-10  5.86916e-10   2.1365e-11  2.70198e-10  3.17533e-13  3.84366e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.59224, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         2.54986e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.163003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95647, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21001.5      7167.56      2623.76      2871.32      372.325      26225.4      5017.37      110.479
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02918, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15147, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000185517  0.000185538  0.000117399
      low eigenvalue method done, cpu time[sec] = 1.16248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000186  0.000117         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-05  0.000117         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000117386
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.2927e-08  1.90565e-08  3.01613e-09  1.08514e-10  4.64368e-10  1.75293e-11  2.65925e-10   3.1913e-13  3.84372e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58338, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         3.39982e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96866, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15751.1      5375.67      1967.82      2153.49      279.244      19669.1      3763.03      82.8592
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02765, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102301, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14936, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000169585  0.000169603  0.000104628
      low eigenvalue method done, cpu time[sec] = 1.16072, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00017  0.000105         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-05  0.000105         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000104617
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.04332e-08  1.71101e-08  2.56043e-09  9.56629e-11  3.92325e-10  1.51916e-11  2.61065e-10  3.20637e-13  3.84377e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.59395, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         4.24977e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162614, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95947, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12600.9      4300.54      1574.26      1722.79      223.395      15735.3      3010.42      66.2874
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03123, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102621, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000157641  0.000157656  9.52464e-05
      low eigenvalue method done, cpu time[sec] = 1.1649, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000158  9.52e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-05  9.52e-05         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.52374e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.86011e-08  1.56568e-08  2.24581e-09  8.65218e-11  3.43641e-10  1.35692e-11  2.56172e-10  3.22062e-13  3.84383e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58811, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162816, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.9589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10500.8      3583.78      1311.88      1435.66      186.163      13112.7      2508.69      55.2395
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02904, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102896, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15156, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000148175  0.000148188  8.79369e-05
      low eigenvalue method done, cpu time[sec] = 1.16246, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000148  8.79e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.82e-06  8.79e-05         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79292e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.71738e-08  1.45112e-08  2.01238e-09  7.95555e-11  3.07986e-10  1.23556e-11  2.51425e-10  3.23413e-13  3.84388e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58436, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.94968e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9000.65      3071.81      1124.47      1230.57      159.568      11239.5       2150.3      47.3481
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02642, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102866, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000140389    0.0001404  8.20137e-05
      low eigenvalue method done, cpu time[sec] = 1.15998, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00014   8.2e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.26e-06   8.2e-05         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.2007e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.60171e-08  1.35747e-08  1.83065e-09   7.4001e-11  2.80463e-10  1.14021e-11  2.46886e-10  3.24694e-13  3.84394e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58396, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         6.79964e+09
      global relaxation matrix dimension = 278
      setting global matrices ... done, cpu time[sec] = 0.162904, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7875.57      2687.84      983.911      1076.74      139.622      9834.54      1881.51      41.4296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102686, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000133812  0.000133822  7.70765e-05
      low eigenvalue method done, cpu time[sec] = 1.1646, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000134  7.71e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.8e-06  7.71e-05         1
         *Z       ---       ---  1.15e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.70705e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.50529e-08  1.27885e-08  1.68422e-09  6.94278e-11  2.58412e-10  1.06266e-11  2.42568e-10   3.2591e-13  3.84399e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.59278, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1500 K
      Energy reference = 58479 1/cm
      Energy step      = 259 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -73.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005992
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.220475
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.105184
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.116027
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.429928
         W1 Well: minimal relaxation eigenvalue = 0.048872
         W1 Well: maximal relaxation eigenvalue = 0.996887
         W1 Well:       grid size = 272
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -11969 1/cm
         B1 Barrier:        grid size = 226
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -55 1/cm
         B2 Barrier:        grid size = 225
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 203 1/cm
         B3 Barrier:        grid size = 244
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4717 1/cm
         B4 Barrier:        grid size = 250
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6271 1/cm
         B5 Barrier: nonpositive number of states at -23365 1/cm => truncating
         B5 Barrier:        grid size = 316
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23365 1/cm
         B6 Barrier:        grid size = 220
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1498 1/cm
         B7 Barrier:        grid size = 208
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4606 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16520 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.19903, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 272
      MasterEquation::Barrier::truncate: real weight = 1.34773e+30
      MasterEquation::Barrier::truncate: effective weight = 1.59044e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -11969 -11969 1.09e+08 1.72e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -55 3.35e+17
         B2    204 1.21e+17
         B3  -4717 4.65e+16
         B4  -6271 5.05e+16
         B5 -11969 6.62e+15
         B6   1499 4.37e+17
         B7   4607 8.75e+16
         B8  16521 2.18e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.91e-14  8.73e-14  7.88e-15  1.84e-15  1.18e-22  2.83e-12  1.96e-10  0.000243
          R  2.04e+13         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  1.15e+13     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  1.27e+14      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  5.44e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  8.45e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5  3.53e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6   5.1e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7  4.11e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   6.6e-14  1.17e-13  1.06e-14  2.47e-15  1.59e-22  3.81e-12  2.64e-10  0.000327
          R  1.52e+13         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  8.52e+12     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  9.44e+13      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  4.04e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  6.28e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5  2.63e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6  3.79e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7  3.06e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.21248, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+08
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155074, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83798, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             358450       129795      49844.8      54109.2      7094.17       468246      93683.1      2333.48
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.967158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111266, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09023, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000521467  0.000521678  0.000405281
      low eigenvalue method done, cpu time[sec] = 1.10042, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000522  0.000405         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.63e-05  0.000405         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000405117
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.55409e-07  2.66073e-07  6.98936e-08  2.19211e-09  1.47489e-08  4.39022e-10  2.13934e-09  3.39853e-12  9.87392e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.39501, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+08
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.154812, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.86471, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             119483        43265      16614.9      18036.4      2364.72       156082      31227.7      777.825
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.976426, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111086, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09396, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000427589  0.000427725   0.00031678
      low eigenvalue method done, cpu time[sec] = 1.10416, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000428  0.000317         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.92e-05  0.000317         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00031668
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.77823e-07  2.19228e-07  4.66888e-08  1.47263e-09  8.01952e-09  2.64836e-10  2.20087e-09   3.4067e-12  9.87397e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.41174, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         8.12751e+08
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155357, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85723, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              71690        25959      9968.96      10821.8      1418.83      93649.3      18736.6      466.695
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.969407, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111144, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000383687  0.000383793  0.000276238
      low eigenvalue method done, cpu time[sec] = 1.0974, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000384  0.000276         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-05  0.000276         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000276162
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.42277e-07  1.95125e-07  3.74438e-08  1.22382e-09  6.09375e-09  2.11104e-10  2.22074e-09  3.41421e-12  9.87402e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.39906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.13785e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155843, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.86039, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            51207.2      18542.1      7120.68      7729.89      1013.45      66892.3      13383.3      333.354
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.969407, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111577, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000354972  0.000355061  0.000250221
      low eigenvalue method done, cpu time[sec] = 1.09769, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000355   0.00025         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.38e-05   0.00025         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000250158
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.19463e-07  1.78879e-07  3.20427e-08  1.08098e-09  5.08889e-09  1.81873e-10  2.22528e-09  3.42136e-12  9.87408e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.40219, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.46295e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.15616, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8721, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            39827.8      14421.7      5538.31      6012.14      788.241      52027.4      10409.2      259.275
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.971342, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110946, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08888, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000333752  0.000333829  0.000231294
      low eigenvalue method done, cpu time[sec] = 1.09918, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000334  0.000231         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-05  0.000231         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00023124
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.02867e-07  1.66705e-07  2.83769e-08   9.8362e-10  4.44692e-09  1.62637e-10  2.22233e-09  3.42825e-12  9.87413e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.41701, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.156249, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.87355, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              35845      12979.5      4984.48      5410.92      709.417      46824.6      9368.31      233.348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.97084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111078, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08827, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000324935  0.000325007  0.000223511
      low eigenvalue method done, cpu time[sec] = 1.09878, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000325  0.000223         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-05  0.000223         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000223461
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.96042e-07  1.61616e-07  2.69334e-08  9.44981e-10  4.20184e-09  1.55157e-10  2.21918e-09  3.43162e-12  9.87416e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.41755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         2.43825e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.15598, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.86553, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23896.7         8653      3322.99      3607.28      472.945      31216.4      6245.54      155.565
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.967485, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110957, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08517, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000291566  0.000291622  0.000194528
      low eigenvalue method done, cpu time[sec] = 1.09542, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000292  0.000194         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-05  0.000194         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00019449
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.70626e-07  1.42263e-07  2.18805e-08  8.07295e-10  3.37359e-09   1.2922e-10  2.19483e-09  3.44773e-12  9.87429e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.40566, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1           3.251e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.87692, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17922.5      6489.75      2492.24      2705.46      354.709      23412.3      4684.15      116.674
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.970712, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111066, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08795, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00026856  0.000268607  0.000175017
      low eigenvalue method done, cpu time[sec] = 1.09827, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000269  0.000175         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-05  0.000175         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000174987
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.53515e-07  1.28896e-07  1.87592e-08  7.19364e-10  2.88163e-09  1.13241e-10   2.1643e-09  3.46287e-12  9.87442e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.42065, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         4.06375e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.86113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14338       5191.8      1993.79      2164.37      283.767      18729.9      3747.32       93.339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.970045, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111298, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08797, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000251179  0.000251219  0.000160555
      low eigenvalue method done, cpu time[sec] = 1.09822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000251  0.000161         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-05  0.000161         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000160529
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.40832e-07  1.18824e-07  1.65872e-08  6.56267e-10  2.54645e-09  1.02057e-10  2.13229e-09  3.47716e-12  9.87455e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.40368, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155677, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.87151, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11948.3       4326.5      1661.49      1803.64      236.472      15608.2      3122.77      77.7825
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.968432, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110985, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08609, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000237316  0.000237351  0.000149204
      low eigenvalue method done, cpu time[sec] = 1.09645, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000237  0.000149         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-05  0.000149         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000149182
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.30877e-07  1.10824e-07   1.4965e-08  6.07829e-10  2.29929e-09  9.36313e-11  2.10047e-09   3.4907e-12  9.87468e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.41192, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         5.68926e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.15742, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.87264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10241.4      3708.43      1424.14      1545.98      202.691      13378.5      2676.66      66.6707
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.969093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110672, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08612, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000225852  0.000225884  0.000139947
      low eigenvalue method done, cpu time[sec] = 1.0967, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000226   0.00014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-05   0.00014         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000139927
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22758e-07  1.04242e-07  1.36949e-08  5.68962e-10  2.10737e-09  8.69706e-11  2.06951e-09  3.50355e-12  9.87481e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.41809, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         6.50201e+09
      global relaxation matrix dimension = 272
      setting global matrices ... done, cpu time[sec] = 0.155981, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.86211, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8961.26      3244.87      1246.12      1352.73      177.354      11706.2      2342.08      58.3369
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.964395, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111209, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08218, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000216123  0.000216152  0.000132187
      low eigenvalue method done, cpu time[sec] = 1.09248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000216  0.000132         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-05  0.000132         1
         *Z       ---       ---  5.45e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00013217
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.15952e-07  9.86859e-08  1.26664e-08  5.36782e-10  1.95279e-09  8.15237e-11  2.03969e-09  3.51575e-12  9.87495e-19

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.39835, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1600 K
      Energy reference = 61260 1/cm
      Energy step      = 276 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -71.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005782
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.216898
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.102076
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.109591
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.414736
         W1 Well: minimal relaxation eigenvalue = 0.0465726
         W1 Well: maximal relaxation eigenvalue = 1.00138
         W1 Well:       grid size = 268
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12708 1/cm
         B1 Barrier:        grid size = 222
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -12 1/cm
         B2 Barrier:        grid size = 222
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -12 1/cm
         B3 Barrier:        grid size = 239
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4704 1/cm
         B4 Barrier:        grid size = 245
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6360 1/cm
         B5 Barrier: nonpositive number of states at -23197 1/cm => truncating
         B5 Barrier:        grid size = 306
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23196 1/cm
         B6 Barrier:        grid size = 217
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1367 1/cm
         B7 Barrier:        grid size = 205
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4679 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16547 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.16731, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 268
      MasterEquation::Barrier::truncate: real weight = 7.25027e+29
      MasterEquation::Barrier::truncate: effective weight = 9.11755e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12708 -12708 8.16e+07 2.38e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -12 4.98e+17
         B2    -12 1.91e+17
         B3  -4704 7.69e+16
         B4  -6360 8.29e+16
         B5 -12708  1.1e+16
         B6   1368 6.79e+17
         B7   4680 1.42e+17
         B8  16548 3.95e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.43e-14  4.38e-14  5.08e-15  1.31e-15  2.54e-22  1.22e-12  7.07e-11   4.5e-05
          R  4.12e+13         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  2.29e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  1.97e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  7.61e+14      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  3.94e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  8.18e+11    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6  1.41e+10  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7  2.22e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.62e-15  1.73e-14  2.01e-15   5.2e-16  1.01e-22  4.84e-13   2.8e-11  1.78e-05
          R  1.04e+14         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  5.77e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  4.97e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  1.92e+15      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  9.95e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  2.07e+12    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6  3.57e+10  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7  5.62e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.18074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79078, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             402502       154197      62129.4        67000      8874.15       548576       114372      3194.84
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.929771, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098164, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04617, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000734651  0.000735087  0.000592655
      low eigenvalue method done, cpu time[sec] = 1.05629, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000735  0.000592         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.98e-05  0.000592         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000592304
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.88131e-06  1.41876e-06  3.60953e-07  1.14523e-08  7.53344e-08  2.26683e-09  1.31248e-08  2.68188e-11   1.6696e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.151234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78795, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             134167      51399.1      20709.8      22333.3      2958.05       182859      38123.9      1064.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.927403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0413, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000613236  0.000613526  0.000472697
      low eigenvalue method done, cpu time[sec] = 1.05152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000614  0.000472         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.07e-05  0.000472         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000472474
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998   1.5007e-06  1.19022e-06  2.46023e-07  7.90248e-09   4.2047e-08  1.40617e-09  1.35014e-08  2.68813e-11  1.66961e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27054, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         7.79424e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152098, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78724, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            80500.3      30839.4      12425.9        13400      1774.83       109715      22874.3      638.969
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.92719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095132, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000555462  0.000555693  0.000416799
      low eigenvalue method done, cpu time[sec] = 1.05083, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000556  0.000417         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.64e-05  0.000417         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000416625
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.32331e-06  1.07024e-06  1.99565e-07  6.65817e-09  3.23944e-08  1.13713e-09  1.36398e-08  2.69379e-11  1.66962e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.26909, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.09119e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.150481, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            57500.2      22028.2      8875.63      9571.43      1267.74        78368      16338.8      456.406
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.93676, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09535, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05066, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000517316  0.000517513  0.000380562
      low eigenvalue method done, cpu time[sec] = 1.06099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000518   0.00038         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-05   0.00038         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000380418
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.20831e-06  9.88459e-07  1.72194e-07  5.93768e-09  2.73172e-08  9.89567e-10  1.36888e-08  2.69914e-11  1.66963e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2828, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.40296e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.150621, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.77924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44722.4        17133      6903.27      7444.45      986.017      60952.9        12708      354.983
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.932101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094689, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04503, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000488934  0.000489107  0.000354004
      low eigenvalue method done, cpu time[sec] = 1.05533, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000489  0.000354         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.16e-05  0.000354         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000353878
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.12401e-06  9.26675e-07  1.53501e-07  5.44338e-09  2.40536e-08  8.91844e-10  1.36931e-08  2.70427e-11  1.66963e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2665, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.15179, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78871, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40250.2      15419.7      6212.94         6700      887.415      54857.6      11437.2      319.484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.930394, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04343, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00047709  0.000477254   0.00034303
      low eigenvalue method done, cpu time[sec] = 1.0537, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000477  0.000343         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.08e-05  0.000343         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000342913
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.08918e-06  9.00717e-07   1.4611e-07  5.24635e-09  2.28027e-08  8.53688e-10  1.36849e-08  2.70676e-11  1.66964e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27572, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         2.33827e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152542, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79458, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26833.4      10279.8      4141.96      4466.67       591.61      36571.7      7624.78       212.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.931947, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094645, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0447, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000431985  0.000432116  0.000301876
      low eigenvalue method done, cpu time[sec] = 1.05501, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000432  0.000302         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-05  0.000302         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000301784
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  9.58547e-07  8.01249e-07  1.20086e-07  4.53972e-09  1.85501e-08  7.20557e-10  1.35886e-08  2.71868e-11  1.66966e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28281, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          3.1177e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.151998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20125.1      7709.86      3106.47         3350      443.707      27428.8      5718.59      159.742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.931598, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04475, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00040061   0.00040072  0.000273887
      low eigenvalue method done, cpu time[sec] = 1.05535, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000401  0.000274         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-05  0.000274         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000273812
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.69699e-07  7.31814e-07   1.0387e-07  4.08407e-09  1.60015e-08  6.37778e-10  1.34486e-08  2.72983e-11  1.66968e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27517, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         3.89712e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152185, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79645, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16100.1      6167.89      2485.18         2680      354.966        21943      4574.87      127.794
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.934517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04787, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000376743  0.000376839  0.000252975
      low eigenvalue method done, cpu time[sec] = 1.05827, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000377  0.000253         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-05  0.000253         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000252911
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.03313e-07  6.79061e-07   9.2507e-08   3.7546e-09  1.42526e-08  5.79407e-10   1.3294e-08  2.74034e-11   1.6697e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28771, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.151647, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79018, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13416.7      5139.91      2070.98      2233.33      295.805      18285.9      3812.39      106.495
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.932177, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094334, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0453, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000357599  0.000357683  0.000236453
      low eigenvalue method done, cpu time[sec] = 1.05582, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000358  0.000236         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-05  0.000236         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000236397
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.50859e-07  6.36881e-07  8.39714e-08  3.50004e-09  1.29553e-08  5.35157e-10  1.31358e-08  2.75028e-11  1.66972e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27823, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         5.45597e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.151971, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79212, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              11500      4405.64      1775.13      1914.29      253.547      15673.6      3267.76      91.2813
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.930528, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094887, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04384, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000341691  0.000341767  0.000222902
      low eigenvalue method done, cpu time[sec] = 1.05407, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000342  0.000223         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-05  0.000223         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000222853
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.07839e-07  6.01974e-07  7.72551e-08  3.29464e-09  1.19427e-08  4.99987e-10   1.2979e-08  2.75972e-11  1.66974e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27915, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          6.2354e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152156, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80238, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10062.5      3854.93      1553.23         1675      221.854      13714.4      2859.29      79.8711
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.929271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094669, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04217, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000328134  0.000328203  0.000211487
      low eigenvalue method done, cpu time[sec] = 1.05276, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000328  0.000211         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-05  0.000211         1
         *Z       ---       ---  2.85e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000211443
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  6.71598e-07  5.72358e-07  7.17921e-08  3.12374e-09  1.11233e-08  4.71088e-10  1.28257e-08   2.7687e-11  1.66976e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2888, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1700 K
      Energy reference = 64039 1/cm
      Energy step      = 293 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -69.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005822
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.210411
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.100284
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.108449
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.402365
         W1 Well: minimal relaxation eigenvalue = 0.0442875
         W1 Well: maximal relaxation eigenvalue = 1.00683
         W1 Well:       grid size = 265
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -13606 1/cm
         B1 Barrier:        grid size = 219
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -128 1/cm
         B2 Barrier:        grid size = 218
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 235
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4816 1/cm
         B4 Barrier:        grid size = 240
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6281 1/cm
         B5 Barrier: nonpositive number of states at -23275 1/cm => truncating
         B5 Barrier:        grid size = 298
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23275 1/cm
         B6 Barrier:        grid size = 214
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1336 1/cm
         B7 Barrier:        grid size = 203
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4559 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16573 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.14721, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 265
      MasterEquation::Barrier::truncate: real weight = 4.36639e+29
      MasterEquation::Barrier::truncate: effective weight = 5.82915e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -13606 -13606 5.66e+07 3.26e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -128 7.29e+17
         B2    166 2.95e+17
         B3  -4816 1.24e+17
         B4  -6281 1.34e+17
         B5 -13606 1.79e+16
         B6   1337 1.03e+18
         B7   4560 2.24e+17
         B8  16573 6.96e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.32e-14   2.4e-14  3.48e-15  9.85e-16  5.02e-22  5.85e-13  2.88e-11  1.02e-05
          R  7.59e+13         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1  4.16e+13     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  2.87e+14      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  1.02e+15      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  1.99e+21  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5  1.71e+12    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6  3.47e+10  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7  9.81e+04  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.77e-15  3.22e-15  4.67e-16  1.32e-16  6.73e-23  7.84e-14  3.87e-12  1.37e-06
          R  5.66e+14         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1   3.1e+14     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  2.14e+15      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  7.58e+15      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  1.49e+22  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5  1.28e+13    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6  2.59e+11  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7  7.32e+05  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.16099, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149278, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.73347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             446735       180602      76318.1      81888.2      10948.8       633747       137262      4267.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.901171, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105101, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01247, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000965307  0.000966079   0.00079991
      low eigenvalue method done, cpu time[sec] = 1.02244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000966  0.000799         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-05  0.000799         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00079927
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999992  7.95937e-06  6.04385e-06  1.48879e-06  4.79776e-08  3.08924e-07  9.39336e-09  6.36613e-08  1.63264e-10  2.00154e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19165, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74879, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             148912      60200.6      25439.4      27296.1      3649.61       211249        45754       1422.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.899915, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104606, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000818466  0.000818998  0.000649682
      low eigenvalue method done, cpu time[sec] = 1.02123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000819  0.000649         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-05  0.000649         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00064926
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  6.46553e-06  5.15139e-06  1.03464e-06  3.38988e-08  1.76433e-07  5.97277e-09  6.54832e-08  1.63634e-10  2.00155e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19204, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         7.49365e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.147891, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76309, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            89346.9      36120.3      15263.6      16377.6      2189.77       126749      27452.4      853.559
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.90187, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104355, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01228, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000747548   0.00074798  0.000578584
      low eigenvalue method done, cpu time[sec] = 1.02251, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000748  0.000578         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-05  0.000578         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00057825
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  5.75839e-06  4.67438e-06  8.48243e-07   2.8914e-08  1.37621e-07  4.89283e-09  6.62212e-08  1.63963e-10  2.00156e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20628, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.04911e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.147837, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7511, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            63819.2      25800.2      10902.6      11698.3      1564.12      90535.2      19608.9      609.685
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.903621, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105075, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01503, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000700326  0.000700699  0.000532066
      low eigenvalue method done, cpu time[sec] = 1.02507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000701  0.000532         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.39e-05  0.000532         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000531783
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  5.29565e-06  4.34586e-06  7.37514e-07  2.60072e-08  1.17071e-07   4.2965e-09  6.65455e-08  1.64272e-10  2.00157e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19776, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.34886e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148382, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75417, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            49637.2      20066.9      8479.79      9098.69      1216.54      70416.3      15251.3      474.199
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.901836, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105401, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01327, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000664975  0.000665306  0.000497736
      low eigenvalue method done, cpu time[sec] = 1.02346, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000665  0.000497         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-05  0.000497         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000497488
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  4.95414e-06  4.09582e-06  6.61436e-07  2.40018e-08  1.03792e-07  3.89947e-09  6.66579e-08  1.64567e-10  2.00158e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19976, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.147732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76606, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44673.5      18060.2      7631.81      8188.82      1094.88      63374.7      13726.2      426.779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.903119, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104307, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01388, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000650167  0.000650481   0.00048349
      low eigenvalue method done, cpu time[sec] = 1.02377, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00065  0.000483         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.04e-05  0.000483         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000483257
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  4.81242e-06  3.99027e-06  6.31244e-07  2.31995e-08  9.86851e-08   3.7439e-09  6.66642e-08   1.6471e-10  2.00158e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21059, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.24809e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.147836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75883, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29782.3      12040.1      5087.88      5459.22      729.922      42249.8      9150.81       284.52
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902619, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104132, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01291, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000593451  0.000593706  0.000429718
      low eigenvalue method done, cpu time[sec] = 1.02343, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000594   0.00043         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.65e-05   0.00043         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000429533
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  4.27742e-06  3.58306e-06  5.24343e-07  2.03059e-08  8.12345e-08  3.19822e-09  6.64175e-08  1.65391e-10  2.00161e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.99746e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.14715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76597, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22336.7      9030.09      3815.91      4094.41      547.442      31687.3      6863.11       213.39
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902354, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104509, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000553683    0.0005539  0.000392809
      low eigenvalue method done, cpu time[sec] = 1.02347, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000554  0.000393         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.38e-05  0.000393         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000392655
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.91018e-06  3.29604e-06  4.57194e-07  1.84244e-08  7.06948e-08   2.8562e-09  6.59376e-08  1.66026e-10  2.00163e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21224, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         3.74682e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75932, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17869.4      7224.07      3052.73      3275.53      437.953      25349.9      5490.48      170.712
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.903229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01448, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000523244  0.000523435  0.000365035
      low eigenvalue method done, cpu time[sec] = 1.02512, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000523  0.000365         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.17e-05  0.000365         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000364902
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996   3.6338e-06  3.07635e-06  4.09848e-07  1.70548e-08  6.34179e-08  2.61347e-09  6.53652e-08  1.66623e-10  2.00165e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20965, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.147958, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76094, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14891.2      6020.06      2543.94      2729.61      364.961      21124.9       4575.4       142.26
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.906246, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104795, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01748, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000498705  0.000498876   0.00034296
      low eigenvalue method done, cpu time[sec] = 1.02803, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000499  0.000343         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.01e-05  0.000343         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000342843
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.41413e-06  2.89962e-06  3.74097e-07  1.59906e-08  5.79916e-08  2.42846e-09  6.47572e-08  1.67189e-10  2.00168e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21265, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.24555e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148759, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76159, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12763.8      5160.05      2180.52      2339.66      312.824        18107      3921.77      121.937
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.906544, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01795, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000478226  0.000478381  0.000324764
      low eigenvalue method done, cpu time[sec] = 1.02852, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000478  0.000325         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.87e-05  0.000325         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000324659
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.23305e-06   2.7526e-06  3.45839e-07  1.51277e-08  5.37367e-08  2.28072e-09  6.41398e-08  1.67725e-10   2.0017e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21434, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.99492e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148468, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76417, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11168.4      4515.04      1907.95      2047.21      273.721      15843.7      3431.55      106.695
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902092, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105337, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01355, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000460707   0.00046085  0.000309368
      low eigenvalue method done, cpu time[sec] = 1.02414, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000461  0.000309         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-05  0.000309         1
         *Z       ---       ---  1.64e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000309272
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.07982e-06   2.6273e-06  3.22764e-07  1.44066e-08    5.028e-08  2.15882e-09  6.35261e-08  1.68236e-10  2.00172e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21239, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1800 K
      Energy reference = 66819 1/cm
      Energy step      = 310 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -67.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005806
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.20566
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.096581
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.104536
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.39358
         W1 Well: minimal relaxation eigenvalue = 0.0423753
         W1 Well: maximal relaxation eigenvalue = 1.01159
         W1 Well:       grid size = 261
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -14090 1/cm
         B1 Barrier:        grid size = 216
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -141 1/cm
         B2 Barrier:        grid size = 215
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 168 1/cm
         B3 Barrier:        grid size = 231
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4791 1/cm
         B4 Barrier:        grid size = 236
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6341 1/cm
         B5 Barrier: nonpositive number of states at -23391 1/cm => truncating
         B5 Barrier:        grid size = 291
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23391 1/cm
         B6 Barrier:        grid size = 211
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1408 1/cm
         B7 Barrier:        grid size = 201
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4508 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16598 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.12304, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 261
      MasterEquation::Barrier::truncate: real weight = 2.88388e+29
      MasterEquation::Barrier::truncate: effective weight = 4.07337e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -14090 -14090 4.63e+07 4.44e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -141 1.05e+18
         B2    169 4.46e+17
         B3  -4791 1.98e+17
         B4  -6341 2.11e+17
         B5 -14090 2.85e+16
         B6   1409 1.55e+18
         B7   4509 3.47e+17
         B8  16599 1.19e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.08e-15  1.12e-14  1.97e-15  6.04e-16  7.29e-22   2.4e-13  1.03e-11  2.16e-06
          R  1.65e+14         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  8.91e+13     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  5.07e+14      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3  1.65e+15      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  1.37e+21  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  4.17e+12    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6  9.75e+10  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7  4.64e+05  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.94e-16  7.27e-16  1.28e-16  3.91e-17  4.72e-23  1.55e-14  6.65e-13   1.4e-07
          R  2.54e+15         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  1.38e+15     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  7.83e+15      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3  2.55e+16      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  2.12e+22  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  6.43e+13    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6   1.5e+12  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7  7.16e+06  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.13679, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             490751       208870      92617.4      98914.8      13341.7       723105       162260      5578.47
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.864434, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090305, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972252, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0014628   0.00146467   0.00128102
      low eigenvalue method done, cpu time[sec] = 0.981946, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00146   0.00128         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.49e-05   0.00128     0.999
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00127938
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999972  2.79014e-05   2.1316e-05  5.10098e-06  1.66592e-07  1.04905e-06  3.22527e-08   2.5411e-07  8.01273e-10  1.80172e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.06628, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143368, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68682, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             163584      69623.5      30872.5      32971.6      4447.22       241035      54086.6      1859.49
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.866118, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972079, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00125895   0.00126029   0.00105739
      low eigenvalue method done, cpu time[sec] = 0.981754, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00126   0.00106         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.99e-05   0.00106     0.999
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00105627
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999977  2.30357e-05  1.84297e-05  3.60359e-06  1.20365e-07  6.12518e-07  2.09992e-08    2.613e-07  8.03032e-10  1.80172e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0772, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         7.22087e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143517, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68539, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            98150.1      41774.1      18523.5        19783      2668.33       144621      32451.9      1115.69
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.863167, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090418, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.97114, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00115913   0.00116023  0.000950123
      low eigenvalue method done, cpu time[sec] = 0.981418, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00116  0.000949         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.27e-05  0.000949         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000949221
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999979  2.07011e-05  1.68603e-05  2.98244e-06  1.03838e-07  4.83369e-07  1.74117e-08  2.64426e-07   8.0458e-10  1.80173e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.07587, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.01092e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143172, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68797, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70107.2      29838.6      13231.1      14130.7      1905.95       103301        23180      796.924
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.86818, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089537, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975253, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00109212   0.00109308  0.000879366
      low eigenvalue method done, cpu time[sec] = 0.985589, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00109  0.000879         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.79e-05  0.000879         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000878593
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999981  1.91608e-05  1.57691e-05  2.61099e-06  9.41394e-08  4.14566e-07  1.54185e-08  2.65984e-07  8.06021e-10  1.80174e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.29976e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            54527.8      23207.8      10290.8      10990.5      1482.41        80345      18028.9       619.83
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868558, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089524, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00104167   0.00104253  0.000826829
      low eigenvalue method done, cpu time[sec] = 0.985885, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00104  0.000826         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.44e-05  0.000826         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000826146
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999982   1.8017e-05  1.49329e-05  2.35451e-06  8.74146e-08  3.69897e-07  1.40851e-08  2.66722e-07   8.0739e-10  1.80175e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.08577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            49075.1        20887      9261.74      9891.48      1334.17      72310.5        16226      557.847
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.864837, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089093, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.971482, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00102046   0.00102128  0.000804943
      low eigenvalue method done, cpu time[sec] = 0.981852, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00102  0.000804         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.29e-05  0.000804         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000804295
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999982  1.75405e-05  1.45784e-05  2.25239e-06  8.47153e-08  3.52664e-07   1.3561e-08  2.66896e-07  8.08053e-10  1.80175e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0837, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.16626e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144595, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69383, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32716.7      13924.7      6174.49      6594.32      889.445        48207      10817.3      371.898
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.867448, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.089667, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.974642, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000938769  0.000939447  0.000721851
      low eigenvalue method done, cpu time[sec] = 0.985145, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000939  0.000721         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-05  0.000721         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00072133
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999984  1.57311e-05   1.3202e-05  1.88913e-06  7.49307e-08  2.93505e-07  1.17137e-08  2.66639e-07  8.11198e-10  1.80177e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09101, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.88835e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69051, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24537.5      10443.5      4630.87      4945.74      667.084      36155.3      8112.99      278.923
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868054, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089095, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.9746, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000881043  0.000881628  0.000664341
      low eigenvalue method done, cpu time[sec] = 0.984893, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000882  0.000664         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.33e-05  0.000664         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0006639
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.44786e-05  1.22232e-05  1.65934e-06  6.85203e-08  2.57523e-07  1.05474e-08  2.65397e-07   8.1412e-10  1.80179e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.08729, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         3.61043e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69327, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              19630      8354.82      3704.69      3956.59      533.667      28924.2      6490.39      223.139
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.8651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089612, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972271, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000836592  0.000837112  0.000620783
      low eigenvalue method done, cpu time[sec] = 0.983018, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000837   0.00062         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-05   0.00062         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000620398
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.35299e-05  1.14689e-05  1.49642e-06  6.38256e-08  2.32539e-07   9.7149e-09  2.63724e-07  8.16865e-10  1.80181e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.08839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143615, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69452, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16358.4      6962.35      3087.25      3297.16      444.722      24103.5      5408.66      185.949
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.867302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000800579  0.000801048  0.000585977
      low eigenvalue method done, cpu time[sec] = 0.98593, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000801  0.000586         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.78e-05  0.000586         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000585634
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999987  1.27718e-05  1.08587e-05  1.37283e-06  6.01592e-08  2.13821e-07  9.07723e-09  2.61852e-07  8.19461e-10  1.80183e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09006, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.05461e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143923, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69694, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14021.4      5967.73      2646.21      2826.14      381.191      20660.1      4635.99      159.385
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868778, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975369, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000770397  0.000770826  0.000557154
      low eigenvalue method done, cpu time[sec] = 0.98579, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000771  0.000557         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.58e-05  0.000557         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000556843
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999988  1.21439e-05  1.03487e-05  1.27476e-06  5.71731e-08  1.99083e-07  8.56585e-09  2.59893e-07  8.21925e-10  1.80185e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09438, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.77669e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143685, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12268.8      5221.76      2315.43      2472.87      333.542      18077.6      4056.49      139.462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.86691, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.973823, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000744482  0.000744878  0.000532666
      low eigenvalue method done, cpu time[sec] = 0.98427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000745  0.000532         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.41e-05  0.000532         1
         *Z       ---       ---   9.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000532383
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999988  1.16105e-05  9.91222e-06  1.19438e-06  5.46679e-08  1.87066e-07  8.14227e-09  2.57906e-07  8.24271e-10  1.80187e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09623, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1900 K
      Energy reference = 69599 1/cm
      Energy step      = 328 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -65 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005578
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.179263
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.094433
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.107151
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.383967
         W1 Well: minimal relaxation eigenvalue = 0.0402758
         W1 Well: maximal relaxation eigenvalue = 1.01765
         W1 Well:       grid size = 258
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15024 1/cm
         B1 Barrier:        grid size = 213
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -265 1/cm
         B2 Barrier:        grid size = 212
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 63 1/cm
         B3 Barrier:        grid size = 227
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4857 1/cm
         B4 Barrier:        grid size = 232
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6496 1/cm
         B5 Barrier: nonpositive number of states at -23225 1/cm => truncating
         B5 Barrier:        grid size = 283
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23225 1/cm
         B6 Barrier:        grid size = 208
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1375 1/cm
         B7 Barrier:        grid size = 198
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4655 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16463 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.08342, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 258
      MasterEquation::Barrier::truncate: real weight = 2.05555e+29
      MasterEquation::Barrier::truncate: effective weight = 3.07198e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15024 -15024  3.1e+07 5.99e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -265 1.49e+18
         B2     64 6.65e+17
         B3  -4857  3.1e+17
         B4  -6496 3.29e+17
         B5 -15024 4.48e+16
         B6   1376 2.27e+18
         B7   4655 5.27e+17
         B8  16464 1.99e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.4e-15  6.37e-15  1.33e-15  4.37e-16  1.14e-21  1.21e-13  4.54e-12     6e-07
          R  2.94e+14         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  1.57e+14     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2  7.54e+14      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  2.29e+15      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4  8.76e+20  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  8.28e+12    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6   2.2e+11  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7  1.67e+06  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.03e-16  1.93e-16  4.02e-17  1.32e-17  3.45e-23  3.65e-15  1.38e-13  1.82e-08
          R  9.71e+15         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  5.19e+15     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2  2.49e+16      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  7.56e+16      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4   2.9e+22  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  2.74e+14    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6  7.27e+12  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7   5.5e+07  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.097, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60307, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             534197       238851       111169       118215      16075.4       815989       189246      7152.23
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.835778, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.952922, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00189066   0.00189388   0.00170067
      low eigenvalue method done, cpu time[sec] = 0.962722, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00189    0.0017         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000118    0.0017     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00169778
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999916  8.38182e-05  6.44532e-05  1.49078e-05  4.97719e-07  3.07101e-06  9.53993e-08  8.61756e-07  3.28217e-09  1.27462e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.96892, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140389, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             178066      79617.1      37056.5      39404.8      5358.46       271996      63081.9      2384.08
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.836378, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099334, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00164905    0.0016514   0.00142537
      low eigenvalue method done, cpu time[sec] = 0.951367, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00165   0.00142         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000101   0.00142     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00142334
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99993  7.02694e-05  5.64375e-05  1.07394e-05   3.6675e-07  1.82781e-06  6.34169e-08  8.85884e-07  3.28922e-09  1.27462e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.96728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         6.97198e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141387, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62961, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             106839      47770.3      22233.9      23642.9      3215.08       163198      37849.1      1430.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.835957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09922, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00152891   0.00153089   0.00129128
      low eigenvalue method done, cpu time[sec] = 0.950819, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00153   0.00129         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.24e-05   0.00129     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00128962
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999936  6.36677e-05  5.20103e-05  8.97383e-06  3.19624e-07  1.45745e-06  5.31549e-08  8.97008e-07  3.29534e-09  1.27463e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98312, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         9.76077e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.139679, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63155, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            76313.8      34121.6      15881.3      16887.8      2296.48       116570      27035.1      1021.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838942, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099441, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.944666, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00144765   0.00144939   0.00120211
      low eigenvalue method done, cpu time[sec] = 0.954482, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00145    0.0012         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.68e-05    0.0012     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00120066
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999941   5.9276e-05  4.89046e-05  7.90879e-06  2.91826e-07  1.25916e-06  4.74256e-08  9.03045e-07  3.30099e-09  1.27463e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         1.25496e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62746, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            59355.2        26539      12352.2      13134.9      1786.15      90665.5      21027.3      794.693
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099378, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.94446, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00138612   0.00138769    0.0011355
      low eigenvalue method done, cpu time[sec] = 0.954189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00139   0.00113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.26e-05   0.00113     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00113422
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999944  5.59955e-05  4.65093e-05  7.16918e-06   2.7247e-07  1.12992e-06  4.35774e-08  9.06387e-07  3.30634e-09  1.27464e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98004, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140671, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63383, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53419.7      23885.1      11116.9      11821.5      1607.54      81598.9      18924.6      715.223
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.839245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.944383, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00136016   0.00136167   0.00110766
      low eigenvalue method done, cpu time[sec] = 0.954155, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00136   0.00111         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.08e-05   0.00111     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00110643
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999945  5.46238e-05  4.54898e-05  6.87371e-06  2.64679e-07  1.07993e-06  4.20609e-08  9.07404e-07  3.30892e-09  1.27464e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98703, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.09159e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.139781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63577, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35613.1      15923.4       7411.3      7880.97      1071.69      54399.3      12616.4      476.816
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.839468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.945092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00125971   0.00126097   0.00100135
      low eigenvalue method done, cpu time[sec] = 0.955066, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00126     0.001         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.4e-05     0.001     0.999
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00100035
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999951  4.93867e-05  4.15086e-05  5.81739e-06  2.36316e-07  9.07651e-07  3.66941e-08  9.08652e-07  3.32113e-09  1.27465e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99063, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.78879e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63425, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26709.8      11942.6      5558.47      5910.73      803.769      40799.5      9462.28      357.612
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.838767, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.94435, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00118823   0.00118933  0.000927213
      low eigenvalue method done, cpu time[sec] = 0.954266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00119  0.000926         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.92e-05  0.000926         1
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000926354
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999954  4.57335e-05  3.86544e-05  5.14457e-06  2.17612e-07  8.02235e-07  3.32851e-08  9.06421e-07  3.33242e-09  1.27467e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98991, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         3.48599e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140735, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21367.9      9554.05      4446.78      4728.58      643.015      32639.6      7569.83      286.089
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.840433, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098809, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.945332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0011329   0.00113389  0.000870724
      low eigenvalue method done, cpu time[sec] = 0.955572, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00113   0.00087         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.56e-05   0.00087         1
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000869967
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999957  4.29497e-05  3.64411e-05  4.66503e-06  2.03843e-07  7.28691e-07  3.08396e-08  9.02563e-07  3.34302e-09  1.27468e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99207, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62668, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17806.6      7961.71      3705.65      3940.48      535.846      27199.6      6308.19      238.408
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.841527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100898, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.948386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00108788   0.00108878  0.000825366
      low eigenvalue method done, cpu time[sec] = 0.958349, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00109  0.000825         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.26e-05  0.000825         1
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000824685
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999959  4.07142e-05  3.46416e-05  4.29967e-06  1.93042e-07  6.73366e-07  2.89585e-08  8.97875e-07  3.35302e-09  1.27469e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.88039e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63201, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15262.8      6824.32      3176.27      3377.56      459.297        23314      5407.02       204.35
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.841466, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09896, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.946789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00105001   0.00105084  0.000787646
      low eigenvalue method done, cpu time[sec] = 0.956774, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00105  0.000787         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.02e-05  0.000787         1
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000787026
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999961   3.8855e-05  3.31309e-05  4.00865e-06  1.84211e-07  6.29651e-07  2.74444e-08  8.92755e-07  3.36252e-09  1.27471e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         5.57758e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.140521, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13354.9      5971.28      2779.24      2955.36      401.885      20399.7      4731.14      178.806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.840471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.945145, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00101739   0.00101816  0.000755483
      low eigenvalue method done, cpu time[sec] = 0.955064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00102  0.000755         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.8e-05  0.000755         1
         *Z       ---       ---  5.75e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000754913
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999963  3.72696e-05  3.18332e-05  3.76939e-06  1.76776e-07  5.93894e-07  2.61862e-08  8.87418e-07  3.37156e-09  1.27472e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9925, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2000 K
      Energy reference = 72380 1/cm
      Energy step      = 345 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -62.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005685
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.175912
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.092449
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.095222
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.373736
         W1 Well: minimal relaxation eigenvalue = 0.0385252
         W1 Well: maximal relaxation eigenvalue = 1.02386
         W1 Well:       grid size = 255
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15594 1/cm
         B1 Barrier:        grid size = 210
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -69 1/cm
         B2 Barrier:        grid size = 210
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -69 1/cm
         B3 Barrier:        grid size = 224
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4899 1/cm
         B4 Barrier:        grid size = 228
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6279 1/cm
         B5 Barrier: nonpositive number of states at -23185 1/cm => truncating
         B5 Barrier:        grid size = 277
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23184 1/cm
         B6 Barrier:        grid size = 206
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1310 1/cm
         B7 Barrier:        grid size = 197
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4414 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16490 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0569, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 255
      MasterEquation::Barrier::truncate: real weight = 1.56224e+29
      MasterEquation::Barrier::truncate: effective weight = 2.45574e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15594 -15594 2.41e+07 8.02e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -69 2.08e+18
         B2    -69 9.75e+17
         B3  -4899 4.77e+17
         B4  -6279 5.05e+17
         B5 -15594 6.92e+16
         B6   1311 3.29e+18
         B7   4415 7.87e+17
         B8  16491 3.25e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.71e-15  3.24e-15  7.85e-16  2.76e-16  1.44e-21  5.48e-14  1.84e-12   1.6e-07
          R  5.86e+14         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1  3.09e+14     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  1.27e+15      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3  3.62e+15      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4  6.94e+20  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  1.82e+13    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6  5.44e+11  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  6.25e+06  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.1e-17  5.87e-17  1.42e-17     5e-18  2.61e-23  9.94e-16  3.33e-14   2.9e-09
          R  3.23e+16         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1   1.7e+16     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  7.03e+16      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3     2e+17      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4  3.83e+22  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  1.01e+15    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6     3e+13  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  3.45e+08  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07021, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59965, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             576776       270391       132117       139923      19172.8       911767       218090       9013.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.814306, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085744, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.917055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00269169   0.00269856   0.00255079
      low eigenvalue method done, cpu time[sec] = 0.926564, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0027   0.00254         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000167   0.00254     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0025443
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999779  0.000220601   0.00017026  3.86698e-05  1.29958e-06  7.84469e-06  2.46457e-07  2.54341e-06  1.15252e-08  7.34854e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.91975, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137499, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60048, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             192259      90130.3        44039      46640.9      6390.94       303922      72696.6      3004.63
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.91448, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00237597   0.00238112   0.00216549
      low eigenvalue method done, cpu time[sec] = 0.924191, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00238   0.00216         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000144   0.00216     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00216081
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999813   0.00018735  0.000150872  2.81604e-05  9.76586e-07  4.76222e-06  1.67331e-07  2.61374e-06  1.15493e-08  7.34857e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.91606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          6.7438e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13634, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60445, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             115355      54078.2      26423.4      27984.5      3834.56       182353        43618      1802.78
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812817, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084333, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.914224, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00221717   0.00222155   0.00197584
      low eigenvalue method done, cpu time[sec] = 0.923793, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00222   0.00197         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000133   0.00197     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00197194
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999829  0.000170975  0.000139971  2.36944e-05  8.59315e-07  3.83557e-06  1.41718e-07  2.64768e-06  1.15699e-08   7.3486e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.91935, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         9.44132e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13598, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60927, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            82396.6      38627.3      18873.9        19989      2738.97       130252      31155.7       1287.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084518, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00210907   0.00211297   0.00184892
      low eigenvalue method done, cpu time[sec] = 0.923007, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00211   0.00185         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000125   0.00185     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00184551
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99984  0.000160013  0.000132256  2.09917e-05  7.89781e-07  3.33695e-06  1.27347e-07  2.66725e-06  1.15888e-08  7.34863e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92214, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.21388e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60464, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64086.2      30043.4      14679.7        15547      2130.31       101307      24232.2      1001.54
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811605, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084432, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913566, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00202685   0.00203041   0.00175368
      low eigenvalue method done, cpu time[sec] = 0.923099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00203   0.00175         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00012   0.00175     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00175061
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999848  0.000151785   0.00012627  1.91096e-05  7.41172e-07  3.01072e-06  1.17659e-07  2.67912e-06  1.16066e-08  7.34866e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92016, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137022, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60322, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            57677.6      27039.1      13211.7      13992.3      1917.28      91176.7        21809       901.39
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811514, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08444, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.912765, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00199206   0.00199548   0.00171374
      low eigenvalue method done, cpu time[sec] = 0.922236, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.002   0.00171         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000117   0.00171     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0017108
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999852  0.000148333  0.000123712  1.83562e-05  7.21556e-07  2.88422e-06  1.13831e-07  2.68316e-06  1.16152e-08  7.34867e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.91675, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.02314e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137587, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61358, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38451.7      18026.1      8807.81      9328.18      1278.19      60784.4      14539.3      600.927
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811071, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085299, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913634, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00185685   0.00185975   0.00156056
      low eigenvalue method done, cpu time[sec] = 0.923135, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00186   0.00156         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000108   0.00156     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00155813
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999865  0.000135096   0.00011367  1.56547e-05  6.49857e-07  2.44666e-06  1.00234e-07  2.69205e-06  1.16556e-08  7.34874e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92942, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.69752e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13669, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60935, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28838.8      13519.5      6605.86      6996.13      958.641      45588.3      10904.5      450.695
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819215, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085019, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.921178, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00176004    0.0017626   0.00145302
      low eigenvalue method done, cpu time[sec] = 0.931216, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00176   0.00145         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000102   0.00145     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00145091
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999874    0.0001258  0.000106416   1.3926e-05  6.02296e-07  2.17744e-06  9.15492e-08  2.69044e-06   1.1693e-08  7.34881e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          3.3719e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137761, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60856, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              23071      10815.6      5284.68      5596.91      766.912      36470.7      8723.59      360.556
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.815979, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08492, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.918235, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00168474   0.00168705   0.00137065
      low eigenvalue method done, cpu time[sec] = 0.928302, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00169   0.00137         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.65e-05   0.00137     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00136878
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999881  0.000118678  0.000100759   1.2689e-05  5.67115e-07  1.98878e-06  8.52905e-08  2.68366e-06   1.1728e-08  7.34888e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93048, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137543, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19225.9      9013.03       4403.9      4664.09      639.094      30392.2      7269.66      300.463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812599, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.914902, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00162321   0.00162533   0.00130423
      low eigenvalue method done, cpu time[sec] = 0.924952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00163    0.0013         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.24e-05    0.0013     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00130253
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999887  0.000112934  9.61372e-05  1.17435e-05  5.39406e-07  1.84633e-06  8.04577e-08  2.67409e-06   1.1761e-08  7.34896e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93301, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.72066e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137947, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16479.3      7725.45      3774.77      3997.79      547.795      26050.5      6231.14       257.54
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.814946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.916973, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00157128   0.00157324   0.00124878
      low eigenvalue method done, cpu time[sec] = 0.92736, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00157   0.00125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.9e-05   0.00125     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00124722
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999892  0.000108139  9.22418e-05  1.09882e-05  5.16671e-07  1.73341e-06  7.65547e-08  2.66292e-06  1.17923e-08  7.34903e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9309, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         5.39504e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137327, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60964, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14419.4      6759.77      3302.93      3498.07       479.32      22794.2      5452.25      225.348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.817107, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.919161, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00152641   0.00152824   0.00120135
      low eigenvalue method done, cpu time[sec] = 0.929211, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00153    0.0012         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.61e-05    0.0012     0.999
         *Z       ---       ---  3.54e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00119991
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999896  0.000104037  8.88837e-05  1.03656e-05  4.97471e-07  1.64077e-06  7.33014e-08  2.65082e-06  1.18222e-08   7.3491e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93119, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2100 K
      Energy reference = 75160 1/cm
      Energy step      = 362 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -60.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005925
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.195511
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.091039
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.075426
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.366294
         W1 Well: minimal relaxation eigenvalue = 0.0367084
         W1 Well: maximal relaxation eigenvalue = 1.03215
         W1 Well:       grid size = 253
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -16426 1/cm
         B1 Barrier:        grid size = 208
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -136 1/cm
         B2 Barrier:        grid size = 208
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -136 1/cm
         B3 Barrier:        grid size = 221
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4842 1/cm
         B4 Barrier:        grid size = 225
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6290 1/cm
         B5 Barrier: nonpositive number of states at -23666 1/cm => truncating
         B5 Barrier:        grid size = 273
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23666 1/cm
         B6 Barrier:        grid size = 204
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1311 1/cm
         B7 Barrier:        grid size = 195
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4569 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16515 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.05161, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 253
      MasterEquation::Barrier::truncate: real weight = 1.25127e+29
      MasterEquation::Barrier::truncate: effective weight = 2.06384e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -16426 -16426 1.65e+07 1.07e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -136 2.87e+18
         B2   -136 1.41e+18
         B3  -4842 7.23e+17
         B4  -6290 7.63e+17
         B5 -16426 1.05e+17
         B6   1312 4.69e+18
         B7   4570 1.16e+18
         B8  16516  5.2e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.44e-16  1.81e-15  5.03e-16  1.88e-16  1.84e-21  2.76e-14  8.33e-13  4.98e-08
          R  1.06e+15         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  5.52e+14     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2  1.99e+15      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3  5.33e+15      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  5.44e+20  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5  3.63e+13    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6   1.2e+12   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7  2.01e+07  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.05e-17  2.01e-17  5.58e-18  2.08e-18  2.04e-23  3.06e-16  9.23e-15  5.53e-10
          R  9.56e+16         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  4.97e+16     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2  1.79e+17      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3   4.8e+17      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  4.91e+22  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5  3.27e+15    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6  1.08e+14   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7  1.81e+09  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.06491, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135909, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5256, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             618211       303305       155578       164148      22653.1  1.00975e+06       248624      11185.1
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.793471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893043, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00356573   0.00357825    0.0035075
      low eigenvalue method done, cpu time[sec] = 0.90248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00358    0.0035         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000216    0.0035     0.998
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00349524
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99948  0.000519801  0.000402658  8.96723e-05  3.04641e-06  1.80093e-05  5.72044e-07  6.67735e-06   3.5516e-08  3.55638e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81501, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134981, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55663, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             206070       101102      51859.4      54716.1      7551.04       336583      82874.7      3728.36
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.796667, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00318018   0.00318976   0.00301221
      low eigenvalue method done, cpu time[sec] = 0.904971, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00319     0.003         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000188     0.003     0.998
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00300317
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999553  0.000446622  0.000360576  6.59885e-05  2.32948e-06  1.11257e-05  3.95766e-07  6.85913e-06  3.55889e-08   3.5564e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84616, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         6.53369e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135107, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55314, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             123642        60661      31115.6      32829.7      4530.62       201950      49724.8      2237.02
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795063, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082537, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894269, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00298458   0.00299284   0.00276635
      low eigenvalue method done, cpu time[sec] = 0.903608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00299   0.00276         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000175   0.00276     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00275872
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99959  0.000410268  0.000336541  5.58979e-05  2.06758e-06  9.04227e-06  3.38351e-07  6.95005e-06  3.56505e-08  3.55641e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84469, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         9.14716e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134538, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56249, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            88315.9      43329.3      22225.4      23449.8      3236.16       144250      35517.7      1597.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.793928, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083287, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00285073   0.00285814   0.00260086
      low eigenvalue method done, cpu time[sec] = 0.903782, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00286   0.00259         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000165   0.00259     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00259412
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999614  0.000385789  0.000319394  4.97708e-05  1.91166e-06   7.9167e-06  3.06013e-07  7.00491e-06  3.57066e-08  3.55642e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.85188, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.17606e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5688, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            68690.2      33700.6      17286.5      18238.7      2517.01       112194      27624.9      1242.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795735, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0027485   0.00275531   0.00247614
      low eigenvalue method done, cpu time[sec] = 0.904528, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00276   0.00247         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000158   0.00247     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00247002
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999633  0.000367334  0.000306013  4.54916e-05  1.80232e-06  7.17798e-06  2.84144e-07  7.04023e-06  3.57592e-08  3.55643e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.85861, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135384, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56974, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            61821.1      30330.5      15557.8      16414.8      2265.31       100975      24862.4      1118.51
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795221, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082176, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894081, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00270514    0.0027117   0.00242368
      low eigenvalue method done, cpu time[sec] = 0.903796, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00271   0.00242         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000155   0.00242     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00241782
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99964  0.000359571  0.000300278  4.37754e-05  1.75809e-06  6.89095e-06  2.75487e-07  7.05305e-06  3.57845e-08  3.55644e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86057, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.96011e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41214.1      20220.3      10371.9      10943.2      1510.21      67316.7      16574.9      745.672
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.796551, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.39553, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00253594   0.00254158   0.00222167
      low eigenvalue method done, cpu time[sec] = 1.40543, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00254   0.00222         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000144   0.00222     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00221675
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99967  0.000329667  0.000277639  3.76032e-05  1.59591e-06    5.895e-06   2.4464e-07  7.08778e-06  3.59034e-08  3.55647e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37407, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         2.61347e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136463, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58228, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30910.6      15165.3      7778.91      8207.42      1132.66      50487.5      12431.2      559.254
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797023, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897208, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00241411   0.00241914   0.00207897
      low eigenvalue method done, cpu time[sec] = 0.906887, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00242   0.00207         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000136   0.00207     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00207466
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999691  0.000308537  0.000261171  3.36354e-05  1.48779e-06  5.27932e-06  2.24841e-07  7.09461e-06  3.60126e-08  3.55651e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.26684e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134543, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57592, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24728.5      12132.2      6223.12      6565.93      906.124        40390      9944.97      447.403
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.796147, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.89633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00231894   0.00232351   0.00196916
      low eigenvalue method done, cpu time[sec] = 0.905645, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00232   0.00197         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00013   0.00197     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00196529
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999708  0.000292272  0.000248259  3.07862e-05  1.40747e-06  4.84624e-06  2.10518e-07  7.08727e-06  3.61147e-08  3.55654e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8667, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134382, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58101, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              20607      10110.2      5185.94      5471.61      755.104      33658.3      8287.47      372.836
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.793858, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082721, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00224089   0.00224511   0.00188024
      low eigenvalue method done, cpu time[sec] = 0.903312, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00225   0.00188         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000124   0.00188     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00187672
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999721  0.000279099  0.000237665  2.86014e-05  1.34398e-06  4.51816e-06  1.99422e-07  7.07188e-06   3.6211e-08  3.55657e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87037, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         4.57358e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135646, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56993, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17663.2      8665.86      4445.09      4689.95      647.232        28850      7103.55      319.574
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797491, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082406, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896345, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00217482   0.00217875   0.00180577
      low eigenvalue method done, cpu time[sec] = 0.906622, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00218    0.0018         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00012    0.0018     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00180252
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999732  0.000268065  0.000228703  2.68515e-05  1.29173e-06  4.25735e-06  1.90434e-07  7.05165e-06  3.63023e-08   3.5566e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86563, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         5.22695e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56917, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15455.3      7582.63      3889.45      4103.71      566.328      25243.7      6215.61      279.627
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795659, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082543, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00211757   0.00212126   0.00174187
      low eigenvalue method done, cpu time[sec] = 0.90566, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00212   0.00174         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000116   0.00174     0.999
         *Z       ---       ---  2.35e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00173884
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999741  0.000258595  0.000220951  2.54054e-05  1.24749e-06  4.04286e-06  1.82923e-07   7.0284e-06  3.63894e-08  3.55664e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86231, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2200 K
      Energy reference = 77940 1/cm
      Energy step      = 379 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -58.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006167
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.193074
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.089996
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.092007
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.367468
         W1 Well: minimal relaxation eigenvalue = 0.0350459
         W1 Well: maximal relaxation eigenvalue = 1.04103
         W1 Well:       grid size = 251
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17188 1/cm
         B1 Barrier:        grid size = 206
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -133 1/cm
         B2 Barrier:        grid size = 206
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -133 1/cm
         B3 Barrier:        grid size = 218
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 222
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6197 1/cm
         B5 Barrier: nonpositive number of states at -23253 1/cm => truncating
         B5 Barrier:        grid size = 267
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23252 1/cm
         B6 Barrier:        grid size = 202
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1382 1/cm
         B7 Barrier:        grid size = 194
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4414 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16542 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06147, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 251
      MasterEquation::Barrier::truncate: real weight = 1.04826e+29
      MasterEquation::Barrier::truncate: effective weight = 1.81018e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17188 -17188 1.15e+07 1.41e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -133 3.92e+18
         B2   -133 2.01e+18
         B3  -4681 1.08e+18
         B4  -6197 1.14e+18
         B5 -17188 1.58e+17
         B6   1383 6.61e+18
         B7   4415 1.67e+18
         B8  16543 8.16e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.17e-16  1.01e-15  3.15e-16  1.24e-16  2.15e-21  1.38e-14   3.8e-13  1.62e-08
          R  1.94e+15         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1  9.94e+14     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  3.17e+15      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  8.06e+15      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  4.65e+20   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5  7.22e+13    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  2.63e+12   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  6.19e+07   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.92e-18  7.62e-18  2.39e-18  9.41e-19  1.63e-23  1.05e-16  2.88e-15  1.23e-10
          R  2.55e+17         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1  1.31e+17     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  4.18e+17      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  1.06e+18      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  6.14e+22   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5  9.53e+15    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  3.48e+14   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  8.16e+09   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07555, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133587, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5152, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             658295       337433       181681       191012      26537.1  1.10935e+06       280694      13687.3
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.775804, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.089154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.8818, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0047639   0.00478725   0.00489627
      low eigenvalue method done, cpu time[sec] = 0.891178, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00479   0.00487         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000284   0.00487     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00487241
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99889   0.00110994  0.000863666  0.000187613  6.48789e-06  3.75477e-05  1.20627e-06  1.58449e-05  9.77047e-08   1.4799e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78654, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132006, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52571, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             219432       112478      60560.4      63670.7      8845.69       369784      93564.8      4562.44
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.778629, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081627, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876961, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00429229   0.00431056   0.00425235
      low eigenvalue method done, cpu time[sec] = 0.886608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00431   0.00423         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00025   0.00423     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00423434
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999035  0.000964592  0.000780886  0.000139907  5.04183e-06   2.3577e-05  8.49392e-07  1.62668e-05  9.79002e-08   1.4799e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78929, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         6.33945e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132063, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             131659      67486.6      36336.2      38202.4      5307.42       221870      56138.9      2737.46
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77807, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.87624, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00405032   0.00406625   0.00392919
      low eigenvalue method done, cpu time[sec] = 0.885917, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00407   0.00391         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000233   0.00391     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00391382
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999108  0.000891575  0.000732879  0.000119349  4.51129e-06  1.93267e-05  7.32627e-07  1.64838e-05  9.80632e-08  1.47991e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79555, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         8.87523e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54255, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            94042.2      48204.7      25954.4      27287.4      3791.01       158479      40099.2      1955.33
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780321, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082187, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879226, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00388376   0.00389819   0.00371038
      low eigenvalue method done, cpu time[sec] = 0.888967, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0039    0.0037         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000222    0.0037     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00369666
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999158  0.000842106   0.00069836  0.000106802  4.19439e-06  1.70224e-05  6.66647e-07  1.66193e-05   9.8211e-08  1.47992e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81056, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1          1.1411e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132363, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54205, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            73143.9      37492.6      20186.8      21223.6      2948.56       123261      31188.3      1520.81
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.779764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081605, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.877939, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00375602   0.00376935   0.00354473
      low eigenvalue method done, cpu time[sec] = 0.887473, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00377   0.00353         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000213   0.00353     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00353221
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999195  0.000804643  0.000671275  9.80072e-05  3.97151e-06  1.55058e-05  6.21908e-07  1.67103e-05  9.83491e-08  1.47992e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8084, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132642, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54401, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            65829.5      33743.3      18168.1      19101.2      2653.71       110935      28069.4      1368.73
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.774855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091542, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.872798, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0037017   0.00371457   0.00347487
      low eigenvalue method done, cpu time[sec] = 0.882432, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00371   0.00346         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000209   0.00346     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00346284
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999211  0.000788841  0.000659626  9.44724e-05  3.88119e-06  1.49155e-05  6.04166e-07  1.67446e-05  9.84153e-08  1.47992e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.80474, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.90183e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132468, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55902, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            43886.4      22495.5      12112.1      12734.1      1769.14      73956.8        18713      912.487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.774192, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081942, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.86244, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00348887   0.00350006   0.00320474
      low eigenvalue method done, cpu time[sec] = 0.871681, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0035   0.00319         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000195   0.00319     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0031945
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999272  0.000727713  0.000613426  8.17185e-05  3.54899e-06  1.28613e-05   5.4077e-07  1.68483e-05  9.87256e-08  1.47994e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.80887, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         2.53578e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132209, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55923, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32914.8      16871.6      9084.06      9550.61      1326.85      55467.6      14034.7      684.365
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77739, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.865701, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00333479   0.00334485   0.00301281
      low eigenvalue method done, cpu time[sec] = 0.874941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00334     0.003         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000184     0.003     0.998
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00300376
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999316  0.000684262  0.000579593  7.34816e-05  3.32648e-06   1.1586e-05  4.99905e-07  1.68862e-05  9.90101e-08  1.47995e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81214, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.16972e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132385, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55937, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26331.8      13497.3      7267.25      7640.48      1061.48      44374.1      11227.8      547.492
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780885, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.869686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00321391   0.00322312   0.00286444
      low eigenvalue method done, cpu time[sec] = 0.879632, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00322   0.00286         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000176   0.00286     0.999
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00285626
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999349  0.000650661  0.000552931  6.75453e-05  3.16057e-06  1.06857e-05  4.70239e-07  1.68896e-05  9.92756e-08  1.47996e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81915, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133262, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21943.2      11247.8      6056.04      6367.07      884.569      36978.4      9356.48      456.244
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781751, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081986, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.870193, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00311444   0.00312299   0.00274386
      low eigenvalue method done, cpu time[sec] = 0.880048, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00312   0.00274         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00017   0.00274     0.999
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00273635
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999377  0.000623345  0.000530966  6.29796e-05  3.02902e-06  1.00018e-05  4.47186e-07  1.68729e-05  9.95259e-08  1.47997e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         4.43761e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56329, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18808.4      9640.94      5190.89      5457.49      758.202      31695.8      8019.84      391.066
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.777093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082555, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.865898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00302996   0.00303798   0.00264254
      low eigenvalue method done, cpu time[sec] = 0.875753, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00304   0.00264         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000164   0.00264     0.999
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00263558
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9994  0.000600389   0.00051232   5.9313e-05  2.92043e-06  9.45664e-06  4.28464e-07  1.68436e-05  9.97634e-08  1.47999e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         5.07156e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133185, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.557, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16457.4      8435.82      4542.03       4775.3      663.427      27733.8      7017.36      342.183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.779784, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082023, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00295658   0.00296415   0.00255536
      low eigenvalue method done, cpu time[sec] = 0.878069, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00296   0.00255         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00016   0.00255     0.999
         *Z       ---       ---  1.58e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00254885
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999419  0.000580632  0.000496144  5.62761e-05  2.82824e-06  9.00728e-06  4.12781e-07   1.6806e-05  9.99897e-08     1.48e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81587, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2300 K
      Energy reference = 80720 1/cm
      Energy step      = 397 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -56.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005675
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.182152
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.087564
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.079735
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.364041
         W1 Well: minimal relaxation eigenvalue = 0.0336311
         W1 Well: maximal relaxation eigenvalue = 1.04878
         W1 Well:       grid size = 248
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17736 1/cm
         B1 Barrier:        grid size = 204
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -268 1/cm
         B2 Barrier:        grid size = 203
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 128 1/cm
         B3 Barrier:        grid size = 215
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4635 1/cm
         B4 Barrier:        grid size = 219
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23691 1/cm => truncating
         B5 Barrier:        grid size = 263
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23691 1/cm
         B6 Barrier:        grid size = 200
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1319 1/cm
         B7 Barrier:        grid size = 192
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4495 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16405 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.03286, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 248
      MasterEquation::Barrier::truncate: real weight = 9.12336e+28
      MasterEquation::Barrier::truncate: effective weight = 1.65029e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17736 -17736 8.87e+06 1.85e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -268  5.3e+18
         B2    129 2.83e+18
         B3  -4635  1.6e+18
         B4  -6222 1.68e+18
         B5 -17736 2.34e+17
         B6   1320  9.2e+18
         B7   4496 2.39e+18
         B8  16406 1.26e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.74e-16   5.4e-16  1.89e-16  7.81e-17  2.28e-21  6.76e-15   1.7e-13   5.3e-09
          R  3.65e+15         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  1.85e+15     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  5.29e+15      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  1.28e+16       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4  4.39e+20   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5  1.48e+14    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6  5.89e+12   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  1.89e+08  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.6e-18  3.16e-18   1.1e-18  4.57e-19  1.33e-23  3.95e-17  9.93e-16   3.1e-11
          R  6.24e+17         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  3.17e+17     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  9.05e+17      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  2.19e+18       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4  7.51e+22   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5  2.53e+16    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6  1.01e+15   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  3.22e+10  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.04605, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46447, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             696852       372606       210542       220621      30843.6     1.21e+06       314133      16539.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.754045, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081068, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840999, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00650166    0.0065478   0.00708533
      low eigenvalue method done, cpu time[sec] = 0.850286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00655   0.00704         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00039   0.00704     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00703548
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997824   0.00217619   0.00170124  0.000360291  1.26964e-05  7.18222e-05  2.33607e-06  3.44124e-05  2.43843e-07  5.40184e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48755, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             232284       124202      70180.7      73540.4      10281.2       403333       104711      5513.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.751178, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.836626, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00591027   0.00594704   0.00621286
      low eigenvalue method done, cpu time[sec] = 0.845757, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00595   0.00617         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000346   0.00617     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0061745
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99809   0.00190988   0.00155092  0.000271528  1.00172e-05  4.58141e-05  1.67299e-06  3.53046e-05  2.44321e-07  5.40186e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70439, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         6.15924e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129793, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             139370      74521.2      42108.4      44124.3      6168.73       242000      62826.6      3307.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753488, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079444, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.839302, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00560533   0.00563774   0.00577257
      low eigenvalue method done, cpu time[sec] = 0.848797, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00564   0.00574         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000324   0.00574     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00573944
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998225   0.00177531    0.0014628  0.000233177  9.03105e-06  3.78635e-05  1.45519e-06  3.57755e-05  2.44715e-07  5.40188e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         8.62294e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.12914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49809, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            99550.2      53229.4      30077.4      31517.3      4406.23       172857      44876.1      2362.82
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753179, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.83861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00539448   0.00542404   0.00547301
      low eigenvalue method done, cpu time[sec] = 0.84778, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00542   0.00544         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000309   0.00544     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00544322
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998316   0.00168368   0.00139903  0.000209678  8.44045e-06  3.35399e-05  1.33179e-06  3.60781e-05   2.4507e-07   5.4019e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.10866e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130052, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49507, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            77427.9      41400.7      23393.6      24513.5      3427.07       134444      34903.7      1837.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.754247, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079086, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.839386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00523219   0.00525968   0.00524538
      low eigenvalue method done, cpu time[sec] = 0.848612, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00526   0.00522         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000297   0.00522     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00521801
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998386   0.00161402   0.00134875  0.000193154  8.02409e-06  3.06874e-05  1.24792e-06  3.62879e-05    2.454e-07  5.40191e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71462, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129819, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49404, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            69685.2      37260.6      21054.2      22062.1      3084.36       121000      31413.3      1653.97
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.75117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.836579, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00516301   0.00518964   0.00514916
      low eigenvalue method done, cpu time[sec] = 0.845781, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00519   0.00512         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000292   0.00512     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00512278
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998415   0.00158456   0.00132706  0.000186499  7.85511e-06  2.95751e-05  1.21461e-06  3.63695e-05  2.45558e-07  5.40192e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71129, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.84777e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129423, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            46456.8      24840.4      14036.1      14708.1      2056.24      80666.5      20942.2      1102.65
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753174, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.838304, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00489104   0.00491443   0.00477568
      low eigenvalue method done, cpu time[sec] = 0.847518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00491   0.00475         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000274   0.00475     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00475298
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99853   0.00147018   0.00124067  0.000162414   7.2319e-06  2.56952e-05  1.09529e-06   3.6633e-05  2.46295e-07  5.40197e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73291, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          2.4637e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130638, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34842.6      18630.3      10527.1      11031.1      1542.18      60499.9      15706.6      826.987
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755812, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079139, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.84082, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00469315   0.00471434   0.00450891
      low eigenvalue method done, cpu time[sec] = 0.850041, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00471   0.00449         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00026   0.00449     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00448867
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998612   0.00138842   0.00117702   0.00014679  6.81278e-06   2.3277e-05  1.01809e-06   3.6755e-05   2.4697e-07  5.40201e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.07962e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49766, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27874.1      14904.2      8421.69      8824.85      1233.75      48399.9      12565.3       661.59
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.757272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079448, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.843047, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00453727   0.00455681   0.00430183
      low eigenvalue method done, cpu time[sec] = 0.852332, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00456   0.00428         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000249   0.00428     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0042834
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998675   0.00132493   0.00112662   0.00013549  6.49923e-06  2.15646e-05  9.61865e-07  3.68012e-05  2.47598e-07  5.40205e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.722, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51285, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23228.4      12420.2      7018.07      7354.04      1028.12      40333.3      10471.1      551.325
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.84136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00440858   0.00442682   0.00413296
      low eigenvalue method done, cpu time[sec] = 0.850599, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00443   0.00412         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000241   0.00412     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00411594
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998727   0.00127313   0.00108495  0.000126773  6.24986e-06  2.02601e-05  9.18057e-07  3.68021e-05  2.48189e-07   5.4021e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73599, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         4.31147e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131645, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              19910      10645.9      6015.49      6303.47      881.247      34571.4      8975.23      472.564
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758633, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079436, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.843951, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00429898   0.00431616   0.00399064
      low eigenvalue method done, cpu time[sec] = 0.853165, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00432   0.00397         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000234   0.00397     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00397478
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998771   0.00122947   0.00104946  0.000119755  6.04351e-06  1.92179e-05  8.82392e-07  3.67737e-05  2.48749e-07  5.40214e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73583, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          4.9274e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130114, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51673, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17421.3      9315.15      5263.55      5515.53      771.091      30249.9      7853.32      413.494
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755127, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079782, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.8411, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00420354   0.00421982   0.00386786
      low eigenvalue method done, cpu time[sec] = 0.850286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00422   0.00385         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000227   0.00385     0.998
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00385296
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998808   0.00119179   0.00101858   0.00011393  5.86791e-06   1.8357e-05  8.52451e-07  3.67256e-05  2.49284e-07  5.40218e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74004, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 2400 K
      Energy reference = 83500 1/cm
      Energy step      = 414 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -54.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005762
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.18493
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.086461
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.093717
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.355531
         W1 Well: minimal relaxation eigenvalue = 0.0322875
         W1 Well: maximal relaxation eigenvalue = 1.05887
         W1 Well:       grid size = 246
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -18344 1/cm
         B1 Barrier:        grid size = 202
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -128 1/cm
         B2 Barrier:        grid size = 202
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -128 1/cm
         B3 Barrier:        grid size = 213
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 217
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6338 1/cm
         B5 Barrier: nonpositive number of states at -23726 1/cm => truncating
         B5 Barrier:        grid size = 259
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23725 1/cm
         B6 Barrier:        grid size = 199
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1114 1/cm
         B7 Barrier:        grid size = 191
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4426 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16431 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.03712, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 246
      MasterEquation::Barrier::truncate: real weight = 8.20324e+28
      MasterEquation::Barrier::truncate: effective weight = 1.54739e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -18344 -18344 6.57e+06 2.41e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -128 7.08e+18
         B2   -128 3.94e+18
         B3  -4681 2.34e+18
         B4  -6338 2.44e+18
         B5 -18344 3.43e+17
         B6   1115 1.27e+19
         B7   4427 3.36e+18
         B8  16432 1.91e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.51e-16  3.01e-16  1.16e-16  5.03e-17  2.37e-21  3.44e-15  7.97e-14  1.88e-09
          R  6.64e+15         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1  3.32e+15       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2   8.6e+15       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  1.99e+16      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4  4.23e+20  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  2.91e+14    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6  1.25e+13   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7  5.33e+08  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.07e-19  1.41e-18  5.46e-19  2.36e-19  1.11e-23  1.62e-17  3.74e-16  8.81e-12
          R  1.41e+18         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1  7.07e+17       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2  1.83e+18       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  4.23e+18      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4     9e+22  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  6.19e+16    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6  2.67e+15   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7  1.14e+11  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.05067, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128519, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             733741       408659       242270       253076      35590.6  1.31115e+06       348770      19759.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738649, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079462, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.824255, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0086269   0.00871291   0.00994887
      low eigenvalue method done, cpu time[sec] = 0.833557, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00871   0.00985         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00052   0.00985     0.995
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00985086
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996042   0.00395838   0.00311204  0.000638043  2.31312e-05  0.000127889  4.21252e-06  6.92082e-05  5.58738e-07   1.7585e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.64108, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128026, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             244580       136220      80756.6      84358.6      11863.5       437050       116257      6586.51
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739637, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077978, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.823723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00791718   0.00798711   0.00881507
      low eigenvalue method done, cpu time[sec] = 0.83286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00799   0.00874         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000465   0.00874     0.996
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00873804
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996489   0.00351122   0.00286032  0.000489017  1.85109e-05   8.2778e-05  3.06515e-06  7.09646e-05  5.59806e-07   1.7585e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65824, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         5.99151e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127785, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46636, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             146748      81731.7        48454      50615.2      7118.12       262230        69754      3951.91
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738415, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077592, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.821997, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00754521   0.00760746   0.00823412
      low eigenvalue method done, cpu time[sec] = 0.831044, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00761   0.00817         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000437   0.00817     0.996
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00816687
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996718    0.0032817   0.00271047  0.000422986  1.68077e-05  6.89488e-05  2.68751e-06  7.19151e-05  5.60677e-07  1.75851e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66267, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         8.38812e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127996, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46422, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             104820      58379.8        34610      36153.7      5084.37       187307      49824.3      2822.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738466, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077991, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.822427, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00728632   0.00734353   0.00783637
      low eigenvalue method done, cpu time[sec] = 0.831517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00734   0.00778         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000418   0.00778     0.996
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00777544
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996876   0.00312441   0.00260121  0.000382223  1.57851e-05  6.14074e-05  2.47302e-06  7.25398e-05  5.61457e-07  1.75852e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66027, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.07847e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.12782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47494, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            81526.8      45406.5      26918.9      28119.5      3954.51       145683      38752.2       2195.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.737893, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07759, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.821416, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0070862   0.00713968   0.00753286
      low eigenvalue method done, cpu time[sec] = 0.831038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00714   0.00748         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000404   0.00748     0.996
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00747654
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996996   0.00300431   0.00251464  0.000353437  1.50628e-05  5.64207e-05  2.32695e-06  7.29838e-05   5.6218e-07  1.75852e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127923, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47396, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            73374.1      40865.9        24227      25307.6      3559.06       131115        34877      1975.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077571, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.825474, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00700068   0.00705261   0.00740423
      low eigenvalue method done, cpu time[sec] = 0.834545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00705   0.00735         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000398   0.00735     0.996
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00734981
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997047   0.00295338   0.00247719  0.000341814  1.47692e-05  5.44734e-05  2.26885e-06  7.31602e-05  5.62526e-07  1.75852e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67202, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.79745e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127666, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4765, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48916.1      27243.9      16151.3      16871.7      2372.71      87409.9      23251.3       1317.3
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.735927, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.819997, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00666321   0.00670929   0.00690311
      low eigenvalue method done, cpu time[sec] = 0.829296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00671   0.00686         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000374   0.00686     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00685578
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997245   0.00275487   0.00232733  0.000299606  1.36838e-05  4.76648e-05  2.06029e-06  7.37567e-05  5.64135e-07  1.75854e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67037, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.39661e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128138, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48462, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36687.1      20432.9      12113.5      12653.8      1779.53      65557.4      17438.5      987.977
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.73427, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078107, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.818543, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00641641   0.00645846   0.00654331
      low eigenvalue method done, cpu time[sec] = 0.827616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00646    0.0065         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000356    0.0065     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00650078
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997388   0.00261221   0.00221625  0.000272097  1.29512e-05  4.34065e-05  1.92489e-06  7.40707e-05  5.65601e-07  1.75855e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67688, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.99576e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48321, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29349.6      16346.3      9690.79        10123      1423.62        52446      13950.8      790.382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.824458, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00622124   0.00626027   0.00626291
      low eigenvalue method done, cpu time[sec] = 0.834065, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00626   0.00622         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000343   0.00622     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00622393
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997499   0.00250097   0.00212792  0.000252132  1.24014e-05  4.03825e-05    1.826e-06  7.42309e-05  5.66964e-07  1.75856e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68322, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127897, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48019, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              24458        13622      8075.66      8435.86      1186.35        43705      11625.7      658.651
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738395, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077736, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.822137, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00605962   0.00609624   0.00603348
      low eigenvalue method done, cpu time[sec] = 0.831461, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0061     0.006         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000332     0.006     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0059973
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99759    0.0024099    0.0020546  0.000236689  1.19631e-05   3.8073e-05  1.74876e-06  7.42972e-05  5.68246e-07  1.75858e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.19406e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128419, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              20964        11676      6921.99      7230.74      1016.87      37461.4      9964.85      564.558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077989, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.822611, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0059216   0.00595623   0.00583961
      low eigenvalue method done, cpu time[sec] = 0.831977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00596   0.00581         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000322   0.00581     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00580571
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997667   0.00233291   0.00199196  0.000224225  1.15995e-05   3.6224e-05  1.68575e-06  7.43019e-05  5.69462e-07  1.75859e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68347, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.79321e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128161, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48655, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18343.5      10216.5      6056.74       6326.9      889.765      32778.7      8719.25      493.989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741449, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078105, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.825536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00580112   0.00583408   0.00567194
      low eigenvalue method done, cpu time[sec] = 0.834873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00583   0.00564         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000314   0.00564     0.997
         *Z       ---       ---  7.42e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00563995
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997734   0.00226631   0.00193733  0.000213857  1.12894e-05  3.46936e-05  1.63274e-06  7.42642e-05   5.7062e-07   1.7586e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68771, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2500 K
      Energy reference = 86280 1/cm
      Energy step      = 431 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -51.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005862
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.183251
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.085885
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.091754
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.351983
         W1 Well: minimal relaxation eigenvalue = 0.0308462
         W1 Well: maximal relaxation eigenvalue = 1.07334
         W1 Well:       grid size = 245
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19315 1/cm
         B1 Barrier:        grid size = 201
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -351 1/cm
         B2 Barrier:        grid size = 200
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 80 1/cm
         B3 Barrier:        grid size = 211
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 215
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6385 1/cm
         B5 Barrier: nonpositive number of states at -23625 1/cm => truncating
         B5 Barrier:        grid size = 255
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23624 1/cm
         B6 Barrier:        grid size = 197
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1372 1/cm
         B7 Barrier:        grid size = 190
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4389 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16458 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.03062, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 245
      MasterEquation::Barrier::truncate: real weight = 7.58482e+28
      MasterEquation::Barrier::truncate: effective weight = 1.48949e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19315 -19315 3.97e+06 3.13e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -351 9.37e+18
         B2     81 5.43e+18
         B3  -4660 3.38e+18
         B4  -6385 3.52e+18
         B5 -19315 4.97e+17
         B6   1373 1.72e+19
         B7   4390 4.69e+18
         B8  16458 2.85e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.89e-17   1.8e-16  7.61e-17  3.43e-17   2.5e-21  1.89e-15  4.06e-14  7.36e-10
          R  1.12e+16         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  5.56e+15     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  1.31e+16      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  2.91e+16      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4     4e+20  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5   5.3e+14    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6  2.46e+13   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7  1.36e+09  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.34e-19  6.77e-19  2.86e-19  1.29e-19  9.42e-24   7.1e-18  1.53e-16  2.77e-12
          R  2.99e+18         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  1.48e+18     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  3.49e+18      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  7.74e+18      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4  1.06e+23  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5  1.41e+17    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6  6.55e+15   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7  3.61e+11  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.044, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.127775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.42157, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             768858       445431       276966       288469      40794.7  1.41231e+06       384436      23361.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.729715, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077956, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.81409, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0110036    0.0111494    0.0132098
      low eigenvalue method done, cpu time[sec] = 0.823109, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0111     0.013         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000653     0.013     0.993
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0130375
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993195   0.00680482   0.00536579   0.00108242  3.97536e-05   0.00021497  7.17005e-06  0.000130558  1.18815e-06  5.17704e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60705, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             256286       148477      92321.8      96156.2      13598.2       470770       128145      7787.26
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.728368, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077192, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.811528, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0101629     0.010283    0.0117886
      low eigenvalue method done, cpu time[sec] = 0.820729, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0103    0.0117         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000588    0.0117     0.994
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0116513
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993919   0.00608128     0.004965  0.000834047   3.2238e-05  0.000141116  5.29625e-06  0.000133763  1.19038e-06  5.17705e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         5.83492e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126331, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44355, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             153772      89086.2      55393.1      57693.7      8158.94       282462      76887.1      4672.35
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.72995, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07671, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.81234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00972296   0.00983077    0.0110607
      low eigenvalue method done, cpu time[sec] = 0.821243, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00983    0.0109         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000555    0.0109     0.995
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0109397
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99429   0.00570988   0.00472423  0.000725045  2.94605e-05  0.000118376  4.67751e-06  0.000135519  1.19218e-06  5.17707e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         8.16889e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126292, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44765, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             109837        63633      39566.5      41209.8      5827.81       201759      54919.4       3337.4
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.728574, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076697, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.81164, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00941599   0.00951568    0.0105608
      low eigenvalue method done, cpu time[sec] = 0.820984, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00952    0.0105         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000532    0.0105     0.995
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0104504
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994545   0.00545451   0.00454765  0.000657682  2.77904e-05  0.000105948   4.3255e-06  0.000136694  1.19377e-06  5.17708e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62907, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.05029e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.12689, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45582, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            85428.7      49492.4      30773.9      32052.1      4532.74       156923      42715.1      2595.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.727412, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.810217, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00917816   0.00927181    0.0101783
      low eigenvalue method done, cpu time[sec] = 0.819174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00927    0.0101         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000515    0.0101     0.995
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0100757
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994741   0.00525894   0.00440714  0.000610036  2.66087e-05  9.77158e-05  4.08542e-06  0.000137546  1.19525e-06   5.1771e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.63668, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126465, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            76885.8      44543.1      27696.6      28846.9      4079.47       141231      38443.6      2336.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.728348, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07663, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.810985, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00907635   0.00916748    0.0100159
      low eigenvalue method done, cpu time[sec] = 0.82009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00917   0.00992         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000507   0.00992     0.995
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00991657
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994824   0.00517586   0.00434619  0.000590774  2.61278e-05  9.44972e-05  3.98983e-06   0.00013789  1.19596e-06  5.17711e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.63334, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.75048e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45729, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            51257.2      29695.4      18464.4      19231.2      2719.65        94154        25629      1557.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.72926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077114, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.812351, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00867357   0.00875513   0.00938135
      low eigenvalue method done, cpu time[sec] = 0.822063, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00876   0.00929         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000478   0.00929     0.995
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00929415
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995149     0.004851   0.00410136  0.000520692  2.43469e-05  8.32225e-05   3.6461e-06  0.000139093  1.19923e-06  5.17714e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.64099, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.33397e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126669, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46015, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38442.9      22271.6      13848.3      14423.4      2039.73      70615.5      19221.8      1168.09
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.730904, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077287, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.81394, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00837787   0.00845281   0.00892384
      low eigenvalue method done, cpu time[sec] = 0.823469, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00845   0.00884         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000457   0.00884     0.996
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00884491
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995383   0.00461652   0.00391892   0.00047488  2.31412e-05  7.61504e-05  3.42233e-06   0.00013978   1.2022e-06  5.17718e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.64726, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.91746e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.127124, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46286, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30754.3      17817.2      11078.6      11538.7      1631.79      56492.4      15377.4      934.471
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.731602, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077333, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.815018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00814333   0.00821325   0.00856609
      low eigenvalue method done, cpu time[sec] = 0.82451, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00821   0.00849         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000441   0.00849     0.996
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00849333
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995567   0.00443302   0.00377324  0.000441549  2.22341e-05  7.11162e-05  3.25852e-06  0.000140182  1.20496e-06  5.17722e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65113, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.127198, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46511, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25628.6      14847.7      9232.18      9615.62      1359.82        47077      12814.5      778.726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.730838, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077007, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.814192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0079486    0.0080145   0.00827257
      low eigenvalue method done, cpu time[sec] = 0.823727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00801    0.0082         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000428    0.0082     0.996
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00820469
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995718   0.00428236   0.00365192  0.000415713  2.15093e-05  6.72637e-05  3.13032e-06  0.000140405  1.20755e-06  5.17725e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65284, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.08445e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.126611, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46408, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21967.4      12726.6       7913.3      8241.96      1165.56      40351.7      10983.9      667.479
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.731705, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.815032, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00778195   0.00784452   0.00802393
      low eigenvalue method done, cpu time[sec] = 0.824607, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00784   0.00796         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000416   0.00796     0.996
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00796006
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995845   0.00415468     0.003548  0.000394823  2.09068e-05  6.41735e-05  3.02553e-06  0.000140511     1.21e-06  5.17729e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65202, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.66794e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.127106, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45447, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19221.5      11135.8      6924.14      7211.72      1019.87      35307.8      9610.89      584.044
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.728709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076661, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.811426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00763619   0.00769595   0.00780844
      low eigenvalue method done, cpu time[sec] = 0.821325, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0077   0.00775         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000406   0.00775     0.996
         *Z       ---       ---  5.43e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00774794
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995956   0.00404396   0.00345713  0.000377417  2.03921e-05  6.16117e-05  2.93725e-06  0.000140534  1.21234e-06  5.17733e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.63819, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2600 K
      Energy reference = 89061 1/cm
      Energy step      = 448 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -49.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005384
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.178634
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.083548
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.090631
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.348171
         W1 Well: minimal relaxation eigenvalue = 0.0298
         W1 Well: maximal relaxation eigenvalue = 1.08522
         W1 Well:       grid size = 243
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19803 1/cm
         B1 Barrier:        grid size = 199
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -91 1/cm
         B2 Barrier:        grid size = 199
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -91 1/cm
         B3 Barrier:        grid size = 210
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -5019 1/cm
         B4 Barrier:        grid size = 213
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6363 1/cm
         B5 Barrier: nonpositive number of states at -23387 1/cm => truncating
         B5 Barrier:        grid size = 251
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23387 1/cm
         B6 Barrier:        grid size = 196
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1252 1/cm
         B7 Barrier:        grid size = 189
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4388 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16484 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.01859, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 243
      MasterEquation::Barrier::truncate: real weight = 7.1877e+28
      MasterEquation::Barrier::truncate: effective weight = 1.46718e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19803 -19803 3.07e+06 4.04e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -91 1.23e+19
         B2    -91  7.4e+18
         B3  -5019 4.83e+18
         B4  -6363 5.01e+18
         B5 -19803 7.13e+17
         B6   1253 2.32e+19
         B7   4389 6.46e+18
         B8  16485  4.2e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.98e-17  1.02e-16  4.69e-17   2.2e-17   2.4e-21  9.87e-16  1.98e-14  2.83e-10
          R  2.01e+16         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1  9.79e+15     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  2.13e+16      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3  4.55e+16      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4  4.16e+20  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  1.01e+15    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6  5.05e+13   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  3.54e+09  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.68e-19  3.44e-19  1.58e-19  7.41e-20   8.1e-24  3.33e-18  6.68e-17  9.53e-13
          R  5.95e+18         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1   2.9e+18     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  6.33e+18      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3  1.35e+19      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4  1.23e+23  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  3.01e+17    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6   1.5e+16   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  1.05e+12  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.03189, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125447, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             802131       482779       314735       326897      46473.2  1.51305e+06       420974      27360.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.714237, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07632, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.79664, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0143411    0.0146059    0.0183981
      low eigenvalue method done, cpu time[sec] = 0.806319, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0146    0.0181         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000871    0.0181     0.991
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0180657
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98906    0.0109398   0.00869028   0.00167819  6.43243e-05  0.000339314  1.14782e-05  0.000231651  2.36577e-06  1.39473e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.56183, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             267377       160926       104912       108966      15491.1       504351       140325      9120.22
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.713537, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075974, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.795687, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0133573    0.0135794    0.0165735
      low eigenvalue method done, cpu time[sec] = 0.804561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0136    0.0163         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00079    0.0163     0.992
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0163033
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990127    0.0098725   0.00809262   0.00132074  5.27868e-05  0.000225512  8.59581e-06  0.000237093  2.37007e-06  1.39473e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5794, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         5.68833e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124595, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41648, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             160426      96555.8        62947      65379.3      9294.65       302611      84194.7      5472.13
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.712298, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075789, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.794413, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0128334    0.0130346    0.0156227
      low eigenvalue method done, cpu time[sec] = 0.80332, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.013    0.0154         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000749    0.0154     0.992
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0153824
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990685   0.00931487   0.00773019   0.00115736  4.85405e-05  0.000190522  7.64655e-06  0.000240141  2.37351e-06  1.39474e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.57586, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         7.96367e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.12425, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.42395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             114590      68968.5      44962.1      46699.5      6639.03       216150      60139.1      3908.67
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.714676, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.796862, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0124653    0.0126525    0.0149655
      low eigenvalue method done, cpu time[sec] = 0.806181, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0127    0.0147         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00072    0.0147     0.993
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0147448
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991071   0.00892876   0.00746274   0.00105526  4.59848e-05  0.000171368  7.10587e-06  0.000242216  2.37656e-06  1.39474e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5854, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.0239e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.42721, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            89125.7      53642.1      34970.5      36321.9      5163.69       168117      46774.8      3040.07
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.713184, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.795267, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0121789    0.0123556    0.0144604
      low eigenvalue method done, cpu time[sec] = 0.805423, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0124    0.0143         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000698    0.0143     0.993
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0142543
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991368   0.00863175     0.007249  0.000982596  4.41741e-05   0.00015866  6.73661e-06  0.000243747  2.37936e-06  1.39474e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.58994, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124491, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4187, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            80213.1      48277.9      31473.5      32689.7      4647.32       151305      42097.4      2736.07
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.715633, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.79712, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.012056    0.0122283    0.0142455
      low eigenvalue method done, cpu time[sec] = 0.806569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0122     0.014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000688     0.014     0.993
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0140454
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991495   0.00850524   0.00715604  0.000953126  4.34365e-05  0.000153685  6.58944e-06  0.000244373   2.3807e-06  1.39475e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.58279, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.7065e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.43759, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53475.4      32185.3      20982.3      21793.1      3098.22       100870      28064.9      1824.04
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.716779, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.797933, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.011568    0.0117235    0.0134027
      low eigenvalue method done, cpu time[sec] = 0.807376, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0117    0.0132         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000651    0.0132     0.993
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0132254
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991991    0.0080087   0.00678117  0.000845441  4.07001e-05  0.000136228  6.05935e-06  0.000246622  2.38689e-06  1.39476e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60354, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.27533e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124724, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.43187, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40106.5        24139      15736.7      16344.8      2323.66      75652.6      21048.7      1368.03
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.714719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075555, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.796222, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.011208    0.0113518    0.0127921
      low eigenvalue method done, cpu time[sec] = 0.80596, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0114    0.0126         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000625    0.0126     0.994
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0126306
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992352   0.00764848   0.00650037  0.000774659  3.88423e-05  0.000125246  5.71334e-06  0.000247981  2.39249e-06  1.39477e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.59546, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.84417e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125497, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.43754, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32085.2      19311.2      12589.4      13075.9      1858.93      60522.1      16838.9      1094.43
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.715649, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076207, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.79799, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0109215    0.0110564     0.012313
      low eigenvalue method done, cpu time[sec] = 0.807439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0111    0.0122         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000604    0.0122     0.994
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0121633
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992634   0.00736551   0.00627525  0.000722964  3.74412e-05   0.00011741  5.45948e-06   0.00024884  2.39769e-06  1.39477e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60436, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124853, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44342, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26737.7      16092.6      10491.2      10896.6      1549.11      50435.1      14032.5      912.022
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.71719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.798536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0106829    0.0108106    0.0119188
      low eigenvalue method done, cpu time[sec] = 0.807934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0108    0.0118         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000586    0.0118     0.994
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0117784
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992868   0.00713247   0.00608718  0.000682772  3.63191e-05  0.000111401   5.2604e-06  0.000249385  2.40256e-06  1.39478e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60931, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         3.98183e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44059, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              22918      13793.7      8992.42      9339.91      1327.81      43230.1      12027.8      781.734
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.71399, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075933, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.795751, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0104782       0.0106    0.0115841
      low eigenvalue method done, cpu time[sec] = 0.80522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0106    0.0115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000572    0.0115     0.994
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0114514
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993066   0.00693444   0.00592564  0.000650195  3.53847e-05  0.000106572  5.09739e-06  0.000249717  2.40718e-06  1.39479e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60404, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         4.55067e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.124624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20053.3      12069.5      7868.37      8172.42      1161.83      37826.3      10524.3      684.017
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.714626, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.796144, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0102988    0.0104155    0.0112933
      low eigenvalue method done, cpu time[sec] = 0.805892, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0104    0.0112         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000559    0.0112     0.994
         *Z       ---       ---  3.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0111672
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993238   0.00676235   0.00578406  0.000622993   3.4585e-05  0.000102562  4.95983e-06  0.000249899  2.41158e-06   1.3948e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60821, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2700 K
      Energy reference = 91841 1/cm
      Energy step      = 466 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -47.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005868
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.177696
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.08292
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.089582
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.338083
         W1 Well: minimal relaxation eigenvalue = 0.028769
         W1 Well: maximal relaxation eigenvalue = 1.09951
         W1 Well:       grid size = 241
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -20464 1/cm
         B1 Barrier:        grid size = 198
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -427 1/cm
         B2 Barrier:        grid size = 197
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 38 1/cm
         B3 Barrier:        grid size = 207
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4621 1/cm
         B4 Barrier:        grid size = 211
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6485 1/cm
         B5 Barrier: nonpositive number of states at -23261 1/cm => truncating
         B5 Barrier:        grid size = 247
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23261 1/cm
         B6 Barrier:        grid size = 194
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1436 1/cm
         B7 Barrier:        grid size = 187
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16349 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.00781, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 241
      MasterEquation::Barrier::truncate: real weight = 6.95045e+28
      MasterEquation::Barrier::truncate: effective weight = 1.47575e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -20464 -20464 2.14e+06 5.19e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -427  1.6e+19
         B2     39    1e+19
         B3  -4621 6.83e+18
         B4  -6485 7.07e+18
         B5 -20464 1.01e+18
         B6   1437  3.1e+19
         B7   4699  8.8e+18
         B8  16349  6.1e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.9e-17  6.03e-17  2.98e-17  1.45e-17  2.31e-21  5.38e-16  1.01e-14  1.16e-10
          R  3.44e+16         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1  1.66e+16     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  3.35e+16     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3   6.9e+16         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  4.33e+20  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5  1.86e+15    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  9.87e+13   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  8.63e+09   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.89e-20  1.85e-19  9.14e-20  4.44e-20  7.07e-24  1.65e-18  3.11e-17  3.55e-13
          R  1.12e+19         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1  5.41e+18     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  1.09e+19     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3  2.25e+19         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  1.41e+23  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5  6.06e+17    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  3.22e+16   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  2.82e+12   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.02125, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123862, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36678, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             833500       520538       355643       368410      52637.5  1.61292e+06       458203      31764.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695436, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075119, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.776592, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0182841    0.0187419     0.024921
      low eigenvalue method done, cpu time[sec] = 0.785484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0187    0.0243         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00113    0.0243     0.988
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0243151
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983149    0.0168509    0.0134109   0.00257333  9.90132e-05  0.000508534  1.74723e-05  0.000390566  4.44444e-06  3.47316e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50328, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122117, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             277833       173513       118548       122803      17545.8       537641       152734      10588.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697241, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074432, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.777605, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0171156    0.0175036    0.0225685
      low eigenvalue method done, cpu time[sec] = 0.786707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0175    0.0221         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00103    0.0221     0.989
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0220704
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.984705    0.0152953    0.0125631   0.00202294   8.2378e-05  0.000343359  1.32987e-05  0.000399457  4.45232e-06  3.47317e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50599, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         5.55075e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122347, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39294, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             166700       104108      71128.6        73682      10527.5       322585      91640.6      6352.94
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695668, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074708, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.776685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0164968    0.0168505    0.0213489
      low eigenvalue method done, cpu time[sec] = 0.785427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0169    0.0209         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000979    0.0209     0.989
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0209026
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.985514     0.014486    0.0120425   0.00177817  7.62103e-05  0.000292157  1.19141e-05  0.000404471  4.45854e-06  3.47318e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52825, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         7.77105e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122901, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.3821, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             119071      74362.6      50806.1        52630      7519.64       230418      65457.6      4537.82
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.778105, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0160618    0.0163925    0.0205048
      low eigenvalue method done, cpu time[sec] = 0.787071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0164    0.0201         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000944    0.0201      0.99
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0200928
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986075    0.0139248    0.0116563   0.00162578  7.24897e-05  0.000264049  1.11235e-05  0.000407923  4.46404e-06  3.47319e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52183, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         9.99135e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.121928, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.3881, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            92611.1      57837.6      39515.9      40934.5      5848.61       179214      50911.4      3529.41
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697022, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074652, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.777927, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0157229    0.0160364    0.0198553
      low eigenvalue method done, cpu time[sec] = 0.787086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.016    0.0195         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000916    0.0195      0.99
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0194688
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986508    0.0134923    0.0113463   0.00151744  6.98493e-05  0.000245363  1.05828e-05  0.000410499  4.46908e-06   3.4732e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52426, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122911, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38527, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              83350      52053.8      35564.3        36841      5263.75       161292      45820.3      3176.47
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.696643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074341, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.776903, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0155773    0.0158835    0.0195785
      low eigenvalue method done, cpu time[sec] = 0.785726, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0159    0.0192         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000904    0.0192      0.99
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0192026
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986692    0.0133078    0.0112112    0.0014735  6.87727e-05   0.00023804   1.0367e-05  0.000411563  4.47147e-06   3.4732e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5209, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.66523e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122748, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38943, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            55566.7      34702.6      23709.5      24560.7      3509.17       107528      30546.9      2117.65
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.698841, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.77872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0149981    0.0152766    0.0184912
      low eigenvalue method done, cpu time[sec] = 0.788027, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0153    0.0182         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000858    0.0182     0.991
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0181555
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987418    0.0125821    0.0106644   0.00131292  6.47716e-05  0.000212295  9.58874e-06  0.000415456  4.48254e-06  3.47322e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52924, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          2.2203e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.12376, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39822, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              41675      26026.9      17782.2      18420.5      2631.87      80646.2      22910.1      1588.24
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.698609, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073971, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.778612, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0145697    0.0148287     0.017701
      low eigenvalue method done, cpu time[sec] = 0.788053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0148    0.0174         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000825    0.0174     0.991
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0173932
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987946    0.0120538    0.0102528   0.00120726  6.20482e-05  0.000196055  9.07947e-06  0.000417902  4.49253e-06  3.47325e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         2.77538e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123023, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40783, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              33340      20821.5      14225.7      14736.4       2105.5      64516.9      18328.1      1270.59
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.777296, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.014228    0.0144719    0.0170794
      low eigenvalue method done, cpu time[sec] = 0.786569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0145    0.0168         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000799    0.0168     0.992
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0167926
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988362    0.0116376   0.00992164      0.00113  5.99897e-05  0.000184442  8.70508e-06  0.000419527  4.50178e-06  3.47327e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54705, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39812, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27783.3      17351.3      11854.8      12280.3      1754.58      53764.1      15273.4      1058.82
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.701346, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074279, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.78145, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0139428    0.0141747    0.0165668
      low eigenvalue method done, cpu time[sec] = 0.790723, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0142    0.0163         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000777    0.0163     0.992
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0162968
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988706     0.011294   0.00964416   0.00106986  5.83379e-05  0.000175521  8.41097e-06  0.000420633  4.51045e-06  3.47329e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54116, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.88553e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23814.3      14872.5      10161.2        10526      1503.93      46083.5      13091.5      907.563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.701379, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.074269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.781437, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0136977    0.0139195    0.0161307
      low eigenvalue method done, cpu time[sec] = 0.790705, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0139    0.0159         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000759    0.0159     0.992
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0158746
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988999    0.0110014   0.00940522   0.00102106    5.696e-05   0.00016834  8.16977e-06  0.000421383  4.51866e-06  3.47331e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.55279, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          4.4406e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123273, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20837.5      13013.5      8891.08      9210.25      1315.94      40323.1      11455.1      794.118
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.700217, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074418, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.780345, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0134825    0.0136957    0.0157512
      low eigenvalue method done, cpu time[sec] = 0.789661, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0137    0.0155         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000742    0.0155     0.992
         *Z       ---       ---  2.91e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.015507
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.989253    0.0107467   0.00919535  0.000980263  5.57789e-05  0.000162368  7.96593e-06  0.000421878  4.52647e-06  3.47333e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54199, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2800 K
      Energy reference = 94621 1/cm
      Energy step      = 483 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -45 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005923
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.176698
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.082429
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.092877
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.335762
         W1 Well: minimal relaxation eigenvalue = 0.0277831
         W1 Well: maximal relaxation eigenvalue = 1.11981
         W1 Well:       grid size = 240
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21299 1/cm
         B1 Barrier:        grid size = 196
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -46 1/cm
         B2 Barrier:        grid size = 196
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -46 1/cm
         B3 Barrier:        grid size = 206
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4876 1/cm
         B4 Barrier:        grid size = 209
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6325 1/cm
         B5 Barrier: nonpositive number of states at -23231 1/cm => truncating
         B5 Barrier:        grid size = 244
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23231 1/cm
         B6 Barrier:        grid size = 193
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1402 1/cm
         B7 Barrier:        grid size = 187
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4299 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16374 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.00533, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 240
      MasterEquation::Barrier::truncate: real weight = 6.84327e+28
      MasterEquation::Barrier::truncate: effective weight = 1.506e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21299 -21299 1.32e+06 6.62e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -46 2.07e+19
         B2    -46 1.34e+19
         B3  -4876 9.57e+18
         B4  -6325 9.89e+18
         B5 -21299 1.42e+18
         B6   1403  4.1e+19
         B7   4300 1.19e+19
         B8  16375 8.76e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.75e-17  3.67e-17  1.95e-17  9.79e-18  2.21e-21  3.04e-16   5.4e-15  5.03e-11
          R  5.72e+16         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1  2.72e+16     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  5.13e+16     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  1.02e+17      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4  4.53e+20  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5  3.29e+15    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  1.85e+14   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  1.99e+10  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.94e-20  1.04e-19  5.51e-20  2.77e-20  6.24e-24   8.6e-19  1.53e-17  1.42e-13
          R  2.02e+19         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1  9.63e+18     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  1.82e+19     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  3.61e+19      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4   1.6e+23  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5  1.16e+18    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  6.55e+16   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  7.03e+12  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
   MasterEquation::set:  done, cpu time[sec] = 1.01856, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.34674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             862943       558581       399781       412809      59302.4  1.71158e+06       495978      36583.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.691297, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.771527, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0228105    0.0235638    0.0328373
      low eigenvalue method done, cpu time[sec] = 0.780534, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0236    0.0318         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00143    0.0318     0.984
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0317933
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975253    0.0247473     0.019829   0.00365422  0.000146734  0.000734746  2.56256e-05  0.000629222  7.92781e-06  8.06351e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47556, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121313, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             287648       186194       133260       137603      19767.5       570527       165326      12194.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.68926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074525, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770116, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0214876    0.0221349    0.0299561
      low eigenvalue method done, cpu time[sec] = 0.778747, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0221    0.0291         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00131    0.0291     0.985
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0290848
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.977361    0.0226391    0.0186669   0.00292465  0.000123324   0.00050151  1.97416e-05  0.000642872  7.94139e-06  8.06353e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48567, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         5.42133e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37189, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             172589       111716      79956.1      82561.7      11860.5       342316      99195.6      7316.77
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.687133, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073711, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0207794    0.0213737     0.028445
      low eigenvalue method done, cpu time[sec] = 0.77592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0214    0.0277         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00125    0.0277     0.986
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0276582
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.978471    0.0215287    0.0179502   0.00258934  0.000114698  0.000429405  1.77979e-05  0.000650679  7.95205e-06  8.06355e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49481, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         7.58986e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             123278      79797.2      57111.5      58972.7      8471.77       244511        70854      5226.27
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.690316, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073853, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0202789    0.0208374    0.0273938
      low eigenvalue method done, cpu time[sec] = 0.779084, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0208    0.0267         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00121    0.0267     0.987
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0266634
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.979246    0.0207543    0.0174159   0.00237845  0.000109496  0.000389795  1.66881e-05  0.000656117  7.96142e-06  8.06357e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49634, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         9.75839e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121532, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            95882.6      62064.5      44420.1      45867.6      6589.16       190176      55108.7      4064.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.690497, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770715, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0198876    0.0204191    0.0265821
      low eigenvalue method done, cpu time[sec] = 0.77947, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0204    0.0259         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00118    0.0259     0.987
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0258938
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.979845    0.0201553    0.0169857   0.00222767  0.000105803  0.000363437  1.59285e-05  0.000660222  7.96999e-06  8.06358e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50175, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38254, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            86294.3      55858.1      39978.1      41280.9      5930.24       171158      49597.8      3658.39
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.691274, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0197192    0.0202393    0.0262355
      low eigenvalue method done, cpu time[sec] = 0.779648, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0202    0.0256         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00116    0.0256     0.987
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0255648
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980101    0.0198992    0.0167977   0.00216635  0.000104297    0.0003531  1.56253e-05  0.000661932  7.97405e-06  8.06359e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          1.6264e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121645, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37336, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            57529.6      37238.7        26652      27520.6      3953.49       114105      33065.2      2438.92
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.691738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074256, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.771984, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0190474    0.0195236    0.0248699
      low eigenvalue method done, cpu time[sec] = 0.780779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0195    0.0243         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00111    0.0243     0.988
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0242664
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981111    0.0188885    0.0160345   0.00194131  9.86919e-05  0.000316709  1.45303e-05  0.000668295  7.99279e-06  8.06364e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5024, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.16853e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38379, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            43147.2        27929        19989      20640.4      2965.12        85579      24798.9      1829.19
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695602, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.775038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0185486    0.0189937    0.0238737
      low eigenvalue method done, cpu time[sec] = 0.784135, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.019    0.0233         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00106    0.0233     0.988
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0233171
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98185    0.0181496    0.0154574   0.00179251  9.48695e-05  0.000293706  1.38125e-05   0.00067242  8.00968e-06  8.06369e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51634, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.71066e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122185, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34517.7      22343.2      15991.2      16512.3       2372.1      68463.2      19839.1      1463.35
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.691572, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073607, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.77101, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0181495    0.0185707    0.0230877
      low eigenvalue method done, cpu time[sec] = 0.779911, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0186    0.0226         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00103    0.0226     0.989
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0225667
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982434    0.0175655    0.0149915   0.00168334  9.19754e-05  0.000277228   1.3284e-05  0.000675267  8.02528e-06  8.06374e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52123, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122046, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28764.8      18619.4        13326      13760.3      1976.75      57052.7      16532.6      1219.46
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.690954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073961, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0178158    0.0182175     0.022438
      low eigenvalue method done, cpu time[sec] = 0.779387, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0182    0.0219         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00101    0.0219     0.989
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0219456
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982918    0.0170821       0.0146   0.00159813  8.96494e-05  0.000264549  1.28683e-05  0.000677294   8.0399e-06  8.06379e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51065, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122519, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39288, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24655.5      15959.4      11422.3      11794.5      1694.35      48902.3      14170.8      1045.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.693648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074147, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.773629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0175284    0.0179139    0.0218841
      low eigenvalue method done, cpu time[sec] = 0.782378, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0179    0.0214         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000983    0.0214     0.989
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0214155
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983331    0.0166695     0.014262   0.00152884  8.77062e-05  0.000254329  1.25269e-05  0.000678757  8.05373e-06  8.06384e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52448, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         4.33706e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.121747, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38536, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21573.6      13964.5      9994.51      10320.2      1482.56      42789.5      12399.5      914.596
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.693044, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.772428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0172757    0.0176472    0.0214014
      low eigenvalue method done, cpu time[sec] = 0.781189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0176     0.021         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000964     0.021     0.989
         *Z       ---       ---  2.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.020953
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983691    0.0163095    0.0139646   0.00147082  8.60382e-05   0.00024582   1.2238e-05  0.000679812   8.0669e-06  8.06388e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51519, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2900 K
      Energy reference = 97401 1/cm
      Energy step      = 500 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -42.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005649
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.175916
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.081246
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.088408
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.333377
         W1 Well: minimal relaxation eigenvalue = 0.0269426
         W1 Well: maximal relaxation eigenvalue = 1.14312
         W1 Well:       grid size = 239
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22098 1/cm
         B1 Barrier:        grid size = 195
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -98 1/cm
         B2 Barrier:        grid size = 195
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -98 1/cm
         B3 Barrier:        grid size = 205
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -5098 1/cm
         B4 Barrier:        grid size = 208
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6598 1/cm
         B5 Barrier: nonpositive number of states at -23099 1/cm => truncating
         B5 Barrier:        grid size = 241
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23098 1/cm
         B6 Barrier:        grid size = 192
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1401 1/cm
         B7 Barrier:        grid size = 186
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4401 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16401 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 0.996727, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 239
      MasterEquation::Barrier::truncate: real weight = 6.8442e+28
      MasterEquation::Barrier::truncate: effective weight = 1.55922e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22098 -22098  8.2e+05 8.41e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -98 2.65e+19
         B2    -98 1.78e+19
         B3  -5098 1.33e+19
         B4  -6598 1.37e+19
         B5 -22098 1.98e+18
         B6   1402 5.38e+19
         B7   4402 1.59e+19
         B8  16402 1.24e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.06e-17  2.26e-17  1.28e-17  6.63e-18  2.07e-21  1.74e-16  2.93e-15  2.25e-11
          R   9.4e+16         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  4.42e+16      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2  7.82e+16     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3  1.51e+17       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4  4.84e+20  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  5.73e+15     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6  3.42e+14   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7  4.44e+10  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.86e-20  6.09e-20  3.44e-20  1.78e-20  5.56e-24   4.7e-19  7.88e-18  6.07e-14
          R  3.49e+19         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  1.64e+19      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2   2.9e+19     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3   5.6e+19       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4   1.8e+23  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  2.13e+18     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6  1.27e+17   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7  1.65e+13  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
   MasterEquation::set:  done, cpu time[sec] = 1.01017, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.34108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             890453       596777       447221       460378      66480.4   1.8087e+06       534152      41824.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.684409, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073757, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.764397, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0281898    0.0294123    0.0430593
      low eigenvalue method done, cpu time[sec] = 0.773225, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0294    0.0413         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00182    0.0413     0.979
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0412817
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.965074    0.0349264    0.0281304   0.00503274  0.000208808   0.00101697  3.60616e-05  0.000972537   1.3506e-05  1.75832e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.45878, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120582, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35338, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             296818       198926       149074       153459      22160.1       602900       178051      13941.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.683604, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073011, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.762548, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0267005    0.0277633    0.0395285
      low eigenvalue method done, cpu time[sec] = 0.771634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0278     0.038         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00168     0.038     0.981
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0380255
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.967829    0.0321714    0.0266128   0.00407861  0.000177382   0.00070266  2.81478e-05  0.000992609  1.35284e-05  1.75833e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.46956, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1          5.2993e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120243, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.3665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             178091       119355      89444.1      92075.6      13296.1       361740       106830      8364.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682097, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072945, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.761075, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0258953    0.0268772    0.0376588
      low eigenvalue method done, cpu time[sec] = 0.769885, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0269    0.0363         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0016    0.0363     0.982
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0362921
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.969295    0.0307049    0.0256676     0.003631  0.000165834  0.000605487  2.55363e-05   0.00100422  1.35459e-05  1.75833e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         7.41902e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36336, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             127208      85253.9      63888.7      65768.3       9497.2       258386      76307.4      5974.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.680865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.760353, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.025324    0.0262508    0.0363528
      low eigenvalue method done, cpu time[sec] = 0.769067, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0263    0.0351         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00155    0.0351     0.982
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0350776
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.970323    0.0296773     0.024959    0.0033478  0.000158867  0.000552036  2.40442e-05   0.00101239  1.35611e-05  1.75833e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47639, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         9.53874e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120895, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36932, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            98939.2      66308.6      49691.2      51153.1      7386.71       200967      59350.2      4647.22
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.679442, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.75887, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0248761    0.0257611    0.0353415
      low eigenvalue method done, cpu time[sec] = 0.767646, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0258    0.0341         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00151    0.0341     0.983
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0341351
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.97112      0.02888    0.0243862   0.00314465  0.000153918  0.000516423  2.30221e-05   0.00101862  1.35751e-05  1.75834e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48163, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120215, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37632, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            89045.3      59677.7      44722.1      46037.8      6648.04       180870      53415.2      4182.49
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.681498, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073279, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.760512, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.024683    0.0255504     0.034909
      low eigenvalue method done, cpu time[sec] = 0.769201, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0256    0.0337         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00149    0.0337     0.983
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0337315
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.971462    0.0285385    0.0241354   0.00306186  0.000151897  0.000502444  2.26138e-05   0.00102123  1.35816e-05  1.75834e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48913, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.58979e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.11968, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36473, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            59363.5      39785.2      29814.7      30691.9      4432.03       120580      35610.1      2788.33
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682687, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072997, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.761563, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0239111    0.0247101     0.033201
      low eigenvalue method done, cpu time[sec] = 0.770178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0247    0.0321         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00142    0.0321     0.984
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0321341
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.972813     0.027187    0.0231136   0.00275735  0.000144373  0.000453167  2.11378e-05   0.00103108   1.3612e-05  1.75835e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47794, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.11972e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.119819, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37435, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44522.6      29838.9        22361      23018.9      3324.02        90435      26707.6      2091.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682004, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0233361    0.0240865     0.031951
      low eigenvalue method done, cpu time[sec] = 0.770383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0241     0.031         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00137     0.031     0.984
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0309618
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.973805    0.0261952    0.0223375   0.00255535  0.000139232  0.000421954  2.01686e-05   0.00103762  1.36392e-05  1.75836e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48776, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.64965e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.120693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37184, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35618.1      23871.1      17888.8      18415.1      2659.22        72348      21366.1         1673
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.684504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072895, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0228749    0.0235877    0.0309623
      low eigenvalue method done, cpu time[sec] = 0.772772, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0236      0.03         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00133      0.03     0.985
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0300324
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974591    0.0254089    0.0217089   0.00240678  0.000135333  0.000399555  1.94539e-05   0.00104226  1.36643e-05  1.75837e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49093, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.1209, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29681.8      19892.6      14907.4      15345.9      2216.01        60290      17805.1      1394.16
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.684396, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073116, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76312, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0224885    0.0231707    0.0301434
      low eigenvalue method done, cpu time[sec] = 0.772367, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0232    0.0293         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0013    0.0293     0.985
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0292614
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975243    0.0247565    0.0211793   0.00229062  0.000132194  0.000382294  1.88908e-05   0.00104567  1.36878e-05  1.75838e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49567, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.70951e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37923, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25441.5      17050.8      12777.7      13153.7      1899.44      51677.1      15261.5         1195
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.684471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073393, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763797, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0221553    0.0228117    0.0294441
      low eigenvalue method done, cpu time[sec] = 0.773087, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0228    0.0286         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00127    0.0286     0.986
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0286019
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975801    0.0241986    0.0207211     0.002196  0.000129569  0.000368362  1.84279e-05   0.00104823    1.371e-05  1.75839e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49925, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         4.23944e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121038, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38193, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22261.3      14919.4      11180.5      11509.5      1662.01      45217.5      13353.8      1045.62
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.683828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073496, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763815, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0218618     0.022496    0.0288337
      low eigenvalue method done, cpu time[sec] = 0.773035, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0225     0.028         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00125     0.028     0.986
         *Z       ---       ---  1.71e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0280256
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.976289     0.023711    0.0203171   0.00211665  0.000127313  0.000356749  1.80357e-05   0.00105017  1.37312e-05   1.7584e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50101, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 3000 K
      Energy reference = 100181 1/cm
      Energy step      = 517 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -40.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005934
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.174348
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.080691
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.089397
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.330999
         W1 Well: minimal relaxation eigenvalue = 0.0262374
         W1 Well: maximal relaxation eigenvalue = 1.17009
         W1 Well:       grid size = 238
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22864 1/cm
         B1 Barrier:        grid size = 194
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -116 1/cm
         B2 Barrier:        grid size = 194
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -116 1/cm
         B3 Barrier:        grid size = 203
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4769 1/cm
         B4 Barrier:        grid size = 206
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6320 1/cm
         B5 Barrier: nonpositive number of states at -23899 1/cm => truncating
         B5 Barrier:        grid size = 240
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23899 1/cm
         B6 Barrier:        grid size = 191
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1434 1/cm
         B7 Barrier:        grid size = 185
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4536 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16427 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 0.988826, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 238
      MasterEquation::Barrier::truncate: real weight = 6.93933e+28
      MasterEquation::Barrier::truncate: effective weight = 1.63464e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22864 -22864 5.06e+05 1.06e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -116 3.37e+19
         B2   -116 2.34e+19
         B3  -4769 1.83e+19
         B4  -6320 1.88e+19
         B5 -22864 2.73e+18
         B6   1435 7.01e+19
         B7   4537 2.11e+19
         B8  16428 1.75e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.56e-18  1.41e-17  8.47e-18  4.52e-18  1.91e-21  1.02e-16  1.62e-15  1.04e-11
          R  1.52e+17         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  7.07e+16     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2  1.18e+17     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  2.21e+17      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4  5.24e+20  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5  9.83e+15    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  6.17e+14   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  9.58e+10  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.72e-20  3.71e-20  2.22e-20  1.19e-20  5.01e-24  2.67e-19  4.26e-18  2.74e-14
          R   5.8e+19         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  2.69e+19     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2  4.49e+19     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  8.42e+19      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4     2e+23  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5  3.74e+18    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  2.35e+17   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  3.65e+13  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
   MasterEquation::set:  done, cpu time[sec] = 1.0019, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120428, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.31804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             916037       635009       498030       511189      74182.8    1.904e+06       572584      47492.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677549, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072649, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.75606, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.034414    0.0363582    0.0560084
      low eigenvalue method done, cpu time[sec] = 0.764766, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0364     0.053         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00231     0.053     0.973
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0530379
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.952439    0.0475608    0.0384848   0.00670975  0.000286768   0.00135546  4.89492e-05   0.00144846  2.20778e-05  3.62443e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.42661, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120089, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.33582, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             305346       211670       166010       170396      24727.6       634666       190861        15831
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677234, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072564, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.755834, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.032745    0.0344518    0.0516829
      low eigenvalue method done, cpu time[sec] = 0.764458, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0345    0.0491         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00213    0.0491     0.975
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.049143
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.955932    0.0440682    0.0365687   0.00548765  0.000246238  0.000948646  3.87237e-05   0.00147681  2.21131e-05  3.62444e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.44481, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         5.18403e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120051, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.34323, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             183207       127002      99605.9       102238      14836.6       380800       114517      9498.58
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.672867, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072436, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.751144, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.031838    0.0334233      0.04938
      low eigenvalue method done, cpu time[sec] = 0.759931, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0334    0.0471         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00204    0.0471     0.976
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0470564
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.957803     0.042197    0.0353648   0.00490899  0.000231355  0.000822674  3.53479e-05   0.00149338  2.21404e-05  3.62445e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.4462, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         7.25764e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120496, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.34173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             130862      90715.6      71147.1      73026.9      10597.5       272000      81797.7       6784.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677503, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.755664, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0311925    0.0326948    0.0477667
      low eigenvalue method done, cpu time[sec] = 0.764712, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0327    0.0456         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00198    0.0456     0.977
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.045589
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.959119    0.0408812    0.0344579   0.00454147  0.000222372  0.000753276  3.34171e-05   0.00150514  2.21641e-05  3.62445e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.44973, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         9.33125e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.11969, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.33758, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             101782      70556.6      55336.6      56798.7      8242.53       211555      63620.4      5276.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072841, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.755372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0306856    0.0321246    0.0465149
      low eigenvalue method done, cpu time[sec] = 0.764484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0321    0.0444         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00193    0.0444     0.978
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0444475
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960142    0.0398575    0.0337223   0.00427721  0.000215985   0.00070698  3.20933e-05   0.00151418  2.21857e-05  3.62446e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.44447, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120114, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35104, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            91603.7      63500.9        49803      51118.9      7418.28       190400      57258.4      4749.29
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.674679, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.752978, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0304667     0.031879    0.0459789
      low eigenvalue method done, cpu time[sec] = 0.761649, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0319     0.044         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00191     0.044     0.978
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0439578
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960582    0.0394184    0.0333995   0.00416937  0.000213376  0.000688791  3.15642e-05   0.00151799  2.21959e-05  3.62447e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.45561, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.55521e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.119488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35975, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            61069.1      42333.9        33202      34079.2      4945.52       126933      38172.3      3166.19
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676697, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072699, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.755421, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0295902    0.0308984    0.0438579
      low eigenvalue method done, cpu time[sec] = 0.764431, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0309     0.042         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00182     0.042     0.979
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0420152
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.962324    0.0376764    0.0320807   0.00377195  0.000203651   0.00062459  2.96493e-05   0.00153252  2.22428e-05  3.62449e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.46713, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.07361e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45801.9      31750.5      24901.5      25559.4      3709.14        95200      28629.2      2374.64
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.67786, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072397, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.756194, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0289356    0.0301694    0.0423014
      low eigenvalue method done, cpu time[sec] = 0.765121, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0302    0.0406         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00176    0.0406     0.979
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0405846
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.963606    0.0363936     0.031075   0.00350763  0.000196995   0.00058384  2.83899e-05   0.00154236  2.22848e-05  3.62451e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.46429, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.59201e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120907, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36454, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36641.5      25400.4      19921.2      20447.5      2967.31        76160      22903.4      1899.72
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.677857, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072423, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.75612, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0284096    0.0295855    0.0410677
      low eigenvalue method done, cpu time[sec] = 0.765039, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0296    0.0394         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00172    0.0394      0.98
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0394477
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964626    0.0353741    0.0302578   0.00331286  0.000191939  0.000554549  2.74598e-05   0.00154949  2.23235e-05  3.62453e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47501, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120209, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35573, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30534.6        21167        16601      17039.6      2472.76      63466.6      19086.1       1583.1
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.678131, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073973, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.758098, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0279681    0.0290968    0.0400442
      low eigenvalue method done, cpu time[sec] = 0.767031, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0291    0.0385         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00168    0.0385     0.981
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0385024
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.965474    0.0345264    0.0295676   0.00316031  0.000187864  0.000531944  2.67262e-05   0.00155485  2.23596e-05  3.62454e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.46592, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.62882e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120514, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35603, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26172.5      18143.1      14229.4      14605.4      2119.51        54400      16359.5      1356.94
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.678511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072611, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.757192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0275868    0.0286757    0.0391688
      low eigenvalue method done, cpu time[sec] = 0.766162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0287    0.0377         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00164    0.0377     0.981
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0376924
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9662    0.0338001    0.0289694   0.00303588  0.000184451  0.000513677  2.61223e-05   0.00155898  2.23938e-05  3.62456e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.46605, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         4.14722e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120426, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36354, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22900.9      15875.2      12450.7      12779.7      1854.57        47600      14314.6      1187.32
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.676651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072477, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.754831, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0272505    0.0283051    0.0384038
      low eigenvalue method done, cpu time[sec] = 0.763722, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0283     0.037         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00161     0.037     0.981
         *Z       ---       ---  1.33e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0369835
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.966836    0.0331643    0.0284409   0.00293142  0.000181514  0.000498431  2.56102e-05    0.0015622  2.24262e-05  3.62458e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47135, elapsed time[sec] = 0
rate calculation done, cpu time[sec] = 4945.77, elapsed time[sec] = 96
