Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002227, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 0.00616, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 0.002496, elapsed time[sec] = 0
         Model::HinderedRotor::_init: WARNING: potential second derivative at the minimum is negative, assuming zero
         effective rotational constant[1/cm]  = 27.3382
         analytic  frequency at minimum[1/cm] = 0
         numerical frequency at minimum[1/cm] = 0
         minimum energy[kcal/mol]             = 0
         maximum energy[kcal/mol]             = 0
         maximum frequency[1/cm]              = 0
         ground energy [kcal/mol]             = 0
         highest energy level [kcal/mol]      = 19462.6
         number of levels                     = 999
         10 lowest excited states [kcal/mol] relative to the ground: 0.0782 0.0782 0.313 0.313 0.703 0.703 1.25 1.25 1.95
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum             PG             PI  ***
           100        2.82615        2.82615        2.82615
           200        3.99678        3.99678        3.99678
           300        4.89503        4.89503        4.89503
           400         5.6523         5.6523         5.6523
           500        6.31946        6.31946        6.31946
           600        6.92262        6.92262        6.92262
           700        7.47729        7.47729        7.47729
           800        7.99355        7.99355        7.99355
           900        8.47844        8.47844        8.47844
          1000        8.93707        8.93707        8.93707
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 1.89529, elapsed time[sec] = 0
      ground state energy, kcal/mol:   -90.2506
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.201385, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.058625, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.000876, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.557091, elapsed time[sec] = 0
         effective power exponent at 690.248 kcal/mol = 11.4574
      interpolating states number/density done, cpu time[sec] = 2.68063, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 4.60341, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         18.6633
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002157, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.004193, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007701, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.55015        9.55009        4.77506
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001668, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003696, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007694, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.022397, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         19.7111        11.2504        7.16236
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001727, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.0037, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006858, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         27.4886        14.3446        9.42584
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001665, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003679, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006775, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.019437, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001581, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003604, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00713, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:          9.3775        1.21307        1.07412
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002232, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.004259, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007517, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.020607, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001519, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003497, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006452, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.70353        1.21666        1.08111
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002061, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.004108, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007371, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.019271, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001228, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.002805, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.005213, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.46633        1.30142        1.14413
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001318, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00275, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.005214, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.015041, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         6.45642       0.996004        0.86988
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001177, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.001665, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.003219, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.006733, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.24335        0.93381       0.927142
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000575, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.001063, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.002284, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.004563, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.033948, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.008847, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 6e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000116, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -22.6613
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.006023, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.001019, elapsed time[sec] = 0
            effective power exponent at 622.659 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.03001, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.030372, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -19.4076
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001455, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000513, elapsed time[sec] = 0
            effective power exponent at 619.406 kcal/mol = 11.9694
         interpolating states number/density done, cpu time[sec] = 0.017438, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017508, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.4142
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001449, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000507, elapsed time[sec] = 0
            effective power exponent at 616.412 kcal/mol = 11.9705
         interpolating states number/density done, cpu time[sec] = 0.017356, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017423, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.678
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001432, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.0005, elapsed time[sec] = 0
            effective power exponent at 613.676 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.017084, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.0172, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.2049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00144, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000518, elapsed time[sec] = 0
            effective power exponent at 611.203 kcal/mol = 11.9723
         interpolating states number/density done, cpu time[sec] = 0.017092, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017156, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.4e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.00049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001426, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.0005, elapsed time[sec] = 0
            effective power exponent at 608.998 kcal/mol = 11.9731
         interpolating states number/density done, cpu time[sec] = 0.016935, elapsed time[sec] = 1
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017069, elapsed time[sec] = 1
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.06773
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00143, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000498, elapsed time[sec] = 0
            effective power exponent at 607.066 kcal/mol = 11.9737
         interpolating states number/density done, cpu time[sec] = 0.01706, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017182, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.40945
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001428, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00047, elapsed time[sec] = 0
            effective power exponent at 605.407 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016802, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016866, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.05137
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001417, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000479, elapsed time[sec] = 0
            effective power exponent at 604.049 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016764, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016885, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.98779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001412, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000488, elapsed time[sec] = 0
            effective power exponent at 602.986 kcal/mol = 11.9739
         interpolating states number/density done, cpu time[sec] = 0.016761, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016829, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.23584
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001403, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000481, elapsed time[sec] = 0
            effective power exponent at 602.234 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.0167, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016774, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.76409
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001404, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00048, elapsed time[sec] = 0
            effective power exponent at 601.762 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.016783, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016907, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.54966
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001415, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000484, elapsed time[sec] = 0
            effective power exponent at 601.548 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016745, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016864, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.6097
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.0014, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00051, elapsed time[sec] = 0
            effective power exponent at 601.608 kcal/mol = 11.9746
         interpolating states number/density done, cpu time[sec] = 0.016747, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016814, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.85844
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001408, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000496, elapsed time[sec] = 0
            effective power exponent at 601.856 kcal/mol = 11.9754
         interpolating states number/density done, cpu time[sec] = 0.016719, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016845, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.25586
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001409, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000491, elapsed time[sec] = 0
            effective power exponent at 602.254 kcal/mol = 11.9765
         interpolating states number/density done, cpu time[sec] = 0.016856, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016974, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.76478
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001402, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000481, elapsed time[sec] = 0
            effective power exponent at 602.763 kcal/mol = 11.978
         interpolating states number/density done, cpu time[sec] = 0.016716, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016831, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.36686, elapsed time[sec] = 1
      effective power exponent at 601.548 kcal/mol = 12.1579
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.69769, elapsed time[sec] = 2
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.4e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -21.8779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001409, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000483, elapsed time[sec] = 0
            effective power exponent at 621.876 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.018333, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.018419, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -18.8158
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001399, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000489, elapsed time[sec] = 0
            effective power exponent at 618.814 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016758, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016828, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.0339
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.0014, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000484, elapsed time[sec] = 0
            effective power exponent at 616.032 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016783, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01685, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.5322
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001395, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000497, elapsed time[sec] = 0
            effective power exponent at 613.53 kcal/mol = 11.9729
         interpolating states number/density done, cpu time[sec] = 0.016575, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016642, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.3135
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001386, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000472, elapsed time[sec] = 0
            effective power exponent at 611.311 kcal/mol = 11.9725
         interpolating states number/density done, cpu time[sec] = 0.016493, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016563, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.39794
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001365, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00047, elapsed time[sec] = 0
            effective power exponent at 609.396 kcal/mol = 11.972
         interpolating states number/density done, cpu time[sec] = 0.016487, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016552, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.79112
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001366, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000489, elapsed time[sec] = 0
            effective power exponent at 607.789 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.01642, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016486, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.49595
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001375, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000567, elapsed time[sec] = 0
            effective power exponent at 606.494 kcal/mol = 11.9706
         interpolating states number/density done, cpu time[sec] = 0.016482, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01655, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.53243
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000484, elapsed time[sec] = 0
            effective power exponent at 605.53 kcal/mol = 11.9698
         interpolating states number/density done, cpu time[sec] = 0.016369, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016434, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.86054
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001368, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000465, elapsed time[sec] = 0
            effective power exponent at 604.858 kcal/mol = 11.9691
         interpolating states number/density done, cpu time[sec] = 0.016289, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016352, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.47456
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00138, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000477, elapsed time[sec] = 0
            effective power exponent at 604.472 kcal/mol = 11.9684
         interpolating states number/density done, cpu time[sec] = 0.016532, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016596, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.40594
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 604.404 kcal/mol = 11.9683
         interpolating states number/density done, cpu time[sec] = 0.016453, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01652, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.57463
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000457, elapsed time[sec] = 0
            effective power exponent at 604.572 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.016524, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016591, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.93202
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001362, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000469, elapsed time[sec] = 0
            effective power exponent at 604.93 kcal/mol = 11.9692
         interpolating states number/density done, cpu time[sec] = 0.016507, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016577, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.43522
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001371, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000459, elapsed time[sec] = 0
            effective power exponent at 605.433 kcal/mol = 11.9702
         interpolating states number/density done, cpu time[sec] = 0.016538, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016603, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.04421
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000489, elapsed time[sec] = 0
            effective power exponent at 606.042 kcal/mol = 11.9715
         interpolating states number/density done, cpu time[sec] = 0.016607, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016685, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.5192, elapsed time[sec] = 2
      effective power exponent at 604.404 kcal/mol = 12.2165
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.81486, elapsed time[sec] = 2
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      ground state energy, kcal/mol:   -0.195851
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.001514, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000541, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 7.25685, elapsed time[sec] = 7
         effective power exponent at 669.903 kcal/mol = 13.426
      interpolating states number/density done, cpu time[sec] = 7.27649, elapsed time[sec] = 7
   Model::RRHO::RRHO:  done, cpu time[sec] = 7.27658, elapsed time[sec] = 7
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000973, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000914, elapsed time[sec] = 0
   BIMOLECULAR: P7
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.47873        5.47873        5.47873
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 6e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000106, elapsed time[sec] = 0
   BARRIER: B8
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.47873        5.47873        5.47873
            TST level: E
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  done, cpu time[sec] = 3.8e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 5.9e-05, elapsed time[sec] = 0
      ground state energy, kcal/mol:   48.0656
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.003003, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.00034, elapsed time[sec] = 0
         effective power exponent at 551.933 kcal/mol = 10.6122
      interpolating states number/density done, cpu time[sec] = 0.015915, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.016014, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O            o          CH4           B1           B2           B3           B4           B5           B6           B7           B8
     100  1.97336e+28  1.11806e+26  1.79604e+26   1.2706e+26  1.20995e+26  3.09408e+23  9.07788e+27  3.09408e+23  8.88203e+27  3.09408e+23    4.226e+27  3.80284e+23  1.41451e+28  3.80284e+23  1.04337e+28  1.20275e+25  8.05078e+25  1.02816e+30  3.90845e+30  1.47525e+35  6.97811e+37 5.12326e+128  6.66948e+29  2.86822e+29  6.30386e+29
     200  2.23564e+29  7.62333e+26  1.46726e+27  1.01653e+27  9.67966e+26  1.75028e+24  7.26953e+28  1.75028e+24  7.11008e+28  1.75028e+24  3.38185e+28  1.07561e+24  1.21889e+29  1.07561e+24  8.41759e+28   3.4019e+25  6.44206e+26  2.65947e+31  6.23677e+31  1.08314e+30  2.15615e+30  1.52798e+59  8.88053e+30  3.66779e+30  8.00719e+30
     300  9.41744e+29   2.3228e+27   5.2604e+27  3.43512e+27  3.26835e+27   4.8232e+24  2.48522e+29   4.8232e+24  2.42385e+29   4.8232e+24  1.14827e+29  1.97601e+24  4.86817e+29  1.97601e+24  2.97918e+29   6.2497e+25  2.18681e+27  1.82852e+32  2.59538e+32  1.44208e+30  1.73256e+30  1.89702e+39  4.41749e+31  1.66476e+31  3.56174e+31
     400  2.74251e+30  5.05886e+27  1.36172e+28  8.18855e+27  7.76803e+27  9.90107e+24  6.13453e+29  9.90107e+24  5.94872e+29  9.90107e+24   2.7863e+29  3.04227e+24   1.4458e+30  3.04227e+24  7.82149e+29  9.62204e+25  5.31893e+27  7.43446e+32  6.76087e+32   3.1193e+30  3.38436e+30  5.81364e+32  1.53178e+32  5.25536e+31  1.04946e+32
     500   6.7088e+30   9.1848e+27   2.9582e+28  1.61907e+28  1.52765e+28  1.72965e+25  1.28796e+30  1.72965e+25  1.23988e+30  1.72965e+25    5.706e+29   4.2517e+24  3.66252e+30   4.2517e+24  1.77798e+30  1.34472e+26  1.09838e+28  2.27531e+33  1.40935e+33  6.99392e+30  7.25794e+30    2.174e+31  4.38422e+32  1.38727e+32   2.5148e+32
     600  1.48929e+31  1.48864e+28  5.75744e+28  2.85247e+28  2.67121e+28  2.72848e+25  2.45857e+30  2.72848e+25  2.34862e+30  2.72848e+25  1.05862e+30  5.58901e+24  8.37682e+30  5.58901e+24  3.71377e+30  1.76768e+26  2.06944e+28  5.83137e+33  2.59752e+33  1.53859e+31   1.5531e+31  1.56572e+31  1.10962e+33  3.28769e+32  5.35043e+32
     700  3.10526e+31  2.23336e+28  1.03869e+29  4.64933e+28  4.31306e+28  4.01168e+25  4.40321e+30  4.01168e+25   4.1744e+30  4.01168e+25  1.84194e+30  7.04296e+24  1.77967e+31  7.04296e+24  7.32198e+30  2.22753e+26  3.68096e+28  1.32406e+34  4.44573e+33  3.28489e+31  3.24865e+31  2.00151e+31  2.57036e+33  7.23031e+32   1.0547e+33
     800  6.18672e+31  3.16898e+28  1.77211e+29  7.16682e+28  6.57497e+28  5.60287e+25  7.52441e+30  5.60287e+25  7.08144e+30  5.60287e+25  3.06214e+30  8.60484e+24  3.57037e+31  8.60484e+24  1.38193e+31  2.72152e+26  6.29237e+28  2.75326e+34  7.26034e+33  6.79296e+31  6.61031e+31  3.04639e+31  5.55986e+33  1.50225e+33   1.9708e+33
     900  1.18917e+32  4.31186e+28  2.89608e+29  1.05938e+29  9.59741e+28  7.52507e+25  1.23926e+31  7.52507e+25  1.15823e+31  7.52507e+25  4.91733e+30  1.02677e+25  6.83675e+31  1.02677e+25  2.51777e+31  3.24744e+26   1.0442e+29  5.35429e+34  1.14977e+34  1.36146e+32  1.30791e+32  4.96309e+31  1.13781e+34  2.98133e+33  3.53766e+33
    1000  2.21835e+32  5.67887e+28  4.57314e+29  1.51557e+29  1.35425e+29  9.80136e+25  1.98016e+31  9.80136e+25  1.83853e+31  9.80136e+25  7.67995e+30  1.20256e+25  1.25901e+32  1.20256e+25  4.45239e+31  3.80344e+26  1.69248e+29  9.87598e+34  1.78334e+34  2.64867e+32  2.51886e+32  8.31132e+31  2.22341e+34  5.69316e+33   6.1512e+33
    1100  4.03237e+32  7.28764e+28   7.0205e+29  2.11192e+29  1.85967e+29  1.24554e+26  3.08377e+31  1.24554e+26  2.84544e+31  1.24554e+26  1.17192e+31  1.38738e+25  2.24222e+32  1.38738e+25  7.67157e+31  4.38799e+26  2.68985e+29  1.74488e+35  2.72616e+34  5.01139e+32  4.72857e+32  1.40422e+32  4.17722e+34  1.05163e+34  1.04174e+34
    1200  7.16278e+32  9.15662e+28  1.05248e+30  2.87967e+29  2.49743e+29  1.55119e+26  4.69659e+31  1.55119e+26  4.30822e+31  1.55119e+26  1.75283e+31  1.58081e+25  3.87856e+32  1.58081e+25  1.29162e+32  4.99976e+26  4.20283e+29   2.9743e+35  4.12339e+34  9.23956e+32  8.66602e+32  2.37075e+32  7.58498e+34  1.88656e+34   1.7249e+34
    1300  1.24607e+33  1.13052e+29    1.546e+30  3.85517e+29  3.29195e+29  1.89964e+26  7.01353e+31  1.89964e+26  6.39799e+31  1.89964e+26  2.57585e+31  1.78247e+25  6.53851e+32  1.78247e+25  2.12965e+32  5.63757e+26  6.46803e+29  4.91797e+35  6.18545e+34  1.66316e+33  1.55283e+33  3.97869e+32  1.33665e+35   3.2971e+34  2.80008e+34
    1400  2.12665e+33  1.37535e+29  2.23088e+30  5.08038e+29  4.27102e+29  2.29356e+26  1.02907e+32  2.29356e+26  9.33855e+31  2.29356e+26  3.72593e+31  1.99205e+25   1.0772e+33  1.99205e+25  3.44505e+32  6.30041e+26  9.81784e+29  7.92117e+35  9.21487e+34  2.92799e+33  2.72427e+33  6.61788e+32  2.29366e+35  5.62797e+34   4.4655e+34
    1500  3.56581e+33  1.65225e+29  3.16878e+30  6.60342e+29  5.46603e+29  2.73576e+26  1.48608e+32  2.73576e+26  1.34194e+32  2.73576e+26   5.3127e+31  2.20925e+25  1.73819e+33  2.20925e+25  5.47579e+32  6.98737e+26  1.47141e+30  1.24691e+36  1.36433e+35  5.04957e+33  4.68567e+33   1.0892e+33  3.84301e+35  9.40249e+34  7.00752e+34
    1600  5.88104e+33  1.96339e+29  4.43778e+30  8.47909e+29  6.91231e+29  3.22912e+26  2.11513e+32  3.22912e+26  1.90113e+32  3.22912e+26  7.47631e+31  2.43382e+25  2.75236e+33  2.43382e+25  8.56291e+32  7.69763e+26  2.17922e+30  1.92344e+36  2.00816e+35  8.54299e+33  7.91062e+33  1.77228e+33   6.3014e+35  1.54022e+35  1.08347e+35
    1700  9.55077e+33  2.31102e+29  6.13586e+30  1.07695e+30  8.64943e+29  3.77663e+26  2.97068e+32  3.77663e+26  2.65843e+32  3.77663e+26  1.03942e+32  2.66552e+25  4.28362e+33  2.66552e+25  1.31889e+33  8.43044e+26  3.19172e+30  2.91389e+36  2.93879e+35  1.41969e+34  1.31235e+34  2.84985e+33  1.01312e+36  2.47765e+35  1.65232e+35
    1800  1.52866e+34  2.69743e+29  8.38503e+30  1.35448e+30  1.07215e+30   4.3814e+26  4.12136e+32   4.3814e+26  3.67296e+32   4.3814e+26  1.42893e+32  2.90413e+25  6.56161e+33  2.90413e+25  2.00279e+33  9.18514e+26  4.62568e+30  4.34318e+36  4.27578e+35  2.32007e+34  2.14159e+34  4.52832e+33  1.59976e+36  3.91921e+35  2.48767e+35
    1900  2.41341e+34    3.125e+29   1.1336e+31  1.68836e+30  1.31777e+30  5.04659e+26  5.65308e+32  5.04659e+26  5.01844e+32  5.04659e+26  1.94391e+32  3.14948e+25  9.90424e+33  3.14948e+25  3.00115e+33   9.9611e+26  6.63727e+30   6.3789e+36  6.18455e+35  3.73235e+34  3.44092e+34  7.11085e+33   2.4845e+36  6.10341e+35  3.70051e+35
    2000  3.76117e+34  3.59614e+29  1.51739e+31  2.08737e+30  1.60722e+30  5.77547e+26  7.67243e+32  5.77547e+26  6.78607e+32  5.77547e+26  2.61867e+32  3.40136e+25  1.47468e+34  3.40136e+25  4.44133e+33  1.07578e+27  9.43368e+30  9.24376e+36  8.89218e+35   5.9162e+34  5.44811e+34  1.10376e+34  3.79973e+36  9.36743e+35  5.44256e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7           B8
     100 3.42725e+225  1.02816e+30  1.82422e+29  3.59409e+38  2.97017e+47 1.37269e+129  2.66912e+20     0.948966   5.6716e-76
     200 9.31689e+127  2.65947e+31   1.3474e+31   5.3462e+31   1.4067e+35   2.5011e+59  1.77655e+26  6.67151e+15  2.40176e-22
     300  5.25428e+95  1.82852e+32  9.34454e+31  1.94043e+31  2.80781e+33  2.63481e+39  3.25537e+28  2.48065e+21  0.000343844
     400  5.59864e+79  7.43446e+32  3.14247e+32  2.19148e+31  8.64445e+32  7.43797e+32  6.85118e+29  2.24136e+24       574766
     500  1.88188e+70  2.27531e+33   7.6354e+32   3.3271e+31  6.11818e+32  2.64767e+31  5.78559e+30  1.76233e+26   2.4622e+11
     600  1.11242e+64  5.83137e+33  1.55861e+33  5.64385e+31  6.25229e+32  1.84524e+31  3.01222e+31  4.01325e+27  1.66241e+15
     700  4.66878e+59  1.32406e+34  2.86953e+33  1.00078e+32  7.71401e+32  2.30412e+31  1.16805e+32    4.443e+28   1.0389e+18
     800   2.7953e+56  2.75326e+34  4.94984e+33  1.80053e+32  1.05646e+33  3.44579e+31  3.71834e+32   3.1024e+29   1.4585e+20
     900  9.78971e+53  5.35429e+34  8.17953e+33  3.23822e+32  1.53628e+33  5.53746e+31  1.02773e+33  1.58057e+30  7.53267e+21
    1000  1.17491e+52  9.87598e+34  1.31263e+34  5.77697e+32  2.31264e+33  9.17219e+31  2.55416e+33  6.41678e+30  1.92473e+23
    1100  3.43911e+50  1.74488e+35  2.06328e+34  1.01822e+33  3.54893e+33  1.53585e+32  5.84183e+33    2.197e+31  2.93854e+24
    1200  1.95761e+49   2.9743e+35  3.19407e+34  1.76961e+33  5.49845e+33  2.57368e+32  1.24971e+34  6.59133e+31  3.04046e+25
    1300  1.85281e+48  4.91797e+35  4.88644e+34  3.03006e+33  8.54709e+33  4.29205e+32  2.52998e+34  1.77997e+32  2.32657e+26
    1400  2.60764e+47  7.92117e+35  7.40326e+34  5.11068e+33  1.32752e+34  7.10056e+32  4.88948e+34  4.41176e+32   1.4015e+27
    1500  5.02891e+46  1.24691e+36  1.11222e+35  8.49252e+33  2.05451e+34  1.16317e+33  9.08149e+34  1.01832e+33  6.95832e+27
    1600  1.25008e+46  1.92344e+36  1.65812e+35  1.39085e+34  3.16247e+34  1.88489e+33  1.62959e+35   2.2134e+33  2.94746e+28
    1700  3.82275e+45  2.91389e+36  2.45402e+35  2.24601e+34  4.83576e+34  3.01995e+33  2.83696e+35  4.56984e+33  1.09376e+29
    1800  1.38699e+45  4.34318e+36  3.60641e+35  3.57809e+34  7.33977e+34  4.78317e+33  4.80794e+35  9.02403e+33  3.63002e+29
    1900  5.80323e+44   6.3789e+36  5.26331e+35  5.62641e+34  1.10527e+35  7.48943e+33  7.95467e+35  1.71386e+34  1.09529e+30
    2000  2.73722e+44  9.24376e+36   7.6289e+35  8.73733e+34  1.65081e+35  1.15951e+34  1.28785e+36  3.14487e+34  3.04445e+30
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D           B8            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0            1           -0
Model::init:  done, cpu time[sec] = 15.7166, elapsed time[sec] = 11
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 290 K
      Energy reference = 24874 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -89 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 4.8e-05
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.004837
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.004443
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.73427
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 3.02989
         W1 Well: minimal relaxation eigenvalue = 0.0976873
         W1 Well: maximal relaxation eigenvalue = 0.981649
         W1 Well:       grid size = 569
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3576 1/cm
         B1 Barrier:        grid size = 498
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -26 1/cm
         B2 Barrier:        grid size = 494
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 590
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4626 1/cm
         B4 Barrier: nonpositive number of states at -6176 1/cm => truncating
         B4 Barrier:        grid size = 621
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6176 1/cm
         B5 Barrier: nonpositive number of states at -23576 1/cm => truncating
         B5 Barrier:        grid size = 969
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23576 1/cm
         B6 Barrier:        grid size = 468
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1473 1/cm
         B7 Barrier:        grid size = 404
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16774 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 5.25845, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 569
      MasterEquation::Barrier::truncate: real weight = 4.63759e+58
      MasterEquation::Barrier::truncate: effective weight = 1.05652e+55
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 569
      MasterEquation::Barrier::truncate: real weight = 8.06427e+60
      MasterEquation::Barrier::truncate: effective weight = 1.83645e+57
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 569
      MasterEquation::Barrier::truncate: real weight = 9.15839e+67
      MasterEquation::Barrier::truncate: effective weight = 1.03153e+57
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3576  -3576 4.07e+09 3.27e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -26 2.65e+14
         B2    174 3.58e+13
         B3  -3576 8.33e+12
         B4  -3576 1.09e+13
         B5  -3576 1.11e+12
         B6   1474 1.43e+14
         B7   4674  1.1e+13
         B8  16774 7.61e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.87e-06  9.01e-06  4.09e-15  1.34e-18  1.48e-57    0.0617  8.37e+05  3.44e+32
          R  3.48e+05         1      3.14  1.43e-09  4.65e-13  5.16e-52  2.15e+04  2.91e+11   1.2e+38
         P1  1.11e+05     0.319         1  4.54e-10  1.48e-13  1.64e-52  6.84e+03  9.29e+10  3.81e+37
         P2  2.44e+14  7.02e+08   2.2e+09         1  0.000326  3.62e-43  1.51e+13  2.05e+20   8.4e+46
         P3  7.49e+17  2.15e+12  6.75e+12  3.06e+03         1  1.11e-39  4.62e+16  6.27e+23  2.57e+50
         P4  6.75e+56  1.94e+51  6.08e+51  2.76e+42  9.02e+38         1  4.16e+55  5.65e+62  2.32e+89
         P5      16.2  4.66e-05  0.000146  6.64e-14  2.17e-17   2.4e-56         1  1.36e+07  5.58e+33
         P6  1.19e-06  3.43e-12  1.08e-11  4.89e-21   1.6e-24  1.77e-63  7.37e-08         1  4.11e+26
         P7  2.91e-33  8.36e-39  2.62e-38  1.19e-47  3.89e-51  4.31e-90  1.79e-34  2.44e-27         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.61e+42   2.7e+43  1.23e+34  4.01e+30  4.44e-09  1.85e+47  2.51e+54  1.03e+81
          R  1.16e-43         1      3.14  1.43e-09  4.65e-13  5.16e-52  2.15e+04  2.91e+11   1.2e+38
         P1   3.7e-44     0.319         1  4.54e-10  1.48e-13  1.64e-52  6.84e+03  9.29e+10  3.81e+37
         P2  8.15e-35  7.02e+08   2.2e+09         1  0.000326  3.62e-43  1.51e+13  2.05e+20   8.4e+46
         P3   2.5e-31  2.15e+12  6.75e+12  3.06e+03         1  1.11e-39  4.62e+16  6.27e+23  2.57e+50
         P4  2.25e+08  1.94e+51  6.08e+51  2.76e+42  9.02e+38         1  4.16e+55  5.65e+62  2.32e+89
         P5  5.41e-48  4.66e-05  0.000146  6.64e-14  2.17e-17   2.4e-56         1  1.36e+07  5.58e+33
         P6  3.98e-55  3.43e-12  1.08e-11  4.89e-21   1.6e-24  1.77e-63  7.37e-08         1  4.11e+26
         P7   9.7e-82  8.36e-39  2.62e-38  1.19e-47  3.89e-51  4.31e-90  1.79e-34  2.44e-27         1
   MasterEquation::set:  done, cpu time[sec] = 5.27363, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.82883e+08
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.662679, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04284, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5026.41      679.867      158.072       206.94       21.151      2707.12      208.918     0.144433
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079087, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006044, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085651, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.01087e-07  1.01087e-07  8.08334e-10
      low eigenvalue method done, cpu time[sec] = 0.08596, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-07  8.08e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08  8.08e-10         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.08334e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36161e-62  1.71991e-62  7.10689e-64   9.6528e-63  2.30802e-64  3.64502e-66  6.69666e-75 -1.13385e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.11568, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.44865e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.66161, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.22881, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1675.47      226.622      52.6907      68.9801      7.05034      902.372      69.6392    0.0481444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079586, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005984, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.086091, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.43082e-08  3.43082e-08  1.87943e-10
      low eigenvalue method done, cpu time[sec] = 0.086399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.43e-08  1.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-09  1.88e-10         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.87942e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.69903e-63  3.90582e-63  1.33134e-64  1.50092e-63  3.74894e-65  2.54377e-66  6.75589e-75  7.98677e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2496, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         2.41442e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.662307, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.23419, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1005.28      135.973      31.6144      41.3881      4.23021      541.423      41.7835    0.0288866
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079519, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.086062, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07353e-08  2.07353e-08  8.84151e-11
      low eigenvalue method done, cpu time[sec] = 0.08637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  8.84e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.15e-09  8.84e-11         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.84148e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.23602e-63   1.7923e-63  5.81285e-65  6.13466e-64  1.56053e-65  1.82165e-66   6.8192e-75 -1.50512e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.259, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         3.38018e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.662006, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.23808, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            718.058      97.1238      22.5817      29.5629      3.02158      386.731      29.8454    0.0206333
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079272, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005994, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085787, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48767e-08  1.48767e-08  5.24001e-11
      low eigenvalue method done, cpu time[sec] = 0.086101, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-08  5.24e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-09  5.24e-11         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.23999e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.55831e-63  1.04344e-63   3.3062e-65  3.36258e-64  8.64753e-66  1.37541e-66  6.88635e-75 -8.26718e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2622, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.34595e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.661906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.25617, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             558.49      75.5408      17.5636      22.9934      2.35011      300.791      23.2131    0.0160481
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079315, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085891, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16071e-08  1.16071e-08   3.4988e-11
      low eigenvalue method done, cpu time[sec] = 0.086202, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08   3.5e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-09   3.5e-11         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.49876e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7294e-63  6.87436e-64  2.14894e-65  2.13275e-64  5.52605e-66  1.08114e-66  6.95647e-75  2.44175e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2784, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         4.82883e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.660866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.23005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            502.641      67.9867      15.8072       20.694       2.1151      270.712      20.8918    0.0144433
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079359, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005991, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085869, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04597e-08  1.04597e-08  2.94426e-11
      low eigenvalue method done, cpu time[sec] = 0.086184, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-08  2.94e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-09  2.94e-11         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.94427e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46225e-63  5.75277e-64  1.78968e-65  1.75941e-64  4.57227e-66  9.69934e-67  6.99227e-75  6.69479e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0937, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         7.24325e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.660687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.24597, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            335.094      45.3245      10.5381       13.796      1.41007      180.474      13.9278   0.00962888
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079359, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006017, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085903, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.00579e-09  7.00579e-09  1.49016e-11
      low eigenvalue method done, cpu time[sec] = 0.086227, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.01e-09  1.49e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.18e-10  1.49e-11         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.49012e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.5218e-64  2.85221e-64  8.74427e-66  8.32083e-65  2.18508e-66  6.13536e-67  7.17177e-75  1.93887e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.265, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         9.65766e+09
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.66096, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.26013, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             251.32      33.9933      7.90361       10.347      1.05755      135.356      10.4459   0.00722166
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079457, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006009, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085991, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.27076e-09  5.27077e-09  9.05288e-12
      low eigenvalue method done, cpu time[sec] = 0.0863, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.27e-09  9.05e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.39e-10  9.05e-12         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.05254e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.6139e-64  1.70941e-64  5.20256e-66   4.8549e-65  1.28317e-66  4.27342e-67   7.3379e-75 -3.45885e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2812, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.20721e+10
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.662643, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.22805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            201.056      27.1947      6.32289      8.27761     0.846041      108.285      8.35671   0.00577733
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079339, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005993, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085853, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.22639e-09  4.22641e-09  6.10155e-12
      low eigenvalue method done, cpu time[sec] = 0.086171, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.23e-09   6.1e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.31e-10   6.1e-12         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.10134e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.1301e-64  1.14095e-64   3.4576e-66  3.18405e-65  8.45325e-67  3.16577e-67  7.47684e-75     8.92e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.44865e+10
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.66148, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.21574, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            167.547      22.6622      5.26907      6.89801     0.705034      90.2372      6.96392   0.00481444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079415, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005994, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.52847e-09  3.52846e-09  4.39914e-12
      low eigenvalue method done, cpu time[sec] = 0.086237, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-09   4.4e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.59e-10   4.4e-12         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.3987e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26754e-64   8.1654e-65  2.46762e-66  2.25048e-65  5.99453e-67  2.44831e-67  7.58175e-75 -2.79418e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2347, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.69009e+10
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.661887, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.22011, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            143.612      19.4248      4.51635      5.91258     0.604315      77.3462      5.96908   0.00412666
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079472, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.086025, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.02895e-09  3.02896e-09  3.32577e-12
      low eigenvalue method done, cpu time[sec] = 0.086343, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.03e-09  3.33e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.08e-10  3.33e-12         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.32556e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72054e-64  6.13701e-65  1.85108e-66  1.67567e-65  4.47491e-67   1.9547e-67  7.65094e-75 -1.06806e-98

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2424, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 290 K
            Well    Collision, 1/sec
              W1         1.93153e+10
      global relaxation matrix dimension = 569
      setting global matrices ... done, cpu time[sec] = 0.659652, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.23605, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             125.66      16.9967       3.9518      5.17351     0.528776      67.6779      5.22294   0.00361083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.079437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005993, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08595, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.65372e-09  2.65373e-09  2.60449e-12
      low eigenvalue method done, cpu time[sec] = 0.086261, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.65e-09   2.6e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.7e-10   2.6e-12         1
         *Z       ---       ---  2.59e+38
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.60436e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35132e-64  4.78318e-65  1.44073e-66  1.29651e-65  3.46948e-67  1.59945e-67  7.68591e-75  4.11305e-99

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2505, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 300 K
      Energy reference = 25152 1/cm
      Energy step      = 52 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008159
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.656659
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.430607
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.67075
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.60333
         W1 Well: minimal relaxation eigenvalue = 0.0967587
         W1 Well: maximal relaxation eigenvalue = 0.980136
         W1 Well:       grid size = 554
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3655 1/cm
         B1 Barrier:        grid size = 484
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -15 1/cm
         B2 Barrier:        grid size = 480
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 192 1/cm
         B3 Barrier:        grid size = 573
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 603
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6204 1/cm
         B5 Barrier: nonpositive number of states at -23572 1/cm => truncating
         B5 Barrier:        grid size = 937
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23572 1/cm
         B6 Barrier:        grid size = 455
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 393
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4716 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16780 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 5.86291, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 554
      MasterEquation::Barrier::truncate: real weight = 2.6747e+57
      MasterEquation::Barrier::truncate: effective weight = 6.33715e+53
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 554
      MasterEquation::Barrier::truncate: real weight = 3.87031e+59
      MasterEquation::Barrier::truncate: effective weight = 9.16825e+55
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 554
      MasterEquation::Barrier::truncate: real weight = 3.63184e+65
      MasterEquation::Barrier::truncate: effective weight = 4.46919e+55
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3655  -3655 3.97e+09 3.44e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -15 2.89e+14
         B2    193 3.95e+13
         B3  -3655 9.23e+12
         B4  -3655 1.21e+13
         B5  -3655 1.24e+12
         B6   1493 1.58e+14
         B7   4717 1.23e+13
         B8  16780 9.32e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.95e-06  5.89e-06     6e-15  2.56e-18  5.79e-56    0.0336  2.72e+05  1.53e+31
          R  5.13e+05         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1   1.7e+05     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  1.67e+14  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  3.91e+17  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  1.73e+55  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5      29.7   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  3.68e-06  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  6.55e-32  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.3e+40   1.3e+41  1.32e+32  5.64e+28  1.28e-09  7.41e+44  5.99e+51  3.37e+77
          R  2.33e-41         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  7.69e-42     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  7.56e-33  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  1.77e-29  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  7.83e+08  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5  1.35e-45   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  1.67e-52  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  2.97e-78  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
   MasterEquation::set:  done, cpu time[sec] = 5.87803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+08
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.62942, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.20926, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5341.76      730.338      170.822       222.94      22.8777      2915.77      228.402     0.172346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005649, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07983, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.81163e-08  9.81163e-08  1.16094e-09
      low eigenvalue method done, cpu time[sec] = 0.080136, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.81e-08  1.16e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-08  1.16e-09         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16094e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.98238e-60  3.51989e-60  1.39621e-61  1.78844e-60  4.31069e-62  8.82869e-64  2.77326e-72 -3.12895e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.11979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.629797, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.96426, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1780.59      243.446      56.9408      74.3134      7.62591      971.922      76.1339    0.0574487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073591, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005611, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079702, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.34447e-08  3.34447e-08  2.80376e-10
      low eigenvalue method done, cpu time[sec] = 0.080001, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.34e-08   2.8e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-09   2.8e-10         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.80375e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86748e-60  8.20927e-61  2.71188e-62  2.89191e-61  7.30637e-63  6.25273e-64   2.7977e-72 -1.80697e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.87116, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         2.35656e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.627269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.95719, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1068.35      146.068      34.1645      44.5881      4.57555      583.153      45.6804    0.0344692
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073596, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079712, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.02453e-08  2.02453e-08  1.34042e-10
      low eigenvalue method done, cpu time[sec] = 0.080009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.02e-08  1.34e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-09  1.34e-10         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34042e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.23335e-61  3.81309e-61  1.20249e-62  1.20075e-61    3.094e-63  4.52829e-64  2.82383e-72 -8.67657e-97

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.86103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         3.29919e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.630181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.96207, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            763.108      104.334      24.4032      31.8486      3.26825      416.538      32.6288    0.0246209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073586, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005608, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.45378e-08  1.45378e-08  8.02429e-11
      low eigenvalue method done, cpu time[sec] = 0.079991, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-08  8.02e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-09  8.02e-11         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.02434e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.63097e-61  2.23698e-61  6.90505e-63  6.64365e-62  1.73223e-63  3.44832e-64  2.85152e-72   1.1358e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.87274, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.24181e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.629312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.89992, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            593.529      81.1487      18.9803      24.7711      2.54197      323.974       25.378    0.0191496
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073636, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005602, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079731, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.13491e-08  1.13491e-08  5.39633e-11
      low eigenvalue method done, cpu time[sec] = 0.080086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-08   5.4e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-09   5.4e-11         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.39633e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.83338e-61  1.48184e-61  4.51847e-63  4.24108e-62  1.11486e-63  2.72905e-64  2.88039e-72 -3.75709e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.80461, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.630594, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.96458, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            534.176      73.0338      17.0822       22.294      2.28777      291.577      22.8402    0.0172346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073793, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005635, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079927, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02294e-08  1.02294e-08  4.55424e-11
      low eigenvalue method done, cpu time[sec] = 0.080229, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-08  4.55e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-09  4.55e-11         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55425e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.25053e-61  1.24282e-61  3.77333e-63  3.50766e-62  9.25054e-64  2.45552e-64  2.89511e-72  1.98937e-97

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.87666, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         7.06969e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.631238, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.96614, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            356.117      48.6892      11.3882      14.8627      1.52518      194.384      15.2268    0.0114897
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005645, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.85656e-09  6.85655e-09  2.32949e-11
      low eigenvalue method done, cpu time[sec] = 0.080091, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-09  2.33e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.97e-10  2.33e-11         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.32947e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68983e-61  6.21165e-62  1.86186e-63  1.67399e-62  4.46564e-64   1.5713e-64  2.96873e-72  1.13298e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.87794, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         9.42625e+09
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.630732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.97438, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            267.088      36.5169      8.54112       11.147      1.14389      145.788      11.4201   0.00861731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074171, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005631, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080303, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.1607e-09   5.1607e-09  1.42494e-11
      low eigenvalue method done, cpu time[sec] = 0.080602, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.16e-09  1.42e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-10  1.42e-11         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.42499e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04377e-61  3.74219e-62  1.11478e-63  9.82253e-63  2.63911e-64  1.10356e-64  3.03666e-72  -9.7694e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.88928, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.17828e+10
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.629736, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.96342, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             213.67      29.2135      6.83289      8.91761     0.915109      116.631      9.13607   0.00689385
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07977, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.13931e-09  4.13933e-09   9.6515e-12
      low eigenvalue method done, cpu time[sec] = 0.080079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.14e-09  9.65e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.19e-10  9.65e-12         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.65183e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.11672e-62  2.50701e-62   7.4423e-64  6.46751e-63  1.74637e-64  8.22757e-65  3.09344e-72  1.25039e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.87163, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+10
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.631715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.9855, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            178.059      24.3446      5.69408      7.43134     0.762591      97.1922      7.61339   0.00574487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074498, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005607, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0806, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.45649e-09  3.45649e-09  6.98488e-12
      low eigenvalue method done, cpu time[sec] = 0.080911, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.46e-09  6.98e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.49e-10  6.98e-12         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.98486e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.1755e-62  1.79922e-62  5.32963e-64  4.58468e-63  1.24257e-64  6.39563e-65  3.13641e-72 -3.47534e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.8969, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.64959e+10
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.626425, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.97675, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            152.622      20.8668      4.88064      6.36972     0.653649      83.3076      6.52577   0.00492418
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073705, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005631, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079848, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96763e-09  2.96765e-09  5.29645e-12
      low eigenvalue method done, cpu time[sec] = 0.080148, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.97e-09   5.3e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-10   5.3e-12         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.29665e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.93912e-62  1.35527e-62  4.00884e-64  3.42153e-63  9.30009e-65  5.12793e-65  3.16495e-72  3.58286e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.8858, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.88525e+10
      global relaxation matrix dimension = 554
      setting global matrices ... done, cpu time[sec] = 0.632453, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.01063, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            133.544      18.2585      4.27056      5.57351     0.571943      72.8941      5.71005   0.00430866
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073767, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005638, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079907, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.60034e-09  2.60034e-09  4.15797e-12
      low eigenvalue method done, cpu time[sec] = 0.080206, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.6e-09  4.16e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.62e-10  4.16e-12         1
         *Z       ---       ---  5.73e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.15801e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.10163e-62   1.0582e-62  3.12704e-64  2.65223e-63  7.22585e-65  4.21108e-65  3.17968e-72 -5.60015e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.92627, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 310 K
      Energy reference = 25430 1/cm
      Energy step      = 53 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008122
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.661614
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.425643
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.387312
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.57306
         W1 Well: minimal relaxation eigenvalue = 0.0959005
         W1 Well: maximal relaxation eigenvalue = 0.983189
         W1 Well:       grid size = 550
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3720 1/cm
         B1 Barrier:        grid size = 480
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -10 1/cm
         B2 Barrier:        grid size = 476
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 567
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4620 1/cm
         B4 Barrier:        grid size = 597
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6211 1/cm
         B5 Barrier: nonpositive number of states at -23171 1/cm => truncating
         B5 Barrier:        grid size = 917
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23171 1/cm
         B6 Barrier:        grid size = 452
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1473 1/cm
         B7 Barrier:        grid size = 391
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4706 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16791 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.54265, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 550
      MasterEquation::Barrier::truncate: real weight = 1.86497e+56
      MasterEquation::Barrier::truncate: effective weight = 4.50363e+52
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 550
      MasterEquation::Barrier::truncate: real weight = 2.27517e+58
      MasterEquation::Barrier::truncate: effective weight = 5.49371e+54
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 550
      MasterEquation::Barrier::truncate: real weight = 2.2784e+63
      MasterEquation::Barrier::truncate: effective weight = 2.2567e+54
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3720  -3720 3.89e+09 3.61e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -10 3.15e+14
         B2    202 4.35e+13
         B3  -3720 1.02e+13
         B4  -3720 1.33e+13
         B5  -3720 1.37e+12
         B6   1474 1.74e+14
         B7   4707 1.38e+13
         B8  16791 1.13e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.29e-06  3.75e-06  8.11e-15  4.46e-18  1.69e-54     0.018  8.98e+04  7.87e+29
          R  7.78e+05         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  2.67e+05     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  1.23e+14  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  2.24e+17  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  5.91e+53  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5      55.4  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  1.11e-05  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  1.27e-30  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.02e+38   8.8e+38   1.9e+30  1.05e+27  3.97e-10  4.23e+42  2.11e+49  1.85e+74
          R  3.32e-39         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  1.14e-39     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  5.25e-31  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  9.57e-28  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  2.52e+09  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5  2.36e-43  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  4.75e-50  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  5.42e-75  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.55778, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+08
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.620944, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5668.59      783.374      184.305      239.804      24.7054      3135.23       249.22     0.204289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072292, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.00557, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078362, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0261e-07   1.0261e-07   1.7505e-09
      low eigenvalue method done, cpu time[sec] = 0.078654, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-07  1.75e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08  1.75e-09         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.7505e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02752e-57  5.10471e-58   1.9541e-59  2.38229e-58  5.78838e-60  1.49833e-61  7.78577e-70 -6.86282e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.10912, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.623654, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1889.53      261.125      61.4348      79.9347      8.23513      1045.08      83.0734    0.0680963
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07232, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078344, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51872e-08  3.51872e-08  4.38047e-10
      low eigenvalue method done, cpu time[sec] = 0.078636, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.52e-08  4.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-09  4.38e-10         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.38046e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83657e-58   1.2215e-58  3.92949e-60  3.99917e-59  1.02147e-60  1.07667e-61  7.85416e-70 -3.22389e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.78579, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         2.30227e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.622149, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90884, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1133.72      156.675      36.8609      47.9608      4.94108      627.047       49.844    0.0408578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005502, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078574, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13473e-08  2.13473e-08  2.12679e-10
      low eigenvalue method done, cpu time[sec] = 0.07893, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.13e-08  2.13e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-09  2.13e-10         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.12679e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42337e-58   5.7414e-59  1.76882e-60  1.68602e-59  4.39748e-61  7.88288e-62  7.92729e-70  2.14047e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79505, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         3.22318e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.621003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91116, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            809.799      111.911      26.3292      34.2577      3.52934      447.891      35.6029    0.0291841
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072297, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00557, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078356, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5348e-08   1.5348e-08  1.28562e-10
      low eigenvalue method done, cpu time[sec] = 0.07865, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.53e-08  1.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-09  1.29e-10         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28562e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.76352e-59  3.39377e-59   1.0253e-60   9.4146e-60   2.4867e-61  6.05274e-62  8.00471e-70 -4.21611e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79131, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.14409e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.620697, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91399, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            629.843      87.0416      20.4783      26.6449      2.74504      348.359      27.6911    0.0226988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072218, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078219, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.19913e-08  1.19913e-08   8.7064e-11
      low eigenvalue method done, cpu time[sec] = 0.078511, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.2e-08  8.71e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-09  8.71e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.70635e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.00734e-59  2.26036e-59  6.75431e-61   6.0484e-60  1.61163e-61  4.82199e-62  8.08531e-70 -5.00818e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.63476, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.621851, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.93367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            566.859      78.3374      18.4305      23.9804      2.47054      313.523       24.922    0.0204289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072208, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078248, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08115e-08  1.08116e-08  7.36873e-11
      low eigenvalue method done, cpu time[sec] = 0.07854, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-08  7.37e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-09  7.37e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.36873e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.10843e-59  1.89996e-59  5.65579e-61  5.01518e-60    1.341e-61  4.35107e-62  8.12634e-70 -3.51875e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.81706, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         6.90681e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.622579, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.93914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            377.906       52.225       12.287      15.9869      1.64703      209.016      16.6147    0.0136193
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072235, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005519, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078252, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.25433e-09  7.25436e-09   3.8087e-11
      low eigenvalue method done, cpu time[sec] = 0.078555, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.25e-09  3.81e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.33e-10  3.81e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.80869e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.68372e-59  9.57308e-60  2.81844e-61  2.41528e-60  6.53883e-62  2.81587e-62  8.33105e-70 -3.44472e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.82765, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         9.20908e+09
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.620403, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.93017, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             283.43      39.1687      9.21523      11.9902      1.23527      156.762       12.461    0.0102144
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072401, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005519, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078416, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.46346e-09  5.46346e-09  2.34582e-11
      low eigenvalue method done, cpu time[sec] = 0.078709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.46e-09  2.35e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.5e-10  2.35e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.34581e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.66925e-59   5.7977e-60  1.69841e-61  1.42537e-60   3.8891e-62  1.99383e-62  8.51942e-70  7.68056e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.65586, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.15114e+10
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.620537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90628, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            226.744       31.335      7.37218      9.59216     0.988215      125.409      9.96881   0.00817155
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07208, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005525, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078095, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.38397e-09  4.38397e-09  1.59681e-11
      low eigenvalue method done, cpu time[sec] = 0.078388, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.38e-09   1.6e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.41e-10   1.6e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.59681e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14393e-59  3.89877e-60  1.13912e-61  9.42312e-61  2.58521e-62  1.49587e-62  8.67676e-70  -9.9568e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79108, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+10
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.622194, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91241, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            188.953      26.1125      6.14348      7.99347     0.823513      104.508      8.30734   0.00680963
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005518, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.66185e-09  3.66186e-09  1.16006e-11
      low eigenvalue method done, cpu time[sec] = 0.078448, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.66e-09  1.16e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-10  1.16e-11         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16007e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.35168e-60  2.80612e-60  8.18636e-62  6.70016e-61  1.84573e-62  1.16872e-62  8.79607e-70 -9.69289e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.79679, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.61159e+10
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.618102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             161.96      22.3821      5.26584      6.85154     0.705868      89.5781      7.12058   0.00583682
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072069, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005507, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078067, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.14468e-09   3.1447e-09  8.82332e-12
      low eigenvalue method done, cpu time[sec] = 0.078365, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.14e-09  8.82e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-10  8.82e-12         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.82294e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37656e-60  2.11857e-60  6.17493e-62  5.01223e-61  1.38519e-62  9.41019e-63  8.87583e-70   3.8672e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.62312, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.84182e+10
      global relaxation matrix dimension = 550
      setting global matrices ... done, cpu time[sec] = 0.618148, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.90317, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            141.715      19.5844      4.60761       5.9951     0.617634      78.3809       6.2305   0.00510722
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.072254, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005513, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.078259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.75594e-09  2.75597e-09  6.94417e-12
      low eigenvalue method done, cpu time[sec] = 0.078549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.76e-09  6.94e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-10  6.94e-12         1
         *Z       ---       ---  1.36e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.94445e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03387e-60  1.65729e-60  4.82776e-62  3.89278e-61  1.07861e-62  7.75544e-63  8.91781e-70 -2.57731e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.78536, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 320 K
      Energy reference = 25708 1/cm
      Energy step      = 55 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007831
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.632312
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.403647
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.357725
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.3737
         W1 Well: minimal relaxation eigenvalue = 0.0950327
         W1 Well: maximal relaxation eigenvalue = 0.981697
         W1 Well:       grid size = 536
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3771 1/cm
         B1 Barrier:        grid size = 468
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -32 1/cm
         B2 Barrier:        grid size = 464
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 552
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4651 1/cm
         B4 Barrier:        grid size = 580
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6192 1/cm
         B5 Barrier: nonpositive number of states at -23187 1/cm => truncating
         B5 Barrier:        grid size = 889
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23187 1/cm
         B6 Barrier:        grid size = 441
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1452 1/cm
         B7 Barrier:        grid size = 382
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16798 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.24704, elapsed time[sec] = 1
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 1.54396e+55
      MasterEquation::Barrier::truncate: effective weight = 3.86914e+51
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 1.60656e+57
      MasterEquation::Barrier::truncate: effective weight = 4.02583e+53
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 536
      MasterEquation::Barrier::truncate: real weight = 2.1678e+61
      MasterEquation::Barrier::truncate: effective weight = 1.37012e+53
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3771  -3771 3.83e+09  3.8e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -32 3.43e+14
         B2    188 4.78e+13
         B3  -3771 1.13e+13
         B4  -3771 1.47e+13
         B5  -3771 1.52e+12
         B6   1453 1.92e+14
         B7   4699 1.55e+13
         B8  16798 1.37e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.05e-07  2.28e-06  9.98e-15  6.94e-18  3.71e-53   0.00933  2.95e+04  4.53e+28
          R  1.24e+06         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  4.39e+05     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2     1e+14  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  1.44e+17  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  2.69e+52  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5       107  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  3.39e-05  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  2.21e-29  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.88e+36  8.13e+36  3.57e+28  2.48e+25  1.33e-10  3.33e+40  1.05e+47  1.62e+71
          R  3.48e-37         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  1.23e-37     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2   2.8e-29  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  4.03e-26  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  7.54e+09  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5     3e-41  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  9.49e-48  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  6.19e-72  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.26212, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+08
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.592697, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.26031, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6007.12       839.06      198.548      257.563       26.638      3365.86      271.435     0.240828
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067212, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14109e-07  1.14109e-07  2.72348e-09
      low eigenvalue method done, cpu time[sec] = 0.073178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.14e-07  2.72e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-08  2.72e-09         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.72348e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10715e-55  5.42132e-56  2.01222e-57  2.35218e-56  5.76025e-58  1.85013e-59  1.53694e-67 -7.79031e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.06933, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.592918, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72979, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2002.37      279.687      66.1825      85.8543      8.87935      1121.95      90.4784     0.080276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067043, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072669, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.94402e-08  3.94402e-08  7.04817e-10
      low eigenvalue method done, cpu time[sec] = 0.072948, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.94e-08  7.05e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-09  7.05e-10         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.04817e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15133e-56  1.33009e-56  4.18387e-58  4.09245e-57  1.05609e-58   1.3466e-59  1.55039e-67  1.76211e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.51217, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          2.2512e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.591212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72614, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1201.42      167.812      39.7095      51.5126      5.32761      673.172       54.287    0.0481656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005139, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072634, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39984e-08  2.39984e-08  3.47342e-10
      low eigenvalue method done, cpu time[sec] = 0.072925, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-08  3.47e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.43e-09  3.47e-10         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.47342e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6043e-56  6.32528e-57  1.91126e-58  1.75104e-57  4.61927e-59   9.9594e-60  1.56478e-67 -3.58163e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.50872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         3.15168e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.58878, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             858.16      119.866      28.3639      36.7947      3.80544      480.837      38.7764     0.034404
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067587, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.073209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72827e-08  1.72827e-08  2.11968e-10
      low eigenvalue method done, cpu time[sec] = 0.073488, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-08  2.12e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-09  2.12e-10         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11967e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.97034e-57  3.76702e-57  1.11818e-58  9.86598e-58  2.63763e-59  7.70714e-60  1.57999e-67  1.33027e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.5028, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         4.05216e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.579513, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72605, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            667.458      93.2289      22.0608      28.6181      2.95978      373.985      30.1595    0.0267587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067555, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07319, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35175e-08  1.35175e-08  1.44537e-10
      low eigenvalue method done, cpu time[sec] = 0.073481, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-08  1.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-09  1.45e-10         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44536e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.8815e-57  2.52259e-57  7.41539e-59  6.37843e-58  1.72119e-59  6.17876e-60   1.5958e-67 -9.09965e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.52628, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.590731, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73011, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            600.712       83.906      19.8548      25.7563       2.6638      336.586      27.1435    0.0240828
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06708, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005185, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07278, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21927e-08  1.21927e-08  1.22674e-10
      low eigenvalue method done, cpu time[sec] = 0.073064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-08  1.23e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-09  1.23e-10         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22674e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.86827e-57  2.12508e-57  6.22621e-59  5.30223e-58  1.43612e-59  5.59061e-60  1.60383e-67 -1.94853e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.51214, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         6.75361e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.58996, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.7199, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            400.475      55.9373      13.2365      17.1709      1.77587      224.391      18.0957    0.0160552
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.073133, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.19268e-09  8.19268e-09  6.40694e-11
      low eigenvalue method done, cpu time[sec] = 0.07342, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.19e-09  6.41e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.22e-10  6.41e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.4069e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.11533e-57  1.07949e-57   3.1337e-59  2.57684e-58   7.0729e-60  3.65767e-60  1.64384e-67  1.19921e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.50413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         9.00481e+09
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72704, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            300.356       41.953      9.92738      12.8782       1.3319      168.293      13.5718    0.0120414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067202, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072836, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.17529e-09  6.17529e-09  3.97339e-11
      low eigenvalue method done, cpu time[sec] = 0.073116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.18e-09  3.97e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.18e-10  3.97e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.97335e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.95132e-57  6.57272e-58  1.90076e-59  1.52958e-58  4.23393e-60  2.61048e-60  1.68056e-67  1.45617e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.50461, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          1.1256e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589891, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            240.285      33.5624       7.9419      10.3025      1.06552      134.634      10.8574   0.00963312
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067357, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072968, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.95794e-09  4.95793e-09  2.71835e-11
      low eigenvalue method done, cpu time[sec] = 0.073252, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-09  2.72e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.95e-10  2.72e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.71834e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34411e-57  4.43709e-58  1.28088e-59  1.01539e-58  2.82742e-60  1.97062e-60  1.71123e-67 -5.78976e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.51324, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.591145, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68773, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            200.237      27.9687      6.61825      8.58543     0.887935      112.195      9.04784    0.0080276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067366, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005174, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072995, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.14296e-09  4.14296e-09  1.98253e-11
      low eigenvalue method done, cpu time[sec] = 0.073281, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.14e-09  1.98e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.13e-10  1.98e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98248e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.85232e-58  3.20308e-58  9.23871e-60  7.24239e-59  2.02576e-60  1.54735e-60  1.73454e-67 -1.35349e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.4698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.57584e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.590183, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.71151, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            171.632      23.9731      5.67279      7.35894     0.761087      96.1675      7.75529    0.0068808
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067057, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.072685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.55896e-09  3.55895e-09  1.51262e-11
      low eigenvalue method done, cpu time[sec] = 0.07297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.56e-09  1.51e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.54e-10  1.51e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51257e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.54648e-58    2.424e-58  6.98901e-60  5.43127e-59  1.52454e-60   1.2511e-60  1.75023e-67  2.99625e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.49105, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.80096e+10
      global relaxation matrix dimension = 536
      setting global matrices ... done, cpu time[sec] = 0.589524, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.7229, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            150.178      20.9765      4.96369      6.43908     0.665951      84.1466      6.78588    0.0060207
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.067583, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0732, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.1198e-09  3.11979e-09  1.19354e-11
      low eigenvalue method done, cpu time[sec] = 0.073492, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.12e-09  1.19e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.1e-10  1.19e-11         1
         *Z       ---       ---  3.42e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19351e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.9733e-58  1.89991e-58  5.47734e-60  4.22672e-59  1.18983e-60  1.03477e-60  1.75865e-67 -3.42899e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.50676, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 330 K
      Energy reference = 25986 1/cm
      Energy step      = 57 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007833
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.61377
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.384852
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.361221
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.23255
         W1 Well: minimal relaxation eigenvalue = 0.0941799
         W1 Well: maximal relaxation eigenvalue = 0.980323
         W1 Well:       grid size = 524
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3882 1/cm
         B1 Barrier:        grid size = 456
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -6 1/cm
         B2 Barrier:        grid size = 453
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 164 1/cm
         B3 Barrier:        grid size = 537
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4623 1/cm
         B4 Barrier:        grid size = 565
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6219 1/cm
         B5 Barrier: nonpositive number of states at -23205 1/cm => truncating
         B5 Barrier:        grid size = 863
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23205 1/cm
         B6 Barrier:        grid size = 430
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 374
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4667 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16808 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.06379, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 524
      MasterEquation::Barrier::truncate: real weight = 1.49381e+54
      MasterEquation::Barrier::truncate: effective weight = 3.87958e+50
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 524
      MasterEquation::Barrier::truncate: real weight = 1.33968e+56
      MasterEquation::Barrier::truncate: effective weight = 3.47922e+52
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 524
      MasterEquation::Barrier::truncate: real weight = 3.01409e+59
      MasterEquation::Barrier::truncate: effective weight = 1.05655e+52
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3882  -3882  3.7e+09 3.99e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -6 3.73e+14
         B2    165 5.26e+13
         B3  -3882 1.25e+13
         B4  -3882 1.62e+13
         B5  -3882 1.68e+12
         B6   1476 2.11e+14
         B7   4668 1.73e+13
         B8  16809 1.66e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.53e-07  1.79e-06  1.53e-14  1.32e-17   8.5e-52   0.00631   1.3e+04   3.9e+27
          R  1.53e+06         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1  5.59e+05     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  6.55e+13  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  7.55e+16  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  1.18e+51  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5       159  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  7.67e-05     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  2.57e-28  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.63e+34  9.96e+34  8.49e+26  7.37e+23  4.73e-11  3.51e+38  7.26e+44  2.17e+68
          R  2.75e-35         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1     1e-35     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2  1.18e-27  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.36e-24  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  2.11e+10  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5  2.85e-39  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  1.38e-45     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  4.61e-69  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
   MasterEquation::set:  done, cpu time[sec] = 4.07862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+08
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.562318, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.29353, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6357.46      897.477      213.581       276.25      28.6799      3607.98      295.112     0.282838
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.062878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005008, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03211e-07  1.03211e-07  3.27453e-09
      low eigenvalue method done, cpu time[sec] = 0.068606, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-07  3.27e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08  3.27e-09         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.27453e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.98158e-54  4.33621e-54  1.56634e-55  1.76603e-54  4.35867e-56  1.70008e-57  2.20324e-65 -8.13807e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.98613, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.561858, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.59028, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2119.15      299.159      71.1937      92.0832      9.55998      1202.66      98.3705    0.0942794
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.062829, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004915, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068189, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.59917e-08  3.59917e-08  8.74833e-10
      low eigenvalue method done, cpu time[sec] = 0.06846, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.6e-08  8.75e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.64e-09  8.75e-10         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.74833e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.63283e-54  1.08987e-54  3.36308e-56  3.17911e-55  8.28463e-57  1.25416e-57  2.22244e-65   1.7768e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.2797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         2.20306e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.562896, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.59149, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1271.49      179.495      42.7162      55.2499      5.73599      721.597      59.0223    0.0565676
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063021, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004932, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068405, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19735e-08  2.19735e-08  4.37375e-10
      low eigenvalue method done, cpu time[sec] = 0.068681, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-08  4.37e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-09  4.37e-10         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.37374e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35927e-54  5.24246e-55  1.55851e-56  1.37981e-55  3.67924e-57  9.37089e-58  2.24298e-65  3.31415e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.28393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.08429e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.561437, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.5453, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            908.209      128.211      30.5116      39.4642      4.09713      515.426      42.1588    0.0404054
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.062869, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004926, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068239, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58541e-08  1.58541e-08   2.6939e-10
      low eigenvalue method done, cpu time[sec] = 0.068506, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-08  2.69e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-09  2.69e-10         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.6939e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.52519e-55  3.14528e-55  9.20157e-57  7.84287e-56  2.12076e-57  7.30854e-58  2.26467e-65  3.41814e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.23783, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.96551e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.564062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.58483, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            706.385      99.7196      23.7312      30.6944      3.18666      400.887      32.7902    0.0314265
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.062791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068169, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24154e-08  1.24154e-08  1.84932e-10
      low eigenvalue method done, cpu time[sec] = 0.06844, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-08  1.85e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-09  1.85e-10         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.84932e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.92373e-55  2.11758e-55  6.14248e-57    5.102e-56  1.39321e-57  5.89604e-58  2.28719e-65 -1.41838e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.27676, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.565311, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.57275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            635.746      89.7477      21.3581       27.625      2.86799      360.798      29.5112    0.0282838
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063369, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004923, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068747, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12039e-08  1.12039e-08  1.57395e-10
      low eigenvalue method done, cpu time[sec] = 0.069022, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-08  1.57e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-09  1.57e-10         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57395e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.06556e-55  1.78783e-55  5.17135e-57  4.25179e-56  1.16562e-57  5.34931e-58  2.29862e-65 -2.79697e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.27021, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         6.60918e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.563031, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.58209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            423.831      59.8318      14.2387      18.4166        1.912      240.532      19.6741    0.0188559
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063401, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004906, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068746, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.54024e-09  7.54026e-09  8.30529e-11
      low eigenvalue method done, cpu time[sec] = 0.069015, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.54e-09  8.31e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.51e-10  8.31e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.30525e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.71723e-55  9.15601e-56   2.6288e-57  2.08515e-56  5.79778e-58  3.53786e-58   2.3554e-65  8.84019e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.2698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         8.81225e+09
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.563032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.58213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            317.873      44.8738       10.679      13.8125        1.434      180.399      14.7556    0.0141419
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063348, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068755, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.68878e-09  5.68878e-09  5.18627e-11
      low eigenvalue method done, cpu time[sec] = 0.069038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.69e-09  5.19e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.65e-10  5.19e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.18625e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71389e-55  5.60506e-56  1.60506e-57  1.24499e-56  3.49309e-58  2.54496e-58   2.4074e-65 -4.82693e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.27524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.10153e+10
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.561651, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.58367, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            254.299      35.8991      8.54324        11.05       1.1472      144.319      11.8045    0.0113135
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06334, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004904, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068687, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.57011e-09  4.57013e-09  3.56611e-11
      low eigenvalue method done, cpu time[sec] = 0.068953, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.57e-09  3.57e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.53e-10  3.57e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.56606e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18667e-55  3.79876e-56  1.08683e-57  8.29945e-57  2.34359e-58  1.93299e-58  2.45081e-65 -8.51295e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.27817, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+10
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.565743, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.54284, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            211.915      29.9159      7.11937      9.20832     0.955998      120.266      9.83705   0.00942794
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063334, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068689, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.8206e-09  3.82058e-09  2.61106e-11
      low eigenvalue method done, cpu time[sec] = 0.06897, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.82e-09  2.61e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.78e-10  2.61e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.61107e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.73332e-56  2.75062e-56  7.86831e-58  5.93865e-57  1.68512e-58  1.52539e-58  2.48389e-65  1.39395e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.24119, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.54214e+10
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.562696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.59195, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            181.642      25.6422      6.10231      7.89284     0.819427      103.085      8.43176   0.00808109
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004916, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068636, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.2831e-09  3.28311e-09   1.9985e-11
      low eigenvalue method done, cpu time[sec] = 0.068907, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.28e-09     2e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.24e-10     2e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.99849e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.71118e-56  2.08666e-56  5.97015e-58   4.4649e-57  1.27181e-58   1.2385e-58  2.50632e-65   6.4942e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.28017, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.76245e+10
      global relaxation matrix dimension = 524
      setting global matrices ... done, cpu time[sec] = 0.553909, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.55226, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            158.937      22.4369      5.33952      6.90624     0.716998      90.1996      7.37779   0.00707095
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063294, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004919, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06866, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.87872e-09  2.87874e-09  1.58109e-11
      low eigenvalue method done, cpu time[sec] = 0.068941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.88e-09  1.58e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.84e-10  1.58e-11         1
         *Z       ---       ---  1.05e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58107e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.32652e-56  1.63879e-56  4.69044e-58  3.48191e-57  9.94917e-59  1.02801e-58  2.51858e-65 -1.79566e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.23969, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 340 K
      Energy reference = 26264 1/cm
      Energy step      = 59 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007945
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.593355
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.370645
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.583736
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.07768
         W1 Well: minimal relaxation eigenvalue = 0.0933602
         W1 Well: maximal relaxation eigenvalue = 0.97903
         W1 Well:       grid size = 512
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3944 1/cm
         B1 Barrier:        grid size = 446
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -50 1/cm
         B2 Barrier:        grid size = 442
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 185 1/cm
         B3 Barrier:        grid size = 524
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4652 1/cm
         B4 Barrier:        grid size = 550
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6186 1/cm
         B5 Barrier: nonpositive number of states at -23119 1/cm => truncating
         B5 Barrier:        grid size = 837
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23119 1/cm
         B6 Barrier:        grid size = 420
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1483 1/cm
         B7 Barrier:        grid size = 366
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4669 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16765 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.09125, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 512
      MasterEquation::Barrier::truncate: real weight = 1.66571e+53
      MasterEquation::Barrier::truncate: effective weight = 4.47782e+49
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 512
      MasterEquation::Barrier::truncate: real weight = 1.29962e+55
      MasterEquation::Barrier::truncate: effective weight = 3.49366e+51
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 512
      MasterEquation::Barrier::truncate: real weight = 5.92614e+57
      MasterEquation::Barrier::truncate: effective weight = 8.9029e+50
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3944  -3944 3.63e+09 4.19e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -50 4.05e+14
         B2    186 5.78e+13
         B3  -3944 1.38e+13
         B4  -3944 1.78e+13
         B5  -3944 1.86e+12
         B6   1484 2.33e+14
         B7   4670 1.93e+13
         B8  16765    2e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.41e-07  1.18e-06  1.87e-14     2e-17  1.33e-50    0.0036  4.99e+03   3.2e+26
          R  2.27e+06         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1   8.5e+05     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  5.34e+13  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  4.99e+16   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4   7.5e+49  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5       278  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6  0.000201  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  3.13e-27  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.92e+32  1.58e+33  2.51e+25  2.69e+22  1.79e-11  4.82e+36  6.69e+42  4.29e+65
          R  1.69e-33         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  6.34e-34     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  3.98e-26  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  3.72e-23   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  5.59e+10  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5  2.07e-37  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6   1.5e-43  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  2.33e-66  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
   MasterEquation::set:  done, cpu time[sec] = 4.10653, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+08
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.541422, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30272, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6719.91      958.728      229.435      295.896      30.8353      3861.95      320.314     0.331213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058944, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064001, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.13426e-07  1.13426e-07  4.71799e-09
      low eigenvalue method done, cpu time[sec] = 0.065517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-07  4.72e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  4.72e-09         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.71799e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.62362e-52  2.67709e-52  9.44243e-54  1.03167e-52  2.56476e-54  1.20143e-55  2.35836e-63 -7.89401e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.91793, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.539466, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.40225, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2239.97      319.576      76.4783      98.6321      10.2784      1287.32      106.771     0.110404
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004609, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064125, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.00103e-08  4.00103e-08  1.29928e-09
      low eigenvalue method done, cpu time[sec] = 0.065642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     4e-08   1.3e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-09   1.3e-09         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29928e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69591e-52  6.88825e-53  2.09108e-54  1.91849e-53  5.04495e-55  8.96538e-56  2.37883e-63 -1.68264e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.85494, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         2.15759e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.54032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.40142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1343.98      191.746       45.887      59.1793      6.16706      772.389      64.0629    0.0662426
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058973, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004611, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064012, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45343e-08  2.45343e-08  6.58686e-10
      low eigenvalue method done, cpu time[sec] = 0.06552, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-08  6.59e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.45e-09  6.59e-10         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.58686e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.87568e-53  3.35069e-53  9.82698e-55  8.44258e-54  2.27365e-55  6.76119e-56  2.40073e-63  1.96656e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.01861, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.02062e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.541477, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.39952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            959.987      136.961      32.7764      42.2709      4.40504      551.707      45.7592    0.0473161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058904, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004609, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063943, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77458e-08  1.77458e-08  4.09375e-10
      low eigenvalue method done, cpu time[sec] = 0.065453, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-08  4.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-09  4.09e-10         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.09375e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.61676e-53  2.02498e-53  5.85417e-55   4.8401e-54  1.32266e-55  5.31153e-56  2.42383e-63  -2.2656e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.0228, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.88366e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.539775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.40478, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            746.656      106.525      25.4928      32.8774      3.42615      429.105      35.5905    0.0368014
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004609, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39196e-08  1.39196e-08  2.82891e-10
      low eigenvalue method done, cpu time[sec] = 0.065468, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-08  2.83e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-09  2.83e-10         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.82891e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.92864e-53  1.37061e-53  3.93347e-55  3.16788e-54  8.74631e-56  4.31028e-56  2.44777e-63  5.12338e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.01539, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.540818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.43399, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            671.991      95.8728      22.9435      29.5896      3.08353      386.195      32.0314    0.0331213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058969, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004616, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064021, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.25693e-08  1.25693e-08  2.41424e-10
      low eigenvalue method done, cpu time[sec] = 0.065526, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-08  2.41e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-09  2.41e-10         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.41424e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36869e-53  1.15971e-53  3.32045e-55  2.64652e-54  7.33716e-56  3.92065e-56  2.45992e-63  1.55178e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88431, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         6.47276e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.53951, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4397, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            447.994      63.9152      15.2957      19.7264      2.05569      257.463      21.3543    0.0220809
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05896, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063986, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.47747e-09  8.47746e-09  1.28696e-10
      low eigenvalue method done, cpu time[sec] = 0.065498, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.48e-09  1.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.39e-10  1.29e-10         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28696e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82564e-53  5.98785e-54  1.70476e-55  1.30967e-54  3.68554e-56  2.61985e-56  2.52008e-63  3.39298e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         8.63035e+09
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.538717, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            335.995      47.9364      11.4717      14.7948      1.54177      193.097      16.0157    0.0165606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058978, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004596, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064003, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.40401e-09  6.40401e-09  8.09182e-11
      low eigenvalue method done, cpu time[sec] = 0.065521, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.4e-09  8.09e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.32e-10  8.09e-11         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.09179e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.15956e-53   3.6856e-54   1.0478e-55  7.86588e-55  2.23492e-56  1.89894e-56  2.57505e-63 -1.98472e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.09612, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.07879e+10
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.541122, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.44205, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            268.796      38.3491       9.1774      11.8359      1.23341      154.478      12.8126    0.0132485
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059033, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064087, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.14912e-09  5.14911e-09   5.5923e-11
      low eigenvalue method done, cpu time[sec] = 0.065587, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.15e-09  5.59e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-10  5.59e-11         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.59228e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.07021e-54  2.50786e-54  7.12967e-56  5.26601e-55  1.50653e-56  1.45092e-56  2.62095e-63  1.82288e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89275, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+10
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.541596, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.40562, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            223.997      31.9576      7.64783      9.86321      1.02784      128.732      10.6771    0.0110404
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.30729e-09  4.30727e-09  4.11087e-11
      low eigenvalue method done, cpu time[sec] = 0.065523, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.31e-09  4.11e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-10  4.11e-11         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.11084e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.96337e-54  1.82153e-54  5.18127e-56  3.78041e-55  1.08719e-56  1.15056e-56  2.65601e-63 -7.25609e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.01941, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.51031e+10
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.539523, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.43332, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            191.997      27.3922      6.55529      8.45418     0.881009      110.341      9.15184   0.00946323
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058974, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064033, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.70308e-09  3.70308e-09  3.15658e-11
      low eigenvalue method done, cpu time[sec] = 0.065568, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-09  3.16e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.63e-10  3.16e-11         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.15659e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.59769e-54  1.38529e-54   3.9434e-56  2.84968e-55  8.22933e-57  9.37985e-57  2.67993e-63  4.25936e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.04308, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.72607e+10
      global relaxation matrix dimension = 512
      setting global matrices ... done, cpu time[sec] = 0.540494, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.43073, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            167.998      23.9682      5.73587      7.39741     0.770883      96.5487      8.00786   0.00828032
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058969, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004605, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.24819e-09  3.24819e-09  2.50399e-11
      low eigenvalue method done, cpu time[sec] = 0.065518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.25e-09   2.5e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.18e-10   2.5e-11         1
         *Z       ---       ---  3.14e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.504e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.65912e-54   1.0902e-54  3.10602e-56  2.22707e-55  6.45322e-57  7.81304e-57  2.69325e-63  5.17516e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.04611, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 350 K
      Energy reference = 26542 1/cm
      Energy step      = 60 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006871
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.581449
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.365762
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.311636
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.06983
         W1 Well: minimal relaxation eigenvalue = 0.0925983
         W1 Well: maximal relaxation eigenvalue = 0.981759
         W1 Well:       grid size = 509
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3997 1/cm
         B1 Barrier:        grid size = 443
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 439
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 520
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4658 1/cm
         B4 Barrier:        grid size = 546
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6218 1/cm
         B5 Barrier: nonpositive number of states at -23618 1/cm => truncating
         B5 Barrier:        grid size = 836
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23618 1/cm
         B6 Barrier:        grid size = 418
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1462 1/cm
         B7 Barrier:        grid size = 364
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4702 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16762 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.7733, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 2.11448e+52
      MasterEquation::Barrier::truncate: effective weight = 5.78057e+48
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 1.44748e+54
      MasterEquation::Barrier::truncate: effective weight = 3.95711e+50
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 509
      MasterEquation::Barrier::truncate: real weight = 1.60028e+56
      MasterEquation::Barrier::truncate: effective weight = 8.43247e+49
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3997  -3997 3.57e+09  4.4e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38  4.4e+14
         B2    202 6.35e+13
         B3  -3997 1.53e+13
         B4  -3997 1.96e+13
         B5  -3997 2.05e+12
         B6   1463 2.56e+14
         B7   4702 2.15e+13
         B8  16762  2.4e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1     3e-07  7.78e-07  2.24e-14  2.91e-17  1.76e-49   0.00208  1.98e+03  2.98e+25
          R  3.34e+06         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  1.28e+06     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  4.47e+13  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3  3.43e+16  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  5.69e+48   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5       481  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  0.000505  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  3.36e-26  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e+31  3.16e+31  9.09e+23  1.18e+21  7.14e-12  8.46e+34  8.05e+40  1.21e+63
          R  8.21e-32         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  3.16e-32     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2   1.1e-24  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3  8.45e-22  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4   1.4e+11   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5  1.18e-35  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  1.24e-41  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  8.26e-64  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
   MasterEquation::set:  done, cpu time[sec] = 3.78797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+08
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.533791, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32223, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7094.56      1022.89      246.141      316.537      33.1086      4128.09      347.111     0.386482
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057995, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004522, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062945, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29379e-07  1.29379e-07  6.86594e-09
      low eigenvalue method done, cpu time[sec] = 0.063208, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.29e-07  6.87e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-08  6.87e-09         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.86594e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.77768e-50  1.30435e-50  4.50328e-52  4.78588e-51  1.19801e-52  6.62682e-54  1.93711e-61  8.90189e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.91547, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.533388, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2364.85      340.964      82.0468      105.512      11.0362      1376.03      115.704     0.128827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05842, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063338, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.62537e-08  4.62537e-08  1.94611e-09
      low eigenvalue method done, cpu time[sec] = 0.063598, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.63e-08  1.95e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.63e-09  1.95e-09         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.94611e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60765e-51  3.43261e-51  1.02736e-52  9.17949e-52  2.43441e-53  5.00753e-54  1.95389e-61  7.08069e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97386, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.11455e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.534144, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38042, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1418.91      204.578      49.2281      63.3074      6.62171      825.619      69.4223    0.0772964
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058441, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004513, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063371, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.85098e-08  2.85098e-08  9.99936e-10
      low eigenvalue method done, cpu time[sec] = 0.063633, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.85e-08     1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.84e-09     1e-09         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.99935e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.56467e-51  1.68801e-51  4.89418e-53  4.09378e-52  1.11276e-53  3.81233e-54  1.97184e-61 -6.20396e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.81531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.96037e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.37994, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1013.51      146.127      35.1629      45.2196      4.72979      589.728      49.5873    0.0552117
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058368, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063282, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06822e-08  2.06822e-08  6.26928e-10
      low eigenvalue method done, cpu time[sec] = 0.063538, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  6.27e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.05e-09  6.27e-10         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.26928e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91389e-51  1.02744e-51  2.94127e-53  2.36663e-52  6.53131e-54  3.01679e-54  1.99076e-61   5.5904e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96617, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         3.80619e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.533182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38842, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            788.284      113.655      27.3489      35.1708      3.67873      458.677      38.5679    0.0429424
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058429, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063346, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62547e-08  1.62547e-08  4.36029e-10
      low eigenvalue method done, cpu time[sec] = 0.063612, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-08  4.36e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.61e-09  4.36e-10         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.36029e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0513e-51  6.99076e-52  1.98897e-53  1.55827e-52  4.34681e-54  2.46251e-54  2.01032e-61  1.01326e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96965, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.530503, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38517, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            709.456      102.289      24.6141      31.6537      3.31086      412.809      34.7111    0.0386482
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057966, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004534, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06292, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.4689e-08   1.4689e-08  3.73109e-10
      low eigenvalue method done, cpu time[sec] = 0.063179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-08  3.73e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-09  3.73e-10         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.73108e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.76364e-51  5.92791e-52  1.68344e-53  1.30499e-52  3.65609e-54  2.24564e-54  2.02024e-61 -1.80708e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97456, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         6.34365e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38783, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            472.971      68.1927      16.4094      21.1025      2.20724      275.206      23.1408    0.0257655
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058423, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004501, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063351, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.93279e-09   9.9328e-09  2.00897e-10
      low eigenvalue method done, cpu time[sec] = 0.063609, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.93e-09  2.01e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.77e-10  2.01e-10         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.00897e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.65495e-52  3.08556e-52  8.72866e-54  6.51599e-53  1.85443e-54  1.51599e-54  2.06922e-61 -2.27652e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         8.45821e+09
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.5317, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.384, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            354.728      51.1445       12.307      15.8269      1.65543      206.405      17.3556    0.0193241
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.058429, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004489, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063336, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.51495e-09  7.51494e-09  1.27177e-10
      low eigenvalue method done, cpu time[sec] = 0.063609, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.51e-09  1.27e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.37e-10  1.27e-10         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27177e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.17479e-52  1.90957e-52  5.40068e-54  3.93668e-53  1.13181e-54  1.10712e-54  2.11384e-61  1.44381e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.05728e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.531043, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38481, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            283.782      40.9156      9.84562      12.6615      1.32434      165.124      13.8845    0.0154593
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05803, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004518, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062968, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.04861e-09   6.0486e-09  8.83389e-11
      low eigenvalue method done, cpu time[sec] = 0.063225, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.05e-09  8.83e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-10  8.83e-11         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.83382e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.31962e-52  1.30459e-52  3.69293e-54  2.64685e-53  7.66564e-55  8.50923e-55  2.15105e-61 -3.49788e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.80916, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532364, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            236.485      34.0964      8.20468      10.5512      1.10362      137.603      11.5704    0.0128827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057948, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062931, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.06352e-09  5.06351e-09  6.51959e-11
      low eigenvalue method done, cpu time[sec] = 0.063191, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.06e-09  6.52e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.94e-10  6.52e-11         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.51956e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.20488e-52  9.50529e-53  2.69405e-54  1.90646e-53  5.55229e-55  6.78031e-55  2.17951e-61 -1.68952e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97089, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.48019e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38929, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            202.702      29.2255      7.03259      9.04392     0.945959      117.946      9.91747    0.0110423
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057907, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062878, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.35574e-09  4.35573e-09  5.02238e-11
      low eigenvalue method done, cpu time[sec] = 0.063136, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-09  5.02e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.25e-10  5.02e-11         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.02238e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.4791e-52  7.24717e-53  2.05681e-54  1.44092e-53  4.21521e-55   5.5501e-55  2.19901e-61  5.47129e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.69164e+10
      global relaxation matrix dimension = 509
      setting global matrices ... done, cpu time[sec] = 0.532065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.391, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            177.364      25.5723      6.15351      7.91343     0.827714      103.202      8.67778   0.00966205
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.057886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004546, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.82241e-09  3.82241e-09  3.99483e-11
      low eigenvalue method done, cpu time[sec] = 0.063118, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.82e-09  3.99e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.72e-10  3.99e-11         1
         *Z       ---       ---     1e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.99476e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.97848e-52  5.71543e-53  1.62426e-54  1.12859e-53  3.31361e-55  4.63917e-55     2.21e-61  5.47567e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97448, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 360 K
      Energy reference = 26820 1/cm
      Energy step      = 62 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007339
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.549369
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.347511
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.308395
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.94889
         W1 Well: minimal relaxation eigenvalue = 0.0918228
         W1 Well: maximal relaxation eigenvalue = 0.980486
         W1 Well:       grid size = 498
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4056 1/cm
         B1 Barrier:        grid size = 433
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -26 1/cm
         B2 Barrier:        grid size = 430
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 159 1/cm
         B3 Barrier:        grid size = 507
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4614 1/cm
         B4 Barrier:        grid size = 533
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6226 1/cm
         B5 Barrier: nonpositive number of states at -23586 1/cm => truncating
         B5 Barrier:        grid size = 813
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23585 1/cm
         B6 Barrier:        grid size = 409
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1462 1/cm
         B7 Barrier:        grid size = 357
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4686 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16776 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.60422, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 3.02251e+51
      MasterEquation::Barrier::truncate: effective weight = 8.53836e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 1.8294e+53
      MasterEquation::Barrier::truncate: effective weight = 5.1679e+49
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 498
      MasterEquation::Barrier::truncate: real weight = 5.78264e+54
      MasterEquation::Barrier::truncate: effective weight = 9.2935e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4056  -4056 3.51e+09 4.62e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -26 4.78e+14
         B2    160 6.96e+13
         B3  -4056 1.68e+13
         B4  -4056 2.16e+13
         B5  -4056 2.27e+12
         B6   1463 2.82e+14
         B7   4687  2.4e+13
         B8  16776 2.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.06e-07  5.23e-07  2.62e-14  4.11e-17  1.99e-48   0.00123       822  3.14e+24
          R  4.85e+06         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  1.91e+06     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  3.81e+13  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  2.43e+16  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  5.02e+47  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5       812  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6   0.00122  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  3.18e-25  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.11e+29  7.87e+29  3.95e+22  6.19e+19     3e-12  1.85e+33  1.24e+39  4.73e+60
          R  3.22e-30         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  1.27e-30     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  2.53e-23  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  1.62e-20  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  3.33e+11  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5   5.4e-34  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6  8.08e-40  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  2.11e-61  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.6195, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+08
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.51161, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30494, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7481.65      1090.06      263.729      338.206      35.5042      4406.77      375.571     0.448907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054668, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004375, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059463, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47014e-07  1.47014e-07   9.6863e-09
      low eigenvalue method done, cpu time[sec] = 0.059718, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-07  9.69e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-08  9.69e-09         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.6863e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10446e-48  5.11612e-49  1.73349e-50  1.79765e-49  4.52928e-51  2.93126e-52  1.24269e-59  6.79824e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.512046, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22077, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2493.88      363.353      87.9097      112.735      11.8347      1468.92       125.19     0.149636
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054639, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004358, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059425, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.33531e-08  5.33531e-08  2.82264e-09
      low eigenvalue method done, cpu time[sec] = 0.059685, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.34e-08  2.82e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.31e-09  2.82e-09         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.82264e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.51379e-49  1.37635e-49  4.06994e-51  3.55152e-50  9.49375e-52  2.23971e-52  1.25342e-59  1.27537e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74401, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.07375e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.509973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.21904, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1496.33      218.012      52.7458      67.6411      7.10083      881.354      75.1142    0.0897814
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.3078e-08   3.3078e-08  1.46936e-09
      low eigenvalue method done, cpu time[sec] = 0.05959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-08  1.47e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-09  1.47e-09         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46935e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.88745e-49  6.84113e-50  1.96478e-51  1.60449e-50  4.39937e-52  1.72022e-52  1.26488e-59  6.60135e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74128, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.90325e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.509739, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22321, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1068.81      155.723      37.6756      48.3151      5.07202      629.539       53.653    0.0641296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05462, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059381, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.40764e-08  2.40764e-08  9.29164e-10
      low eigenvalue method done, cpu time[sec] = 0.059637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.41e-08  9.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-09  9.29e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.29164e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21517e-49  4.19341e-50  1.19101e-51  9.35175e-51  2.60479e-52  1.37064e-52  1.27695e-59 -7.40595e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74467, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         3.73275e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.509489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            831.294      121.118      29.3032      37.5784      3.94491      489.641      41.7301    0.0498786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054656, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89644e-08  1.89644e-08  6.50341e-10
      low eigenvalue method done, cpu time[sec] = 0.059674, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.9e-08   6.5e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-09   6.5e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.50341e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60881e-50  2.86808e-50  8.10512e-52  6.19391e-51  1.74456e-52  1.12509e-52  1.28941e-59  4.76626e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.97394, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.511651, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.21941, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            748.165      109.006      26.3729      33.8206      3.55042      440.677      37.5571    0.0448907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054634, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004362, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059406, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.71526e-08  1.71526e-08   5.5796e-10
      low eigenvalue method done, cpu time[sec] = 0.05968, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.72e-08  5.58e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-09  5.58e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.57959e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.42114e-50  2.43727e-50  6.87806e-52  5.19967e-51  1.47116e-52  1.02852e-52  1.29572e-59  7.34629e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.73564, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         6.22124e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.511979, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.2294, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            498.777      72.6706      17.5819       22.547      2.36694      293.785      25.0381    0.0299271
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054568, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004355, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05934, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16331e-08  1.16331e-08  3.03424e-10
      low eigenvalue method done, cpu time[sec] = 0.059594, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08  3.03e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-09  3.03e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.03423e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.10341e-50  1.27893e-50  3.60148e-52   2.6195e-51  7.53424e-53  7.01213e-53  1.32682e-59  9.49934e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.75005, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         8.29499e+09
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.510391, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22321, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            374.082      54.5029      13.1865      16.9103      1.77521      220.339      18.7785    0.0224454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05457, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059335, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.81695e-09  8.81695e-09  1.93388e-10
      low eigenvalue method done, cpu time[sec] = 0.059613, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.82e-09  1.93e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.59e-10  1.93e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93387e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.64238e-50  7.95842e-51  2.24324e-52  1.59199e-51  4.62822e-53  5.15843e-53   1.3551e-59 -1.68713e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74617, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.03687e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.512638, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22654, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            299.266      43.6023      10.5492      13.5282      1.42017      176.271      15.0228    0.0179563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054617, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004347, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059381, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.10504e-09  7.10504e-09  1.35012e-10
      low eigenvalue method done, cpu time[sec] = 0.059653, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.11e-09  1.35e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.91e-10  1.35e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35012e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.85802e-50   5.4592e-51  1.54153e-52  1.07504e-51  3.14962e-53  3.98762e-53  1.37868e-59 -1.33727e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.512621, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            249.388      36.3353      8.79097      11.2735      1.18347      146.892       12.519    0.0149636
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054815, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00435, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059619, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.95308e-09  5.95306e-09  1.00041e-10
      low eigenvalue method done, cpu time[sec] = 0.05988, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.95e-09     1e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.78e-10     1e-10         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0004e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38414e-50  3.99026e-51  1.12896e-52  7.76938e-52  2.28982e-53  3.19247e-53  1.39676e-59 -1.05857e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74981, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.45162e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.511487, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.23051, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            213.761      31.1445      7.53512      9.66302       1.0144      125.908      10.7306    0.0128259
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054478, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059245, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.12435e-09  5.12435e-09  7.73185e-11
      low eigenvalue method done, cpu time[sec] = 0.059497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.12e-09  7.73e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.96e-10  7.73e-11         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.73177e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07425e-50  3.05018e-51  8.64656e-53  5.88818e-52  1.74365e-53   2.6237e-53  1.40923e-59 -3.00908e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.75327, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1           1.659e+10
      global relaxation matrix dimension = 498
      setting global matrices ... done, cpu time[sec] = 0.510798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22492, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            187.041      27.2515      6.59323      8.45514     0.887604      110.169      9.38927    0.0112227
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.054626, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004336, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059363, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.49929e-09   4.4993e-09  6.16683e-11
      low eigenvalue method done, cpu time[sec] = 0.059614, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.5e-09  6.17e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.35e-10  6.17e-11         1
         *Z       ---       ---  3.39e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.16676e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.5972e-51  2.41068e-51  6.84631e-53  4.62227e-52  1.37415e-53  2.20063e-53  1.41639e-59 -1.14718e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74333, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 370 K
      Energy reference = 27098 1/cm
      Energy step      = 64 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007133
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.53606
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.33677
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.309037
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.84801
         W1 Well: minimal relaxation eigenvalue = 0.0910632
         W1 Well: maximal relaxation eigenvalue = 0.979299
         W1 Well:       grid size = 488
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4134 1/cm
         B1 Barrier:        grid size = 424
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 421
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 153 1/cm
         B3 Barrier:        grid size = 496
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4646 1/cm
         B4 Barrier:        grid size = 520
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6182 1/cm
         B5 Barrier: nonpositive number of states at -23590 1/cm => truncating
         B5 Barrier:        grid size = 792
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23590 1/cm
         B6 Barrier:        grid size = 400
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1497 1/cm
         B7 Barrier:        grid size = 350
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4697 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16794 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.4688, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 4.81801e+50
      MasterEquation::Barrier::truncate: effective weight = 1.40496e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 2.59645e+52
      MasterEquation::Barrier::truncate: effective weight = 7.57138e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 488
      MasterEquation::Barrier::truncate: real weight = 2.73167e+53
      MasterEquation::Barrier::truncate: effective weight = 1.17352e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4134  -4134 3.42e+09 4.85e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 5.19e+14
         B2    154 7.64e+13
         B3  -4134 1.86e+13
         B4  -4134 2.38e+13
         B5  -4134  2.5e+12
         B6   1498 3.09e+14
         B7   4698 2.67e+13
         B8  16794 3.42e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.55e-07  3.84e-07  3.26e-14   6.1e-17  2.12e-47  0.000801       382  4.01e+23
          R  6.45e+06         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  2.61e+06     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  3.07e+13  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  1.64e+16  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  4.72e+46  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  1.25e+03  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6   0.00261  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  2.49e-24  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.64e+27  2.39e+28  2.03e+21  3.79e+18  1.32e-12  4.98e+31  2.38e+37  2.49e+58
          R  1.04e-28         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.19e-29     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  4.93e-22  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  2.64e-19  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  7.58e+11  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  2.01e-32  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6   4.2e-38  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  4.01e-59  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.48334, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+08
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.49356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.18506, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7881.37      1160.34      282.233      360.937      38.0267      4698.34      405.764     0.519125
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004311, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056338, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57085e-07  1.57085e-07  1.25172e-08
      low eigenvalue method done, cpu time[sec] = 0.056584, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-07  1.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-08  1.25e-08         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25172e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.59658e-47   1.6441e-47  5.47745e-49  5.55686e-48  1.40876e-49  1.05846e-50  6.37768e-58 -1.42963e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65101, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.492317, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2627.12      386.781      94.0777      120.312      12.6756      1566.11      135.255     0.173042
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004138, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.79358e-08  5.79358e-08  3.74566e-09
      low eigenvalue method done, cpu time[sec] = 0.056285, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.79e-08  3.75e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.73e-09  3.75e-09         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.74566e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.17361e-47  4.51808e-48  1.32211e-49  1.12934e-48  3.04154e-50  8.16696e-51  6.43255e-58  8.42033e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.56808, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.03499e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.494194, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.13866, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1576.27      232.068      56.4466      72.1874      7.60534      939.667      81.1529     0.103825
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004134, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055995, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.61461e-08  3.61461e-08  1.97464e-09
      low eigenvalue method done, cpu time[sec] = 0.056235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.61e-08  1.97e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.55e-09  1.97e-09         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97464e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.38316e-48  2.26926e-48  6.46564e-50  5.16639e-49  1.42821e-50  6.32383e-51   6.4912e-58  6.52365e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.44825, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.84899e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.491533, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10012, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1125.91      165.763       40.319      51.5624      5.43239      671.191      57.9663    0.0741607
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051502, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004129, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056023, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.64051e-08  2.64051e-08  1.25915e-09
      low eigenvalue method done, cpu time[sec] = 0.056295, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.64e-08  1.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-09  1.26e-09         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25915e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.14383e-48  1.40063e-48   3.9526e-50  3.03533e-49  8.52823e-51  5.07131e-51  6.55287e-58  6.44493e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.55728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         3.66299e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.49196, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10226, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            875.708      128.927      31.3592      40.1041      4.22519      522.037      45.0849    0.0576805
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051475, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004126, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0849e-08   2.0849e-08  8.86786e-10
      low eigenvalue method done, cpu time[sec] = 0.056245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-08  8.87e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-09  8.87e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.86786e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.95391e-48  9.62879e-49  2.70666e-50  2.02205e-49  5.74728e-51  4.18488e-51  6.61645e-58  8.12249e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.56446, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.492064, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.14152, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            788.137      116.034      28.2233      36.0937      3.80267      469.834      40.5764    0.0519125
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051508, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004147, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056047, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8875e-08   1.8875e-08  7.62783e-10
      low eigenvalue method done, cpu time[sec] = 0.056297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08  7.63e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-09  7.63e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.62783e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.55298e-48  8.19988e-49  2.30283e-50  1.70151e-49  4.85895e-51  3.83457e-51  6.64857e-58  2.49706e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.60348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         6.10498e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.493204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.13969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            525.425      77.3561      18.8155      24.0625      2.53511      313.222       27.051    0.0346083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051422, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004126, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055936, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.28428e-08  1.28428e-08  4.18882e-10
      low eigenvalue method done, cpu time[sec] = 0.056182, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.28e-08  4.19e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-09  4.19e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.18882e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42557e-48  4.33745e-49   1.2176e-50  8.64791e-50  2.51226e-51  2.63906e-51  6.80667e-58  7.52765e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.59811, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         8.13998e+09
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.493241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12008, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            394.069      58.0171      14.1117      18.0468      1.90134      234.917      20.2882    0.0259562
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051409, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004133, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055936, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75264e-09  9.75265e-09  2.68776e-10
      low eigenvalue method done, cpu time[sec] = 0.056187, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.75e-09  2.69e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.44e-10  2.69e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68776e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.24238e-49  2.71387e-49  7.63466e-51  5.28695e-50  1.55324e-51  1.95513e-51  6.95007e-58  3.57962e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.58014, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.0175e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.492113, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10829, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            315.255      46.4137      11.2893      14.4375      1.52107      187.933      16.2306     0.020765
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051493, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004141, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056022, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.86938e-09  7.86938e-09  1.88593e-10
      low eigenvalue method done, cpu time[sec] = 0.056265, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.87e-09  1.89e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.6e-10  1.89e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88593e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.53217e-49  1.86923e-49   5.2726e-51   3.5858e-50  1.06209e-51  1.51984e-51  7.06963e-58  6.55011e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.55913, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.493175, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10314, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            262.712      38.6781      9.40777      12.0312      1.26756      156.611      13.5255    0.0173042
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056112, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.59977e-09  6.59979e-09  1.40302e-10
      low eigenvalue method done, cpu time[sec] = 0.056355, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.6e-09   1.4e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.36e-10   1.4e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.40302e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.88593e-49  1.37065e-49  3.87664e-51  2.60033e-50  7.75059e-52  1.22239e-51  7.16145e-58  3.45711e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.56308, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.4245e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.49086, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10726, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            225.182      33.1526       8.0638      10.3125      1.08648      134.238      11.5933    0.0148321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05149, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056036, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.68519e-09  5.68521e-09  1.08791e-10
      low eigenvalue method done, cpu time[sec] = 0.056285, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.69e-09  1.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.47e-10  1.09e-10         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08791e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8047e-49  1.05048e-49  2.97862e-51  1.97617e-50     5.92e-52  1.00854e-51  7.22511e-58  1.07897e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.56017, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.628e+10
      global relaxation matrix dimension = 488
      setting global matrices ... done, cpu time[sec] = 0.492334, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            197.034      29.0085      7.05583      9.02342     0.950668      117.458      10.1441    0.0129781
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.051476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004145, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.99463e-09  4.99464e-09  8.70101e-11
      low eigenvalue method done, cpu time[sec] = 0.056251, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.99e-09   8.7e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.8e-10   8.7e-11         1
         *Z       ---       ---  1.26e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.701e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.05344e-49  8.32054e-50  2.36482e-51  1.55488e-50  4.67741e-52  8.48771e-52   7.2621e-58  9.31988e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.58735, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 380 K
      Energy reference = 27376 1/cm
      Energy step      = 66 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.009361
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.516972
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.323635
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.290598
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.76774
         W1 Well: minimal relaxation eigenvalue = 0.0903171
         W1 Well: maximal relaxation eigenvalue = 0.978194
         W1 Well:       grid size = 479
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4238 1/cm
         B1 Barrier:        grid size = 415
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -13 1/cm
         B2 Barrier:        grid size = 412
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 184 1/cm
         B3 Barrier:        grid size = 485
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4634 1/cm
         B4 Barrier:        grid size = 509
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6218 1/cm
         B5 Barrier: nonpositive number of states at -23576 1/cm => truncating
         B5 Barrier:        grid size = 772
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23575 1/cm
         B6 Barrier:        grid size = 392
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1504 1/cm
         B7 Barrier:        grid size = 344
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4672 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16750 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.33853, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 8.49049e+49
      MasterEquation::Barrier::truncate: effective weight = 2.55324e+46
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 4.10011e+51
      MasterEquation::Barrier::truncate: effective weight = 1.23298e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 1.65168e+52
      MasterEquation::Barrier::truncate: effective weight = 1.68043e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4238  -4238 3.31e+09 5.09e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -13 5.62e+14
         B2    185 8.37e+13
         B3  -4238 2.05e+13
         B4  -4238 2.61e+13
         B5  -4238 2.76e+12
         B6   1505 3.39e+14
         B7   4673 2.97e+13
         B8  16750 4.06e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.29e-07  3.12e-07  4.37e-14  9.64e-17  2.17e-46   0.00058       202  6.21e+22
          R  7.77e+06         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  3.21e+06     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  2.29e+13  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  1.04e+16  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  4.61e+45  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  1.72e+03  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6   0.00495  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  1.61e-23  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.59e+26   8.7e+26  1.22e+20  2.69e+17  6.05e-13  1.62e+30  5.63e+35  1.73e+56
          R  2.78e-27         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  1.15e-27     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  8.21e-21  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  3.72e-18  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  1.65e+12  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  6.18e-31  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6  1.78e-36  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  5.77e-57  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
   MasterEquation::set:  done, cpu time[sec] = 3.35376, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+08
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.472529, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11537, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8293.86      1233.82      301.685      384.766      40.6809      5003.14      437.763     0.598263
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048956, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004019, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053358, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.55249e-07  1.55249e-07  1.46188e-08
      low eigenvalue method done, cpu time[sec] = 0.053596, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-07  1.46e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-08  1.46e-08         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46188e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.74386e-46   4.3969e-46  1.44279e-47  1.43501e-46  3.65938e-48  3.15199e-49  2.65354e-56 -2.41732e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50963, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.474352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.03037, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2764.62      411.274      100.562      128.255      13.5603      1667.71      145.921     0.199421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048876, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00394, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053191, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82382e-08  5.82382e-08  4.48731e-09
      low eigenvalue method done, cpu time[sec] = 0.053436, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-08  4.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-09  4.49e-09         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.48731e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.25814e-46  1.23341e-46  3.57676e-48  2.99642e-47  8.12705e-49  2.45829e-49  2.67626e-56  6.05515e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42734, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.99813e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.473663, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.03257, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1658.77      246.765       60.337      76.9533      8.13617      1000.63      87.5527     0.119653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048874, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003932, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053179, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.65766e-08  3.65766e-08  2.39478e-09
      low eigenvalue method done, cpu time[sec] = 0.053413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.66e-08  2.39e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-09  2.39e-09         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.39478e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79361e-46   6.2583e-47  1.77133e-48   1.3875e-47  3.86535e-49  1.91948e-49  2.70053e-56  4.73459e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42969, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         2.79738e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.472873, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.03419, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1184.84       176.26      43.0979      54.9666      5.81155      714.734      62.5376    0.0854662
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053178, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6822e-08   2.6822e-08  1.53952e-09
      low eigenvalue method done, cpu time[sec] = 0.053417, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-08  1.54e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.61e-09  1.54e-09         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53952e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.17383e-46  3.88898e-47  1.09185e-48  8.21552e-48  2.32728e-49  1.54936e-49  2.72602e-56  9.16166e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.43052, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.59663e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.473048, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02035, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             921.54      137.091      33.5206      42.7518       4.5201      555.904      48.6404    0.0664737
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053148, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.12326e-08  2.12326e-08  1.09083e-09
      low eigenvalue method done, cpu time[sec] = 0.053384, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.12e-08  1.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-09  1.09e-09         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09083e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.41836e-47  2.68704e-47  7.52269e-49  5.50409e-48  1.57792e-49  1.28535e-49  2.75227e-56  7.74132e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41574, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.47322, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02147, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            829.386      123.382      30.1685      38.4766      4.06809      500.314      43.7763    0.0598263
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048871, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003931, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053184, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.92415e-08  1.92415e-08   9.4067e-10
      low eigenvalue method done, cpu time[sec] = 0.053432, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.92e-08  9.41e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-09  9.41e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.4067e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.2942e-47  2.29309e-47  6.41665e-49  4.64243e-48  1.33738e-49   1.1805e-49  2.76551e-56  6.51777e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41855, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         5.99438e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.4741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01636, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            552.924      82.2549      20.1123      25.6511      2.71206      333.543      29.1842    0.0398842
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003953, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31374e-08  1.31374e-08   5.2156e-10
      low eigenvalue method done, cpu time[sec] = 0.053444, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-08  5.22e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-09  5.22e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.21559e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.11256e-47  1.22264e-47   3.4256e-49  2.38024e-48  6.98026e-50  8.20118e-50  2.83058e-56  6.84977e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41092, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         7.99251e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.47375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02621, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            414.693      61.6912      15.0843      19.2383      2.03404      250.157      21.8882    0.0299132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003943, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053174, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.99703e-09  9.99702e-09  3.36891e-10
      low eigenvalue method done, cpu time[sec] = 0.053409, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-08  3.37e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.61e-10  3.37e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.36891e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.68421e-47  7.69174e-48   2.1622e-49  1.46379e-48  4.34342e-50  6.11843e-50  2.88952e-56  1.14465e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42189, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         9.99064e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.473248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02373, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            331.754      49.3529      12.0674      15.3907      1.62723      200.126      17.5105    0.0239305
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003935, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.07789e-09   8.0779e-09  2.37576e-10
      low eigenvalue method done, cpu time[sec] = 0.053392, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.08e-09  2.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-10  2.38e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.37576e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90674e-47  5.31952e-48   1.5007e-49  9.97161e-49  2.98425e-50  4.78268e-50  2.93868e-56  2.42302e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42304, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.474355, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04731, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            276.462      41.1274      10.0562      12.8255      1.35603      166.771      14.5921    0.0199421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048918, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053254, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.78158e-09  6.78161e-09  1.77449e-10
      low eigenvalue method done, cpu time[sec] = 0.053486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.78e-09  1.77e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.49e-10  1.77e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.77449e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.43197e-47  3.91325e-48  1.10773e-49  7.25606e-49  2.18599e-50  3.86432e-50  2.97656e-56  7.38498e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.44489, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.39869e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471545, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            236.967      35.2521      8.61958      10.9933      1.16231      142.947      12.5075    0.0170932
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048881, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00394, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053197, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.84641e-09  5.84642e-09  1.38047e-10
      low eigenvalue method done, cpu time[sec] = 0.053435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.85e-09  1.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.58e-10  1.38e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38047e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1188e-47  3.00707e-48  8.53888e-50  5.52983e-49  1.67485e-50  3.20066e-50  3.00301e-56   4.9819e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1          1.5985e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.473242, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02838, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            207.346      30.8456      7.54213      9.61916      1.01702      125.078      10.9441    0.0149566
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003943, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053244, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.13946e-09  5.13948e-09  1.10715e-10
      low eigenvalue method done, cpu time[sec] = 0.053477, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.14e-09  1.11e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.9e-10  1.11e-10         1
         *Z       ---       ---  5.17e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10714e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.00409e-48   2.3871e-48  6.79779e-50  4.36116e-49  1.32674e-50  2.70269e-50  3.01864e-56  5.49605e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42706, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 390 K
      Energy reference = 27654 1/cm
      Energy step      = 67 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007578
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.516717
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.320597
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.292424
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.83875
         W1 Well: minimal relaxation eigenvalue = 0.0896264
         W1 Well: maximal relaxation eigenvalue = 0.980675
         W1 Well:       grid size = 477
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4304 1/cm
         B1 Barrier:        grid size = 413
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -16 1/cm
         B2 Barrier:        grid size = 410
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 184 1/cm
         B3 Barrier:        grid size = 482
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4640 1/cm
         B4 Barrier:        grid size = 505
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6181 1/cm
         B5 Barrier: nonpositive number of states at -23199 1/cm => truncating
         B5 Barrier:        grid size = 759
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23199 1/cm
         B6 Barrier:        grid size = 391
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1457 1/cm
         B7 Barrier:        grid size = 343
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16800 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.39256, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 477
      MasterEquation::Barrier::truncate: real weight = 1.64128e+49
      MasterEquation::Barrier::truncate: effective weight = 5.01039e+45
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 477
      MasterEquation::Barrier::truncate: real weight = 7.14403e+50
      MasterEquation::Barrier::truncate: effective weight = 2.18089e+47
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 477
      MasterEquation::Barrier::truncate: real weight = 1.25368e+51
      MasterEquation::Barrier::truncate: effective weight = 2.55822e+46
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4304  -4304 3.24e+09 5.34e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -16 6.09e+14
         B2    185 9.16e+13
         B3  -4304 2.25e+13
         B4  -4304 2.86e+13
         B5  -4304 3.04e+12
         B6   1458 3.72e+14
         B7   4673  3.3e+13
         B8  16800 4.81e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.64e-08  2.29e-07  5.14e-14  1.33e-16  1.76e-45  0.000382      98.4  9.47e+21
          R  1.04e+07         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  4.37e+06     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.94e+13  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  7.52e+15  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  5.69e+44  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  2.62e+03  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6    0.0102   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  1.06e-22  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.58e+25  3.75e+25  8.44e+18  2.18e+16  2.88e-13  6.26e+28  1.61e+34  1.55e+54
          R  6.33e-26         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  2.66e-26     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.19e-19  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  4.58e-17  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  3.47e+12  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5   1.6e-29  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6   6.2e-35   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  6.44e-55  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.40715, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+08
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470567, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.08479, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8719.37      1310.59      322.119       409.73      43.4714      5321.53      471.642     0.687626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048434, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052765, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75007e-07  1.75007e-07  1.91961e-08
      low eigenvalue method done, cpu time[sec] = 0.052998, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-07  1.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-08  1.92e-08         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91961e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22657e-44  9.91968e-45  3.21078e-46  3.13613e-45  8.04165e-47  7.89255e-48  9.13625e-55 -2.17011e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.47168, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.469942, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00672, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2906.46      436.863      107.373      136.577      14.4905      1773.84      157.214     0.229209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048288, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052573, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.68606e-08  6.68606e-08  6.03798e-09
      low eigenvalue method done, cpu time[sec] = 0.052806, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.69e-08  6.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.53e-09  6.04e-09         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.03798e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.62205e-45  2.83853e-45  8.16734e-47  6.72062e-46  1.83497e-47  6.21491e-48  9.21424e-55  9.60283e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.39074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1           1.963e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470101, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00516, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1743.87      262.118      64.4238       81.946      8.69429      1064.31      94.3284     0.137525
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048296, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003917, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052591, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.22942e-08  4.22942e-08  3.26073e-09
      low eigenvalue method done, cpu time[sec] = 0.052822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.23e-08  3.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.11e-09  3.26e-09         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.26073e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.24526e-45   1.4546e-45  4.09453e-47   3.1488e-46  8.83624e-48  4.89072e-48  9.29752e-55  8.94505e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.39695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          2.7482e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470953, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99997, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1245.62      187.227       46.017      58.5329      6.21021      760.219      67.3774    0.0982323
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003909, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052621, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.11441e-08  3.11441e-08  2.11283e-09
      low eigenvalue method done, cpu time[sec] = 0.052851, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-08  2.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.01e-09  2.11e-09         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11283e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.80021e-45  9.09908e-46  2.54434e-47  1.87864e-46  5.36325e-48  3.97207e-48  9.38488e-55  8.73321e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.3881, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          3.5334e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470459, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            968.819      145.621       35.791      45.5256      4.83016      591.281      52.4047    0.0764029
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048301, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.47233e-08  2.47233e-08  1.50593e-09
      low eigenvalue method done, cpu time[sec] = 0.052802, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.47e-08  1.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.38e-09  1.51e-09         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.50593e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0201e-45  6.31805e-46  1.76357e-47  1.26565e-46  3.65802e-48  3.31193e-48  9.47466e-55  7.23858e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.38539, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.468882, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99786, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            871.937      131.059      32.2119       40.973      4.34714      532.153      47.1642    0.0687626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048352, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00389, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052616, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24294e-08  2.24294e-08  1.30184e-09
      low eigenvalue method done, cpu time[sec] = 0.05285, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-08   1.3e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-09   1.3e-09         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30184e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.75468e-45  5.40291e-46  1.50805e-47  1.06997e-46  3.10803e-48  3.04851e-48  9.51991e-55  9.80607e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.382, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         5.88901e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.46923, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            581.291      87.3727      21.4746      27.3153       2.8981      354.769      31.4428    0.0458418
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003863, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.53723e-08  1.53723e-08  7.28652e-10
      low eigenvalue method done, cpu time[sec] = 0.052801, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-08  7.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-09  7.29e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.28652e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.98705e-46  2.90345e-46   8.1278e-48  5.53349e-47  1.63734e-48  2.13705e-48   9.7418e-55  8.21161e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.38925, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         7.85201e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.469989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99632, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            435.969      65.5295       16.106      20.4865      2.17357      266.077      23.5821    0.0343813
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048313, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17247e-08  1.17247e-08  4.73753e-10
      low eigenvalue method done, cpu time[sec] = 0.052803, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-08  4.74e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-09  4.74e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.73753e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.56153e-46   1.8365e-46  5.16399e-48  3.42303e-47  1.02533e-48  1.60514e-48  9.94236e-55  8.65778e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.38233, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         9.81501e+09
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.469073, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99836, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            348.775      52.4236      12.8848      16.3892      1.73886      212.861      18.8657    0.0275051
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04826, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003887, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.48884e-09  9.48882e-09  3.35754e-10
      low eigenvalue method done, cpu time[sec] = 0.052763, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.49e-09  3.36e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.05e-10  3.36e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.35754e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.6844e-46  1.27529e-46  3.60193e-48  2.34207e-47  7.07852e-49  1.26148e-48  1.01096e-54  8.50216e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.37982, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+10
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470006, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00869, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            290.646      43.6863      10.7373      13.6577      1.44905      177.384      15.7214    0.0229209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00392, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.97531e-09  7.97533e-09  2.51774e-10
      low eigenvalue method done, cpu time[sec] = 0.052803, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.98e-09  2.52e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.59e-10  2.52e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.51775e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.53209e-46  9.41193e-47  2.66925e-48  1.71016e-47  5.20473e-49   1.0238e-48  1.02387e-54   7.2273e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.39299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.3741e+10
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470774, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00903, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            249.125      37.4454      9.20341      11.7066      1.24204      152.044      13.4755    0.0196465
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003909, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.88166e-09  6.88166e-09   1.9651e-10
      low eigenvalue method done, cpu time[sec] = 0.052818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.88e-09  1.97e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.54e-10  1.97e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.96511e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76876e-46  7.25164e-47  2.06427e-48  1.30699e-47  4.00013e-49  8.51188e-49  1.03293e-54  9.18253e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.39176, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.5704e+10
      global relaxation matrix dimension = 477
      setting global matrices ... done, cpu time[sec] = 0.470147, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            217.984      32.7648      8.05298      10.2433      1.08679      133.038       11.791    0.0171907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048344, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05263, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.05383e-09  6.05384e-09  1.58039e-10
      low eigenvalue method done, cpu time[sec] = 0.052866, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.05e-09  1.58e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.74e-10  1.58e-10         1
         *Z       ---       ---   2.1e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58039e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.23455e-46  5.76943e-47  1.64788e-48  1.03322e-47  3.17701e-49  7.21123e-49  1.03835e-54   7.9593e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.38973, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 400 K
      Energy reference = 27932 1/cm
      Energy step      = 69 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007579
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.50373
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.309411
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.293235
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.65357
         W1 Well: minimal relaxation eigenvalue = 0.0889249
         W1 Well: maximal relaxation eigenvalue = 0.979571
         W1 Well:       grid size = 468
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4359 1/cm
         B1 Barrier:        grid size = 405
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -12 1/cm
         B2 Barrier:        grid size = 402
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 194 1/cm
         B3 Barrier:        grid size = 472
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4636 1/cm
         B4 Barrier:        grid size = 495
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23197 1/cm => truncating
         B5 Barrier:        grid size = 741
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23196 1/cm
         B6 Barrier:        grid size = 384
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1436 1/cm
         B7 Barrier:        grid size = 337
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4679 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16754 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.1792, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 468
      MasterEquation::Barrier::truncate: real weight = 3.45602e+48
      MasterEquation::Barrier::truncate: effective weight = 1.08653e+45
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 468
      MasterEquation::Barrier::truncate: real weight = 1.36325e+50
      MasterEquation::Barrier::truncate: effective weight = 4.28589e+46
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 468
      MasterEquation::Barrier::truncate: real weight = 1.17299e+50
      MasterEquation::Barrier::truncate: effective weight = 4.32931e+45
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4359  -4359 3.18e+09  5.6e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -12  6.6e+14
         B2    195    1e+14
         B3  -4359 2.48e+13
         B4  -4359 3.14e+13
         B5  -4359 3.34e+12
         B6   1437 4.07e+14
         B7   4680 3.66e+13
         B8  16755 5.68e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   6.9e-08  1.61e-07  5.66e-14   1.7e-16  1.21e-44  0.000242      46.8   1.5e+21
          R  1.45e+07         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  6.22e+06     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2  1.77e+13  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  5.88e+15  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  8.26e+43   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  4.14e+03  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6    0.0214  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  6.69e-22  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.13e+23  1.89e+24  6.67e+17  2.01e+15  1.43e-13  2.85e+27  5.52e+32  1.76e+52
          R  1.23e-24         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  5.28e-25     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2   1.5e-18  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  4.99e-16  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  7.01e+12   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  3.51e-28  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6  1.81e-33  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  5.68e-53  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.19455, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+08
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452484, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.96394, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9158.02      1390.76      343.569      435.865      46.4033      5653.88      507.475     0.788271
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06426e-07  2.06426e-07  2.59636e-08
      low eigenvalue method done, cpu time[sec] = 0.050355, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-07   2.6e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.03e-08   2.6e-08         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.59636e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.34893e-43  1.91356e-43  6.11774e-45  5.87735e-44  1.51494e-45  1.68134e-46  2.63747e-53   1.8699e-73

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28953, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452947, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3052.67      463.587      114.523      145.288      15.4678      1884.63      169.158     0.262757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00372, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04994, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.03726e-08  8.03726e-08  8.36137e-09
      low eigenvalue method done, cpu time[sec] = 0.050168, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.04e-08  8.36e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.81e-09  8.36e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.36137e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52295e-43  5.58255e-44  1.59546e-45  1.29131e-44  3.54798e-46  1.33665e-46  2.65992e-53  7.41578e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.21795, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.92949e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452589, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88317, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1831.6      278.152      68.7139       87.173      9.28066      1130.78      101.495     0.157654
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045944, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003727, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050034, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.12223e-08  5.12223e-08  4.56778e-09
      low eigenvalue method done, cpu time[sec] = 0.05026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.12e-08  4.57e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.95e-09  4.57e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.56778e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.57939e-44  2.88862e-44  8.09455e-46  6.11972e-45  1.72921e-46  1.05987e-46  2.68388e-53  8.67356e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.06783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         2.70128e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.453931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88716, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1308.29       198.68      49.0813      62.2664      6.62904      807.698      72.4965      0.11261
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045971, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003738, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.78827e-08  3.78827e-08  2.98268e-09
      low eigenvalue method done, cpu time[sec] = 0.050299, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.79e-08  2.98e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.65e-09  2.98e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.98268e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.70257e-44  1.81874e-44  5.06993e-46  3.67839e-45  1.05787e-46   8.6596e-47  2.70899e-53  7.29625e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.21751, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.47308e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.451746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88219, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1017.56      154.529      38.1744      48.4294      5.15592      628.209      56.3861    0.0875857
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003722, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050053, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.01611e-08  3.01611e-08  2.13826e-09
      low eigenvalue method done, cpu time[sec] = 0.050276, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.02e-08  2.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-09  2.14e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.13826e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.13772e-44  1.26903e-44  3.53496e-46  2.49175e-45  7.25742e-47  7.25601e-47  2.73474e-53  7.79677e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04357, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88197, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            915.802      139.076      34.3569      43.5865      4.64033      565.388      50.7475    0.0788271
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045987, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003724, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050076, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.73943e-08  2.73943e-08  1.85297e-09
      low eigenvalue method done, cpu time[sec] = 0.050306, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-08  1.85e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-09  1.85e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.85297e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.60278e-44  1.08744e-44  3.03025e-46   2.1113e-45  6.18125e-47  6.69337e-47  2.74771e-53  6.98298e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.21226, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         5.78846e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.451286, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.87922, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            610.534      92.7174      22.9046      29.0577      3.09355      376.926      33.8317    0.0525514
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003721, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88506e-08  1.88506e-08   1.0468e-09
      low eigenvalue method done, cpu time[sec] = 0.050259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08  1.05e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-09  1.05e-09         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0468e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.06975e-44  5.88941e-45  1.64862e-46  1.10127e-45  3.28639e-47   4.7336e-47  2.81116e-53  7.25855e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.20685, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         7.71795e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.91234, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            457.901       69.538      17.1785      21.7932      2.32016      282.694      25.3738    0.0394136
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050065, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.44129e-08  1.44129e-08  6.85036e-10
      low eigenvalue method done, cpu time[sec] = 0.050296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.44e-08  6.85e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-09  6.85e-10         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.85036e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.36872e-44  3.74536e-45  1.05431e-46  6.85251e-46  2.07108e-47  3.57898e-47  2.86838e-53   7.1839e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.24104, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         9.64744e+09
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452985, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88431, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            366.321      55.6304      13.7428      17.4346      1.85613      226.155       20.299    0.0315309
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16841e-08  1.16841e-08  4.87893e-10
      low eigenvalue method done, cpu time[sec] = 0.050402, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-08  4.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-09  4.88e-10         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.87892e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.82017e-45  2.61146e-45  7.39043e-47   4.7092e-46  1.43665e-47  2.82759e-47  2.91608e-53  7.41687e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.21802, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+10
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452963, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.92597, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            305.267      46.3587      11.4523      14.5288      1.54678      188.463      16.9158    0.0262757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045845, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003731, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049942, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.83268e-09  9.83267e-09  3.67306e-10
      low eigenvalue method done, cpu time[sec] = 0.050169, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.83e-09  3.67e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.3e-10  3.67e-10         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.67306e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.43404e-45  1.93358e-45  5.49845e-47  3.45059e-46  1.06037e-47   2.3049e-47  2.95296e-53  7.46673e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.25821, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.35064e+10
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.450754, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.93088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            261.658       39.736      9.81627      12.4533      1.32581       161.54      14.4993     0.022522
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045908, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.49247e-09  8.49246e-09  2.87621e-10
      low eigenvalue method done, cpu time[sec] = 0.050308, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.49e-09  2.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.02e-10  2.88e-10         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.87621e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.84668e-45  1.49376e-45  4.26613e-47  2.64465e-46  8.17503e-48  1.92345e-47  2.97895e-53  7.79265e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.26032, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.54359e+10
      global relaxation matrix dimension = 468
      setting global matrices ... done, cpu time[sec] = 0.452337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89318, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             228.95       34.769      8.58923      10.8966      1.16008      141.347      12.6869    0.0197068
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.045805, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.47666e-09  7.47663e-09  2.31954e-10
      low eigenvalue method done, cpu time[sec] = 0.050245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.48e-09  2.32e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.05e-10  2.32e-10         1
         *Z       ---       ---  8.66e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.31954e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.73185e-45  1.19113e-45  3.41502e-47   2.0957e-46     6.51e-48  1.63483e-47  2.99468e-53  7.31272e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.22481, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 410 K
      Energy reference = 28210 1/cm
      Energy step      = 71 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007392
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.497792
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.297737
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.216678
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.58724
         W1 Well: minimal relaxation eigenvalue = 0.0882318
         W1 Well: maximal relaxation eigenvalue = 0.978543
         W1 Well:       grid size = 460
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4450 1/cm
         B1 Barrier:        grid size = 398
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -48 1/cm
         B2 Barrier:        grid size = 395
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 463
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 485
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6224 1/cm
         B5 Barrier: nonpositive number of states at -23123 1/cm => truncating
         B5 Barrier:        grid size = 723
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23123 1/cm
         B6 Barrier:        grid size = 377
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 331
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4709 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16778 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.10476, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 460
      MasterEquation::Barrier::truncate: real weight = 7.87731e+47
      MasterEquation::Barrier::truncate: effective weight = 2.5483e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 460
      MasterEquation::Barrier::truncate: real weight = 2.82992e+49
      MasterEquation::Barrier::truncate: effective weight = 9.15478e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 460
      MasterEquation::Barrier::truncate: real weight = 1.32934e+49
      MasterEquation::Barrier::truncate: effective weight = 8.15657e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4450  -4450 3.09e+09 5.87e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -48 7.14e+14
         B2    166  1.1e+14
         B3  -4450 2.72e+13
         B4  -4450 3.44e+13
         B5  -4450 3.68e+12
         B6   1444 4.46e+14
         B7   4709 4.05e+13
         B8  16779  6.7e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.59e-08  1.28e-07  6.91e-14   2.4e-16  8.45e-44  0.000174      25.7  2.88e+20
          R  1.79e+07         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  7.82e+06     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.45e+13  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.17e+15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.18e+43  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  5.75e+03  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6    0.0389  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  3.47e-21  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.82e+22   1.1e+23  5.96e+16  2.07e+14  7.29e-14   1.5e+26  2.22e+31  2.49e+50
          R  2.07e-23         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  9.06e-24     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.68e-17  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.83e-15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.37e+13  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  6.66e-27  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6   4.5e-32  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  4.02e-51  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.11906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+08
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.437808, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.87173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9610.02      1474.42       366.07      463.208      49.4814      6000.55       545.34     0.900757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043864, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003566, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047794, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.18706e-07  2.18706e-07  3.09954e-08
      low eigenvalue method done, cpu time[sec] = 0.048022, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-07   3.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.14e-08   3.1e-08         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.09954e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.34137e-42  3.19017e-42  1.00884e-43   9.5449e-43  2.47258e-44  3.08381e-45  6.44515e-52  7.79969e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.43821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3203.34      491.474      122.023      154.403      16.4938      2000.18       181.78     0.300252
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043772, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.67727e-08  8.67727e-08  1.02116e-08
      low eigenvalue method done, cpu time[sec] = 0.047952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.68e-08  1.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.38e-09  1.02e-08         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02116e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62793e-42  9.48416e-43  2.69524e-44  2.14808e-43  5.93754e-45  2.47369e-45  6.49972e-52   5.1858e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.89747e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.43745, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80296, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1922      294.884      73.2141      92.6415      9.89627      1200.11      109.068     0.180151
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04377, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003544, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047664, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.57129e-08  5.57129e-08  5.64135e-09
      low eigenvalue method done, cpu time[sec] = 0.047888, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.57e-08  5.64e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.35e-09  5.64e-09         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.64135e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.49685e-42  4.95424e-43  1.38343e-44  1.02939e-43  2.92788e-45  1.97585e-45  6.55794e-52  5.43643e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08105, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         2.65645e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.437809, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80505, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1372.86      210.632      52.2958      66.1725      7.06877      857.222      77.9057      0.12868
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043714, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003546, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047615, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.13827e-08  4.13826e-08  3.71152e-09
      low eigenvalue method done, cpu time[sec] = 0.047833, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.14e-08  3.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-09  3.71e-09         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.71152e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00238e-42  3.13929e-43  8.73229e-45  6.23248e-44  1.80501e-45  1.62373e-45  6.61885e-52  5.20674e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0874, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.41544e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.43751, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8009, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1067.78      163.825      40.6745      51.4675      5.49793      666.728      60.5933     0.100084
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043767, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047693, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30446e-08  3.30446e-08  2.67587e-09
      low eigenvalue method done, cpu time[sec] = 0.04791, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.3e-08  2.68e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-09  2.68e-09         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.67587e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.31428e-43  2.20101e-43  6.12391e-45  4.24465e-44  1.24541e-45  1.36705e-45  6.68126e-52  5.44482e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08029, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.438869, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80384, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            961.002      147.442       36.607      46.3208      4.94814      600.055       54.534    0.0900757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047731, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.0048e-08   3.0048e-08  2.32437e-09
      low eigenvalue method done, cpu time[sec] = 0.047954, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     3e-08  2.32e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.86e-09  2.32e-09         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.32437e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.38378e-43  1.88985e-43  5.26232e-45   3.6046e-44  1.06327e-45   1.2637e-45  6.71264e-52  5.28948e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08391, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1          5.6924e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.436336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.81553, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            640.668      98.2948      24.4047      30.8805      3.29876      400.037       36.356    0.0600505
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043773, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047671, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07601e-08  2.07601e-08  1.32515e-09
      low eigenvalue method done, cpu time[sec] = 0.04789, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-08  1.33e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.97e-09  1.33e-09         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32515e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    3.701e-43  1.03143e-43  2.88966e-45  1.89616e-44  5.70459e-46   9.0138e-46  6.86601e-52  5.33188e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09499, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         7.58986e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.437332, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80379, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            480.501      73.7211      18.3035      23.1604      2.47407      300.028       27.267    0.0450378
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043692, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003534, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047576, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.59122e-08  1.59122e-08  8.72758e-10
      low eigenvalue method done, cpu time[sec] = 0.047809, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-08  8.73e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.5e-09  8.73e-10         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.72758e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.46321e-43  6.59469e-44  1.85998e-45  1.18676e-44   3.6177e-46  6.85924e-46  7.00418e-52   5.2301e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.08188, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         9.48733e+09
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.436248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80814, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            384.401      58.9769      14.6428      18.5283      1.97925      240.022      21.8136    0.0360303
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047663, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29215e-08  1.29214e-08  6.24633e-10
      low eigenvalue method done, cpu time[sec] = 0.047882, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.29e-08  6.25e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-09  6.25e-10         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.24633e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.77597e-43  4.61693e-44  1.31023e-45  8.19155e-45  2.52146e-46  5.44722e-46  7.11949e-52  5.27644e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.95039, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+10
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.437189, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83301, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            320.334      49.1474      12.2023      15.4403      1.64938      200.018       18.178    0.0300252
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043708, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08876e-08  1.08876e-08  4.72096e-10
      low eigenvalue method done, cpu time[sec] = 0.047806, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-08  4.72e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-09  4.72e-10         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.72096e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34975e-43   3.4296e-44  9.78657e-46  6.02318e-45  1.86812e-46  4.45937e-46  7.20892e-52  5.41694e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.32823e+10
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.436991, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82078, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            274.572      42.1263      10.4592      13.2345      1.41375      171.444      15.5811    0.0257359
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043726, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003535, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047607, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.41279e-09  9.41279e-09  3.70882e-10
      low eigenvalue method done, cpu time[sec] = 0.047823, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.41e-09  3.71e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.83e-10  3.71e-10         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.70882e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.06503e-43  2.65661e-44  7.61805e-46  4.62964e-45  1.44478e-46  3.73502e-46  7.27238e-52  5.07761e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10263, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.51797e+10
      global relaxation matrix dimension = 460
      setting global matrices ... done, cpu time[sec] = 0.43727, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.79698, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             240.25      36.8605      9.15176      11.5802      1.23703      150.014      13.6335    0.0225189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043698, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04758, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.29336e-09  8.29335e-09  2.99929e-10
      low eigenvalue method done, cpu time[sec] = 0.047799, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.29e-09     3e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.77e-10     3e-10         1
         *Z       ---       ---  3.94e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99929e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.64355e-44  2.12321e-44  6.11516e-46  3.67756e-45  1.15358e-46  3.18468e-46  7.31137e-52  5.35456e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0777, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 420 K
      Energy reference = 28488 1/cm
      Energy step      = 72 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008176
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.423452
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.295722
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.57253
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.59637
         W1 Well: minimal relaxation eigenvalue = 0.0875932
         W1 Well: maximal relaxation eigenvalue = 0.980855
         W1 Well:       grid size = 458
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4487 1/cm
         B1 Barrier:        grid size = 396
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -24 1/cm
         B2 Barrier:        grid size = 393
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 192 1/cm
         B3 Barrier:        grid size = 460
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4631 1/cm
         B4 Barrier:        grid size = 482
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6215 1/cm
         B5 Barrier: nonpositive number of states at -23568 1/cm => truncating
         B5 Barrier:        grid size = 723
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23567 1/cm
         B6 Barrier:        grid size = 375
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 331
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4656 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16752 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.29612, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 1.93245e+47
      MasterEquation::Barrier::truncate: effective weight = 6.33952e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 6.35177e+48
      MasterEquation::Barrier::truncate: effective weight = 2.08373e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 458
      MasterEquation::Barrier::truncate: real weight = 1.79373e+48
      MasterEquation::Barrier::truncate: effective weight = 1.61548e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4487  -4487 3.06e+09 6.16e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -24 7.73e+14
         B2    193  1.2e+14
         B3  -4487 2.99e+13
         B4  -4487 3.77e+13
         B5  -4487 4.04e+12
         B6   1489 4.88e+14
         B7   4657 4.49e+13
         B8  16753 7.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.94e-08  8.86e-08  7.19e-14  2.86e-16  4.63e-43   0.00011      12.5  5.16e+19
          R  2.54e+07         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  1.13e+07     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.39e+13  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3   3.5e+15  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  2.16e+42   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5  9.13e+03  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6    0.0798  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  1.94e-20  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.27e+21  7.37e+21  5.98e+15  2.38e+13  3.85e-14  9.11e+24  1.04e+30   4.3e+48
          R  3.06e-22         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  1.36e-22     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.67e-16  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  4.21e-14  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4   2.6e+13   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5   1.1e-25  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6   9.6e-31  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  2.33e-49  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
   MasterEquation::set:  done, cpu time[sec] = 4.31097, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+08
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.433488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10075.5      1561.69      389.658      491.797      52.7108       6361.9      585.315      1.02576
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043236, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003528, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046846, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72636e-07  2.72636e-07  4.31324e-08
      low eigenvalue method done, cpu time[sec] = 0.047068, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.73e-07  4.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.66e-08  4.31e-08         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.31324e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08216e-40   4.6471e-41   1.4545e-42  1.35668e-41  3.53109e-43  4.93729e-44  1.35373e-50  2.17542e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0855, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.433845, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83252, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3358.52      520.562      129.886      163.932      17.5703      2120.63      195.105      0.34192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003515, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046855, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10284e-07  1.10284e-07  1.45231e-08
      low eigenvalue method done, cpu time[sec] = 0.047091, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-07  1.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08  1.45e-08         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45231e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.95626e-41  1.40668e-41  3.97723e-43  3.12438e-42  8.68554e-44  3.98985e-44  1.36515e-50  3.33435e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09424, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.86683e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.434142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84059, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2015.11      312.337      77.9316      98.3594      10.5422      1272.38      117.063     0.205152
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.13523e-08  7.13523e-08  8.11043e-09
      low eigenvalue method done, cpu time[sec] = 0.047121, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.14e-08  8.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.83e-09  8.11e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.11043e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2776e-41   7.4157e-42  2.06461e-43  1.51344e-42  4.33174e-44  3.20766e-44  1.37733e-50  3.14589e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10753, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         2.61356e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.433914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1439.36      223.098      55.6654      70.2567      7.53011      908.842      83.6164     0.146537
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043317, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046896, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.32381e-08  5.32381e-08  5.37503e-09
      low eigenvalue method done, cpu time[sec] = 0.047139, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.32e-08  5.38e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-09  5.38e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.37503e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.53629e-41  4.72826e-42  1.31306e-43  9.22828e-43  2.69055e-44     2.65e-44  1.39005e-50  3.09976e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09947, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.36029e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.434527, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82974, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1119.51      173.521      43.2953      54.6441      5.85675      706.877      65.0349     0.113973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00351, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.26418e-08  4.26418e-08  3.89659e-09
      low eigenvalue method done, cpu time[sec] = 0.047074, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.26e-08   3.9e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.05e-09   3.9e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.89659e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12717e-41  3.33061e-42  9.26074e-44  6.31807e-43  1.86681e-44  2.24096e-44  1.40306e-50  3.12563e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0945, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.432356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83118, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1007.55      156.169      38.9658      49.1797      5.27108       636.19      58.5315     0.102576
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043325, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046908, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.88218e-08  3.88218e-08  3.39259e-09
      low eigenvalue method done, cpu time[sec] = 0.047128, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.88e-08  3.39e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-09  3.39e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.39259e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.86051e-42   2.8654e-42  7.97675e-44  5.37714e-43  1.59751e-44   2.0756e-44   1.4096e-50  3.03577e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         5.60049e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.432781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83439, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            671.703      104.112      25.9772      32.7865      3.51405      424.126       39.021    0.0683839
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043068, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046663, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6936e-08   2.6936e-08  1.95148e-09
      low eigenvalue method done, cpu time[sec] = 0.046887, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.69e-08  1.95e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-09  1.95e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.95148e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.76776e-42  1.57572e-42   4.4203e-44  2.85223e-43  8.64759e-45  1.49247e-44  1.44149e-50  3.06865e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09805, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         7.46731e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.432912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83413, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            503.777      78.0843      19.4829      24.5898      2.63554      318.095      29.2657     0.051288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043276, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046886, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07001e-08  2.07001e-08  1.29336e-09
      low eigenvalue method done, cpu time[sec] = 0.047127, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  1.29e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-09  1.29e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29336e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.86296e-42  1.01282e-42  2.86343e-44  1.79545e-43  5.51821e-45  1.14271e-44  1.47017e-50    3.075e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09853, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         9.33414e+09
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.433409, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83458, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            403.022      62.4675      15.5863      19.6719      2.10843      254.476      23.4126    0.0410304
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043295, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046907, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.68402e-08  1.68402e-08  9.30116e-10
      low eigenvalue method done, cpu time[sec] = 0.047137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.68e-08   9.3e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-09   9.3e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.30116e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79865e-42  7.11935e-43  2.02695e-44  1.24472e-43  3.86428e-45  9.11968e-45  1.49411e-50   3.1039e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09996, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.433013, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82946, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            335.852      52.0562      12.9886      16.3932      1.75703      212.063      19.5105     0.034192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043337, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04695, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.42088e-08  1.42088e-08  7.05704e-10
      low eigenvalue method done, cpu time[sec] = 0.047184, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-08  7.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-09  7.06e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.05704e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.13527e-42  5.30558e-43  1.51994e-44   9.1842e-44  2.87384e-45  7.49666e-45  1.51272e-50  3.09224e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1055, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.30678e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.434056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83658, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            287.873      44.6196      11.1331      14.0513      1.50602      181.768      16.7233    0.0293074
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003521, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046768, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22971e-08  1.22971e-08  5.56193e-10
      low eigenvalue method done, cpu time[sec] = 0.046995, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-08  5.56e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-09  5.56e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.56192e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69031e-42  4.12078e-43  1.18701e-44  7.07962e-44  2.22955e-45  6.30115e-45  1.52599e-50  3.12977e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.49346e+10
      global relaxation matrix dimension = 458
      setting global matrices ... done, cpu time[sec] = 0.434388, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83383, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            251.889      39.0422      9.74145      12.2949      1.31777      159.047      14.6329     0.025644
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043081, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08439e-08  1.08439e-08  4.51024e-10
      low eigenvalue method done, cpu time[sec] = 0.046907, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-08  4.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-09  4.51e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.51024e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.37561e-42  3.30087e-43  9.55478e-45  5.63739e-44  1.78491e-45  5.38929e-45  1.53424e-50  3.07764e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09913, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 430 K
      Energy reference = 28766 1/cm
      Energy step      = 74 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007227
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.482297
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.28605
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.279069
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.53773
         W1 Well: minimal relaxation eigenvalue = 0.0869396
         W1 Well: maximal relaxation eigenvalue = 0.979828
         W1 Well:       grid size = 450
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4533 1/cm
         B1 Barrier:        grid size = 389
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 386
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 202 1/cm
         B3 Barrier:        grid size = 451
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4607 1/cm
         B4 Barrier:        grid size = 473
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6235 1/cm
         B5 Barrier: nonpositive number of states at -23626 1/cm => truncating
         B5 Barrier:        grid size = 708
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23625 1/cm
         B6 Barrier:        grid size = 369
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1460 1/cm
         B7 Barrier:        grid size = 325
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4716 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16778 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.98003, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 5.07604e+46
      MasterEquation::Barrier::truncate: effective weight = 1.71148e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 1.53301e+48
      MasterEquation::Barrier::truncate: effective weight = 5.16883e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 450
      MasterEquation::Barrier::truncate: real weight = 2.83353e+47
      MasterEquation::Barrier::truncate: effective weight = 3.53612e+43
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4533  -4533 3.01e+09 6.46e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 8.35e+14
         B2    203 1.31e+14
         B3  -4533 3.28e+13
         B4  -4533 4.13e+13
         B5  -4533 4.44e+12
         B6   1461 5.33e+14
         B7   4717 4.97e+13
         B8  16779 9.22e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.83e-08  6.27e-08  7.51e-14   3.4e-16  2.36e-42  7.08e-05      6.34  1.01e+19
          R  3.53e+07         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1  1.59e+07     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  1.33e+13  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  2.94e+15  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.25e+41   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.41e+04    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6     0.158  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7   9.9e-20   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.51e+20  5.57e+20  6.66e+14  3.02e+12  2.09e-14  6.29e+23  5.63e+28  8.97e+46
          R  3.98e-21         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1   1.8e-21     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2   1.5e-15  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.31e-13  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.78e+13   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.59e-24    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6  1.78e-29  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.12e-47   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
   MasterEquation::set:  done, cpu time[sec] = 2.9942, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+08
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416656, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73999, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10554.7      1652.65      414.368      521.671      56.0967      6738.28      627.479      1.16458
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041132, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003434, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044646, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.31574e-07  3.31574e-07  5.78549e-08
      low eigenvalue method done, cpu time[sec] = 0.044866, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.32e-07  5.79e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.22e-08  5.79e-08         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.78549e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40649e-39   5.9683e-40  1.85123e-41  1.70397e-40  4.45505e-42  6.93718e-43  2.46759e-49  1.59608e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.9606, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.419853, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.74731, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3518.25      550.884      138.123       173.89      18.6989      2246.09       209.16     0.388192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044542, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.36714e-07  1.36714e-07  1.98972e-08
      low eigenvalue method done, cpu time[sec] = 0.044762, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-07  1.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-08  1.99e-08         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98972e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.24831e-40  1.83892e-40  5.17773e-42  4.01265e-41  1.12159e-42  5.64769e-43  2.48832e-49  1.48033e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.96755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.83748e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.417112, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.74651, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2110.95       330.53      82.8737      104.334      11.2193      1347.66      125.496     0.232915
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041026, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044472, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.91247e-08  8.91246e-08  1.12294e-08
      low eigenvalue method done, cpu time[sec] = 0.044683, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.91e-08  1.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.49e-09  1.12e-08         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12294e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.05297e-40   9.7822e-41  2.71759e-42  1.96424e-41  5.65582e-43  4.56997e-43   2.5104e-49  1.46188e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.96747, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         2.57247e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73519, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1507.82      236.093      59.1955      74.5244      8.01381      962.612      89.6398     0.166368
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003348, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044546, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.67963e-08  6.67963e-08  7.49533e-09
      low eigenvalue method done, cpu time[sec] = 0.044762, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.68e-08   7.5e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.33e-09   7.5e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.49533e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0739e-40  6.27542e-41  1.74118e-42  1.20605e-41  3.53882e-43  3.79532e-43  2.53344e-49  1.47081e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.95268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.30747e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.418009, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7474, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1172.75      183.628      46.0409      57.9634      6.23296      748.698      69.7199     0.129397
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041086, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003368, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.36652e-08  5.36652e-08  5.46309e-09
      low eigenvalue method done, cpu time[sec] = 0.044756, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.37e-08  5.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-09  5.46e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.46309e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5298e-40  4.44094e-41  1.23487e-42  8.29991e-42  2.46889e-43  3.22356e-43  2.55698e-49  1.48519e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.9677, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.41821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.76957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1055.47      165.265      41.4368      52.1671      5.60967      673.828      62.7479     0.116458
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041236, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003351, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044667, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.89168e-08  4.89168e-08  4.76731e-09
      low eigenvalue method done, cpu time[sec] = 0.044891, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.89e-08  4.77e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.62e-09  4.77e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.76731e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3413e-40  3.82809e-41  1.06614e-42  7.07911e-42   2.1176e-43  2.99148e-43  2.56879e-49  1.48551e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98581, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         5.51244e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.418484, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73211, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            703.649      110.177      27.6246       34.778      3.73978      449.219      41.8319    0.0776384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041075, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003398, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044548, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40853e-08  3.40853e-08  2.76641e-09
      low eigenvalue method done, cpu time[sec] = 0.044756, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.41e-08  2.77e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.2e-09  2.77e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76641e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.91466e-41  2.12095e-41  5.96138e-43  3.78607e-42  1.15642e-43  2.16823e-43  2.62631e-49  1.48569e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79719, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         7.34992e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.416882, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73261, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            527.737      82.6326      20.7184      26.0835      2.80483      336.914      31.3739    0.0582288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041289, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003336, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044698, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62639e-08  2.62639e-08  1.84486e-09
      low eigenvalue method done, cpu time[sec] = 0.044915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.63e-08  1.84e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-09  1.84e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.84486e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.33379e-41  1.37047e-41  3.88623e-43    2.397e-42  7.42497e-44  1.67019e-43  2.67798e-49  1.48138e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.95125, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1          9.1874e+09
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.417474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            422.189      66.1061      16.5747      20.8668      2.24387      269.531      25.0992    0.0465831
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003338, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.1406e-08   2.1406e-08  1.33306e-09
      low eigenvalue method done, cpu time[sec] = 0.044907, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.14e-08  1.33e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-09  1.33e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33306e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8827e-41  9.67223e-42  2.76433e-43    1.669e-42  5.22402e-44  1.33945e-43  2.72114e-49  1.48069e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.95508, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.417798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            351.825      55.0884      13.8123       17.389      1.86989      224.609       20.916    0.0388192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003348, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044796, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80862e-08  1.80862e-08  1.01532e-09
      low eigenvalue method done, cpu time[sec] = 0.045011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.81e-08  1.02e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-09  1.02e-09         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01532e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.9738e-41  7.23141e-42  2.08099e-43  1.23577e-42  3.89976e-44  1.10557e-43  2.75476e-49  1.47317e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.28624e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.421884, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73933, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            301.564      47.2186      11.8391      14.9049      1.60276      192.522       17.928    0.0332736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041222, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56697e-08  1.56697e-08  8.02783e-10
      low eigenvalue method done, cpu time[sec] = 0.044894, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-08  8.03e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-09  8.03e-10         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.02783e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.36168e-41  5.63164e-42  1.63045e-43  9.55339e-43  3.03497e-44   9.3251e-44  2.77888e-49  1.48616e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97041, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.46998e+10
      global relaxation matrix dimension = 450
      setting global matrices ... done, cpu time[sec] = 0.418321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73282, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            263.868      41.3163      10.3592      13.0418      1.40242      168.457       15.687    0.0291144
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044724, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.383e-08    1.383e-08  6.52771e-10
      low eigenvalue method done, cpu time[sec] = 0.044934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.38e-08  6.53e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.28e-09  6.53e-10         1
         *Z       ---       ---  7.95e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.52771e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.92728e-41  4.52144e-42  1.31607e-43  7.62585e-43   2.4362e-44  7.99999e-44  2.79406e-49  1.47808e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.9538, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 440 K
      Energy reference = 29044 1/cm
      Energy step      = 76 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.009496
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.467907
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.276192
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.273142
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.4583
         W1 Well: minimal relaxation eigenvalue = 0.0862895
         W1 Well: maximal relaxation eigenvalue = 0.978873
         W1 Well:       grid size = 443
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4624 1/cm
         B1 Barrier:        grid size = 383
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -64 1/cm
         B2 Barrier:        grid size = 380
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 163 1/cm
         B3 Barrier:        grid size = 443
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4624 1/cm
         B4 Barrier:        grid size = 464
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6220 1/cm
         B5 Barrier: nonpositive number of states at -23624 1/cm => truncating
         B5 Barrier:        grid size = 693
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23624 1/cm
         B6 Barrier:        grid size = 363
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1455 1/cm
         B7 Barrier:        grid size = 321
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4647 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16807 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.33214, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 443
      MasterEquation::Barrier::truncate: real weight = 3.95872e+47
      MasterEquation::Barrier::truncate: effective weight = 1.37083e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 443
      MasterEquation::Barrier::truncate: real weight = 5.155e+46
      MasterEquation::Barrier::truncate: effective weight = 8.45917e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4624  -4624 2.93e+09 6.77e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -64 9.02e+14
         B2    164 1.43e+14
         B3  -4624  3.6e+13
         B4  -4624 4.52e+13
         B5  -4624 4.87e+12
         B6   1456 5.82e+14
         B7   4648 5.49e+13
         B8  16808 1.08e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.35e-08  5.13e-08  8.88e-14  4.55e-16  1.26e-41   5.3e-05      3.76  2.41e+18
          R  4.26e+07         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  1.95e+07     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.13e+13  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3   2.2e+15  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  7.91e+40  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  1.89e+04  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6     0.266  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.14e-19  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.17e+19  4.73e+19   8.2e+13   4.2e+11  1.17e-14   4.9e+22  3.47e+27  2.23e+45
          R  4.61e-20         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  2.11e-20     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.22e-14  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.38e-12  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  8.57e+13  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  2.04e-23  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6  2.88e-28  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.48e-46  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
   MasterEquation::set:  done, cpu time[sec] = 3.34693, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+08
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.405762, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.57354, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11047.8      1747.41      440.238      552.869      59.6444      7130.08      671.915       1.3189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.145265, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00332, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.157201, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.54444e-07  3.54444e-07  6.73493e-08
      low eigenvalue method done, cpu time[sec] = 0.158323, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.54e-07  6.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.42e-08  6.73e-08         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.73493e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62543e-38  6.81854e-39  2.09738e-40  1.90673e-39  5.00679e-41  8.62775e-42  3.94364e-48  6.54743e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86949, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.407832, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.59748, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3682.61       582.47      146.746       184.29      19.8815      2376.69      223.972     0.439632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.117335, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.128985, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48857e-07  1.48857e-07  2.36399e-08
      low eigenvalue method done, cpu time[sec] = 0.130127, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-07  2.36e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-08  2.36e-08         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.36399e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.18633e-39  2.13715e-39  5.99572e-41  4.58759e-40  1.28901e-41  7.07874e-42  3.97665e-48  5.97266e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86556, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.80933e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.405347, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.61153, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2209.57      349.482      88.0477      110.574      11.9289      1426.02      134.383     0.263779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.099554, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.111698, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.77513e-08  9.77513e-08  1.34788e-08
      low eigenvalue method done, cpu time[sec] = 0.112857, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.78e-08  1.35e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.25e-09  1.35e-08         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34788e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.63506e-39  1.14687e-39  3.18084e-41  2.26871e-40  6.57013e-42  5.76501e-42  4.01179e-48  5.96564e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70474, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         2.53307e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.407011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.62541, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1578.26       249.63      62.8912      78.9812      8.52062      1018.58      95.9879     0.188414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.087428, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.09917, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.35783e-08  7.35783e-08  9.05947e-09
      low eigenvalue method done, cpu time[sec] = 0.100296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.36e-08  9.06e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.94e-09  9.06e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.05946e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.48635e-39  7.40144e-40  2.05275e-41  1.40246e-40  4.14042e-42  4.81263e-42   4.0484e-48  5.92524e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86097, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          3.2568e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.405077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.66479, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1227.54      194.157      48.9154      61.4298      6.62715      792.231      74.6572     0.146544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039289, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.042629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.9289e-08   5.9289e-08    6.638e-09
      low eigenvalue method done, cpu time[sec] = 0.042839, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.93e-08  6.64e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.57e-09  6.64e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.638e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84365e-39  5.26157e-40  1.46379e-41  9.70061e-41  2.90416e-42  4.10521e-42  4.08574e-48  5.96241e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.84597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.40572, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.61879, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1104.78      174.741      44.0238      55.2869      5.96444      713.008      67.1915      0.13189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.103958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.115042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.41064e-08  5.41064e-08  5.80547e-09
      low eigenvalue method done, cpu time[sec] = 0.116128, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.41e-08  5.81e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-09  5.81e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.80547e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62005e-39  4.54414e-40  1.26669e-41  8.29134e-41  2.49655e-42   3.8169e-42  4.10446e-48  5.95643e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87092, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1           5.428e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.40446, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.60012, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            736.522      116.494      29.3492      36.8579      3.97629      475.339      44.7943    0.0879264
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.109026, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.120755, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.78578e-08  3.78578e-08  3.39792e-09
      low eigenvalue method done, cpu time[sec] = 0.122483, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.79e-08   3.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-09   3.4e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.39792e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.64171e-40  2.53631e-40  7.14559e-42  4.47052e-41  1.37522e-42  2.78815e-42  4.19546e-48  5.92914e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.8601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         7.23734e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.404839, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.65325, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            552.392      87.3705      22.0119      27.6434      2.98222      356.504      33.5958    0.0659448
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064432, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00324, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.076164, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.92461e-08  2.92461e-08  2.27985e-09
      low eigenvalue method done, cpu time[sec] = 0.07731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.92e-08  2.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-09  2.28e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.27985e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.53732e-40  1.64741e-40  4.68739e-42  2.84643e-41  8.88364e-43  2.16049e-42  4.27709e-48  5.94802e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87398, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         9.04667e+09
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.408539, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.6437, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            441.913      69.8964      17.6095      22.1147      2.38577      285.203      26.8766    0.0527558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.086596, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.38797e-08  2.38797e-08  1.65513e-09
      low eigenvalue method done, cpu time[sec] = 0.087665, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-08  1.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-09  1.66e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65513e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.7812e-40  1.16732e-40  3.35024e-42  1.99052e-41  6.27948e-43  1.74097e-42  4.34526e-48  5.95551e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87609, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.405478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64501, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            368.261       58.247      14.6746       18.429      1.98815      237.669      22.3972    0.0439632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.070666, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.02035e-08  2.02035e-08  1.26542e-09
      low eigenvalue method done, cpu time[sec] = 0.083445, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.02e-08  1.27e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-09  1.27e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26542e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.67591e-40  8.75557e-41  2.53185e-42  1.47895e-41  4.70528e-43  1.44273e-42  4.39848e-48  5.96743e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.8656, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.26653e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.405518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64781, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            315.652       49.926      12.5782      15.7962      1.70412      203.717      19.1976    0.0376827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.090141, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75227e-08  1.75227e-08  1.00371e-09
      low eigenvalue method done, cpu time[sec] = 0.091553, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-08     1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-09     1e-09         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.00371e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.92857e-40  6.83689e-41  1.99013e-42  1.14664e-41  3.67332e-43  1.22108e-42  4.43684e-48  5.96132e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.88273, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.44747e+10
      global relaxation matrix dimension = 443
      setting global matrices ... done, cpu time[sec] = 0.40898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55305, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            276.196      43.6853       11.006      13.8217      1.49111      178.252      16.7979    0.0329724
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.174872, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003232, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.186502, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.54786e-08  1.54787e-08  8.18366e-10
      low eigenvalue method done, cpu time[sec] = 0.187592, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-08  8.18e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-09  8.18e-10         1
         *Z       ---       ---  4.03e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.18366e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.39641e-40  5.50163e-41  1.61084e-42  9.17531e-42  2.95648e-43  1.05071e-42  4.46124e-48  5.97286e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.8883, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 450 K
      Energy reference = 29322 1/cm
      Energy step      = 78 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008032
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.456426
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.268075
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.256978
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.42559
         W1 Well: minimal relaxation eigenvalue = 0.0856594
         W1 Well: maximal relaxation eigenvalue = 0.977962
         W1 Well:       grid size = 436
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4686 1/cm
         B1 Barrier:        grid size = 376
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -6 1/cm
         B2 Barrier:        grid size = 374
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 149 1/cm
         B3 Barrier:        grid size = 435
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4608 1/cm
         B4 Barrier:        grid size = 456
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6246 1/cm
         B5 Barrier: nonpositive number of states at -23640 1/cm => truncating
         B5 Barrier:        grid size = 679
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23640 1/cm
         B6 Barrier:        grid size = 357
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 316
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16764 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.80366, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 436
      MasterEquation::Barrier::truncate: real weight = 1.08879e+47
      MasterEquation::Barrier::truncate: effective weight = 3.86951e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 436
      MasterEquation::Barrier::truncate: real weight = 1.06342e+46
      MasterEquation::Barrier::truncate: effective weight = 2.15556e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4686  -4686 2.87e+09 7.09e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -6 9.74e+14
         B2    150 1.56e+14
         B3  -4608 3.94e+13
         B4  -4686 4.94e+13
         B5  -4686 5.34e+12
         B6   1476 6.36e+14
         B7   4674 6.06e+13
         B8  16764 1.26e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.8e-08  3.88e-08  9.58e-14  5.53e-16  5.79e-41  3.69e-05       2.1  5.66e+17
          R  5.54e+07         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.58e+07     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  1.04e+13  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.81e+15  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  1.73e+40  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.71e+04  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6     0.477  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  1.77e-18  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.09e+18  4.49e+18  1.11e+13  6.39e+10  6.69e-15  4.27e+21  2.42e+26  6.54e+43
          R  4.79e-19         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.23e-19     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  9.03e-14  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.56e-11  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4   1.5e+14  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.34e-22  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6  4.13e-27  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  1.53e-44  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.81753, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+08
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.392835, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.24458, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11554.9       1846.1      467.305       585.43      63.3591      7537.65      718.705       1.4904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.383179, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003161, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.394085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.11413e-07  4.11413e-07  8.45404e-08
      low eigenvalue method done, cpu time[sec] = 0.395193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.11e-07  8.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-08  8.45e-08         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.45404e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68323e-37  6.98024e-38  2.13127e-39  1.91497e-38   5.0493e-40  9.57722e-41  5.58475e-47  2.04032e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74374, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.394109, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.3047, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3851.64      615.365      155.768      195.143      21.1197      2512.55      239.568     0.496799
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.344151, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003119, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.355576, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75963e-07  1.75963e-07  3.02665e-08
      low eigenvalue method done, cpu time[sec] = 0.356672, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.76e-07  3.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-08  3.03e-08         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.02665e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52999e-38  2.22471e-38  6.22309e-40  4.70416e-39  1.32841e-40  7.92063e-41  5.63143e-47   2.0151e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6323, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.78231e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.392553, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.29935, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2310.98      369.219      93.4611      117.086      12.6718      1507.53      143.741     0.298079
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.328799, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003119, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.340333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16395e-07  1.16395e-07  1.74296e-08
      low eigenvalue method done, cpu time[sec] = 0.341439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-07  1.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-08  1.74e-08         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.74296e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.87471e-38  1.20415e-38  3.33615e-40  2.34961e-39  6.84204e-41  6.49203e-41  5.68109e-47  2.03909e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74394, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         2.49523e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.392703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.30514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1650.7      263.728      66.7579      83.6329      9.05131      1076.81      102.672     0.212914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.320884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.33232, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.79904e-08  8.79904e-08  1.17945e-08
      low eigenvalue method done, cpu time[sec] = 0.333437, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.8e-08  1.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.25e-09  1.18e-08         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17945e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66806e-38  7.81676e-39  2.16822e-40  1.46212e-39  4.34203e-41  5.44719e-41  5.73275e-47  2.03327e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74126, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.20816e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.393734, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.34515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1283.88      205.122      51.9228      65.0478      7.03991      837.516      79.8561       0.1656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.299141, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003112, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.310542, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.11136e-08  7.11136e-08  8.68653e-09
      low eigenvalue method done, cpu time[sec] = 0.311682, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.11e-08  8.69e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.65e-09  8.69e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.68653e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.9885e-38  5.58161e-39   1.5544e-40  1.01637e-39  3.06164e-41   4.6661e-41  5.78534e-47  2.03738e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.75808, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.391742, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.31742, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1155.49       184.61      46.7305       58.543      6.33591      753.765      71.8705      0.14904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.31062, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003117, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.321944, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.49742e-08  6.49742e-08  7.61361e-09
      low eigenvalue method done, cpu time[sec] = 0.323091, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.5e-08  7.61e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.07e-09  7.61e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.61361e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.75111e-38  4.82961e-39  1.34812e-40  8.70526e-40  2.63776e-41  4.34649e-41  5.81167e-47  2.03058e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59315, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         5.34693e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.392242, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.29443, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            770.328      123.073      31.1537      39.0287      4.22394       502.51      47.9137    0.0993597
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.333563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003116, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.345048, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.56533e-08  4.56533e-08  4.49391e-09
      low eigenvalue method done, cpu time[sec] = 0.346174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.57e-08  4.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.24e-09  4.49e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.49391e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05093e-38  2.71531e-39  7.67134e-41  4.73138e-40  1.46543e-41  3.19934e-41  5.93943e-47  2.03391e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74026, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         7.12924e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.392912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.20496, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            577.746      92.3048      23.3653      29.2715      3.16796      376.882      35.9353    0.0745198
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.416205, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003122, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.427551, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.53617e-08  3.53617e-08  3.03333e-09
      low eigenvalue method done, cpu time[sec] = 0.428647, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.54e-08  3.03e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-09  3.03e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.03333e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.16828e-39  1.77279e-39  5.06336e-41  3.02948e-40  9.52346e-42  2.49356e-41  6.05373e-47  2.03021e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.73615, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         8.91155e+09
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.393937, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.29977, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            462.197      73.8438      18.6922      23.4172      2.53437      301.506      28.7482    0.0596158
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.318679, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003113, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.330527, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89269e-08  2.89269e-08  2.21235e-09
      low eigenvalue method done, cpu time[sec] = 0.331607, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.89e-08  2.21e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.67e-09  2.21e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21235e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.26692e-39  1.26115e-39  3.63617e-41  2.12764e-40  6.76288e-42  2.01879e-41  6.14911e-47  2.03118e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.73325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.393086, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.33443, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            385.164      61.5365      15.5768      19.5143      2.11197      251.255      23.9568    0.0496799
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.314699, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003147, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.326099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.4508e-08   2.4508e-08  1.69779e-09
      low eigenvalue method done, cpu time[sec] = 0.3272, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-08   1.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.25e-09   1.7e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.69779e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.06456e-39  9.48965e-40  2.75851e-41  1.58631e-40  5.08641e-42  1.67954e-41  6.22362e-47  2.03434e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.77197, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.24762e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.395312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.16722, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            330.141      52.7456      13.3516      16.7266      1.81026      215.361      20.5344    0.0425827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.480645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00312, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.492165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.12794e-08  2.12794e-08  1.35089e-09
      low eigenvalue method done, cpu time[sec] = 0.493381, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.13e-08  1.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-09  1.35e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35089e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24839e-39  7.42991e-40  2.17527e-41  1.23341e-40  3.98324e-42   1.4263e-41  6.27746e-47  2.03307e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.77382, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.42585e+10
      global relaxation matrix dimension = 436
      setting global matrices ... done, cpu time[sec] = 0.395478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.36742, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            288.873      46.1524      11.6826      14.6358      1.58398      188.441      17.9676    0.0372599
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.265628, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.277069, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8814e-08   1.8814e-08  1.10441e-09
      low eigenvalue method done, cpu time[sec] = 0.278189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-08   1.1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-09   1.1e-09         1
         *Z       ---       ---  2.02e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10441e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66529e-39  5.99248e-40  1.76555e-41  9.89392e-41  3.21446e-42  1.23092e-41  6.31194e-47  2.04001e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7519, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 460 K
      Energy reference = 29600 1/cm
      Energy step      = 79 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006863
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.456319
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.268209
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.26415
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.38829
         W1 Well: minimal relaxation eigenvalue = 0.0850624
         W1 Well: maximal relaxation eigenvalue = 0.980115
         W1 Well:       grid size = 435
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4765 1/cm
         B1 Barrier:        grid size = 375
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -24 1/cm
         B2 Barrier:        grid size = 372
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 211 1/cm
         B3 Barrier:        grid size = 433
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4607 1/cm
         B4 Barrier:        grid size = 453
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6186 1/cm
         B5 Barrier: nonpositive number of states at -23251 1/cm => truncating
         B5 Barrier:        grid size = 669
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23251 1/cm
         B6 Barrier:        grid size = 356
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 315
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16802 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.76953, elapsed time[sec] = 1
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 435
      MasterEquation::Barrier::truncate: real weight = 3.17626e+46
      MasterEquation::Barrier::truncate: effective weight = 1.1433e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 435
      MasterEquation::Barrier::truncate: real weight = 2.45208e+45
      MasterEquation::Barrier::truncate: effective weight = 5.82064e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4765  -4765  2.8e+09 7.43e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -24 1.05e+15
         B2    212  1.7e+14
         B3  -4607 4.32e+13
         B4  -4765 5.39e+13
         B5  -4765 5.86e+12
         B6   1476 6.93e+14
         B7   4715 6.69e+13
         B8  16802 1.46e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.49e-08  3.16e-08  1.09e-13  7.06e-16  2.63e-40  2.77e-05      1.27   1.5e+17
          R  6.72e+07         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1  3.17e+07     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  9.15e+12  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  1.42e+15  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4   3.8e+39  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  3.61e+04  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6     0.787  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7  6.67e-18  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.22e+17  4.71e+17  1.63e+12  1.05e+10  3.92e-15  4.13e+20   1.9e+25  2.24e+42
          R  4.51e-18         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1  2.12e-18     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  6.14e-13  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  9.49e-11  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4  2.55e+14  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  2.42e-21  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6  5.28e-26  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7  4.47e-43  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.78402, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+08
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.392725, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.28713, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12076.2      1948.79      495.608      619.396      67.2465      7961.36      767.933      1.68025
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.325909, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.358868, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.54607e-07  4.54607e-07  1.00154e-07
      low eigenvalue method done, cpu time[sec] = 0.360016, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.55e-07     1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.35e-08     1e-07         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.00154e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57287e-36   6.4494e-37  1.95579e-38  1.73788e-37  4.60075e-39   9.5754e-40  7.00622e-46    5.943e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74532, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.39241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.31589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4025.41      649.596      165.203      206.465      22.4155      2653.79      255.978     0.560082
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.317523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003084, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.328905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97888e-07  1.97888e-07  3.65454e-08
      low eigenvalue method done, cpu time[sec] = 0.330039, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.98e-07  3.65e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-08  3.65e-08         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.65454e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.21523e-37  2.08897e-37  5.82895e-39  4.35558e-38  1.23594e-39   7.9765e-40  7.06438e-46   5.8731e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74296, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.75633e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.30895, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2415.25      389.757      99.1215      123.879      13.4493      1592.27      153.587     0.336049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.334668, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.345905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3182e-07   1.3182e-07  2.12489e-08
      low eigenvalue method done, cpu time[sec] = 0.34705, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-07  2.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-08  2.12e-08         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.12489e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.72299e-37  1.14014e-37  3.15673e-39  2.19661e-38  6.43066e-40  6.57723e-40  7.12619e-46  5.97188e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.75225, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         2.45887e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.391372, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.30463, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1725.18      278.398      70.8011      88.4851      9.60665      1137.34      109.705     0.240035
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.334196, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.345626, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0007e-07   1.0007e-07  1.44738e-08
      low eigenvalue method done, cpu time[sec] = 0.346749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-07  1.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.34e-09  1.45e-08         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44738e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.58027e-37  7.44355e-38  2.06575e-39  1.37577e-38  4.10885e-40  5.54543e-40  7.19041e-46  5.95356e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74905, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          3.1614e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.31273, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1341.8      216.532      55.0675      68.8217      7.47184      884.596      85.3259     0.186694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.327856, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003115, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.339042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.11106e-08  8.11106e-08  1.07133e-08
      low eigenvalue method done, cpu time[sec] = 0.340162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.11e-08  1.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.54e-09  1.07e-08         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07133e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.93262e-37  5.33827e-38  1.48867e-39  9.60999e-39  2.91215e-40  4.76941e-40  7.25572e-46  5.95121e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390566, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.31355, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1207.62      194.879      49.5608      61.9396      6.72465      796.136      76.7933     0.168025
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.341954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.353111, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.41937e-08  7.41937e-08  9.40993e-09
      low eigenvalue method done, cpu time[sec] = 0.354206, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.42e-08  9.41e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.89e-09  9.41e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.40993e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70548e-37  4.62756e-38  1.29396e-39  8.24785e-39   2.5144e-40  4.45065e-40   7.2884e-46   5.9561e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.76222, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1           5.269e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390639, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.18931, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            805.082      129.919      33.0405       41.293       4.4831      530.757      51.1956     0.112016
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.443458, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.454846, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.2346e-08   5.2346e-08  5.60003e-09
      low eigenvalue method done, cpu time[sec] = 0.455942, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.23e-08   5.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.83e-09   5.6e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.60003e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03194e-37  2.62033e-38  7.42607e-40  4.51812e-39  1.40862e-40  3.30016e-40  7.44679e-46  5.94407e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74158, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         7.02534e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390462, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.33096, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            603.811      97.4393      24.7804      30.9698      3.36233      398.068      38.3967    0.0840124
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.308503, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003083, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.31979, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.06512e-08  4.06512e-08  3.80218e-09
      low eigenvalue method done, cpu time[sec] = 0.320864, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.07e-08   3.8e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.74e-09   3.8e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.80218e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.0799e-38  1.71947e-38  4.93123e-40  2.90899e-39  9.20852e-41  2.58661e-40   7.5885e-46  5.94381e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74786, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         8.78167e+09
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.391041, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.3195, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            483.049      77.9515      19.8243      24.7758      2.68986      318.454      30.7173    0.0672099
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.324133, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003093, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.335673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.3315e-08   3.3315e-08  2.78573e-09
      low eigenvalue method done, cpu time[sec] = 0.337097, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.33e-08  2.79e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.06e-09  2.79e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.78573e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.22559e-38  1.22801e-38  3.55787e-40  2.05171e-39  6.56909e-41  2.10365e-40  7.70696e-46  5.94247e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.75215, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.390843, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.34826, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            402.541      64.9596      16.5203      20.6465      2.24155      265.379      25.5978    0.0560082
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.289698, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003106, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.300993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.82649e-08  2.82649e-08  2.14572e-09
      low eigenvalue method done, cpu time[sec] = 0.302147, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.83e-08  2.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-09  2.15e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.14572e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.04753e-38  9.26958e-39  2.70937e-40  1.53495e-39  4.95892e-41  1.75681e-40  7.79988e-46  5.95437e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.22943e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.391638, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.36573, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            345.035      55.6796      14.1602       17.697      1.92133      227.467       21.941    0.0480071
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.277505, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003099, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.288723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45682e-08  2.45682e-08  1.71259e-09
      low eigenvalue method done, cpu time[sec] = 0.289868, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.46e-08  1.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-09  1.71e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.71259e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24479e-38  7.27685e-39  2.14333e-40  1.19689e-39  3.89539e-41  1.49682e-40  7.86751e-46  5.95014e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.75236, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.40507e+10
      global relaxation matrix dimension = 435
      setting global matrices ... done, cpu time[sec] = 0.392263, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.39268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            301.906      48.7197      12.3902      15.4849      1.68116      199.034      19.1983    0.0420062
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.271724, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003109, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.283109, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.17411e-08  2.17411e-08  1.40384e-09
      low eigenvalue method done, cpu time[sec] = 0.284258, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.17e-08   1.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.98e-09   1.4e-09         1
         *Z       ---       ---  1.08e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.40384e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66943e-38  5.88235e-39  1.74438e-40  9.62447e-40  3.15189e-41  1.29549e-40  7.91147e-46  5.94929e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.77384, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 470 K
      Energy reference = 29878 1/cm
      Energy step      = 81 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006835
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.448003
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.2609
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.21646
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.33337
         W1 Well: minimal relaxation eigenvalue = 0.0844453
         W1 Well: maximal relaxation eigenvalue = 0.979234
         W1 Well:       grid size = 429
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4871 1/cm
         B1 Barrier:        grid size = 369
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -11 1/cm
         B2 Barrier:        grid size = 367
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 150 1/cm
         B3 Barrier:        grid size = 426
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4628 1/cm
         B4 Barrier:        grid size = 446
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6248 1/cm
         B5 Barrier: nonpositive number of states at -23177 1/cm => truncating
         B5 Barrier:        grid size = 655
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23177 1/cm
         B6 Barrier:        grid size = 351
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1446 1/cm
         B7 Barrier:        grid size = 311
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4686 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16756 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.64467, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 429
      MasterEquation::Barrier::truncate: real weight = 9.79078e+45
      MasterEquation::Barrier::truncate: effective weight = 3.61341e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 429
      MasterEquation::Barrier::truncate: real weight = 6.23923e+44
      MasterEquation::Barrier::truncate: effective weight = 1.70099e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4871  -4871 2.71e+09 7.79e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -11 1.13e+15
         B2    151 1.85e+14
         B3  -4628 4.72e+13
         B4  -4871 5.89e+13
         B5  -4871 6.41e+12
         B6   1447 7.56e+14
         B7   4687 7.37e+13
         B8  16756  1.7e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.31e-08  2.74e-08  1.31e-13  9.45e-16  1.19e-39  2.22e-05     0.833  4.45e+16
          R  7.65e+07         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  3.65e+07     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  7.63e+12  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3  1.06e+15  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4  8.44e+38   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5   4.5e+04  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6       1.2  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7  2.25e-17  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.59e+16  5.44e+16   2.6e+11  1.87e+09  2.35e-15  4.41e+19  1.65e+24  8.82e+40
          R  3.85e-17         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  1.84e-17     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  3.84e-12  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3  5.33e-10  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4  4.25e+14   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5  2.27e-20  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6  6.05e-25  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7  1.13e-41  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.6587, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+08
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.380534, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.81513, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12611.9      2055.61      525.184      654.806       71.312       8401.6      819.686       1.8893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.719473, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002989, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.730148, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.68532e-07  4.68532e-07  1.09775e-07
      low eigenvalue method done, cpu time[sec] = 0.73128, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.69e-07   1.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.45e-08   1.1e-07         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09775e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33546e-35  5.41792e-36  1.63238e-37  1.43541e-36  3.81458e-38  8.69046e-39  7.92763e-45  1.49652e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.61488, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.380688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.08673, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4203.97      685.203      175.061      218.269      23.7707      2800.53      273.229     0.629766
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.501453, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00295, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.512501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07416e-07  2.07416e-07  4.08006e-08
      low eigenvalue method done, cpu time[sec] = 0.513617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-07  4.08e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-08  4.08e-08         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.08006e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.37223e-36  1.78242e-36  4.96269e-38  3.66789e-37  1.04565e-38  7.28437e-39  7.99327e-45  1.50453e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6656, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.73134e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.381023, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.07202, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2522.38      411.122      105.037      130.961      14.2624      1680.32      163.937      0.37786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.508024, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00296, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.519072, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39102e-07  1.39102e-07  2.39463e-08
      low eigenvalue method done, cpu time[sec] = 0.52024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-07  2.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-08  2.39e-08         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.39463e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.2478e-36  9.80749e-37  2.71431e-38  1.86727e-37  5.49449e-39  6.04004e-39  8.06298e-45  1.50763e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65729, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         2.42388e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.381499, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.05483, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1801.7      293.658      75.0263      93.5437      10.1874      1200.23      117.098       0.2699
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.528028, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002957, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.539038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06025e-07  1.06025e-07  1.64159e-08
      low eigenvalue method done, cpu time[sec] = 0.5404, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.64e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.83e-09  1.64e-08         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.64159e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26523e-36  6.43875e-37  1.78821e-38  1.17691e-37  3.53413e-39  5.11581e-39  8.13529e-45  1.50885e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.66331, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.11641e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.380396, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.08874, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1401.32      228.401      58.3538      72.7562      7.92356      933.511      91.0762     0.209922
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.49198, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00297, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.502988, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.61787e-08  8.61787e-08  1.22104e-08
      low eigenvalue method done, cpu time[sec] = 0.50424, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.62e-08  1.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.96e-09  1.22e-08         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22104e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70488e-36  4.63737e-37  1.29525e-38  8.26017e-38  2.51746e-39  4.41682e-39  8.20871e-45  1.50697e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.66503, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.381579, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.10658, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1261.19      205.561      52.5184      65.4806       7.1312       840.16      81.9686      0.18893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.489331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002968, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.500388, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.89178e-08  7.89178e-08  1.07472e-08
      low eigenvalue method done, cpu time[sec] = 0.501515, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.89e-08  1.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.28e-09  1.07e-08         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07472e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5076e-36  4.02723e-37  1.12827e-38  7.10359e-38  2.17824e-39  4.12867e-39   8.2454e-45  1.50827e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.68342, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         5.19402e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.381947, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.04206, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            840.793      137.041      35.0123      43.6537      4.75413      560.107      54.6457     0.125953
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.564888, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002972, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.57591, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.5902e-08   5.5902e-08   6.4476e-09
      low eigenvalue method done, cpu time[sec] = 0.576998, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.59e-08  6.45e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.13e-09  6.45e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.4476e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.19536e-37  2.29645e-37  6.52955e-39  3.92152e-38  1.23036e-39  3.08313e-39  8.42296e-45   1.5064e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.68668, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         6.92537e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.381275, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.05163, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            630.595       102.78      26.2592      32.7403       3.5656       420.08      40.9843    0.0944649
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.53273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002975, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.543101, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.35231e-08  4.35231e-08  4.40297e-09
      low eigenvalue method done, cpu time[sec] = 0.544291, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.35e-08   4.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-09   4.4e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.40297e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.34505e-37   1.5145e-37  4.36185e-39  2.53872e-38   8.0903e-40  2.42966e-39  8.58152e-45  1.50746e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.66701, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         8.65671e+09
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.380351, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.09534, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            504.476      82.2244      21.0074      26.1922      2.85248      336.064      32.7874    0.0755719
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.490675, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002978, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.501802, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.57329e-08  3.57329e-08  3.24038e-09
      low eigenvalue method done, cpu time[sec] = 0.502941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.57e-08  3.24e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-09  3.24e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.24038e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.70413e-37  1.08582e-37  3.16165e-39  1.79812e-38  5.79747e-40  1.98474e-39  8.71403e-45  1.50692e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+10
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.382042, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.12073, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            420.397      68.5203      17.5061      21.8269      2.37707      280.053      27.3229    0.0629766
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.464361, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002988, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.475532, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.03576e-08  3.03576e-08  2.50502e-09
      low eigenvalue method done, cpu time[sec] = 0.476653, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.04e-08  2.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-09  2.51e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.50502e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.6569e-37  8.22207e-38  2.41671e-39  1.34982e-38  4.39247e-40  1.66366e-39  8.81811e-45  1.50754e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51988, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.21194e+10
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.380936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.11935, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             360.34      58.7317      15.0053      18.7087      2.03749      240.046      23.4196    0.0539799
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.464187, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002973, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.475164, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.64157e-08  2.64157e-08   2.0055e-09
      low eigenvalue method done, cpu time[sec] = 0.476288, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.64e-08  2.01e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.4e-09  2.01e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.0055e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.94061e-37  6.47156e-38  1.91785e-39  1.05554e-38  3.46103e-40    1.422e-39  8.89412e-45  1.50789e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64937, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.38507e+10
      global relaxation matrix dimension = 429
      setting global matrices ... done, cpu time[sec] = 0.373665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.0612, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            315.297      51.3902      13.1296      16.3702       1.7828       210.04      20.4922    0.0472324
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.50329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.514333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.33964e-08  2.33964e-08  1.64828e-09
      low eigenvalue method done, cpu time[sec] = 0.515451, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.34e-08  1.65e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.12e-09  1.65e-09         1
         *Z       ---       ---  6.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.64828e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.42555e-37  5.24321e-38  1.56511e-39  8.50856e-39  2.80782e-40   1.2342e-39  8.94391e-45  1.50742e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64018, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 480 K
      Energy reference = 30156 1/cm
      Energy step      = 83 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00842
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.433982
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.252543
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.252885
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.29405
         W1 Well: minimal relaxation eigenvalue = 0.0838457
         W1 Well: maximal relaxation eigenvalue = 0.978391
         W1 Well:       grid size = 423
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4953 1/cm
         B1 Barrier:        grid size = 364
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 361
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 192 1/cm
         B3 Barrier:        grid size = 419
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4621 1/cm
         B4 Barrier:        grid size = 438
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23213 1/cm => truncating
         B5 Barrier:        grid size = 643
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23213 1/cm
         B6 Barrier:        grid size = 346
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1437 1/cm
         B7 Barrier:        grid size = 307
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4674 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16793 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.61863, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 423
      MasterEquation::Barrier::truncate: real weight = 3.1779e+45
      MasterEquation::Barrier::truncate: effective weight = 1.2018e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 423
      MasterEquation::Barrier::truncate: real weight = 1.7322e+44
      MasterEquation::Barrier::truncate: effective weight = 5.25147e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4953  -4953 2.63e+09 8.16e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 1.22e+15
         B2    193 2.01e+14
         B3  -4621 5.17e+13
         B4  -4953 6.43e+13
         B5  -4953 7.02e+12
         B6   1438 8.23e+14
         B7   4675 8.12e+13
         B8  16793 1.97e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.08e-08  2.24e-08  1.46e-13  1.17e-15  4.69e-39  1.68e-05     0.519   1.3e+16
          R  9.26e+07         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1  4.47e+07     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  6.86e+12   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  8.57e+14  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  2.13e+38   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  5.94e+04  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6      1.93  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  7.71e-17  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.32e+15  6.87e+15  4.48e+10  3.58e+08  1.44e-15  5.17e+18  1.59e+23  3.98e+39
          R  3.02e-16         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1  1.46e-16     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  2.23e-11   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  2.79e-09  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  6.94e+14   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  1.93e-19  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6  6.28e-24  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  2.51e-40  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.63345, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+08
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.369884, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.829, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13162.1      2166.66      556.073      691.703      75.5613      8858.71       874.05       2.1189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.669143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002892, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.679432, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.16096e-07  5.16096e-07  1.28021e-07
      low eigenvalue method done, cpu time[sec] = 0.680641, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.16e-07  1.28e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.88e-08  1.28e-07         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28021e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03617e-34  4.15869e-35   1.2459e-36  1.08468e-35   2.8932e-37  7.17471e-38  8.09995e-44  3.34069e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.54532, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.370546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89266, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4387.35      722.221      185.358      230.568      25.1871       2952.9       291.35     0.706301
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.626474, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002883, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.637277, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.32271e-07  2.32271e-07  4.84403e-08
      low eigenvalue method done, cpu time[sec] = 0.638411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-07  4.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.17e-08  4.84e-08         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.84403e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.24099e-35  1.38924e-35  3.86159e-37  2.82429e-36  8.08773e-38  6.05567e-38  8.16683e-44  3.34162e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.56523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.70727e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.369617, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.90379, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2632.41      433.332      111.215      138.341      15.1123      1771.74       174.81     0.423781
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.616143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00289, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.6263, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5681e-07   1.5681e-07  2.86904e-08
      low eigenvalue method done, cpu time[sec] = 0.627431, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-07  2.87e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-08  2.87e-08         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.86904e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.58694e-35  7.70505e-36  2.13255e-37  1.45106e-36   4.2909e-38  5.05004e-38  8.23776e-44  3.33822e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.56334, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         2.39018e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.371201, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89486, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1880.29      309.523      79.4391      98.8147      10.7945      1265.53      124.864       0.3027
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.631943, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.642768, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.20001e-07  1.20001e-07  1.97915e-08
      low eigenvalue method done, cpu time[sec] = 0.643921, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.2e-07  1.98e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-08  1.98e-08         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97915e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.81545e-35  5.08623e-36  1.41418e-37  9.20249e-37  2.77798e-38  4.29702e-38  8.31124e-44  3.33649e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57398, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.07309e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.369779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.91223, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1462.45       240.74      61.7859      76.8559       8.3957      984.301      97.1166     0.235434
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.623005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002885, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.633851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.78107e-08  9.78107e-08  1.47917e-08
      low eigenvalue method done, cpu time[sec] = 0.634996, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.78e-08  1.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.99e-09  1.48e-08         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47917e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.37283e-35  3.67861e-36  1.02946e-37  6.48903e-37  1.98862e-38  3.72413e-38  8.38574e-44  3.33701e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57982, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.37071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1316.21      216.666      55.6073      69.1703      7.55613      885.871       87.405      0.21189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.627027, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.637807, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.96699e-08  8.96699e-08  1.30455e-08
      low eigenvalue method done, cpu time[sec] = 0.638968, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.97e-08   1.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.23e-09   1.3e-08         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30455e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21641e-35  3.20029e-36  8.98641e-38  5.59145e-37  1.72425e-38   3.4871e-38  8.42292e-44  3.33762e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41673, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         5.12181e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.37295, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89931, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             877.47      144.444      37.0716      46.1135      5.03742      590.581        58.27      0.14126
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.619159, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002877, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.629896, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.37736e-08  6.37736e-08  7.88846e-09
      low eigenvalue method done, cpu time[sec] = 0.63101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.38e-08  7.89e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.82e-09  7.89e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.88846e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.47756e-36  1.83755e-36  5.24353e-38  3.11033e-37  9.81819e-39  2.62232e-38  8.60257e-44  3.33686e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57305, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         6.82909e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.373098, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.94875, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            658.103      108.333      27.8037      34.5852      3.77806      442.936      43.7025     0.105945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.597355, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002881, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.608107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.97791e-08  4.97791e-08   5.4175e-09
      low eigenvalue method done, cpu time[sec] = 0.609224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.98e-08  5.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.53e-09  5.42e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.4175e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.18883e-36  1.21786e-36   3.5234e-38  2.02449e-37  6.49327e-39  2.07763e-38  8.76276e-44  3.33615e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59494, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         8.53636e+09
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.369918, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.88579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            526.482      86.6665      22.2429      27.6681      3.02245      354.348       34.962    0.0847561
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.637128, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002886, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.647998, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.0944e-08   4.0944e-08  4.00462e-09
      low eigenvalue method done, cpu time[sec] = 0.649171, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.09e-08     4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.71e-09     4e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.00462e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.86381e-36  8.76507e-37  2.56558e-38  1.43989e-37  4.67383e-39  1.70457e-38  8.89661e-44  3.33623e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5661, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+10
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.371833, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.93509, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            438.735      72.2221      18.5358      23.0568      2.51871       295.29       29.135    0.0706301
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.577858, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.588785, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48333e-08  3.48333e-08  3.10696e-09
      low eigenvalue method done, cpu time[sec] = 0.589925, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.48e-08  3.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-09  3.11e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.10696e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.0144e-36  6.65781e-37  1.96838e-38  1.08457e-37  3.55399e-39  1.43405e-38  9.00191e-44  3.33726e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.56413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.19509e+10
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.372398, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.92852, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            376.059      61.9046      15.8878      19.7629      2.15889      253.106      24.9728    0.0605401
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.59727, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002877, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.608071, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.03437e-08  3.03437e-08  2.49493e-09
      low eigenvalue method done, cpu time[sec] = 0.609188, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.03e-08  2.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.74e-09  2.49e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49493e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.43127e-36  5.25407e-37  1.56695e-38  8.50522e-38  2.80889e-39   1.2296e-38  9.07911e-44  3.33578e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57228, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.36582e+10
      global relaxation matrix dimension = 423
      setting global matrices ... done, cpu time[sec] = 0.36945, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.86795, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            329.051      54.1665      13.9018      17.2926      1.88903      221.468      21.8512    0.0529726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.675748, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002891, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.686317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.68999e-08  2.68999e-08  2.05588e-09
      low eigenvalue method done, cpu time[sec] = 0.687379, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.69e-08  2.06e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.42e-09  2.06e-09         1
         *Z       ---       ---  3.39e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.05588e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.01064e-36  4.26639e-37   1.2822e-38  6.87261e-38  2.28473e-39  1.07017e-38   9.1301e-44  3.33756e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59366, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 490 K
      Energy reference = 30434 1/cm
      Energy step      = 84 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008243
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.440843
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.251682
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.247403
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.29586
         W1 Well: minimal relaxation eigenvalue = 0.0832853
         W1 Well: maximal relaxation eigenvalue = 0.980425
         W1 Well:       grid size = 422
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5013 1/cm
         B1 Barrier:        grid size = 363
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -57 1/cm
         B2 Barrier:        grid size = 360
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 194 1/cm
         B3 Barrier:        grid size = 418
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4677 1/cm
         B4 Barrier:        grid size = 436
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23578 1/cm => truncating
         B5 Barrier:        grid size = 643
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23578 1/cm
         B6 Barrier:        grid size = 345
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1453 1/cm
         B7 Barrier:        grid size = 307
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4646 1/cm
         B8 Barrier:        grid size = 163
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16742 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.61742, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 422
      MasterEquation::Barrier::truncate: real weight = 1.08267e+45
      MasterEquation::Barrier::truncate: effective weight = 4.14374e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 422
      MasterEquation::Barrier::truncate: real weight = 5.19651e+43
      MasterEquation::Barrier::truncate: effective weight = 1.69101e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5013  -5013 2.58e+09 8.54e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -57 1.32e+15
         B2    195 2.19e+14
         B3  -4677 5.65e+13
         B4  -5013 7.01e+13
         B5  -5013 7.68e+12
         B6   1454 8.96e+14
         B7   4647 8.93e+13
         B8  16743 2.28e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.59e-09  1.76e-08  1.54e-13  1.37e-15  1.68e-38  1.23e-05     0.315   3.8e+15
          R  1.16e+08         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  5.68e+07     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  6.47e+12  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3  7.32e+14  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4  5.96e+37  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5  8.12e+04  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6      3.17  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7  2.63e-16  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.61e+14  9.44e+14  8.28e+09  7.32e+07     9e-16   6.6e+17  1.69e+22  2.04e+38
          R  2.17e-15         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  1.06e-15     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  1.21e-10  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3  1.37e-08  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4  1.11e+15  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5  1.51e-18  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6  5.92e-23  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7   4.9e-39  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.63118, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+08
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.36865, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.72319, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13726.9      2282.06      588.316      730.128      80.0001      9333.08      931.114      2.37106
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.777587, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002916, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.788673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.99103e-07  5.99103e-07  1.56701e-07
      low eigenvalue method done, cpu time[sec] = 0.789788, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.99e-07  1.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.64e-08  1.57e-07         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56701e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.38576e-34  2.93305e-34  8.74149e-36  7.53776e-35  2.01779e-36  5.44176e-37  7.51363e-43  6.51864e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.54402, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370319, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.7746, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4575.65      760.688      196.105      243.376      26.6667      3111.03      310.371     0.790353
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.720383, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002906, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.731111, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7399e-07   2.7399e-07  6.03251e-08
      low eigenvalue method done, cpu time[sec] = 0.732205, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-07  6.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-08  6.03e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.03251e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.07387e-34  9.94402e-35  2.76054e-36  1.99873e-35  5.74859e-37  4.61997e-37   7.5754e-43  6.50223e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.53969, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.68407e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.368625, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.8076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2745.39      456.413      117.663      146.026           16      1866.62      186.223     0.474212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.706324, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002922, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.717104, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.86182e-07  1.86182e-07  3.60466e-08
      low eigenvalue method done, cpu time[sec] = 0.718213, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07   3.6e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-08   3.6e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.60466e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89133e-34  5.55797e-35  1.53886e-36  1.03611e-35  3.07856e-37   3.8727e-37  7.64085e-43  6.50872e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55715, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          2.3577e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.368248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.78214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1960.99      326.009      84.0452      104.304      11.4286       1333.3      133.016     0.338723
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.717246, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.728027, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.43041e-07  1.43041e-07  2.50175e-08
      low eigenvalue method done, cpu time[sec] = 0.729447, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-07   2.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-08   2.5e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.50175e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33525e-34  3.68852e-35  1.02703e-36  6.61066e-36  2.00578e-37  3.30926e-37  7.70856e-43  6.50754e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.548, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.03132e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370063, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.80695, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1525.22      253.563      65.3685      81.1254       8.8889      1037.01      103.457     0.263451
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.699328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.710078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16912e-07  1.16912e-07  1.87845e-08
      low eigenvalue method done, cpu time[sec] = 0.711156, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-07  1.88e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  1.88e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.87845e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.01435e-34  2.67864e-35  7.51284e-37  4.68278e-36  1.44277e-37  2.87834e-37  7.77709e-43  6.50677e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55425, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370557, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.80481, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1372.69      228.206      58.8316      73.0128      8.00001      933.308      93.1114     0.237106
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.701627, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.712313, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.073e-07    1.073e-07  1.65997e-08
      low eigenvalue method done, cpu time[sec] = 0.713373, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-07  1.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.8e-09  1.66e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65997e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.00522e-35  2.33439e-35  6.57169e-37  4.04283e-36  1.25352e-37  2.69944e-37  7.81128e-43  6.50765e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55627, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          5.0522e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370289, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.81656, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             915.13      152.138      39.2211      48.6752      5.33334      622.205      62.0742     0.158071
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.69106, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002913, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.701158, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.66178e-08  7.66178e-08  1.01152e-08
      low eigenvalue method done, cpu time[sec] = 0.702279, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.66e-08  1.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.96e-09  1.01e-08         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01152e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.57811e-35  1.34948e-35   3.8655e-37  2.26575e-36  7.19448e-38  2.04349e-37  7.97619e-43  6.50813e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55815, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         6.73627e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.371137, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.82133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            686.347      114.103      29.4158      36.5064            4      466.654      46.5557     0.118553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.685052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.69571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.9959e-08   5.9959e-08  6.98536e-09
      low eigenvalue method done, cpu time[sec] = 0.696804, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     6e-08  6.99e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.43e-09  6.99e-09         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.98536e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89209e-35  8.98744e-36  2.61244e-37  1.48262e-36  4.78506e-38  1.62733e-37  8.12308e-43  6.50931e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42636, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         8.42034e+09
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.81835, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            549.078      91.2825      23.5326      29.2051          3.2      373.323      37.2445    0.0948424
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682087, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.692832, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.94084e-08  4.94083e-08   5.1859e-09
      low eigenvalue method done, cpu time[sec] = 0.693998, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.94e-08  5.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.46e-09  5.19e-09         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.1859e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91065e-35  6.49281e-36   1.9108e-37  1.05885e-36  3.45941e-38   1.3407e-37  8.24589e-43  6.50949e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55152, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.37027, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            457.565      76.0688      19.6105      24.3376      2.66667      311.103      31.0371    0.0790353
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.860979, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.871738, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.20937e-08  4.20937e-08  4.03767e-09
      low eigenvalue method done, cpu time[sec] = 0.872855, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.21e-08  4.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.79e-09  4.04e-09         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.03766e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27876e-35  4.94705e-36  1.47139e-37  8.00222e-37  2.63997e-38   1.1319e-37  8.34272e-43  6.50863e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55632, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.17885e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.370848, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.83954, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            392.198      65.2018       16.809      20.8608      2.28572      266.659      26.6032    0.0677446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.680952, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002899, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.69176, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67096e-08  3.67096e-08  3.25195e-09
      low eigenvalue method done, cpu time[sec] = 0.692855, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-08  3.25e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.3e-09  3.25e-09         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25195e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84339e-35  3.91413e-36  1.17493e-37  6.29302e-37  2.09278e-38  9.73484e-38  8.41406e-43  6.50962e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5707, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.34725e+10
      global relaxation matrix dimension = 422
      setting global matrices ... done, cpu time[sec] = 0.371381, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            343.174      57.0516      14.7079      18.2532            2      233.327      23.2778    0.0592765
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.856927, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00288, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.867718, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.25734e-08  3.25734e-08  2.68657e-09
      low eigenvalue method done, cpu time[sec] = 0.868794, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.26e-08  2.69e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.92e-09  2.69e-09         1
         *Z       ---       ---   1.9e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68657e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52836e-35  3.18543e-36  9.63979e-38  5.09733e-37  1.70666e-38  8.49529e-38  8.46161e-43  6.50961e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.54707, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 500 K
      Energy reference = 30712 1/cm
      Energy step      = 86 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007382
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.424515
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.24515
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.244487
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.24529
         W1 Well: minimal relaxation eigenvalue = 0.0827152
         W1 Well: maximal relaxation eigenvalue = 0.979581
         W1 Well:       grid size = 416
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5064 1/cm
         B1 Barrier:        grid size = 358
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -76 1/cm
         B2 Barrier:        grid size = 355
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 181 1/cm
         B3 Barrier:        grid size = 411
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4634 1/cm
         B4 Barrier:        grid size = 429
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6182 1/cm
         B5 Barrier: nonpositive number of states at -23640 1/cm => truncating
         B5 Barrier:        grid size = 632
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23640 1/cm
         B6 Barrier:        grid size = 340
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1471 1/cm
         B7 Barrier:        grid size = 303
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4653 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16780 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.54453, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 416
      MasterEquation::Barrier::truncate: real weight = 3.86028e+44
      MasterEquation::Barrier::truncate: effective weight = 1.51263e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 416
      MasterEquation::Barrier::truncate: real weight = 1.67055e+43
      MasterEquation::Barrier::truncate: effective weight = 5.80878e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5064  -5064 2.54e+09 8.94e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -76 1.42e+15
         B2    182 2.38e+14
         B3  -4634 6.17e+13
         B4  -5064 7.64e+13
         B5  -5064 8.39e+12
         B6   1472 9.74e+14
         B7   4654 9.82e+13
         B8  16780 2.63e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.61e-09  1.34e-08  1.56e-13  1.52e-15  5.46e-38  8.73e-06     0.187  1.12e+15
          R  1.51e+08         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.47e+07     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2   6.4e+12  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3  6.58e+14  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.83e+37  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5  1.14e+05  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6      5.35  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7  8.91e-16  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.93e+13   1.4e+14  1.64e+09  1.59e+07  5.72e-16  9.16e+16  1.96e+21  1.18e+37
          R  1.44e-14         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.12e-15     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2   6.1e-10  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3  6.27e-08  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.75e+15  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5  1.09e-17  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6   5.1e-22  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7   8.5e-38  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.55901, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+08
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.358241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.59501, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14306.6      2401.92      621.953      770.125      84.6342      9825.07      990.967      2.64807
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.856095, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002812, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.866469, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.14188e-07  7.14189e-07  1.96211e-07
      low eigenvalue method done, cpu time[sec] = 0.867595, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.14e-07  1.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.71e-08  1.96e-07         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.96211e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.86294e-33  1.91184e-33  5.66977e-35  4.84466e-34  1.30135e-35  3.78793e-36  6.38333e-42  1.12176e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.45699, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+08
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.358195, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.6335, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4768.87       800.64      207.318      256.708      28.2114      3275.02      330.322     0.882689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.828466, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.838693, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.31742e-07  3.31742e-07  7.68109e-08
      low eigenvalue method done, cpu time[sec] = 0.840517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.32e-07  7.68e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-08  7.68e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.68109e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05702e-33  6.57532e-34  1.82335e-35   1.3075e-34  3.77634e-36   3.2399e-36  6.43564e-42   1.1265e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32094, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.66168e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.357627, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.58853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2861.32      480.384      124.391      154.025      16.9268      1965.01      198.193     0.529614
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.85846, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002767, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868929, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.26861e-07  2.26861e-07  4.62942e-08
      low eigenvalue method done, cpu time[sec] = 0.870547, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.27e-07  4.63e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-08  4.63e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.62942e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.2764e-33  3.70289e-34  1.02577e-35  6.83715e-35  2.04089e-36  2.73137e-36  6.49101e-42  1.12668e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.45311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.32635e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.360075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.44203, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2043.8      343.132      88.8504      110.018      12.0906      1403.58      141.567     0.378295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002782, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02705, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74968e-07  1.74968e-07  3.23205e-08
      low eigenvalue method done, cpu time[sec] = 1.02818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-07  3.23e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-08  3.23e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.23205e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.06394e-34  2.47025e-34  6.88888e-36  4.38811e-35  1.33798e-36  2.34449e-36   6.5482e-42  1.12655e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46807, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.99103e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.357682, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63578, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1589.62       266.88      69.1059      85.5694       9.4038      1091.67      110.107      0.29423
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.822714, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002787, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832756, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.43396e-07  1.43396e-07  2.43785e-08
      low eigenvalue method done, cpu time[sec] = 0.833869, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-07  2.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-08  2.44e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.43785e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.91653e-34  1.80112e-34  5.06339e-36  3.12235e-35  9.66973e-37  2.04677e-36  6.60601e-42  1.12687e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46574, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.356136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1430.66      240.192      62.1953      77.0125      8.46342      982.507      99.0967     0.264807
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.823725, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002775, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.834193, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31751e-07  1.31751e-07  2.15846e-08
      low eigenvalue method done, cpu time[sec] = 0.83573, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-07  2.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-08  2.16e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15846e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.15213e-34  1.57232e-34  4.43805e-36  2.70076e-35  8.41812e-37  1.92271e-36  6.63481e-42  1.12713e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         4.98504e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.357679, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.61737, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            953.775      160.128      41.4635      51.3416      5.64228      655.005      66.0645     0.176538
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.842262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002762, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.85274, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.44514e-08  9.44514e-08  1.32526e-08
      low eigenvalue method done, cpu time[sec] = 0.853842, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.45e-08  1.33e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.54e-09  1.33e-08         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32526e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8394e-34  9.15007e-35  2.63117e-36  1.52478e-35  4.86924e-37  1.46534e-36  6.77356e-42    1.127e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3201, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         6.64672e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.359072, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.62934, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            715.331      120.096      31.0976      38.5062      4.23171      491.254      49.5484     0.132403
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.834062, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.844388, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.41056e-08  7.41056e-08  9.20187e-09
      low eigenvalue method done, cpu time[sec] = 0.845493, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.41e-08   9.2e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.68e-09   9.2e-09         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.20187e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.69341e-34  6.12316e-35  1.78835e-36  1.00301e-35  3.25664e-37  1.17295e-36  6.89697e-42  1.12701e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.47809, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1          8.3084e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.358489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.58282, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            572.265      96.0769      24.8781       30.805      3.38537      393.003      39.6387     0.105923
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.862059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002764, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.872372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.1179e-08   6.1179e-08  6.86052e-09
      low eigenvalue method done, cpu time[sec] = 0.873481, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.12e-08  6.86e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.49e-09  6.86e-09         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.86052e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02275e-34  4.44012e-35  1.31384e-36  7.19242e-36  2.36466e-37  9.70391e-37  7.00015e-42  1.12718e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.45461, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+09
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.357814, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63286, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            476.887       80.064      20.7318      25.6708      2.82114      327.502      33.0322    0.0882689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.813986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002765, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.824372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.21961e-08  5.21961e-08   5.3601e-09
      low eigenvalue method done, cpu time[sec] = 0.825922, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.22e-08  5.36e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.68e-09  5.36e-09         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.3601e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5891e-34  3.39337e-35  1.01537e-36  5.45372e-36  1.81093e-37  8.22144e-37  7.08164e-42  1.12718e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.45849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.16318e+10
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.359955, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.62256, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            408.761      68.6263      17.7701      22.0036      2.41812      280.716      28.3134    0.0756591
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820226, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002775, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.830783, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55717e-08  4.55716e-08  4.32974e-09
      low eigenvalue method done, cpu time[sec] = 0.831934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-08  4.33e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.07e-09  4.33e-09         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.32974e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.28925e-34  2.69176e-35  8.13272e-37  4.30083e-36  1.43986e-37  7.09228e-37   7.1419e-42  1.12721e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39174, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.32934e+10
      global relaxation matrix dimension = 416
      setting global matrices ... done, cpu time[sec] = 0.356701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64757, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            357.666       60.048      15.5488      19.2531      2.11585      245.627      24.7742    0.0662017
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002792, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.809647, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.04748e-08  4.04748e-08  3.58605e-09
      low eigenvalue method done, cpu time[sec] = 0.810867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.05e-08  3.59e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-09  3.59e-09         1
         *Z       ---       ---  1.06e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.58605e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07163e-34  2.19549e-35  6.69012e-37  3.49203e-36  1.17723e-37  6.20572e-37  7.18238e-42  1.12735e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32709, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 510 K
      Energy reference = 30990 1/cm
      Energy step      = 88 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006366
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.416068
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.238613
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.237211
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.19878
         W1 Well: minimal relaxation eigenvalue = 0.0821619
         W1 Well: maximal relaxation eigenvalue = 0.978769
         W1 Well:       grid size = 410
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5090 1/cm
         B1 Barrier:        grid size = 353
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -74 1/cm
         B2 Barrier:        grid size = 350
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 189 1/cm
         B3 Barrier:        grid size = 405
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4650 1/cm
         B4 Barrier:        grid size = 423
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6234 1/cm
         B5 Barrier: nonpositive number of states at -23570 1/cm => truncating
         B5 Barrier:        grid size = 620
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23570 1/cm
         B6 Barrier:        grid size = 336
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1422 1/cm
         B7 Barrier:        grid size = 299
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4678 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16734 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.4657, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 410
      MasterEquation::Barrier::truncate: real weight = 1.43657e+44
      MasterEquation::Barrier::truncate: effective weight = 5.76005e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 410
      MasterEquation::Barrier::truncate: real weight = 5.71439e+42
      MasterEquation::Barrier::truncate: effective weight = 2.09574e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5090  -5090 2.52e+09 9.36e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -74 1.53e+15
         B2    190 2.59e+14
         B3  -4650 6.73e+13
         B4  -5090 8.32e+13
         B5  -5090 9.17e+12
         B6   1423 1.06e+15
         B7   4678 1.08e+14
         B8  16734 3.02e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.82e-09  9.67e-09  1.48e-13  1.58e-15  1.59e-37  5.89e-06     0.106  3.27e+14
          R  2.08e+08         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  1.03e+08     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2  6.74e+12  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  6.31e+14  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4  6.28e+36  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5   1.7e+05  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6      9.41  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7  3.06e-15  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.12e+13  2.25e+13  3.45e+08  3.68e+06  3.71e-16  1.37e+16  2.47e+20  7.59e+35
          R  8.92e-14         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  4.44e-14     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2   2.9e-09  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  2.71e-07  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4   2.7e+15  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5  7.29e-17  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6  4.05e-21  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7  1.32e-36  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.48012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+08
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.347672, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14901.3      2526.36      657.024      811.735      89.4695      10335.1       1053.7       2.9519
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07451, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002757, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08438, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.99002e-07  8.99002e-07  2.58742e-07
      low eigenvalue method done, cpu time[sec] = 1.0856, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.99e-07  2.59e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.42e-08  2.59e-07         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.58742e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.9707e-32  1.15591e-32  3.41378e-34   2.8915e-33  7.79301e-35  2.44999e-35  4.97178e-41  1.74719e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3867, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+08
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.347844, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.35098, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4967.1      842.119      219.008      270.578      29.8232      3445.02      351.234     0.983967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03819, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002682, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.23974e-07  4.23974e-07  1.02956e-07
      low eigenvalue method done, cpu time[sec] = 1.0494, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.24e-07  1.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.91e-08  1.03e-07         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02956e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.27655e-32  4.03203e-33  1.11745e-34  7.93892e-34  2.30228e-35  2.10717e-35  5.01225e-41  1.74523e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36907, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.64006e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.347831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.35142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2980.26      505.272      131.405      162.347      17.8939      2067.01      210.741      0.59038
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03516, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002668, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04531, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.91749e-07  2.91749e-07  6.25745e-08
      low eigenvalue method done, cpu time[sec] = 1.04642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.92e-07  6.26e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.67e-08  6.26e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.25745e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.98641e-33  2.28751e-33  6.34285e-35  4.18686e-34  1.25538e-35  1.78528e-35  5.05505e-41  1.74415e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.29609e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348049, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36368, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2128.76      360.908      93.8606      115.962      12.7814      1476.44      150.529       0.4217
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02843, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002694, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0385, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.25876e-07  2.25876e-07  4.39402e-08
      low eigenvalue method done, cpu time[sec] = 1.04009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.26e-07  4.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-08  4.39e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.39402e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.70363e-33  1.53388e-33  4.28586e-35  2.70271e-34  8.28022e-36  1.53868e-35   5.0992e-41  1.74436e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.95211e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348477, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36833, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1655.7      280.706      73.0027      90.1928      9.94106      1148.34      117.078     0.327989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00268, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85618e-07  1.85618e-07  3.32904e-08
      low eigenvalue method done, cpu time[sec] = 1.0321, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07  3.33e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.69e-08  3.33e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.32904e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.37142e-33   1.1228e-33   3.1649e-35  1.93158e-34  6.01196e-36  1.34792e-35  5.14377e-41  1.74466e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36905, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.213605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.37477, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1490.13      252.636      65.7024      81.1735      8.94695      1033.51       105.37      0.29519
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0113, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002674, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0206, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70731e-07  1.70731e-07  2.95309e-08
      low eigenvalue method done, cpu time[sec] = 1.02116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-07  2.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-08  2.95e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.95309e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89554e-33  9.81817e-34  2.77953e-35  1.67388e-34  5.24407e-36  1.26816e-35  5.16596e-41  1.74429e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.13694, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         4.92019e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.344607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38651, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            993.421      168.424      43.8016      54.1157      5.96463      689.004      70.2469     0.196793
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002682, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22883e-07  1.22883e-07   1.8266e-08
      low eigenvalue method done, cpu time[sec] = 1.03038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-07  1.83e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-08  1.83e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.8266e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.44894e-33  5.75128e-34   1.6607e-35  9.51887e-35  3.05656e-36  9.72666e-36   5.2728e-41  1.74445e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.38511, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         6.56025e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.351067, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.40251, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            745.066      126.318      32.8512      40.5867      4.47348      516.753      52.6852     0.147595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01835, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.66634e-08  9.66634e-08  1.27508e-08
      low eigenvalue method done, cpu time[sec] = 1.02005, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.67e-08  1.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.68e-09  1.28e-08         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27508e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72708e-33  3.86698e-34  1.13506e-35  6.29408e-35  2.05553e-36  7.82421e-36  5.36783e-41  1.74453e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39896, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         8.20031e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.351457, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.40381, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            596.053      101.054       26.281      32.4694      3.57878      413.402      42.1481     0.118076
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00621, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01636, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.99521e-08  7.99521e-08  9.54621e-09
      low eigenvalue method done, cpu time[sec] = 1.01744, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     8e-08  9.55e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.15e-09  9.55e-09         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.54621e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30242e-33  2.81446e-34  8.37526e-36   4.5316e-35  1.49892e-36  6.49907e-36  5.44741e-41  1.74466e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39796, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+09
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.347765, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38644, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             496.71      84.2119      21.9008      27.0578      2.98232      344.502      35.1234    0.0983967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01592, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002673, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02621, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.83117e-08  6.83117e-08  7.48398e-09
      low eigenvalue method done, cpu time[sec] = 1.02727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.83e-08  7.48e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.1e-09  7.48e-09         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.48398e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02668e-33  2.15747e-34  6.49574e-36  3.44742e-35  1.15194e-36  5.52489e-36  5.51049e-41  1.74473e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.38607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.14804e+10
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.348348, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.41268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            425.752      72.1816      18.7721      23.1924      2.55627      295.287      30.1058    0.0843401
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.994291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002678, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00423, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.97114e-08  5.97114e-08  6.06287e-09
      low eigenvalue method done, cpu time[sec] = 1.00528, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.97e-08  6.06e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.32e-09  6.06e-09         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.06287e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.35347e-34  1.71576e-34  5.21853e-36  2.72618e-35  9.18613e-37  4.78008e-36  5.55742e-41   1.7447e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39004, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.31205e+10
      global relaxation matrix dimension = 410
      setting global matrices ... done, cpu time[sec] = 0.350999, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.40007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            372.533      63.1589      16.4256      20.2934      2.23674      258.376      26.3426    0.0737976
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00613, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002675, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01613, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.30842e-08  5.30842e-08  5.03407e-09
      low eigenvalue method done, cpu time[sec] = 1.01751, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.31e-08  5.03e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-09  5.03e-09         1
         *Z       ---       ---  5.93e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.03406e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9607e-34  1.40251e-34  4.30405e-36  2.21878e-35  7.52974e-37  4.19338e-36  5.58931e-41  1.74492e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39501, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 520 K
      Energy reference = 31268 1/cm
      Energy step      = 90 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007924
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.409868
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.232126
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.236537
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.17676
         W1 Well: minimal relaxation eigenvalue = 0.0816007
         W1 Well: maximal relaxation eigenvalue = 0.978026
         W1 Well:       grid size = 405
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5181 1/cm
         B1 Barrier:        grid size = 348
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -51 1/cm
         B2 Barrier:        grid size = 346
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 128 1/cm
         B3 Barrier:        grid size = 399
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4641 1/cm
         B4 Barrier:        grid size = 417
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23632 1/cm => truncating
         B5 Barrier:        grid size = 610
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23631 1/cm
         B6 Barrier:        grid size = 331
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 296
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4628 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16778 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.43421, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 5.56602e+43
      MasterEquation::Barrier::truncate: effective weight = 2.28246e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 2.0674e+42
      MasterEquation::Barrier::truncate: effective weight = 7.95414e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5181  -5181 2.45e+09  9.8e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -51 1.64e+15
         B2    129 2.81e+14
         B3  -4641 7.34e+13
         B4  -5181 9.05e+13
         B5  -5181    1e+13
         B6   1478 1.15e+15
         B7   4629 1.19e+14
         B8  16778 3.48e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.17e-09  8.29e-09  1.65e-13  1.93e-15  5.23e-37  4.73e-06    0.0723  1.17e+14
          R   2.4e+08         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  1.21e+08     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2  6.04e+12  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3  5.18e+14  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4  1.91e+36  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  2.11e+05  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6      13.8  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  8.56e-15  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.95e+12  3.87e+12  7.72e+07     9e+05  2.44e-16  2.21e+15  3.37e+19  5.45e+34
          R  5.14e-13         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  2.59e-13     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2   1.3e-08  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3  1.11e-06  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4   4.1e+15  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  4.53e-16  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6  2.96e-20  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  1.84e-35  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.44843, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340293, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.18633, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15511.1      2655.47      693.573      855.003      94.5121      10863.4      1119.41       3.2839
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002803, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.17853, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.60837e-07  9.60837e-07  2.87622e-07
      low eigenvalue method done, cpu time[sec] = 1.17961, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.61e-07  2.88e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.95e-08  2.88e-07         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.87622e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69119e-31  6.51663e-32  1.91668e-33   1.6099e-32  4.35298e-34  1.46966e-34  3.58318e-40   2.4333e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30969, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.338831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.22138, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5170.37      885.156      231.191      285.001       31.504      3621.14      373.137      1.09463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13608, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.59578e-07  4.59578e-07  1.16263e-07
      low eigenvalue method done, cpu time[sec] = 1.14705, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.6e-07  1.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.22e-08  1.16e-07         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16263e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.37879e-32  2.30419e-32  6.38249e-34  4.49419e-33  1.30846e-34  1.27271e-34  3.61223e-40  2.43107e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31289, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.61917e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339702, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.22538, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3102.22      531.094      138.715      171.001      18.9024      2172.68      223.882     0.656779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12508, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00259, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.18094e-07  3.18094e-07  7.12396e-08
      low eigenvalue method done, cpu time[sec] = 1.13616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-07  7.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.9e-08  7.12e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.12396e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.65329e-32  1.31666e-32  3.65443e-34  2.38985e-33  7.19681e-35  1.08401e-34  3.64291e-40   2.4297e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.26684e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.3386, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.25692, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2215.87      379.353      99.0818      122.143      13.5017      1551.92      159.916     0.469128
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002581, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11902, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.47153e-07  2.47153e-07  5.03069e-08
      low eigenvalue method done, cpu time[sec] = 1.12009, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.47e-07  5.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-08  5.03e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.03069e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.34165e-32  8.87287e-33  2.48405e-34  1.55142e-33  4.77502e-35  9.38188e-35  3.67451e-40  2.42981e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.91451e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.341857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.25359, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1723.46      295.052      77.0636      95.0003      10.5013      1207.05      124.379     0.364877
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10739, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002587, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11738, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03617e-07  2.03617e-07  3.82791e-08
      low eigenvalue method done, cpu time[sec] = 1.11845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.04e-07  3.83e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-08  3.83e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.82791e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.57206e-32  6.51996e-33  1.84273e-34  1.11354e-33  3.48266e-35  8.24729e-35  3.70638e-40  2.42951e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.34047, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23407, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1551.11      265.547      69.3573      85.5003      9.45121      1086.34      111.941      0.32839
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87478e-07  1.87478e-07  3.40188e-08
      low eigenvalue method done, cpu time[sec] = 1.13478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.87e-07   3.4e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.69e-08   3.4e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.40188e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.29623e-32  5.71061e-33   1.6215e-34  9.66739e-34  3.04365e-35   7.7712e-35  3.72223e-40  2.42956e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         4.85751e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.338509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.27867, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1034.07      177.031      46.2382      57.0002      6.30081      724.228      74.6274     0.218926
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08739, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002602, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09729, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35441e-07  1.35441e-07  2.11943e-08
      low eigenvalue method done, cpu time[sec] = 1.09846, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-07  2.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-08  2.12e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11943e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.45386e-32  3.36669e-33   9.7617e-35  5.53668e-34  1.78735e-35  5.99829e-35  3.79842e-40  2.42996e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32157, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         6.47668e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340842, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23412, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            775.556      132.773      34.6786      42.7501       4.7256      543.171      55.9706     0.164195
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06802e-07  1.06802e-07  1.48725e-08
      low eigenvalue method done, cpu time[sec] = 1.13726, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-07  1.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.53e-09  1.49e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.48725e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03063e-32  2.27419e-33  6.70854e-35  3.67965e-34  1.20848e-35  4.84858e-35  3.86613e-40  2.42998e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31732, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         8.09585e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.2628, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            620.445      106.219      27.7429      34.2001      3.78048      434.537      44.7764     0.131356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10292, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00258, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11261, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.84946e-08  8.84946e-08  1.11803e-08
      low eigenvalue method done, cpu time[sec] = 1.11371, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.85e-08  1.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.87e-09  1.12e-08         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11803e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.80372e-33  1.66122e-33  4.97127e-35  2.65979e-34  8.84958e-36  4.04336e-35  3.92287e-40   2.4301e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32679, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.341703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.26732, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            517.037      88.5156      23.1191      28.5001       3.1504      362.114      37.3137     0.109463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09682, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002634, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10663, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.57138e-08  7.57138e-08  8.79456e-09
      low eigenvalue method done, cpu time[sec] = 1.1081, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.57e-08  8.79e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.72e-09  8.79e-09         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79456e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.17209e-33  1.27723e-33   3.8692e-35  2.03001e-34   6.8245e-36  3.44876e-35  3.96792e-40  2.43034e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32596, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.13342e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.342693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.2642, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            443.175      75.8705      19.8164      24.4286      2.70035      310.383      31.9832    0.0938256
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09696, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.62543e-08  6.62543e-08  7.14488e-09
      low eigenvalue method done, cpu time[sec] = 1.10789, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.63e-08  7.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.87e-09  7.14e-09         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.14488e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03608e-33   1.0183e-33  3.11768e-35   1.6097e-34  5.45804e-36  2.99245e-35  4.00159e-40  2.43041e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32642, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.29534e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.342071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.26949, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            387.778      66.3867      17.3393      21.3751       2.3628      271.585      27.9853    0.0820974
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08751, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09706, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.89544e-08  5.89544e-08   5.9471e-09
      low eigenvalue method done, cpu time[sec] = 1.09814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.9e-08  5.95e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.21e-09  5.95e-09         1
         *Z       ---       ---  3.66e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.9471e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.20669e-33    8.342e-34  2.57796e-35   1.3132e-34  4.48516e-36  2.63185e-35  4.02465e-40  2.43048e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31612, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 530 K
      Energy reference = 31547 1/cm
      Energy step      = 91 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005489
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.241943
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.231448
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.195053
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.17591
         W1 Well: minimal relaxation eigenvalue = 0.0810597
         W1 Well: maximal relaxation eigenvalue = 0.979965
         W1 Well:       grid size = 405
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5308 1/cm
         B1 Barrier:        grid size = 347
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -30 1/cm
         B2 Barrier:        grid size = 345
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 151 1/cm
         B3 Barrier:        grid size = 398
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4671 1/cm
         B4 Barrier:        grid size = 415
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6218 1/cm
         B5 Barrier: nonpositive number of states at -23145 1/cm => truncating
         B5 Barrier:        grid size = 601
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23144 1/cm
         B6 Barrier:        grid size = 331
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1425 1/cm
         B7 Barrier:        grid size = 295
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4701 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16804 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.2203, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 2.24011e+43
      MasterEquation::Barrier::truncate: effective weight = 9.28807e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 405
      MasterEquation::Barrier::truncate: real weight = 7.87028e+41
      MasterEquation::Barrier::truncate: effective weight = 3.12203e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5308  -5308 2.35e+09 1.03e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -30 1.77e+15
         B2    152 3.05e+14
         B3  -4671    8e+13
         B4  -5308 9.85e+13
         B5  -5308 1.09e+13
         B6   1426 1.25e+15
         B7   4702  1.3e+14
         B8  16805 3.99e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.98e-09  7.85e-09  2.02e-13  2.56e-15   1.8e-36   4.2e-06    0.0548  4.76e+13
          R  2.51e+08         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.27e+08     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  4.96e+12  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3  3.91e+14  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  5.55e+35  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  2.38e+05  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6      18.2  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7   2.1e-14  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.6e+11  7.11e+11  1.82e+07  2.32e+05  1.63e-16   3.8e+14  4.96e+18  4.31e+33
          R  2.77e-12         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.41e-12     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  5.48e-08  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3  4.31e-06  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  6.13e+15  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  2.63e-15  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6  2.01e-19  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7  2.32e-34  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.23402, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340452, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23096, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16136.2      2789.39       731.64      899.972       99.768      11410.5      1188.19      3.64544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1322, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.45743e-07  9.45743e-07  2.92964e-07
      low eigenvalue method done, cpu time[sec] = 1.14386, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.46e-07  2.93e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.75e-08  2.93e-07         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.92964e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.00534e-31  3.43784e-31  1.00708e-32  8.39073e-32  2.27595e-33  8.29082e-34  2.39253e-39  3.06807e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33654, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+08
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340577, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23644, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5378.73      929.795       243.88      299.991       33.256       3803.5      396.063      1.21515
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09962, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11018, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.58429e-07  4.58429e-07  1.20237e-07
      low eigenvalue method done, cpu time[sec] = 1.11137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-07   1.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.18e-08   1.2e-07         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20237e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.98752e-31  1.23153e-31  3.40982e-33  2.38037e-32  6.95702e-34   7.2043e-34  2.41181e-39  3.06034e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29497, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.59896e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.335402, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23052, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3227.24      557.877      146.328      179.994      19.9536       2282.1      237.638     0.729088
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10374, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002872, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11412, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19053e-07  3.19053e-07  7.42589e-08
      low eigenvalue method done, cpu time[sec] = 1.11519, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-07  7.43e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-08  7.43e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.42589e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.53418e-31  7.08621e-32  1.96892e-33  1.27603e-32   3.8589e-34  6.16031e-34  2.43215e-39  3.06291e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.28748, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.23855e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339755, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23472, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2305.17      398.484       104.52      128.567      14.2526      1630.07      169.741     0.520777
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11565, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.48741e-07  2.48741e-07  5.27264e-08
      low eigenvalue method done, cpu time[sec] = 1.11674, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.49e-07  5.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.24e-08  5.27e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.27264e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82966e-31  4.79854e-32  1.34614e-33  8.32926e-33  2.57515e-34  5.35005e-34  2.45306e-39  3.06332e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29805, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.87813e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340381, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.2333, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1792.91      309.932      81.2933      99.9969      11.0853      1267.83      132.021     0.405049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10034, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05419e-07  2.05419e-07  4.02893e-08
      low eigenvalue method done, cpu time[sec] = 1.11133, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-07  4.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-08  4.03e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.02893e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41414e-31  3.53927e-32  1.00305e-33  6.00353e-33  1.88649e-34  4.71715e-34  2.47413e-39  3.06294e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29762, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.341602, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.23353, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1613.62      278.939       73.164      89.9972       9.9768      1141.05      118.819     0.364544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002824, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89322e-07  1.89322e-07  3.58695e-08
      low eigenvalue method done, cpu time[sec] = 1.10981, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-07  3.59e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-08  3.59e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.58695e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26472e-31  3.10488e-32  8.84302e-34  5.22134e-33  1.65178e-34  4.45086e-34  2.48461e-39  3.06303e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         4.79689e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.339918, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.26387, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1075.75      185.959       48.776      59.9982       6.6512      760.701      79.2125     0.243029
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08067, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002858, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09033, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.37262e-07  1.37262e-07  2.25052e-08
      low eigenvalue method done, cpu time[sec] = 1.09139, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-07  2.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-08  2.25e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.25052e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.06343e-32    1.842e-32  5.36326e-34   3.0112e-33  9.77116e-35  3.45515e-34  2.53492e-39  3.06325e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29966, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         6.39585e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.341033, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.2638, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            806.809      139.469       36.582      44.9986       4.9884      570.526      59.4094     0.182272
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07723, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002827, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08492e-07  1.08492e-07  1.58732e-08
      low eigenvalue method done, cpu time[sec] = 1.08845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-07  1.59e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.62e-09  1.59e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58732e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.74505e-32  1.24994e-32   3.7056e-34  2.01127e-33  6.64162e-35  2.80547e-34  2.57963e-39  3.06338e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30365, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         7.99482e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.343348, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.25368, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            645.447      111.575      29.2656      35.9989      3.99072       456.42      47.5275     0.145818
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0822, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002868, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09225, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.00486e-08  9.00486e-08  1.19805e-08
      low eigenvalue method done, cpu time[sec] = 1.09335, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     9e-08   1.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.96e-09   1.2e-08         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19805e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.36732e-32  9.16305e-33  2.75754e-34   1.4595e-33  4.88373e-35  2.34824e-34  2.61715e-39  3.06358e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30123, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+09
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.34246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.26005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            537.873      92.9795       24.388      29.9991       3.3256       380.35      39.6063     0.121515
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07353, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002855, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08369, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.71451e-08  7.71451e-08  9.45504e-09
      low eigenvalue method done, cpu time[sec] = 1.08474, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.71e-08  9.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.8e-09  9.46e-09         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.45504e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.46548e-32  7.06568e-33  2.15364e-34  1.11749e-33  3.77896e-35  2.00923e-34  2.64704e-39  3.06366e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29349, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.11927e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.340436, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.26427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            461.034      79.6967       20.904      25.7135      2.85051      326.015      33.9482     0.104155
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002843, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.75784e-08  6.75784e-08  7.70294e-09
      low eigenvalue method done, cpu time[sec] = 1.0804, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.76e-08   7.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.94e-09   7.7e-09         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.70294e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83547e-32  5.64723e-33  1.74041e-34  8.88506e-34  3.03099e-35  1.74817e-34  2.66949e-39  3.06393e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.29562, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.27917e+10
      global relaxation matrix dimension = 405
      setting global matrices ... done, cpu time[sec] = 0.34444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.24665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            403.405      69.7346       18.291      22.4993       2.4942      285.263      29.7047     0.091136
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08806, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002818, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.01855e-08  6.01856e-08  6.42714e-09
      low eigenvalue method done, cpu time[sec] = 1.09977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.02e-08  6.43e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.28e-09  6.43e-09         1
         *Z       ---       ---  2.41e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.42714e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.37419e-32  4.63621e-33  1.44277e-34  7.26537e-34  2.49692e-35  1.54124e-34  2.68503e-39  3.06405e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30067, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 540 K
      Energy reference = 31824 1/cm
      Energy step      = 93 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008004
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.352534
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.225517
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.251571
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.1359
         W1 Well: minimal relaxation eigenvalue = 0.0805229
         W1 Well: maximal relaxation eigenvalue = 0.979222
         W1 Well:       grid size = 400
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5376 1/cm
         B1 Barrier:        grid size = 343
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -74 1/cm
         B2 Barrier:        grid size = 340
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 204 1/cm
         B3 Barrier:        grid size = 392
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4631 1/cm
         B4 Barrier:        grid size = 409
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6212 1/cm
         B5 Barrier: nonpositive number of states at -23139 1/cm => truncating
         B5 Barrier:        grid size = 591
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23139 1/cm
         B6 Barrier:        grid size = 327
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1413 1/cm
         B7 Barrier:        grid size = 292
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4668 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.3389, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 400
      MasterEquation::Barrier::truncate: real weight = 9.3449e+42
      MasterEquation::Barrier::truncate: effective weight = 3.95979e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 400
      MasterEquation::Barrier::truncate: real weight = 3.13869e+41
      MasterEquation::Barrier::truncate: effective weight = 1.28821e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5376  -5376  2.3e+09 1.07e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -74  1.9e+15
         B2    205 3.31e+14
         B3  -4631 8.72e+13
         B4  -5376 1.07e+14
         B5  -5376 1.19e+13
         B6   1414 1.35e+15
         B7   4669 1.42e+14
         B8  16758 4.57e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.26e-09  6.37e-09  2.09e-13  2.88e-15  5.07e-36  3.21e-06    0.0359  1.72e+13
          R  3.07e+08         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1  1.57e+08     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2  4.79e+12  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  3.47e+14  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4  1.97e+35  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  3.12e+05   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6      27.8  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7  5.81e-14  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.11e+10  1.39e+11  4.55e+06  6.28e+04  1.11e-16  6.99e+13  7.84e+17  3.75e+32
          R  1.41e-11         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1   7.2e-12     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2   2.2e-07  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  1.59e-05  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4  9.04e+15  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  1.43e-14   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6  1.28e-18  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7  2.66e-33  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.35332, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+08
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.33367, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.03179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16776.7      2928.23      771.269      946.688      105.243      11976.7      1260.13      4.03872
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25531, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002737, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28224, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0726e-06   1.0726e-06  3.44042e-07
      low eigenvalue method done, cpu time[sec] = 1.28331, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-06  3.44e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.88e-08  3.44e-07         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.44042e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50335e-30  1.70169e-30  4.97135e-32  4.10966e-31  1.11816e-32  4.35855e-33   1.4931e-38  3.50874e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24238, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+08
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.333551, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.1062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5592.23      976.077       257.09      315.563      35.0811      3992.24      420.042      1.34624
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24088, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25002, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.26892e-07  5.26892e-07  1.43329e-07
      low eigenvalue method done, cpu time[sec] = 1.25053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.27e-07  1.43e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.78e-08  1.43e-07         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43329e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0229e-30  6.17697e-31  1.71087e-32  1.18441e-31  3.47461e-33  3.80965e-33   1.5051e-38   3.5144e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.27832, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.57941e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.33222, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08775, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3355.34      585.646      154.254      189.338      21.0487      2395.34      252.025     0.807745
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22701, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002535, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23682, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.68751e-07  3.68751e-07  8.92088e-08
      low eigenvalue method done, cpu time[sec] = 1.23788, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.69e-07  8.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.32e-08  8.92e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.92088e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29535e-30  3.57898e-31  9.96122e-33  6.39958e-32  1.94329e-33  3.27326e-33  1.51774e-38  3.51391e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.21117e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.331891, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.06025, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2396.67      418.319      110.181      135.241      15.0348      1710.96      180.018      0.57696
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2429, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.88481e-07  2.88481e-07   6.3682e-08
      low eigenvalue method done, cpu time[sec] = 1.25386, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.88e-07  6.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-08  6.37e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3682e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.40161e-31  2.43528e-31  6.84932e-33  4.19996e-32  1.30418e-33  2.85374e-33  1.53073e-38  3.51416e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.23301, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.84293e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.332718, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08863, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1864.08      325.359      85.6965      105.188      11.6937      1330.75      140.014     0.448747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21987, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22968, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.38826e-07  2.38826e-07  4.88621e-08
      low eigenvalue method done, cpu time[sec] = 1.23072, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-07  4.89e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-08  4.89e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.88621e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.29598e-31  1.80289e-31    5.126e-33  3.03976e-32  9.59557e-34  2.52428e-33  1.54379e-38  3.51408e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24613, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.331193, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.07641, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1677.67      292.823      77.1269      94.6688      10.5243      1197.67      126.013     0.403872
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23716, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00253, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.24674, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.20332e-07  2.20332e-07  4.35785e-08
      low eigenvalue method done, cpu time[sec] = 1.2478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-07  4.36e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-08  4.36e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.35785e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.53638e-31  1.58412e-31  4.52753e-33  2.64835e-32  8.41722e-34  2.38521e-33  1.55027e-38  3.51418e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24325, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         4.73822e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.33158, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09737, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1118.45      195.215      51.4179      63.1126      7.01623      798.447      84.0084     0.269248
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22532, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23472, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60335e-07  1.60335e-07  2.75318e-08
      low eigenvalue method done, cpu time[sec] = 1.23578, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  2.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-08  2.75e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.75318e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.19588e-31  9.45671e-32  2.76601e-33  1.53783e-32  5.01527e-34  1.86266e-33  1.58138e-38  3.51432e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25864, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         6.31762e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.334703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10022, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            838.835      146.412      38.5634      47.3344      5.26217      598.836      63.0063     0.201936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21565, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22474, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27038e-07  1.27038e-07  1.95162e-08
      low eigenvalue method done, cpu time[sec] = 1.22578, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  1.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-08  1.95e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.95162e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.00435e-31   6.4462e-32  1.92122e-33  1.03225e-32  3.42678e-34  1.51938e-33  1.60898e-38  3.51449e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25422, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         7.89703e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.330618, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10158, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            671.068      117.129      30.8508      37.8675      4.20974      479.068       50.405     0.161549
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22316, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0563e-07   1.0563e-07  1.47884e-08
      low eigenvalue method done, cpu time[sec] = 1.22423, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.29e-09  1.48e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47884e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2928e-31  4.74235e-32  1.43561e-33   7.5196e-33  2.53009e-34  1.27653e-33  1.63213e-38  3.51468e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.13554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+09
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.326866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            559.223      97.6077       25.709      31.5563      3.50811      399.224      42.0042     0.134624
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.23125, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.24092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.06197e-08  9.06196e-08   1.1709e-08
      low eigenvalue method done, cpu time[sec] = 1.24212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.06e-08  1.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.95e-09  1.17e-08         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1709e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82519e-31  3.66753e-32  1.12504e-33  5.77572e-33  1.96432e-34  1.09571e-33   1.6506e-38  3.51483e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.14858, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.10558e+10
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.329787, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09567, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            479.334      83.6637      22.0363      27.0482      3.00695      342.192      36.0036     0.115392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.20672, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21652, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.94711e-08  7.94711e-08  9.56555e-09
      low eigenvalue method done, cpu time[sec] = 1.21772, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.95e-08  9.57e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.96e-09  9.57e-09         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.56555e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.49746e-31  2.93852e-32  9.11799e-34  4.60455e-33     1.58e-34  9.55972e-34  1.66452e-38  3.51504e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.23683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.26352e+10
      global relaxation matrix dimension = 400
      setting global matrices ... done, cpu time[sec] = 0.33275, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            419.418      73.2058      19.2817      23.6672      2.63109      299.418      31.5031     0.100968
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20486, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.08433e-08  7.08433e-08  8.00036e-09
      low eigenvalue method done, cpu time[sec] = 1.20593, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.08e-08     8e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.19e-09     8e-09         1
         *Z       ---       ---   1.5e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.00036e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25683e-31   2.4176e-32   7.5776e-34  3.77389e-33  1.30481e-34  8.44861e-34   1.6742e-38  3.51524e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.23867, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 550 K
      Energy reference = 32102 1/cm
      Energy step      = 95 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007713
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.393871
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.22196
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.189753
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.09933
         W1 Well: minimal relaxation eigenvalue = 0.0800005
         W1 Well: maximal relaxation eigenvalue = 0.978505
         W1 Well:       grid size = 395
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5422 1/cm
         B1 Barrier:        grid size = 338
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -7 1/cm
         B2 Barrier:        grid size = 336
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 387
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 403
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6182 1/cm
         B5 Barrier: nonpositive number of states at -23283 1/cm => truncating
         B5 Barrier:        grid size = 583
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23282 1/cm
         B6 Barrier:        grid size = 323
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1417 1/cm
         B7 Barrier:        grid size = 289
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4647 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16807 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.27389, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 395
      MasterEquation::Barrier::truncate: real weight = 4.03277e+42
      MasterEquation::Barrier::truncate: effective weight = 1.74559e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 395
      MasterEquation::Barrier::truncate: real weight = 1.30629e+41
      MasterEquation::Barrier::truncate: effective weight = 5.52372e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5422  -5422 2.26e+09 1.12e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -7 2.04e+15
         B2    183 3.59e+14
         B3  -4662  9.5e+13
         B4  -5422 1.16e+14
         B5  -5422  1.3e+13
         B6   1418 1.47e+15
         B7   4648 1.56e+14
         B8  16808 5.22e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.56e-09  4.96e-09  2.05e-13  3.07e-15  1.31e-35  2.35e-06    0.0228  6.14e+12
          R  3.91e+08         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  2.01e+08     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  4.87e+12  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  3.26e+14  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4  7.63e+34  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  4.25e+05   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6      43.9  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7  1.63e-13  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.49e+10  2.88e+10  1.19e+06  1.78e+04  7.61e-17  1.37e+13  1.32e+17  3.57e+31
          R  6.73e-11         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  3.47e-11     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  8.38e-07  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  5.61e-05  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4  1.31e+16  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  7.32e-14   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6  7.56e-18  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7   2.8e-32  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.28746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+08
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.323786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.89668, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17432.7       3072.1      812.503      995.196      110.945      12562.4      1335.32      4.46656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.38806, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002546, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.39814, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26919e-06  1.26919e-06  4.20965e-07
      low eigenvalue method done, cpu time[sec] = 1.39919, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-06  4.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.17e-07  4.21e-07         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.20965e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.12181e-29   7.9436e-30  2.31356e-31  1.89814e-30  5.17994e-32  2.16315e-32  8.71234e-38  3.68811e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19548, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+08
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.324737, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.93207, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5810.9      1024.03      270.834      331.732      36.9815      4187.46      445.108      1.48885
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.34982, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002489, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.35934, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.31592e-07  6.31592e-07   1.7793e-07
      low eigenvalue method done, cpu time[sec] = 1.3604, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.32e-07  1.78e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.71e-08  1.78e-07         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.7793e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.6652e-30  2.91999e-30  8.08902e-32  5.55489e-31  1.63552e-32  1.89903e-32  8.78217e-38  3.68943e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1907, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.56046e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.323264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.93436, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3486.54      614.419      162.501      199.039      22.1889      2512.48      267.065     0.893312
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.34645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.35589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.44446e-07  4.44446e-07   1.1158e-07
      low eigenvalue method done, cpu time[sec] = 1.35698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.44e-07  1.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.99e-08  1.12e-07         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1158e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.23466e-30  1.70322e-30   4.7478e-32  3.02461e-31  9.22115e-33  1.63836e-32  8.85566e-38   3.6887e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19474, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.18465e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.324234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.74191, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2490.39      438.871      116.072      142.171      15.8492      1794.63       190.76      0.63808
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5382, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54787, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48884e-07  3.48884e-07  8.00683e-08
      low eigenvalue method done, cpu time[sec] = 1.54904, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.49e-07  8.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.12e-08  8.01e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.00683e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.54831e-30  1.16436e-30  3.28276e-32  1.99551e-31  6.22279e-33  1.43332e-32  8.93101e-38  3.68859e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1895, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.80883e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.313549, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.92746, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1936.97      341.344      90.2781      110.577      12.3272      1395.82      148.369     0.496284
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35439, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002449, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.36372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89537e-07  2.89537e-07  6.16826e-08
      low eigenvalue method done, cpu time[sec] = 1.36481, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.9e-07  6.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.58e-08  6.17e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.16826e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.54363e-30  8.65123e-31  2.46731e-32  1.45012e-31   4.5979e-33  1.27159e-32  9.00668e-38  3.68902e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18659, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.325365, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.90853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1743.27       307.21      81.2503      99.5196      11.0945      1256.24      133.532     0.446656
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37646, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002474, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38601, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.67382e-07  2.67382e-07  5.51072e-08
      low eigenvalue method done, cpu time[sec] = 1.38714, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.67e-07  5.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.38e-08  5.51e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.51072e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.18006e-30   7.6132e-31  2.18321e-32  1.26557e-31  4.04055e-33  1.20312e-32  9.04422e-38  3.68894e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20087, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         4.68139e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.326287, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.92508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1162.18      204.806      54.1669      66.3464      7.39631      837.493      89.0216     0.297771
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36573, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002456, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.37507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.95288e-07  1.95288e-07  3.50512e-08
      low eigenvalue method done, cpu time[sec] = 1.37616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.95e-07  3.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-08  3.51e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50512e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    2.055e-30  4.57256e-31  1.34333e-32  7.39834e-32  2.42456e-33  9.44773e-33  9.22401e-38  3.68908e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20942, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         6.24185e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.324973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.91038, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            871.636      153.605      40.6252      49.7598      5.54723       628.12      66.7662     0.223328
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37427, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002457, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.55112e-07  1.55112e-07  2.49689e-08
      low eigenvalue method done, cpu time[sec] = 1.38435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-07   2.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08   2.5e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49689e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.47858e-30  3.13072e-31  9.37892e-33  4.99018e-32  1.66512e-33  7.74008e-33  9.38328e-38  3.68927e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19972, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         7.80231e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.326659, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95013, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            697.309      122.884      32.5001      39.8078      4.43778      502.496      53.4129     0.178662
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.33699, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34676, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29205e-07  1.29205e-07  1.89934e-08
      low eigenvalue method done, cpu time[sec] = 1.34784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.29e-07   1.9e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-08   1.9e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89934e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13272e-30  2.31124e-31  7.03686e-33  3.64903e-32  1.23435e-33  6.52618e-33   9.5169e-38  3.68946e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20454, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+09
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.326369, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.76281, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             581.09      102.403      27.0834      33.1732      3.69815      418.746      44.5108     0.148885
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51488, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002471, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52469, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10999e-07  1.10999e-07  1.50864e-08
      low eigenvalue method done, cpu time[sec] = 1.5258, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-07  1.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.7e-09  1.51e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.50864e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.04551e-31  1.79253e-31  5.53301e-33  2.81153e-32  9.61495e-34  5.61879e-33  9.62359e-38  3.68965e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18964, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.09232e+10
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.314114, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9556, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            498.078      87.7742      23.2144      28.4342      3.16985      358.925      38.1521     0.127616
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.32732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002454, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33669, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.74542e-08  9.74542e-08   1.2358e-08
      low eigenvalue method done, cpu time[sec] = 1.33777, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.75e-08  1.24e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.5e-09  1.24e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2358e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.44122e-31  1.43972e-31  4.49705e-33  2.24735e-32  7.75548e-34  4.91515e-33  9.70421e-38  3.68988e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19017, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.24837e+10
      global relaxation matrix dimension = 395
      setting global matrices ... done, cpu time[sec] = 0.320795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.90197, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            435.818      76.8024      20.3126      24.8799      2.77361       314.06      33.3831     0.111664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.38325, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002493, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.39203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.69563e-08  8.69563e-08  1.03602e-08
      low eigenvalue method done, cpu time[sec] = 1.39257, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.7e-08  1.04e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.56e-09  1.04e-08         1
         *Z       ---       ---  9.22e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03602e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.26002e-31  1.18699e-31  3.74655e-33  1.84615e-32  6.42026e-34  4.35403e-33  9.76065e-38  3.69007e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19367, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 560 K
      Energy reference = 32381 1/cm
      Energy step      = 97 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008732
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.387374
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.216081
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.224139
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.0769
         W1 Well: minimal relaxation eigenvalue = 0.0794924
         W1 Well: maximal relaxation eigenvalue = 0.977812
         W1 Well:       grid size = 390
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5450 1/cm
         B1 Barrier:        grid size = 334
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -17 1/cm
         B2 Barrier:        grid size = 332
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 175 1/cm
         B3 Barrier:        grid size = 382
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4674 1/cm
         B4 Barrier:        grid size = 398
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6226 1/cm
         B5 Barrier: nonpositive number of states at -23201 1/cm => truncating
         B5 Barrier:        grid size = 573
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23201 1/cm
         B6 Barrier:        grid size = 319
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1437 1/cm
         B7 Barrier:        grid size = 286
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4638 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.27541, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 1.79705e+42
      MasterEquation::Barrier::truncate: effective weight = 7.94233e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 5.65489e+40
      MasterEquation::Barrier::truncate: effective weight = 2.4561e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5450  -5450 2.24e+09 1.17e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -17 2.19e+15
         B2    176 3.89e+14
         B3  -4674 1.03e+14
         B4  -5450 1.26e+14
         B5  -5450 1.41e+13
         B6   1438 1.59e+15
         B7   4639 1.71e+14
         B8  16763 5.96e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.93e-09  3.72e-09  1.93e-13  3.11e-15  3.12e-35  1.67e-06     0.014  2.17e+12
          R  5.17e+08         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  2.69e+08      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2  5.18e+12     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  3.21e+14  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4   3.2e+34  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  6.01e+05   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6      71.4  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7   4.6e-13  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.29e+09  6.33e+09  3.28e+05  5.29e+03  5.31e-17  2.83e+12  2.38e+16  3.69e+30
          R  3.04e-10         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  1.58e-10      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2  3.05e-06     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  0.000189  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  1.88e+16  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  3.53e-13   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6   4.2e-17  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7  2.71e-31  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.28943, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.315475, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.67374, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18104.4      3221.13      855.387      1045.54      116.878      13167.9      1413.88      4.93175
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55911, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56225e-06  1.56225e-06  5.35221e-07
      low eigenvalue method done, cpu time[sec] = 1.5606, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.56e-06  5.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-07  5.35e-07         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.35221e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.44979e-29  3.50556e-29  1.01816e-30  8.29258e-30  2.26959e-31  1.01111e-31  4.76567e-37  3.55874e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10751, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.304474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.69905, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6034.81      1073.71      285.129      348.514      38.9593       4389.3      471.292      1.64392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51948, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52863, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.8729e-07   7.8729e-07  2.29418e-07
      low eigenvalue method done, cpu time[sec] = 1.52973, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.87e-07  2.29e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.11e-08  2.29e-07         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.29418e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.36321e-29  1.30449e-29  3.61504e-31  2.46319e-30  7.27805e-32  8.92087e-32   4.8037e-37   3.5587e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09283, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1          1.5421e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.306701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.69365, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3620.89      644.226      171.077      209.108      23.3756      2633.58      282.775      0.98635
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51824, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002397, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.56985e-07  5.56985e-07  1.44925e-07
      low eigenvalue method done, cpu time[sec] = 1.52872, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.57e-07  1.45e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.99e-08  1.45e-07         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44925e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83472e-29  7.65891e-30  2.13857e-31  1.35131e-30  4.13575e-32  7.72934e-32  4.84367e-37  3.55886e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.08912, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.15894e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.307102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.70378, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2586.35      460.162      122.198      149.363      16.6968      1881.13      201.982     0.704536
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51028, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002391, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51904, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.38697e-07  4.38697e-07  1.04526e-07
      low eigenvalue method done, cpu time[sec] = 1.52016, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.39e-07  1.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.91e-08  1.05e-07         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.04526e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.07831e-29  5.25979e-30  1.48671e-31  8.96145e-31  2.80607e-32  6.78579e-32  4.88459e-37   3.5587e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09392, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.77579e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.308411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.71789, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2011.6      357.903       95.043      116.171      12.9864       1463.1      157.097     0.547972
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.49855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50772, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.64953e-07  3.64953e-07  8.08412e-08
      low eigenvalue method done, cpu time[sec] = 1.50929, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.65e-07  8.08e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.24e-08  8.08e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.08412e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62549e-29  3.92187e-30  1.12207e-31  6.53799e-31  2.08197e-32  6.03797e-32  4.92563e-37  3.55883e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09498, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.305776, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.71771, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1810.44      322.113      85.5387      104.554      11.6878      1316.79      141.388     0.493175
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.4989, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50808, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.3736e-07  3.37361e-07  7.23447e-08
      low eigenvalue method done, cpu time[sec] = 1.50919, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.37e-07  7.23e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-08  7.23e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.23447e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46112e-29  3.45652e-30  9.94634e-32  5.71553e-31  1.83282e-32  5.72045e-32  4.94598e-37  3.55896e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09709, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         4.62631e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.308914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.73612, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1206.96      214.742      57.0258      69.7027      7.79186       877.86      94.2584     0.328783
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48821, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002402, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49742, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.47302e-07  2.47302e-07  4.63201e-08
      low eigenvalue method done, cpu time[sec] = 1.49854, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.47e-07  4.63e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-08  4.63e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.63201e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.50358e-30  2.08843e-30  6.16288e-32  3.36332e-31  1.10744e-32  4.51699e-32  5.04331e-37  3.55911e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11127, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         6.16841e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309771, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.73112, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            905.222      161.057      42.7694       52.277      5.84389      658.395      70.6938     0.246588
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48679, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002394, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49587, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.96906e-07  1.96906e-07  3.31554e-08
      low eigenvalue method done, cpu time[sec] = 1.49698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-07  3.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-08  3.32e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.31554e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.87044e-30  1.43613e-30  4.32471e-32   2.2794e-31  7.64387e-33  3.71652e-32  5.12947e-37  3.55926e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10599, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         7.71052e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309433, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72872, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            724.178      128.845      34.2155      41.8216      4.67512      526.716      56.5551      0.19727
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.64316e-07  1.64316e-07  2.53165e-08
      low eigenvalue method done, cpu time[sec] = 1.49858, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-07  2.53e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-08  2.53e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.53165e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.28307e-30  1.06385e-30  3.25774e-32  1.67305e-31  5.68878e-33  3.14473e-32   5.2018e-37  3.55942e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10225, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.306714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.75116, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            603.481      107.371      28.5129      34.8514      3.89593       438.93      47.1292     0.164392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.46646, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002406, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.47581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41363e-07  1.41363e-07  2.01718e-08
      low eigenvalue method done, cpu time[sec] = 1.47694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-07  2.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-08  2.02e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01718e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.23195e-30   8.2743e-31  2.56997e-32  1.29303e-31  4.44569e-33  2.71562e-32  5.25968e-37  3.55958e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10175, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.07947e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.74366, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             517.27      92.0323      24.4396      29.8726      3.33937      376.226      40.3965     0.140907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.48441, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24256e-07  1.24256e-07  1.65678e-08
      low eigenvalue method done, cpu time[sec] = 1.48552, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-07  1.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-08  1.66e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65678e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.49056e-30  6.66166e-31  2.09464e-32  1.03626e-31  3.59583e-33  2.38175e-32  5.30358e-37  3.55978e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.23368e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.307279, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.738, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            452.611      80.5283      21.3847      26.1385      2.92195      329.197      35.3469     0.123294
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002391, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.48957, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10978e-07  1.10978e-07  1.39216e-08
      low eigenvalue method done, cpu time[sec] = 1.4907, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-07  1.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.62e-09  1.39e-08         1
         *Z       ---       ---  5.65e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39216e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.94321e-30  5.50375e-31  1.74932e-32  8.53194e-32   2.9839e-33  2.11472e-32  5.33454e-37  3.55997e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10097, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 570 K
      Energy reference = 32658 1/cm
      Energy step      = 98 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007566
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.382994
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.210014
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.186787
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.07525
         W1 Well: minimal relaxation eigenvalue = 0.0789868
         W1 Well: maximal relaxation eigenvalue = 0.97964
         W1 Well:       grid size = 390
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5562 1/cm
         B1 Barrier:        grid size = 334
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -74 1/cm
         B2 Barrier:        grid size = 332
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 121 1/cm
         B3 Barrier:        grid size = 381
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4680 1/cm
         B4 Barrier:        grid size = 397
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6248 1/cm
         B5 Barrier: nonpositive number of states at -23594 1/cm => truncating
         B5 Barrier:        grid size = 574
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23594 1/cm
         B6 Barrier:        grid size = 318
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1493 1/cm
         B7 Barrier:        grid size = 286
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4629 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16782 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.22335, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 8.25479e+41
      MasterEquation::Barrier::truncate: effective weight = 3.68593e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 390
      MasterEquation::Barrier::truncate: real weight = 2.53882e+40
      MasterEquation::Barrier::truncate: effective weight = 1.12005e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5562  -5562 2.16e+09 1.23e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -74 2.35e+15
         B2    122 4.22e+14
         B3  -4680 1.12e+14
         B4  -5562 1.37e+14
         B5  -5562 1.54e+13
         B6   1494 1.72e+15
         B7   4630 1.87e+14
         B8  16782 6.79e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.8e-09  3.43e-09  2.21e-13  3.84e-15  8.78e-35  1.45e-06    0.0106  9.69e+11
          R  5.57e+08         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  2.91e+08     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2  4.52e+12  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3   2.6e+14  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4  1.14e+34  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  6.89e+05   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6        94  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  1.03e-12  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.66e+08  1.46e+09  9.44e+04  1.64e+03  3.75e-17  6.19e+11  4.54e+15  4.13e+29
          R   1.3e-09         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  6.83e-10     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2  1.06e-05  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3   0.00061  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4  2.67e+16  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  1.62e-12   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6   2.2e-16  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  2.42e-30  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.23733, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.315895, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65869, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              18792      3375.42      899.965      1097.77       123.05      13793.6      1495.89      5.43647
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.56807, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002413, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57691, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.59272e-06  1.59272e-06   5.5971e-07
      low eigenvalue method done, cpu time[sec] = 1.57802, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-06   5.6e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-07   5.6e-07         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.59709e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.98966e-28   1.4674e-28  4.24936e-30  3.43669e-29  9.43253e-31  4.46268e-31  2.45451e-36  3.16878e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11172, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+08
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.303495, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.71992, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6263.99      1125.14      299.988      365.923      41.0166      4597.88      498.629      1.81216
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51639, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52557, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.11914e-07  8.11914e-07  2.43174e-07
      low eigenvalue method done, cpu time[sec] = 1.52665, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.12e-07  2.43e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.28e-08  2.43e-07         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.43174e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86634e-28  5.52466e-29  1.53138e-30  1.03558e-29  3.07043e-31  3.96016e-31  2.47401e-36  3.17052e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11008, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          1.5243e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.306875, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.7209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3758.39      675.085      179.993      219.554      24.6099      2758.73      299.177      1.08729
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002381, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52615, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.77221e-07  5.77221e-07  1.54705e-07
      low eigenvalue method done, cpu time[sec] = 1.52758, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.77e-07  1.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.14e-08  1.55e-07         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54705e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.22095e-28  3.26409e-29  9.12869e-31  5.72277e-30  1.75812e-31  3.44691e-31  2.49448e-36  3.17038e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11719, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.13402e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.307183, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72944, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2684.57      482.203      128.566      156.824      17.5785      1970.52      213.698     0.776639
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50073, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.56033e-07  4.56033e-07  1.12132e-07
      low eigenvalue method done, cpu time[sec] = 1.51104, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-07  1.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.04e-08  1.12e-07         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12132e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.99497e-29  2.25155e-29  6.37971e-31  3.81426e-30  1.19916e-31  3.03716e-31   2.5154e-36   3.1703e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11434, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.74374e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309007, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72551, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2088      375.047      99.9961      121.974      13.6722      1532.63       166.21     0.604052
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50879, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51792, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.80215e-07  3.80215e-07  8.70546e-08
      low eigenvalue method done, cpu time[sec] = 1.51904, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.8e-07  8.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.35e-08  8.71e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.70546e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.06155e-29   1.6846e-29  4.83459e-31  2.79351e-30  8.93313e-32  2.71064e-31  2.53636e-36  3.17033e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11381, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.306585, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72439, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1879.2      337.542      89.9965      109.777       12.305      1379.36      149.589     0.543647
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.49602, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002391, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51787e-07  3.51787e-07  7.80321e-08
      low eigenvalue method done, cpu time[sec] = 1.50645, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.52e-07   7.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.1e-08   7.8e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.80321e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.35769e-29  1.48689e-29  4.29295e-31  2.44611e-30  7.87767e-32  2.57154e-31  2.54674e-36  3.17042e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         4.57289e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309047, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.71577, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1252.8      225.028      59.9976      73.1846      8.20332      919.576      99.7257     0.362431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50133, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5105, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.58745e-07  2.58745e-07  5.02837e-08
      low eigenvalue method done, cpu time[sec] = 1.51194, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.59e-07  5.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-08  5.03e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.02837e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.16149e-29  9.03612e-30  2.67815e-31  1.44872e-30  4.79217e-32  2.04185e-31  2.59636e-36  3.17059e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10172, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         6.09719e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309199, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72648, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            939.598      168.771      44.9982      54.8884      6.15249      689.682      74.7943     0.271824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.49662, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50548, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06481e-07  2.06481e-07  3.61618e-08
      low eigenvalue method done, cpu time[sec] = 1.50659, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-07  3.62e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-08  3.62e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.61618e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.02243e-29   6.2402e-30   1.8887e-31   9.8643e-31    3.324e-32  1.68721e-31  2.64025e-36  3.17071e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10932, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         7.62149e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.308927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.73604, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            751.678      135.017      35.9986      43.9108      4.92199      551.745      59.8354     0.217459
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48632, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002372, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72593e-07  1.72593e-07  2.77145e-08
      low eigenvalue method done, cpu time[sec] = 1.49653, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-07  2.77e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.5e-08  2.77e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.77145e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.33263e-29  4.63811e-30   1.4283e-31  7.26686e-31   2.4834e-32  1.43263e-31  2.67713e-36  3.17086e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10707, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+09
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309233, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.74139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            626.399      112.514      29.9988      36.5923      4.10166      459.788      49.8629     0.181216
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48387, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49299, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48678e-07  1.48678e-07  2.21502e-08
      low eigenvalue method done, cpu time[sec] = 1.4941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-07  2.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-08  2.22e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21502e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.87419e-29  3.61735e-30   1.1304e-31  5.63326e-31  1.94693e-32  1.24081e-31  2.70669e-36  3.17103e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10902, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.06701e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.309012, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.73938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            536.913      96.4407      25.7133      31.3648      3.51571      394.104      42.7396     0.155328
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48448, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002387, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.49358, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30824e-07  1.30824e-07  1.82401e-08
      low eigenvalue method done, cpu time[sec] = 1.4952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-07  1.82e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-08  1.82e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.82401e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54984e-29   2.9192e-30   9.2386e-32   4.5262e-31  1.57902e-32  1.09106e-31  2.72921e-36  3.17118e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11275, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.21944e+10
      global relaxation matrix dimension = 390
      setting global matrices ... done, cpu time[sec] = 0.308071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.72816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            469.799      84.3856      22.4991      27.4442      3.07624      344.841      37.3971     0.135912
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.49266, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002384, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.50174, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16947e-07  1.16947e-07  1.53616e-08
      low eigenvalue method done, cpu time[sec] = 1.50287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-07  1.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-08  1.54e-08         1
         *Z       ---       ---  3.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53616e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30974e-29  2.41673e-30  7.73397e-32  3.73491e-31  1.31339e-32  9.70936e-32  2.74521e-36  3.17134e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10392, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 580 K
      Energy reference = 32936 1/cm
      Energy step      = 100 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008085
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.378217
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.205323
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.222337
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.04455
         W1 Well: minimal relaxation eigenvalue = 0.0784721
         W1 Well: maximal relaxation eigenvalue = 0.978994
         W1 Well:       grid size = 386
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5664 1/cm
         B1 Barrier:        grid size = 330
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -64 1/cm
         B2 Barrier:        grid size = 328
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 135 1/cm
         B3 Barrier:        grid size = 376
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4664 1/cm
         B4 Barrier:        grid size = 392
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6264 1/cm
         B5 Barrier: nonpositive number of states at -23664 1/cm => truncating
         B5 Barrier:        grid size = 566
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23664 1/cm
         B6 Barrier:        grid size = 315
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1435 1/cm
         B7 Barrier:        grid size = 283
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4636 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16736 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.21225, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 386
      MasterEquation::Barrier::truncate: real weight = 3.90256e+41
      MasterEquation::Barrier::truncate: effective weight = 1.77814e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 386
      MasterEquation::Barrier::truncate: real weight = 1.17909e+40
      MasterEquation::Barrier::truncate: effective weight = 5.32744e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5664  -5664 2.09e+09 1.28e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -64 2.52e+15
         B2    136 4.56e+14
         B3  -4664 1.22e+14
         B4  -5664 1.49e+14
         B5  -5664 1.67e+13
         B6   1436 1.86e+15
         B7   4636 2.04e+14
         B8  16736 7.72e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.61e-09  3.06e-09  2.43e-13  4.54e-15   2.3e-34  1.22e-06   0.00788  4.29e+11
          R   6.2e+08         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1  3.27e+08     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  4.11e+12  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3   2.2e+14  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  4.35e+33  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  8.17e+05   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6       127  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7  2.33e-12  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.88e+08  3.57e+08  2.83e+04       529  2.68e-17  1.43e+11  9.17e+14  4.99e+28
          R  5.32e-09         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1   2.8e-09     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  3.53e-05  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3   0.00189  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  3.73e+16  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  7.01e-12   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6  1.09e-15  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7     2e-29  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.22571, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+08
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.310055, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19495.4      3535.12      946.281      1151.93      129.467      14439.9      1581.45      5.98242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65114, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.67643, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.6626e-06   1.6626e-06  5.98704e-07
      low eigenvalue method done, cpu time[sec] = 1.67752, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-06  5.99e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-07  5.99e-07         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.98704e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.60137e-27  5.83862e-28  1.68674e-29  1.35487e-28  3.72895e-30  1.87866e-30  1.19453e-35   2.6186e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05133, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+08
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.302582, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.58493, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6498.46      1178.37      315.427      383.976      43.1555      4813.32      527.149      1.99414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60623, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002318, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61522, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.57117e-07  8.57117e-07  2.63581e-07
      low eigenvalue method done, cpu time[sec] = 1.61632, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.57e-07  2.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.64e-08  2.64e-07         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.63581e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.58737e-28  2.22381e-28   6.1679e-30  4.14051e-29  1.23177e-30  1.67342e-30  1.20398e-35  2.61766e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.50702e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.297701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.56021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3899.08      707.023      189.256      230.385      25.8933      2887.99       316.29      1.19648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62065, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00233, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62988, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    6.123e-07    6.123e-07  1.68856e-07
      low eigenvalue method done, cpu time[sec] = 1.63097, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.12e-07  1.69e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.42e-08  1.69e-07         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.68856e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.99733e-28  1.32207e-28  3.70435e-30  2.30454e-29  7.10601e-31  1.46192e-30  1.21387e-35  2.61776e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03564, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.10983e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.300537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.58819, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2785.06      505.017      135.183      164.561      18.4952      2062.85      225.921     0.854632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59399, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002329, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.85219e-07  4.85219e-07  1.22981e-07
      low eigenvalue method done, cpu time[sec] = 1.60415, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.85e-07  1.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.27e-08  1.23e-07         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22981e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.69908e-28  9.15939e-29  2.60226e-30  1.54358e-29  4.87181e-31  1.29218e-30  1.22398e-35  2.61772e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.71263e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.300346, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2166.15      392.791      105.142      127.992      14.3852      1604.44      175.716     0.664714
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.595, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002347, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60397, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.05439e-07  4.05439e-07  9.58351e-08
      low eigenvalue method done, cpu time[sec] = 1.60543, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.05e-07  9.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.56e-08  9.58e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.58351e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91465e-28  6.87624e-29  1.97988e-30  1.13479e-29  3.64369e-31  1.15636e-30  1.23409e-35   2.6177e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05372, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.299122, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6104, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1949.54      353.512      94.6281      115.193      12.9467      1443.99      158.145     0.598242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58362, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002338, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.59249, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.75462e-07  3.75462e-07    8.604e-08
      low eigenvalue method done, cpu time[sec] = 1.59358, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.75e-07   8.6e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.29e-08   8.6e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.604e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62826e-28  6.07806e-29  1.76106e-30  9.95268e-30  3.21862e-31  1.09836e-30   1.2391e-35  2.61774e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         4.52106e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.300129, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60063, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1299.69      235.674      63.0854      76.7951      8.63111      962.663       105.43     0.398828
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58553, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002333, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.59443, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.77085e-07  2.77085e-07  5.57949e-08
      low eigenvalue method done, cpu time[sec] = 1.59551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-07  5.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.41e-08  5.58e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.57949e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.73107e-28  3.71498e-29  1.10601e-30    5.932e-30  1.97102e-31   8.7658e-31    1.263e-35  2.61789e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04711, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         6.02808e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.299707, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60863, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            974.769      176.756      47.3141      57.5963      6.47333      721.997      79.0724     0.299121
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.57809, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.58746, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21616e-07  2.21616e-07  4.03108e-08
      low eigenvalue method done, cpu time[sec] = 1.58856, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-07  4.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-08  4.03e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.03108e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26298e-28  2.57629e-29  7.83805e-31  4.05775e-30  1.37379e-31  7.27245e-31  1.28413e-35  2.61802e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04486, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1          7.5351e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.29954, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60767, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            779.815      141.405      37.8512      46.0771      5.17866      577.598      63.2579     0.239297
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.57862, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002338, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.58765, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85554e-07  1.85554e-07  3.10071e-08
      low eigenvalue method done, cpu time[sec] = 1.58909, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07   3.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-08   3.1e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.10071e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.78244e-29  1.92122e-29  5.95026e-31  3.00012e-30  1.03029e-31  6.19563e-31  1.30189e-35  2.61816e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04306, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+09
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.299985, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61559, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            649.846      117.837      31.5427      38.3976      4.31555      481.332      52.7149     0.199414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58652, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002337, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.59557, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60053e-07  1.60053e-07  2.48564e-08
      low eigenvalue method done, cpu time[sec] = 1.59671, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  2.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-08  2.49e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.48564e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.88328e-29  1.50251e-29  4.72421e-31  2.33264e-30  8.10273e-32  5.38125e-31  1.31617e-35  2.61829e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06001, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.05491e+10
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.298469, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60643, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            557.011      101.003      27.0366      32.9122      3.69905       412.57      45.1842     0.170926
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.57732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.58622, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40985e-07  1.40985e-07  2.05212e-08
      low eigenvalue method done, cpu time[sec] = 1.58733, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-07  2.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-08  2.05e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.05212e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.53553e-29  1.21536e-29  3.87148e-31  1.87899e-30  6.58917e-32  4.74347e-31  1.32709e-35  2.61841e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04218, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.20562e+10
      global relaxation matrix dimension = 386
      setting global matrices ... done, cpu time[sec] = 0.295926, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60744, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            487.385      88.3779       23.657      28.7982      3.23667      360.999      39.5362     0.149561
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5706, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57918, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26144e-07  1.26144e-07  1.73213e-08
      low eigenvalue method done, cpu time[sec] = 1.58028, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-07  1.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-08  1.73e-08         1
         *Z       ---       ---  2.67e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.73213e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.53528e-29  1.00821e-29  3.24861e-31  1.55392e-30   5.4935e-32  4.23046e-31  1.33489e-35  2.61854e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0346, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 590 K
      Energy reference = 33214 1/cm
      Energy step      = 102 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007766
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.366541
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.204188
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.17383
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.973106
         W1 Well: minimal relaxation eigenvalue = 0.0780004
         W1 Well: maximal relaxation eigenvalue = 0.978318
         W1 Well:       grid size = 381
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5647 1/cm
         B1 Barrier:        grid size = 326
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 324
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 371
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4627 1/cm
         B4 Barrier:        grid size = 387
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6260 1/cm
         B5 Barrier: nonpositive number of states at -23600 1/cm => truncating
         B5 Barrier:        grid size = 557
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23599 1/cm
         B6 Barrier:        grid size = 311
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 280
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4654 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16792 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.07976, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 1.89606e+41
      MasterEquation::Barrier::truncate: effective weight = 8.81184e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 5.65163e+39
      MasterEquation::Barrier::truncate: effective weight = 2.60946e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5647  -5647  2.1e+09 1.34e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38  2.7e+15
         B2    166 4.94e+14
         B3  -4627 1.33e+14
         B4  -5647 1.61e+14
         B5  -5647 1.82e+13
         B6   1493 2.02e+15
         B7   4655 2.23e+14
         B8  16792 8.77e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.13e-09  2.13e-09  2.08e-13  4.15e-15  4.53e-34  8.09e-07   0.00458  1.52e+11
          R  8.84e+08         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1  4.69e+08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  4.81e+12  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3  2.41e+14  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  2.21e+33   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5  1.24e+06    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6       218  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7  6.58e-12  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.83e+07   9.1e+07  8.86e+03       177  1.93e-17  3.45e+10  1.96e+14  6.48e+27
          R  2.07e-08         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1   1.1e-08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  0.000113  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3   0.00565  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  5.17e+16   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5   2.9e-11    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6  5.11e-15  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7  1.54e-28  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.09321, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.30193, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.4222, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20214.9      3700.31      994.382      1208.06      136.135      15107.2      1670.67      6.57185
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74226, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00232, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.77428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21069e-06  2.21069e-06  8.20006e-07
      low eigenvalue method done, cpu time[sec] = 1.77538, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.21e-06   8.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-07   8.2e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.20005e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.12451e-27  2.21243e-27  6.38179e-29  5.09167e-28  1.40519e-29  7.50533e-30   5.5003e-35  2.01171e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03113, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290864, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6738.3      1233.44      331.461      402.687      45.3784      5035.74      556.889      2.19062
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.67986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002307, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15313e-06  1.15313e-06  3.65748e-07
      low eigenvalue method done, cpu time[sec] = 1.71275, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-06  3.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-07  3.66e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.65748e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.93832e-27  8.52532e-28  2.36723e-29  1.57772e-28  4.70916e-30  6.71816e-30  5.54348e-35  2.01205e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.49024e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291555, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.4347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4042.98      740.062      198.876      241.612       27.227      3021.44      334.133      1.31437
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.67931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002319, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71104, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.27979e-07   8.2798e-07  2.35907e-07
      low eigenvalue method done, cpu time[sec] = 1.71214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.28e-07  2.36e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.33e-08  2.36e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.35907e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.94813e-27  5.09975e-28  1.43219e-29  8.84332e-29   2.7367e-30  5.89289e-30  5.58868e-35  2.01199e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.08634e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.292925, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44362, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2887.84      528.616      142.055       172.58      19.4479      2158.17      238.667     0.938836
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66507, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002283, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69711, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.58264e-07  6.58264e-07  1.72632e-07
      low eigenvalue method done, cpu time[sec] = 1.69822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.58e-07  1.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.79e-08  1.73e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.72632e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.44872e-27  3.54846e-28  1.01121e-29  5.95204e-29  1.88578e-30  5.22587e-30  5.63478e-35  2.01212e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96772, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.68243e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.293254, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44627, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2246.1      411.146      110.487      134.229      15.1261      1678.58       185.63     0.730206
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6672, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.51328e-07  5.51328e-07  1.35021e-07
      low eigenvalue method done, cpu time[sec] = 1.70021, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.51e-07  1.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.83e-08  1.35e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35021e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14561e-27  2.67289e-28  7.72374e-30  4.39207e-29   1.4159e-30  4.68959e-30  5.68085e-35  2.01211e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.293501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44047, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2021.49      370.031      99.4382      120.806      13.6135      1510.72      167.067     0.657185
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66465, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002321, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69674, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.1106e-07   5.1106e-07  1.21411e-07
      low eigenvalue method done, cpu time[sec] = 1.69783, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.11e-07  1.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.47e-08  1.21e-07         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21411e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03463e-27  2.36601e-28  6.88155e-30   3.8582e-29   1.2528e-30  4.45986e-30  5.70365e-35  2.01218e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96445, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         4.47072e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.292658, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43995, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1347.66      246.687      66.2921      80.5374      9.07568      1007.15      111.378     0.438123
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.67206, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002306, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.70389, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.78523e-07  3.78523e-07  7.92211e-08
      low eigenvalue method done, cpu time[sec] = 1.70498, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.79e-07  7.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.29e-08  7.92e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.92211e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.85597e-28  1.45436e-28  4.35037e-30  2.31396e-29  7.72222e-31  3.57774e-30  5.81244e-35  2.01228e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97521, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         5.96096e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.295375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44747, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1010.74      185.016      49.7191      60.4031      6.80676       755.36      83.5333     0.328593
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66432, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002277, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.03492e-07  3.03492e-07  5.74955e-08
      low eigenvalue method done, cpu time[sec] = 1.69755, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.03e-07  5.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-08  5.75e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.74955e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.02442e-28  1.01278e-28  3.09781e-30  1.59005e-29  5.40803e-31  2.98017e-30  5.90869e-35  2.01238e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97831, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         7.45121e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.29498, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44409, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            808.596      148.012      39.7753      48.3224      5.44541      604.288      66.8267     0.262874
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6587, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002289, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69034, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.54573e-07  2.54573e-07  4.43841e-08
      low eigenvalue method done, cpu time[sec] = 1.69143, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.55e-07  4.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.19e-08  4.44e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.43841e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.90543e-28   7.5774e-29  2.36062e-30  1.17982e-29  4.07108e-31  2.54728e-30  5.98974e-35  2.01248e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96694, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.29527, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.45408, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             673.83      123.344      33.1461      40.2687      4.53784      503.574      55.6889     0.219062
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002303, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.68291, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19905e-07  2.19905e-07  3.56854e-08
      low eigenvalue method done, cpu time[sec] = 1.68402, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-07  3.57e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.89e-08  3.57e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.56854e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15643e-28  5.94207e-29  1.88008e-30  9.20037e-30  3.21163e-31  2.21867e-30  6.05508e-35  2.01257e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96963, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.04317e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.295005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44217, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            577.569      105.723      28.4109       34.516      3.88958      431.634      47.7333     0.187767
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69484, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.93935e-07  1.93935e-07   2.9536e-08
      low eigenvalue method done, cpu time[sec] = 1.69625, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.94e-07  2.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-08  2.95e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.9536e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62332e-28  4.81756e-29  1.54484e-30  7.42968e-30  2.61861e-31  1.96049e-30  6.10531e-35  2.01267e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96819, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.19219e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.294857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.46387, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            505.372      92.5078      24.8595      30.2015      3.40338       377.68      41.7667     0.164296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.67677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.73693e-07  1.73693e-07  2.49854e-08
      low eigenvalue method done, cpu time[sec] = 1.67785, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-07   2.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-08   2.5e-08         1
         *Z       ---       ---  1.64e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49854e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22666e-28  4.00449e-29   1.2993e-30  6.15771e-30   2.1882e-31  1.75225e-30  6.14155e-35  2.01276e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97127, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 600 K
      Energy reference = 33492 1/cm
      Energy step      = 103 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007422
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.379859
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.20112
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.202317
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.986806
         W1 Well: minimal relaxation eigenvalue = 0.0775179
         W1 Well: maximal relaxation eigenvalue = 0.980072
         W1 Well:       grid size = 381
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5751 1/cm
         B1 Barrier:        grid size = 326
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -86 1/cm
         B2 Barrier:        grid size = 324
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 120 1/cm
         B3 Barrier:        grid size = 370
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4618 1/cm
         B4 Barrier:        grid size = 386
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6266 1/cm
         B5 Barrier: nonpositive number of states at -23261 1/cm => truncating
         B5 Barrier:        grid size = 551
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23261 1/cm
         B6 Barrier:        grid size = 311
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1458 1/cm
         B7 Barrier:        grid size = 280
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4651 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16806 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.1305, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 9.45391e+40
      MasterEquation::Barrier::truncate: effective weight = 4.43674e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 381
      MasterEquation::Barrier::truncate: real weight = 2.79014e+39
      MasterEquation::Barrier::truncate: effective weight = 1.30349e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5751  -5751 2.03e+09  1.4e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -86 2.89e+15
         B2    121 5.34e+14
         B3  -4618 1.44e+14
         B4  -5751 1.75e+14
         B5  -5751 1.97e+13
         B6   1459 2.18e+15
         B7   4652 2.43e+14
         B8  16806 9.95e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.04e-09  1.94e-09   2.3e-13  4.91e-15  1.13e-33  6.99e-07    0.0035  7.19e+10
          R  9.65e+08         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  5.15e+08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2  4.35e+12  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3  2.04e+14  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4  8.87e+32  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  1.43e+06   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6       285  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  1.39e-11  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.3e+07  2.43e+07  2.88e+03      61.5  1.41e-17  8.75e+09  4.39e+13     9e+26
          R   7.7e-08         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  4.11e-08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2  0.000347  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3    0.0163  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4  7.08e+16  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  1.14e-10   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6  2.28e-14  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  1.11e-27  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.14414, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.299208, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.41963, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20950.5      3871.19      1044.31      1266.22      143.062      15795.8      1763.64      7.20786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.73976, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002478, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.77217, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2931e-06   2.2931e-06  8.68657e-07
      low eigenvalue method done, cpu time[sec] = 1.77331, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.29e-06  8.69e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.07e-07  8.69e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.68656e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.23824e-26  8.01978e-27  2.30799e-28   1.8296e-27  5.06262e-29  2.85745e-29  2.40888e-34  1.44421e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+08
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.290151, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43406, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6983.51       1290.4      348.104      422.073      47.6873      5265.25      587.881      2.40262
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.67019, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002313, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.70214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.20856e-06  1.20856e-06  3.92276e-07
      low eigenvalue method done, cpu time[sec] = 1.70325, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-06  3.92e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-07  3.92e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92276e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08674e-26  3.12385e-27  8.67973e-29  5.74491e-28  1.72026e-29  2.57091e-29   2.4277e-34  1.44428e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95894, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.47394e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.291931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4190.11      774.238      208.863      253.244      28.6124      3159.15      352.729      1.44157
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002305, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.71691e-07  8.71692e-07  2.54677e-07
      low eigenvalue method done, cpu time[sec] = 1.69951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.72e-07  2.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.67e-08  2.55e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.54677e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.25131e-27  1.87962e-27  5.28865e-29  3.24204e-28  1.00683e-29  2.26438e-29  2.44738e-34  1.44418e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.06352e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.293303, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43747, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2992.93      553.027      149.188      180.889      20.4374      2256.54      251.949      1.02969
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66494, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00229, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69671, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.95004e-07  6.95004e-07  1.87222e-07
      low eigenvalue method done, cpu time[sec] = 1.69782, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.95e-07  1.87e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.08e-08  1.87e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.87222e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.41658e-27  1.31327e-27  3.75251e-29  2.19234e-28  6.97188e-30  2.01471e-29  2.46742e-34  1.44427e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96292, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.65309e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.2927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.46088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2327.84      430.132      116.035      140.691      15.8958      1755.08       195.96     0.800873
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64767, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002303, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6797, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.83313e-07  5.83313e-07  1.46952e-07
      low eigenvalue method done, cpu time[sec] = 1.68095, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.83e-07  1.47e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-08  1.47e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46952e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.29821e-27  9.92414e-28  2.87711e-29  1.62361e-28  5.25454e-30  1.81295e-29  2.48742e-34  1.44429e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96829, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.293498, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.43798, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2095.05      387.119      104.431      126.622      14.3062      1579.58      176.364     0.720786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66497, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002297, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69705, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.41173e-07  5.41173e-07   1.3234e-07
      low eigenvalue method done, cpu time[sec] = 1.69815, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.41e-07  1.32e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.71e-08  1.32e-07         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.3234e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.88761e-27  8.79689e-28  2.56755e-29  1.42846e-28  4.65678e-30  1.72626e-29  2.49731e-34  1.44429e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96974, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         4.42182e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.294833, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.45631, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1396.7      258.079      69.6209      84.4147      9.53747      1053.05      117.576     0.480524
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65279, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.68476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.02116e-07  4.02116e-07  8.68726e-08
      low eigenvalue method done, cpu time[sec] = 1.68582, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.02e-07  8.69e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.48e-08  8.69e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.68726e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.59139e-27  5.43703e-28  1.63357e-29  8.61944e-29  2.88874e-30   1.3919e-29  2.54448e-34  1.44437e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97514, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         5.89576e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.295184, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.46684, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1047.53       193.56      52.2157       63.311       7.1531      789.788      88.1822     0.360393
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64817, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002294, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.68016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.23113e-07  3.23113e-07   6.3327e-08
      low eigenvalue method done, cpu time[sec] = 1.68125, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.23e-07  6.33e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.78e-08  6.33e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3327e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90736e-27  3.80147e-28  1.16869e-29   5.9492e-29  2.03246e-30  1.16401e-29  2.58618e-34  1.44443e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.98276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1          7.3697e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.296946, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.47474, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            838.021      154.848      41.7725      50.6488      5.72248       631.83      70.5457     0.288314
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64274, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002288, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6747, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.71472e-07  2.71472e-07  4.90565e-08
      low eigenvalue method done, cpu time[sec] = 1.67583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.71e-07  4.91e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.33e-08  4.91e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.90565e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.48768e-27  2.85327e-28  8.93869e-30  4.42977e-29  1.53563e-30  9.98165e-30  2.62132e-34   1.4445e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99132, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+09
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.295204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.44912, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            698.351       129.04      34.8104      42.2073      4.76873      526.525      58.7881     0.240262
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65705, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.68921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.34805e-07  2.34805e-07  3.95561e-08
      low eigenvalue method done, cpu time[sec] = 1.69028, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.35e-07  3.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.01e-08  3.96e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.95561e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.2058e-27   2.2434e-28   7.1409e-30  3.46437e-29  1.21512e-30  8.71793e-30  2.64971e-34  1.44458e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97058, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.03176e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.294939, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.45176, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            598.587      110.605      29.8375      36.1777      4.08749      451.307      50.3898     0.205939
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002282, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.68458, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07293e-07  2.07293e-07  3.28205e-08
      low eigenvalue method done, cpu time[sec] = 1.68569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-07  3.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-08  3.28e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.28205e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00459e-27  1.82296e-28  5.88291e-30   2.8045e-29  9.93319e-31  7.72194e-30  2.67161e-34  1.44465e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97083, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.17915e+10
      global relaxation matrix dimension = 381
      setting global matrices ... done, cpu time[sec] = 0.295159, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.4707, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            523.763      96.7798      26.1078      31.6555      3.57655      394.894      44.0911     0.180197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.63485, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002282, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66664, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85823e-07  1.85823e-07  2.78236e-08
      low eigenvalue method done, cpu time[sec] = 1.66771, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07  2.78e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-08  2.78e-08         1
         *Z       ---       ---  1.16e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.78236e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.54503e-28  1.51827e-28  4.95916e-30  2.32935e-29  8.31924e-31  6.91639e-30  2.68751e-34  1.44472e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97172, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 610 K
      Energy reference = 33770 1/cm
      Energy step      = 105 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008254
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.3687
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.196697
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.178076
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.956539
         W1 Well: minimal relaxation eigenvalue = 0.077036
         W1 Well: maximal relaxation eigenvalue = 0.979447
         W1 Well:       grid size = 377
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5815 1/cm
         B1 Barrier:        grid size = 322
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -40 1/cm
         B2 Barrier:        grid size = 320
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 170 1/cm
         B3 Barrier:        grid size = 366
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 381
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6234 1/cm
         B5 Barrier: nonpositive number of states at -23245 1/cm => truncating
         B5 Barrier:        grid size = 543
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23245 1/cm
         B6 Barrier:        grid size = 308
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1429 1/cm
         B7 Barrier:        grid size = 277
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4684 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16760 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.06496, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 377
      MasterEquation::Barrier::truncate: real weight = 4.83137e+40
      MasterEquation::Barrier::truncate: effective weight = 2.3114e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 377
      MasterEquation::Barrier::truncate: real weight = 1.41612e+39
      MasterEquation::Barrier::truncate: effective weight = 6.75281e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5815  -5815 1.99e+09 1.47e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -40  3.1e+15
         B2    171 5.78e+14
         B3  -4660 1.56e+14
         B4  -5815 1.89e+14
         B5  -5815 2.14e+13
         B6   1430 2.36e+15
         B7   4685 2.65e+14
         B8  16760 1.13e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.68e-10  1.62e-09  2.31e-13  5.27e-15  2.48e-33  5.53e-07   0.00246  3.18e+10
          R  1.15e+09         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1  6.18e+08     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2  4.32e+12  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3   1.9e+14  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  4.03e+32  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5  1.81e+06   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6       406  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  3.15e-11  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.64e+06  6.79e+06       971      22.1  1.04e-17  2.32e+09  1.03e+13  1.33e+26
          R  2.75e-07         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1  1.47e-07     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2   0.00103  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3    0.0452  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  9.59e+16  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5  4.31e-10   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6  9.67e-14  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  7.49e-27  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.07891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+08
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.295826, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.31112, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21702.5       4047.8      1096.12      1326.45      150.254        16506      1860.48      7.89403
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.82281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.85424, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.57066e-06  2.57066e-06  9.95824e-07
      low eigenvalue method done, cpu time[sec] = 1.85534, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-06  9.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-07  9.96e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.95823e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.82981e-26  2.78056e-26  7.99306e-28  6.29607e-27  1.74673e-28  1.04595e-28  1.00301e-33  9.71467e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.98691, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+08
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.287119, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.31969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7234.16      1349.27      365.374       442.15      50.0846         5502       620.16      2.63134
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.75293, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78422, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.36917e-06  1.36917e-06  4.55306e-07
      low eigenvalue method done, cpu time[sec] = 1.7853, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-06  4.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-07  4.55e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55306e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.84698e-26  1.09519e-26   3.0471e-28  2.00313e-27  6.01719e-29   9.4375e-29  1.01079e-33  9.71421e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9166, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1          1.4581e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.287327, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32941, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4340.5      809.559      219.224       265.29      30.0508       3301.2      372.096      1.57881
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74599, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.77725, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.92085e-07  9.92086e-07   2.9752e-07
      low eigenvalue method done, cpu time[sec] = 1.77831, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.92e-07  2.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.69e-08  2.98e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.9752e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.5831e-26  6.62882e-27  1.86966e-28  1.13805e-27  3.54649e-29  8.33857e-29  1.01891e-33  9.71423e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91436, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.04133e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286163, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.3254, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3100.36      578.257      156.589      189.493      21.4648         2358      265.783      1.12772
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7534, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78433, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.93322e-07  7.93322e-07  2.19709e-07
      low eigenvalue method done, cpu time[sec] = 1.78544, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.93e-07   2.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.91e-08   2.2e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.19709e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.93805e-26  4.65072e-27  1.33304e-28  7.73158e-28  2.46772e-29  7.43976e-29  1.02717e-33  9.71444e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91556, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.62457e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.286683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32915, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2411.39      449.755      121.791      147.383      16.6949         1834       206.72     0.877115
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74948, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78089, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.67259e-07  6.67259e-07  1.73056e-07
      low eigenvalue method done, cpu time[sec] = 1.78197, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.67e-07  1.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.79e-08  1.73e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.73056e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54317e-26  3.52578e-27   1.0259e-28   5.7464e-28  1.86682e-29  6.71091e-29  1.03541e-33  9.71465e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.287389, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2170.25       404.78      109.612      132.645      15.0254       1650.6      186.048     0.789403
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.77723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.19603e-07  6.19603e-07  1.56083e-07
      low eigenvalue method done, cpu time[sec] = 1.77832, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.2e-07  1.56e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.37e-08  1.56e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56083e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39781e-26  3.12961e-27  9.16982e-29  5.06342e-28  1.65708e-29  6.39701e-29  1.03948e-33  9.71487e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91445, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         4.37429e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.28585, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32212, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1446.83      269.853      73.0748      88.4301      10.0169       1100.4      124.032     0.526269
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.75304, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002226, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78433, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.61922e-07  4.61922e-07  1.03067e-07
      low eigenvalue method done, cpu time[sec] = 1.7854, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.62e-07  1.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-08  1.03e-07         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03067e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.37179e-27  1.94489e-27  5.87106e-29  3.07372e-28  1.03441e-29  5.18201e-29  1.05889e-33  9.71525e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90472, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         5.83238e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.287241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.33786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1085.12       202.39      54.8061      66.3225      7.51269        825.3       93.024     0.394702
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74343, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7752, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.72008e-07  3.72008e-07  7.54594e-08
      low eigenvalue method done, cpu time[sec] = 1.7763, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-07  7.55e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.19e-08  7.55e-08         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.54594e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.92754e-27  1.36529e-27  4.21967e-29  2.13082e-28  7.31141e-30  4.34958e-29  1.07606e-33  9.71573e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91948, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         7.29048e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.28622, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37278, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              868.1      161.912      43.8449       53.058      6.01015       660.24      74.4192     0.315761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7503, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.13083e-07  3.13083e-07  5.86564e-08
      low eigenvalue method done, cpu time[sec] = 1.75135, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.13e-07  5.87e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.67e-08  5.87e-08         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.86564e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.42158e-27  1.02801e-27  3.23921e-29  1.59211e-28  5.54419e-30  3.74127e-29  1.09056e-33  9.71623e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92882, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+09
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.28648, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32722, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            723.416      134.927      36.5374       44.215      5.00846        550.2       62.016     0.263134
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.74721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.77873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.71158e-07  2.71158e-07   4.7432e-08
      low eigenvalue method done, cpu time[sec] = 1.77985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.71e-07  4.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-08  4.74e-08         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.74319e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.40668e-27  8.10406e-28  2.59554e-29  1.24869e-28  4.40021e-30  3.27616e-29  1.10231e-33   9.7167e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90821, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.02067e+10
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.284589, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.33869, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            620.071      115.651      31.3178      37.8986      4.29297        471.6      53.1566     0.225544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.73647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002259, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.76828, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39651e-07  2.39651e-07  3.94512e-08
      low eigenvalue method done, cpu time[sec] = 1.76938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-07  3.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.03e-08  3.95e-08         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.94512e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.68017e-27  6.60004e-28  2.14381e-29  1.01331e-28  3.60622e-30  2.90852e-29  1.11142e-33  9.71717e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90773, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.16648e+10
      global relaxation matrix dimension = 377
      setting global matrices ... done, cpu time[sec] = 0.283824, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.33923, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            542.562      101.195      27.4031      33.1613      3.75635       412.65       46.512     0.197351
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.73312, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002255, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.76443, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15028e-07  2.15028e-07  3.35159e-08
      low eigenvalue method done, cpu time[sec] = 1.76551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.15e-07  3.35e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-08  3.35e-08         1
         *Z       ---       ---  7.93e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.35159e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.13692e-27  5.50771e-28  1.81125e-29   8.4342e-29  3.02702e-30  2.61041e-29  1.11809e-33  9.71764e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90734, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 620 K
      Energy reference = 34048 1/cm
      Energy step      = 107 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007786
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.352959
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.196305
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.196565
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.929462
         W1 Well: minimal relaxation eigenvalue = 0.0765659
         W1 Well: maximal relaxation eigenvalue = 0.978842
         W1 Well:       grid size = 373
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5862 1/cm
         B1 Barrier:        grid size = 319
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -84 1/cm
         B2 Barrier:        grid size = 317
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 129 1/cm
         B3 Barrier:        grid size = 362
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4685 1/cm
         B4 Barrier:        grid size = 376
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6183 1/cm
         B5 Barrier: nonpositive number of states at -23197 1/cm => truncating
         B5 Barrier:        grid size = 535
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23197 1/cm
         B6 Barrier:        grid size = 305
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1413 1/cm
         B7 Barrier:        grid size = 275
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4623 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16714 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.03673, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 373
      MasterEquation::Barrier::truncate: real weight = 2.52758e+40
      MasterEquation::Barrier::truncate: effective weight = 1.23227e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 373
      MasterEquation::Barrier::truncate: real weight = 7.37695e+38
      MasterEquation::Barrier::truncate: effective weight = 3.58783e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5862  -5862 1.96e+09 1.53e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -84 3.31e+15
         B2    130 6.24e+14
         B3  -4685  1.7e+14
         B4  -5862 2.05e+14
         B5  -5862 2.33e+13
         B6   1414 2.54e+15
         B7   4624 2.89e+14
         B8  16714 1.27e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.06e-10  1.31e-09  2.25e-13  5.45e-15  5.15e-33  4.26e-07   0.00169   1.4e+10
          R  1.42e+09         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  7.63e+08     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2  4.45e+12  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3  1.83e+14   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  1.94e+32  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  2.35e+06   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6       590  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  7.17e-11  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.07e+06  1.97e+06       339      8.22  7.77e-18  6.42e+08  2.55e+12   2.1e+25
          R  9.39e-07         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  5.06e-07     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2   0.00295  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3     0.122   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  1.29e+17  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  1.56e-09   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6  3.92e-13  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  4.75e-26  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.05091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+08
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.290953, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.18546, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22470.8      4230.28      1149.86       1388.8      157.718      17238.3      1961.28      8.63356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91839, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96807e-06  2.96807e-06  1.17505e-06
      low eigenvalue method done, cpu time[sec] = 1.95014, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.97e-06  1.18e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.66e-07  1.18e-06         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17505e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62912e-25   9.2649e-26  2.65788e-27   2.0809e-26  5.78759e-28  3.66432e-28  4.00533e-33  6.14216e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+08
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.278365, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.20769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7490.27      1410.09      383.285      462.934      52.5726      5746.09       653.76      2.87785
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.84211, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00223, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.87319, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.59679e-06  1.59679e-06   5.4361e-07
      low eigenvalue method done, cpu time[sec] = 1.87428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-06  5.44e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.41e-07  5.44e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.4361e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30652e-25  3.68679e-26  1.02659e-27  6.70467e-27  2.02018e-28  3.31745e-28  4.03639e-33  6.14249e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87023, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.44268e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.280148, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2049, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4494.16      846.057      229.971       277.76      31.5435      3447.65      392.256      1.72671
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.84346, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002225, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.87461, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16217e-06  1.16217e-06  3.57444e-07
      low eigenvalue method done, cpu time[sec] = 1.8757, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-06  3.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-07  3.57e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.57444e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.82629e-26  2.24402e-26  6.34189e-28  3.83401e-27  1.19878e-28  2.94084e-28  4.06876e-33  6.14251e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.01976e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.280742, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.21103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3210.12      604.326      164.265        198.4      22.5311      2462.61      280.183      1.23337
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.83782, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002197, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.86897, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.31988e-07  9.31988e-07  2.65116e-07
      low eigenvalue method done, cpu time[sec] = 1.87038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.32e-07  2.65e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.1e-08  2.65e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.65116e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.65056e-26  1.58063e-26  4.54303e-28  2.61647e-27  8.38072e-29  2.63124e-28  4.10163e-33  6.14273e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86961, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.59683e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.280542, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2102, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2496.76      470.032      127.762      154.311      17.5242      1915.36       217.92     0.959284
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.83689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002209, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.86768, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.85532e-07  7.85532e-07  2.09532e-07
      low eigenvalue method done, cpu time[sec] = 1.86871, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.86e-07   2.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.8e-08   2.1e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.09532e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.31315e-26  1.20201e-26  3.50903e-28  1.95144e-27  6.36304e-29  2.37921e-28  4.13437e-33  6.14277e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86816, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.279895, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2114, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2247.08      423.028      114.986       138.88      15.7718      1723.83      196.128     0.863356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.83825, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002199, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.86934, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.30061e-07  7.30061e-07  1.89256e-07
      low eigenvalue method done, cpu time[sec] = 1.87043, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.3e-07  1.89e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.31e-08  1.89e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89256e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.81953e-26  1.06837e-26  3.14137e-28  1.72206e-27  5.65694e-29  2.27041e-28  4.15052e-33  6.14284e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         4.32805e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.283088, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.22287, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1498.05      282.019       76.657      92.5868      10.5145      1149.22      130.752     0.575571
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.83142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0022, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.86198, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.46048e-07  5.46048e-07  1.25695e-07
      low eigenvalue method done, cpu time[sec] = 1.86307, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.46e-07  1.26e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.68e-08  1.26e-07         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25695e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24966e-26   6.6745e-27   2.0237e-28  1.05152e-27  3.55298e-29  1.84768e-28   4.2274e-33  6.14318e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88362, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         5.77074e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.283406, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.22694, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1123.54      211.514      57.4928      69.4401      7.88588      861.914       98.064     0.431678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.81652, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.84749, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.40743e-07  4.40743e-07  9.24163e-08
      low eigenvalue method done, cpu time[sec] = 1.84856, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.41e-07  9.24e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-08  9.24e-08         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.24163e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.41215e-26  4.70369e-27  1.46105e-28  7.32081e-28  2.52259e-29  1.55651e-28  4.29526e-33  6.14348e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87331, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         7.21342e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.2828, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2285, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            898.833      169.211      45.9942      55.5521      6.30871      689.531      78.4512     0.345342
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.82212, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.85316, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71554e-07  3.71554e-07   7.2079e-08
      low eigenvalue method done, cpu time[sec] = 1.85424, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-07  7.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.16e-08  7.21e-08         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.2079e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89404e-26  3.55264e-27  1.12557e-28  5.48852e-28  1.91966e-29  1.34286e-28   4.3525e-33  6.14377e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87756, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+09
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.286081, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            749.027      141.009      38.3285      46.2934      5.25726      574.609       65.376     0.287785
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.81728, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8481, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.22229e-07  3.22229e-07  5.84487e-08
      low eigenvalue method done, cpu time[sec] = 1.8492, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.22e-07  5.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.73e-08  5.84e-08         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.84487e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54371e-26  2.80784e-27  9.04583e-29  4.31673e-28  1.52804e-29  1.17895e-28  4.39888e-33  6.14406e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.00988e+10
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.283193, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23794, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            642.023      120.865       32.853      39.6801      4.50622      492.522      56.0366     0.246673
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.81119, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002213, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.84192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.85101e-07  2.85101e-07  4.87303e-08
      low eigenvalue method done, cpu time[sec] = 1.84301, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.85e-07  4.87e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.41e-08  4.87e-08         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.87303e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29224e-26  2.29176e-27  7.49037e-29  3.51142e-28  1.25546e-29    1.049e-28  4.43488e-33  6.14436e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87919, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.15415e+10
      global relaxation matrix dimension = 373
      setting global matrices ... done, cpu time[sec] = 0.283173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23388, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             561.77      105.757      28.7464      34.7201      3.94294      430.957       49.032     0.215839
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.81243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00223, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8429, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56046e-07  2.56046e-07  4.14852e-08
      low eigenvalue method done, cpu time[sec] = 1.84398, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.56e-07  4.15e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-08  4.15e-08         1
         *Z       ---       ---  5.41e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.14852e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10376e-26  1.91614e-27  6.34239e-29  2.92879e-28  1.05613e-29  9.43369e-29   4.4613e-33  6.14466e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87564, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 630 K
      Energy reference = 34326 1/cm
      Energy step      = 109 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007097
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.352839
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.189547
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.176399
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.915431
         W1 Well: minimal relaxation eigenvalue = 0.0760727
         W1 Well: maximal relaxation eigenvalue = 0.978317
         W1 Well:       grid size = 370
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6004 1/cm
         B1 Barrier:        grid size = 315
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -9 1/cm
         B2 Barrier:        grid size = 313
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 209 1/cm
         B3 Barrier:        grid size = 358
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4696 1/cm
         B4 Barrier:        grid size = 372
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23117 1/cm => truncating
         B5 Barrier:        grid size = 527
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23117 1/cm
         B6 Barrier:        grid size = 302
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1408 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4677 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16777 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.99103, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 370
      MasterEquation::Barrier::truncate: real weight = 1.35216e+40
      MasterEquation::Barrier::truncate: effective weight = 6.71535e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 370
      MasterEquation::Barrier::truncate: real weight = 3.93818e+38
      MasterEquation::Barrier::truncate: effective weight = 1.95275e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6004  -6004 1.87e+09  1.6e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -9 3.55e+15
         B2    210 6.74e+14
         B3  -4696 1.84e+14
         B4  -6004 2.22e+14
         B5  -6004 2.52e+13
         B6   1409 2.74e+15
         B7   4678 3.15e+14
         B8  16777 1.44e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.93e-10  1.28e-09  2.62e-13  6.74e-15  1.25e-32  3.96e-07   0.00141  7.52e+09
          R  1.44e+09         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  7.83e+08     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2  3.82e+12  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3  1.48e+14  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4     8e+31  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5  2.53e+06   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6       709  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  1.33e-10  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.24e+05  5.97e+05       122      3.15  5.84e-18  1.85e+08  6.59e+11  3.52e+24
          R  3.09e-06         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  1.67e-06     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2   0.00818  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3     0.317  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4  1.71e+17  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5   5.4e-09   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6  1.52e-12  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  2.84e-25  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.005, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+08
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.284624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08389, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23255.6      4418.79      1205.56      1453.32       165.46      17992.9      2066.15      9.42887
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02734, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.86265e-06  2.86266e-06  1.15097e-06
      low eigenvalue method done, cpu time[sec] = 2.02844, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.86e-06  1.15e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-07  1.15e-06         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.15097e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.48561e-25  2.96553e-25  8.49771e-27  6.61346e-26  1.84397e-27  1.23131e-27  1.52126e-32  3.66235e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90775, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+08
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.27619, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08946, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7751.87      1472.93      401.853      484.441      55.1534      5997.64      688.716      3.14296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002143, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96299, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5544e-06   1.5544e-06  5.38689e-07
      low eigenvalue method done, cpu time[sec] = 1.96547, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-06  5.39e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-07  5.39e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.38688e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.2641e-25  1.19238e-25  3.32467e-27  2.15747e-26  6.52026e-28    1.119e-27  1.53294e-32  3.66252e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83379, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.42769e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279044, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09528, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4651.12      883.758      241.112      290.665       33.092      3598.59       413.23      1.88577
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92495, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.13595e-06  1.13595e-06  3.56386e-07
      low eigenvalue method done, cpu time[sec] = 1.9563, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.14e-06  3.56e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.85e-08  3.56e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.56385e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.89783e-25  7.29822e-26  2.06755e-27  1.24164e-26  3.89499e-28  9.95355e-28   1.5451e-32  3.66262e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.99876e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.280354, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09267, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3322.23      631.256      172.223      207.618      23.6372      2570.42      295.164      1.34698
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92608, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002166, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.13356e-07  9.13356e-07  2.65467e-07
      low eigenvalue method done, cpu time[sec] = 1.95756, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.13e-07  2.65e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.88e-08  2.65e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.65467e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.19265e-25  5.16095e-26  1.48795e-27  8.51098e-27  2.73559e-28  8.93102e-28  1.55743e-32  3.66265e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83863, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.56984e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.27892, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09771, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2583.96      490.977      133.951       161.48      18.3845      1999.21      229.572      1.04765
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9249, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002175, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95487, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.7131e-07  7.71311e-07  2.10509e-07
      low eigenvalue method done, cpu time[sec] = 1.95595, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.71e-07  2.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.62e-08  2.11e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.10509e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.75742e-25  3.93677e-26   1.1534e-27  6.36946e-27  2.08441e-28  8.09517e-28  1.56971e-32  3.66271e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83911, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.277807, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2325.56      441.879      120.556      145.332       16.546      1799.29      206.615     0.942887
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00217, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95186, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.17414e-07  7.17414e-07   1.9041e-07
      low eigenvalue method done, cpu time[sec] = 1.95335, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.17e-07   1.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.15e-08   1.9e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.9041e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.59638e-25  3.50368e-26  1.03413e-27  5.62899e-27  1.85593e-28  7.73337e-28  1.57577e-32  3.66274e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84042, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         4.28306e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.280854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09095, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1550.37      294.586      80.3707      96.8882      11.0307      1199.53      137.743     0.628591
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92415, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95402, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.38199e-07  5.38199e-07  1.27178e-07
      low eigenvalue method done, cpu time[sec] = 1.9551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.38e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.58e-08  1.27e-07         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27178e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08237e-25  2.20035e-26  6.70225e-28  3.45701e-27   1.1727e-28  6.32232e-28   1.6046e-32  3.66293e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83627, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         5.71075e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279863, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1162.78       220.94       60.278      72.6661      8.27301      899.647      103.307     0.471444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9164, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94656, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.35301e-07  4.35301e-07  9.38962e-08
      low eigenvalue method done, cpu time[sec] = 1.94764, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.35e-07  9.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.69e-08  9.39e-08         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.38962e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.06705e-26  1.55663e-26  4.86028e-28  2.41699e-27  8.36282e-29  5.34517e-28  1.63009e-32  3.66311e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         7.13844e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279597, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10283, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            930.225      176.752      48.2224      58.1329      6.61841      719.717       82.646     0.377155
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91453, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94462, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67533e-07  3.67533e-07  7.34752e-08
      low eigenvalue method done, cpu time[sec] = 1.94571, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.68e-07  7.35e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.1e-08  7.35e-08         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.34752e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.35489e-26   1.1793e-26  3.75744e-28  1.81811e-27  6.38624e-29  4.62515e-28  1.65165e-32  3.66328e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83539, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279882, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09831, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            775.187      147.293      40.1853      48.4441      5.51534      599.764      68.8716     0.314296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002177, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94939, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19133e-07  3.19133e-07  5.97442e-08
      low eigenvalue method done, cpu time[sec] = 1.95086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-07  5.97e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.69e-08  5.97e-08         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.97442e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.19347e-26  9.34433e-27   3.0285e-28   1.4339e-27  5.09814e-29  4.07088e-28   1.6692e-32  3.66346e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83835, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         9.99382e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.27994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10038, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            664.446      126.251      34.4446      41.5235      4.72743      514.084      59.0328     0.269396
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91442, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002177, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.82647e-07  2.82647e-07  4.99272e-08
      low eigenvalue method done, cpu time[sec] = 1.94566, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.83e-07  4.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-08  4.99e-08         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.99272e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.3575e-26  7.64344e-27  2.51398e-28  1.16915e-27  4.19906e-29  3.63021e-28   1.6829e-32  3.66364e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83466, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.14215e+10
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.278978, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.1124, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            581.391       110.47       30.139      36.3331      4.13651      449.823      51.6537     0.235722
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.90572, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002164, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.93572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.54059e-07  2.54059e-07  4.25912e-08
      low eigenvalue method done, cpu time[sec] = 1.93676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.54e-07  4.26e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-08  4.26e-08         1
         *Z       ---       ---  4.09e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.25912e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.72943e-26  6.40279e-27  2.13331e-28  9.77163e-28  3.53999e-29  3.27106e-28  1.69306e-32  3.66381e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8381, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 640 K
      Energy reference = 34604 1/cm
      Energy step      = 110 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008416
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.353869
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.191018
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.198583
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.916012
         W1 Well: minimal relaxation eigenvalue = 0.0756178
         W1 Well: maximal relaxation eigenvalue = 0.979987
         W1 Well:       grid size = 370
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6096 1/cm
         B1 Barrier:        grid size = 315
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -46 1/cm
         B2 Barrier:        grid size = 313
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 357
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4666 1/cm
         B4 Barrier:        grid size = 371
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6206 1/cm
         B5 Barrier: nonpositive number of states at -23586 1/cm => truncating
         B5 Barrier:        grid size = 529
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23586 1/cm
         B6 Barrier:        grid size = 301
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1493 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4684 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16783 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.01457, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 370
      MasterEquation::Barrier::truncate: real weight = 7.38883e+39
      MasterEquation::Barrier::truncate: effective weight = 3.70325e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 370
      MasterEquation::Barrier::truncate: real weight = 2.15158e+38
      MasterEquation::Barrier::truncate: effective weight = 1.07717e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6096  -6096 1.81e+09 1.67e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -46 3.79e+15
         B2    174 7.28e+14
         B3  -4666 1.99e+14
         B4  -6096  2.4e+14
         B5  -6096 2.74e+13
         B6   1494 2.96e+15
         B7   4684 3.43e+14
         B8  16784 1.62e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.23e-10  1.14e-09  2.78e-13  7.59e-15   2.7e-32  3.38e-07   0.00108  3.79e+09
          R   1.6e+09         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  8.74e+08     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2   3.6e+12  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3  1.32e+14  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4   3.7e+31  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5  2.96e+06   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6       925  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  2.64e-10  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.02e+05  1.88e+05      45.6      1.25  4.43e-18  5.54e+07  1.77e+11  6.22e+23
          R  9.79e-06         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  5.33e-06     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2     0.022  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3     0.803  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4  2.26e+17  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5   1.8e-08   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6  5.64e-12  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  1.61e-24  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.02799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+08
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.285647, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.07942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24057.1      4613.43      1263.28      1520.06      173.489      18770.3      2175.19      10.2823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002328, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99014, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.02939e-06   3.0294e-06  1.23938e-06
      low eigenvalue method done, cpu time[sec] = 1.99124, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.03e-06  1.24e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-07  1.24e-06         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.23937e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.6372e-24  9.13673e-25  2.61657e-26  2.02437e-25  5.65835e-27   3.9778e-27  5.55715e-32  2.06447e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88699, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+08
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.280042, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10318, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8019.02      1537.81      421.095      506.687      57.8295      6256.78      725.065      3.42742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95156, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96001, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.66042e-06  1.66042e-06  5.86719e-07
      low eigenvalue method done, cpu time[sec] = 1.9611, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-06  5.87e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-07  5.87e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.86719e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3397e-24  3.71184e-25  1.03669e-26  6.68499e-26  2.02635e-27  3.62939e-27  5.59963e-32  2.06447e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84909, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.41309e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.278081, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12016, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4811.41      922.686      252.657      304.012      34.6977      3754.07      435.039      2.05645
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93636, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94481, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2185e-06   1.2185e-06  3.90497e-07
      low eigenvalue method done, cpu time[sec] = 1.94592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-06   3.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-07   3.9e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.90497e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.15744e-25  2.28448e-25  6.48907e-27  3.87143e-26   1.2184e-27  3.23941e-27  5.64378e-32  2.06451e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85478, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.97832e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.280176, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09571, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3436.72      659.062      180.469      217.152      24.7841      2681.48      310.742      1.46889
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95311, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002157, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.82361e-07  9.82362e-07  2.92099e-07
      low eigenvalue method done, cpu time[sec] = 1.96315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.82e-07  2.92e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.43e-08  2.92e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.92099e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.95731e-25  1.62176e-25  4.69113e-27  2.66528e-26  8.59609e-28  2.91482e-27  5.68852e-32  2.06456e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84622, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.54356e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.277216, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2673.01      512.603      140.365      168.896      19.2765      2085.59      241.688      1.14247
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94279, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002145, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95111, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.31222e-07  8.31222e-07  2.32383e-07
      low eigenvalue method done, cpu time[sec] = 1.95219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.31e-07  2.32e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.1e-08  2.32e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.32383e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.59407e-25  1.24082e-25   3.6491e-27  2.00134e-26   6.5728e-28  2.64833e-27  5.73299e-32   2.0646e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85403, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.278087, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10767, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2405.71      461.343      126.328      152.006      17.3489      1877.03      217.519      1.02823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94708, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002146, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.95549, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.73771e-07  7.73772e-07  2.10488e-07
      low eigenvalue method done, cpu time[sec] = 1.95658, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.74e-07   2.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.6e-08   2.1e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.10488e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.08838e-25  1.10575e-25  3.27665e-27  1.77122e-26  5.86108e-28  2.53267e-27  5.75492e-32  2.06463e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84868, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         4.23927e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279023, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12586, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1603.8      307.562       84.219      101.337      11.5659      1251.36      145.013     0.685484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94004, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82273e-07  5.82273e-07  1.41368e-07
      low eigenvalue method done, cpu time[sec] = 1.94113, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-07  1.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.93e-08  1.41e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.41368e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.46873e-25  6.98003e-26  2.13621e-27  1.09396e-26  3.72532e-28  2.07985e-27  5.85921e-32  2.06472e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85351, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         5.65236e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1202.85      230.672      63.1642      76.0031      8.67443      938.517       108.76     0.514113
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93457, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.94297, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.71948e-07  4.71948e-07  1.04799e-07
      low eigenvalue method done, cpu time[sec] = 1.94439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.72e-07  1.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-08  1.05e-07         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.04799e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.59563e-25  4.95674e-26  1.55584e-27  7.68022e-27  2.66814e-28  1.76457e-27  5.95135e-32  2.06482e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85472, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         7.06544e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.27881, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12884, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            962.282      184.537      50.5314      60.8024      6.93954      750.814      87.0078      0.41129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92841, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.93694, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.99115e-07  3.99115e-07   8.2272e-08
      low eigenvalue method done, cpu time[sec] = 1.93806, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.99e-07  8.23e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.35e-08  8.23e-08         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.2272e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05123e-25  3.76656e-26  1.20695e-27  5.79617e-27   2.0445e-28  1.53131e-27  6.02933e-32  2.06492e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85652, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.280199, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            801.902      153.781      42.1095      50.6687      5.78295      625.678      72.5065     0.342742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91875, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92672, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.46998e-07  3.46998e-07  6.70767e-08
      low eigenvalue method done, cpu time[sec] = 1.92779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-07  6.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.91e-08  6.71e-08         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.70767e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68078e-25  2.99196e-26  9.75581e-28  4.58374e-27  1.63677e-28  1.35114e-27   6.0929e-32  2.06502e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85847, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         9.89162e+09
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.278986, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14447, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            687.344      131.812      36.0938      43.4303      4.95682      536.295      62.1484     0.293779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9111, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002166, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.0765e-07   3.0765e-07  5.61837e-08
      low eigenvalue method done, cpu time[sec] = 1.92078, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.08e-07  5.62e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.57e-08  5.62e-08         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.61837e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41342e-25  2.45259e-26  8.11813e-28  3.74609e-27  1.35139e-28  1.20748e-27   6.1427e-32  2.06512e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85713, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.13047e+10
      global relaxation matrix dimension = 370
      setting global matrices ... done, cpu time[sec] = 0.279266, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14568, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            601.426      115.336      31.5821      38.0015      4.33721      469.259      54.3799     0.257057
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.91264, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002177, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92104, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7678e-07   2.7678e-07  4.80248e-08
      low eigenvalue method done, cpu time[sec] = 1.92255, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-07   4.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-08   4.8e-08         1
         *Z       ---       ---  2.99e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.80248e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21209e-25  2.05835e-26  6.90357e-28  3.13729e-27   1.1417e-28  1.09012e-27  6.17979e-32  2.06522e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86015, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 650 K
      Energy reference = 34882 1/cm
      Energy step      = 112 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007191
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.348075
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.186503
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.175139
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.888641
         W1 Well: minimal relaxation eigenvalue = 0.0751775
         W1 Well: maximal relaxation eigenvalue = 0.979398
         W1 Well:       grid size = 366
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6110 1/cm
         B1 Barrier:        grid size = 312
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -62 1/cm
         B2 Barrier:        grid size = 310
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 161 1/cm
         B3 Barrier:        grid size = 353
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4654 1/cm
         B4 Barrier:        grid size = 367
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23582 1/cm => truncating
         B5 Barrier:        grid size = 522
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23582 1/cm
         B6 Barrier:        grid size = 299
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1393 1/cm
         B7 Barrier:        grid size = 270
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4642 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16738 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.96012, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 366
      MasterEquation::Barrier::truncate: real weight = 4.12022e+39
      MasterEquation::Barrier::truncate: effective weight = 2.10259e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 366
      MasterEquation::Barrier::truncate: real weight = 1.20147e+38
      MasterEquation::Barrier::truncate: effective weight = 6.12599e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6110  -6110 1.81e+09 1.75e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -62 4.06e+15
         B2    162 7.85e+14
         B3  -4654 2.16e+14
         B4  -6110 2.59e+14
         B5  -6110 2.96e+13
         B6   1394 3.19e+15
         B7   4643 3.73e+14
         B8  16738 1.83e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.8e-10  8.77e-10  2.51e-13  7.27e-15  4.87e-32  2.48e-07  0.000714  1.67e+09
          R  2.08e+09         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1  1.14e+09     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2  3.98e+12  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3  1.38e+14   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  2.05e+31  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  4.04e+06   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6   1.4e+03  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7     6e-10  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.34e+04   6.1e+04      17.5     0.506  3.39e-18  1.72e+07  4.97e+10  1.16e+23
          R  2.99e-05         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1  1.64e-05     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2    0.0572  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3      1.98   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  2.95e+17  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  5.81e-08   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6  2.01e-11  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7  8.62e-24  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.97518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+08
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.278168, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9503, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24875.1      4814.35      1323.08      1589.07       181.81      19570.9      2288.52       11.197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0838, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.11349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.69929e-06  3.69929e-06  1.54534e-06
      low eigenvalue method done, cpu time[sec] = 2.11457, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-06  1.55e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-07  1.55e-06         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54534e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.90941e-24  2.71885e-24  7.77802e-26  5.98331e-25  1.67641e-26  1.24077e-26  1.95085e-31  1.10282e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+08
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.277054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.97399, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8291.71      1604.78      441.026      529.689      60.6032      6523.62       762.84      3.73232
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01661, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04611, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.04689e-06  2.04689e-06  7.39662e-07
      low eigenvalue method done, cpu time[sec] = 2.04718, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-06   7.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-07   7.4e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.39661e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.06066e-24  1.11544e-24  3.11964e-26  1.99937e-25  6.07808e-27   1.1357e-26  1.96571e-31  1.10285e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79018, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.39887e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.271844, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98029, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4975.03       962.87      264.616      317.814      36.3619      3914.17      457.704      2.23939
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01485, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04437, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50854e-06  1.50854e-06  4.95167e-07
      low eigenvalue method done, cpu time[sec] = 2.04548, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-06  4.95e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-07  4.95e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.95166e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79138e-24   6.9017e-25  1.96514e-26  1.16498e-25  3.67797e-27  1.01678e-26  1.98112e-31  1.10288e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78652, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.95842e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.270779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99312, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3553.59      687.765      189.011       227.01      25.9728      2795.84      326.932      1.59956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00425, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002096, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03378, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21957e-06  1.21957e-06  3.71911e-07
      low eigenvalue method done, cpu time[sec] = 2.03486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-06  3.72e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-07  3.72e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.71911e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.1292e-24  4.91798e-25  1.42694e-26  8.05442e-26  2.60638e-27  9.17287e-27  1.99672e-31   1.1029e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.51796e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.273577, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98344, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2763.9      534.928      147.009      176.563      20.2011      2174.54       254.28      1.24411
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00612, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002084, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03554, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03405e-06  1.03405e-06   2.9682e-07
      low eigenvalue method done, cpu time[sec] = 2.0366, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-06  2.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.82e-08  2.97e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.9682e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71732e-24  3.77383e-25  1.11378e-26  6.06791e-26  1.99974e-27  8.35294e-27  2.01221e-31  1.10292e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.273134, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98677, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2487.51      481.435      132.308      158.907       18.181      1957.09      228.852       1.1197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002103, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03271, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.63395e-07  9.63396e-07  2.69221e-07
      low eigenvalue method done, cpu time[sec] = 2.03385, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.63e-07  2.69e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.2e-08  2.69e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.69221e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.56416e-24  3.36727e-25  1.00157e-26  5.37774e-26  1.78581e-27  7.99625e-27  2.01984e-31  1.10293e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78841, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         4.19661e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.272739, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99167, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1658.34      320.957      88.2052      105.938      12.1206      1304.72      152.568     0.746463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00282, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00209, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03254, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.27306e-07  7.27307e-07  1.81795e-07
      low eigenvalue method done, cpu time[sec] = 2.03367, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.27e-07  1.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.15e-08  1.82e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81795e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07195e-24  2.13629e-25   6.5676e-27  3.33992e-26  1.14165e-27  6.59471e-27  2.05609e-31  1.10298e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         5.59548e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.273072, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99586, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1243.76      240.718      66.1539      79.4534      9.09048      978.543      114.426     0.559848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02198, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.90818e-07  5.90818e-07  1.35306e-07
      low eigenvalue method done, cpu time[sec] = 2.02306, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.91e-07  1.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.97e-08  1.35e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35306e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.05282e-25  1.52268e-25  4.80369e-27  2.35438e-26  8.21144e-28  5.61399e-27   2.0881e-31  1.10304e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78445, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         6.99435e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.273398, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98794, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            995.005      192.574      52.9231      63.5627      7.27239      782.834      91.5408     0.447878
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00259, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002093, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03252, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.00484e-07  5.00484e-07  1.06559e-07
      low eigenvalue method done, cpu time[sec] = 2.03362, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     5e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.2e-08  1.07e-07         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06559e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.3837e-25  1.16049e-25  3.73907e-27  1.78256e-26  6.31335e-28  4.88553e-27   2.1152e-31  1.10309e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78792, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.280443, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            829.171      160.478      44.1026      52.9689      6.06032      652.362       76.284     0.373232
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99056, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.35718e-07  4.35718e-07  8.71069e-08
      low eigenvalue method done, cpu time[sec] = 2.02152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-07  8.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.64e-08  8.71e-08         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.71069e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.24438e-25  9.24095e-26  3.03078e-27  1.41346e-26  5.06842e-28  4.32105e-27  2.13733e-31  1.10314e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         9.79209e+09
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.272063, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0123, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            710.718      137.553      37.8022      45.4019      5.19456      559.167      65.3863     0.319913
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00208, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.01136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.86742e-07  3.86742e-07  7.31259e-08
      low eigenvalue method done, cpu time[sec] = 2.01246, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.87e-07  7.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.22e-08  7.31e-08         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.31259e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.41999e-25  7.59102e-26  2.52807e-27   1.1578e-26  4.19474e-28  3.86975e-27  2.15471e-31   1.1032e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7929, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1          1.1191e+10
      global relaxation matrix dimension = 366
      setting global matrices ... done, cpu time[sec] = 0.27293, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99647, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            621.878      120.359       33.077      39.7267      4.54524      489.271       57.213     0.279924
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99494, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002099, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02448, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48266e-07  3.48266e-07  6.26302e-08
      low eigenvalue method done, cpu time[sec] = 2.02555, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.48e-07  6.26e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.9e-08  6.26e-08         1
         *Z       ---       ---  2.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.26301e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.79778e-25  6.38253e-26  2.15435e-27  9.71578e-27  3.55126e-28  3.50015e-27  2.16771e-31  1.10325e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7896, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 660 K
      Energy reference = 35160 1/cm
      Energy step      = 114 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007101
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.342359
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.182161
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.189993
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.873041
         W1 Well: minimal relaxation eigenvalue = 0.0747109
         W1 Well: maximal relaxation eigenvalue = 0.978892
         W1 Well:       grid size = 363
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6222 1/cm
         B1 Barrier:        grid size = 309
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -66 1/cm
         B2 Barrier:        grid size = 307
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 161 1/cm
         B3 Barrier:        grid size = 349
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4626 1/cm
         B4 Barrier:        grid size = 363
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6222 1/cm
         B5 Barrier: nonpositive number of states at -23664 1/cm => truncating
         B5 Barrier:        grid size = 516
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23664 1/cm
         B6 Barrier:        grid size = 296
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1415 1/cm
         B7 Barrier:        grid size = 268
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4607 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16805 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.94566, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 363
      MasterEquation::Barrier::truncate: real weight = 6.84942e+37
      MasterEquation::Barrier::truncate: effective weight = 3.55569e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6222  -6222 1.74e+09 1.82e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -66 4.33e+15
         B2    162 8.47e+14
         B3  -4626 2.33e+14
         B4  -6222  2.8e+14
         B5  -6222 3.21e+13
         B6   1416 3.44e+15
         B7   4608 4.06e+14
         B8  16806 2.05e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.46e-10  8.11e-10  2.73e-13  8.34e-15  1.03e-31  2.19e-07   0.00057  8.98e+08
          R  2.24e+09         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  1.23e+09      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2  3.66e+12  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3   1.2e+14  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4  9.69e+30  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5  4.57e+06   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6  1.75e+03  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  1.11e-09  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.13e+04  2.05e+04      6.91     0.211  2.62e-18  5.54e+06  1.45e+10  2.28e+22
          R  8.85e-05         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  4.87e-05      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2     0.145  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3      4.73  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4  3.82e+17  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5   1.8e-07   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6  6.92e-11  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  4.39e-23  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.95955, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+08
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.276631, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.91075, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              25710      5021.64      1384.99      1660.39      190.431      20394.8      2406.24      12.1771
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.12287, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002093, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.152, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.771e-06  3.77101e-06  1.59806e-06
      low eigenvalue method done, cpu time[sec] = 2.15306, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.77e-06   1.6e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-07   1.6e-06         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.59806e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2924e-23  7.81919e-24    2.235e-25  1.70977e-24  4.80171e-26  3.72935e-26  6.59563e-31  5.59956e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82709, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+08
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.27728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.91836, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8570.01      1673.88      461.663      553.464      63.4769      6798.27      802.079      4.05903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06176, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002022, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.09073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.10457e-06  2.10457e-06  7.73145e-07
      low eigenvalue method done, cpu time[sec] = 2.09179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.1e-06  7.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-07  7.73e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.73144e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18908e-23   3.2389e-24  9.07199e-26  5.77966e-25    1.762e-26  3.42734e-26  6.64576e-31  5.59952e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77787, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.38501e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.269152, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.91453, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5142.01      1004.33      276.998      332.078      38.0862      4078.96      481.248      2.43542
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.06349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.09234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.55706e-06  1.55706e-06  5.20535e-07
      low eigenvalue method done, cpu time[sec] = 2.09341, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.56e-06  5.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-07  5.21e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.20534e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.21919e-24   2.0145e-24   5.7502e-26  3.38781e-25  1.07287e-26  3.07861e-26  6.69768e-31  5.59958e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76254, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.93902e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.267841, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3672.86      717.377      197.856      237.199      27.2044      2913.55      343.748      1.73958
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.05405, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002033, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08296, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26196e-06  1.26196e-06  3.92529e-07
      low eigenvalue method done, cpu time[sec] = 2.08403, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-06  3.93e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-07  3.93e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92529e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.29384e-24  1.44077e-24  4.19343e-26    2.352e-25   7.6358e-27  2.78485e-26  6.75013e-31  5.59972e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76708, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.49302e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.268193, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9325, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2856.67       557.96      153.888      184.488       21.159      2266.09       267.36      1.35301
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.05043, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07938, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07198e-06  1.07198e-06   3.1425e-07
      low eigenvalue method done, cpu time[sec] = 2.08044, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-06  3.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.09e-08  3.14e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.14249e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.09176e-24  1.10877e-24  3.28409e-26  1.77761e-25  5.87816e-27   2.5417e-26  6.80213e-31  5.59982e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76903, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.270122, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93036, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2571      502.164      138.499      166.039      19.0431      2039.48      240.624      1.21771
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.05034, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07945, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.99506e-07  9.99507e-07  2.85411e-07
      low eigenvalue method done, cpu time[sec] = 2.08056, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-06  2.85e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.46e-08  2.85e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.85411e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.64371e-24  9.90545e-25  2.95744e-26  1.57759e-25  5.25685e-27  2.43565e-26  6.82773e-31  5.59987e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77144, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         4.15504e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.269628, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92369, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1714      334.776      92.3326      110.693      12.6954      1359.65      160.416     0.811806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04748, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002033, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.56781e-07  7.56781e-07  1.93751e-07
      low eigenvalue method done, cpu time[sec] = 2.07761, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.57e-07  1.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.36e-08  1.94e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93751e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.19898e-24  6.31532e-25  1.95031e-26   9.8513e-26  3.37973e-27  2.01735e-26   6.9492e-31  5.60013e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75944, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         5.54005e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.268662, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92064, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1285.5      251.082      69.2495      83.0196      9.52154      1019.74      120.312     0.608855
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.05109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08048, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.16009e-07  6.16009e-07  1.44768e-07
      low eigenvalue method done, cpu time[sec] = 2.08154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.16e-07  1.45e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-08  1.45e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44768e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.4124e-24  4.51779e-25  1.43246e-26  6.97217e-26  2.44105e-27  1.72311e-26   7.0563e-31  5.60041e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         6.92507e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.269325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.94709, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1028.4      200.865      55.3996      66.4157      7.61723      815.793      96.2495     0.487084
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03042, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002029, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05995, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.22626e-07  5.22626e-07  1.14365e-07
      low eigenvalue method done, cpu time[sec] = 2.06103, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.23e-07  1.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.36e-08  1.14e-07         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14365e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91822e-24  3.45316e-25  1.11868e-26  5.29554e-26    1.883e-27  1.50368e-26  7.14695e-31  5.60067e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7668, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.269746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.94111, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            857.001      167.388      46.1663      55.3464      6.34769      679.827      80.2079     0.405903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0345, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06407, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55554e-07  4.55554e-07  9.37305e-08
      low eigenvalue method done, cpu time[sec] = 2.06513, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-07  9.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.78e-08  9.37e-08         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.37305e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57989e-24  2.75641e-25  9.09271e-27  4.21009e-26  1.51585e-27   1.3331e-26  7.22101e-31  5.60094e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76568, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         9.69509e+09
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.270445, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93053, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            734.572      143.475      39.5711      47.4398      5.44088      582.709      68.7497     0.347917
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04612, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002031, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07553, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.04761e-07  4.04761e-07  7.88609e-08
      low eigenvalue method done, cpu time[sec] = 2.07658, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.05e-07  7.89e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.35e-08  7.89e-08         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.88609e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33444e-24  2.26896e-25   7.6024e-27  3.45635e-26   1.2575e-27  1.19634e-26  7.27929e-31  5.60121e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76436, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.10801e+10
      global relaxation matrix dimension = 363
      setting global matrices ... done, cpu time[sec] = 0.270269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.95102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            642.751      125.541      34.6247      41.5098      4.76077       509.87       60.156     0.304427
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05004, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.64808e-07  3.64808e-07  6.76732e-08
      low eigenvalue method done, cpu time[sec] = 2.05109, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.65e-07  6.77e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-08  6.77e-08         1
         *Z       ---       ---  1.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.76732e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14879e-24   1.9112e-25  6.49193e-27  2.90613e-26  1.06678e-27  1.08407e-26  7.32306e-31  5.60148e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75917, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 670 K
      Energy reference = 35438 1/cm
      Energy step      = 116 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007011
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.33723
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.181779
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.184845
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.846021
         W1 Well: minimal relaxation eigenvalue = 0.0742928
         W1 Well: maximal relaxation eigenvalue = 0.978332
         W1 Well:       grid size = 359
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6206 1/cm
         B1 Barrier:        grid size = 306
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -57 1/cm
         B2 Barrier:        grid size = 304
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 346
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4698 1/cm
         B4 Barrier:        grid size = 359
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6206 1/cm
         B5 Barrier: nonpositive number of states at -23606 1/cm => truncating
         B5 Barrier:        grid size = 509
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23606 1/cm
         B6 Barrier:        grid size = 293
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1449 1/cm
         B7 Barrier:        grid size = 265
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16762 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.90688, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 359
      MasterEquation::Barrier::truncate: real weight = 3.98214e+37
      MasterEquation::Barrier::truncate: effective weight = 2.10373e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6206  -6206 1.75e+09 1.91e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -57 4.63e+15
         B2    174 9.13e+14
         B3  -4698 2.53e+14
         B4  -6206 3.02e+14
         B5  -6206 3.47e+13
         B6   1450  3.7e+15
         B7   4699 4.41e+14
         B8  16762 2.31e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.28e-10  5.95e-10  2.34e-13  7.54e-15  1.69e-31  1.53e-07  0.000363   3.9e+08
          R  3.05e+09         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1  1.68e+09     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2  4.28e+12   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3  1.33e+14  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  5.91e+30  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5  6.52e+06   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  2.75e+03  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7  2.56e-09  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.94e+03  7.15e+03      2.81    0.0906  2.03e-18  1.84e+06  4.36e+09  4.69e+21
          R  0.000254         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1   0.00014     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2     0.356   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3        11  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  4.92e+17  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5  5.42e-07   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  2.29e-10  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7  2.13e-22  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
   MasterEquation::set:  done, cpu time[sec] = 1.92135, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270417, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26561.8      5235.46      1449.07      1734.08      199.359      21242.6      2528.45      13.2269
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07766, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111756, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.21766, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.81492e-06  4.81493e-06  2.08402e-06
      low eigenvalue method done, cpu time[sec] = 2.21873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.81e-06  2.08e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.23e-07  2.08e-06         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.08401e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.43023e-23  2.17683e-23  6.21679e-25  4.72979e-24  1.33139e-25  1.08198e-25  2.14442e-30  2.70723e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77808, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.26982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.80896, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8853.92      1745.15      483.022      578.028       66.453      7080.87      842.817      4.40898
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07395, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.062428, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.16445, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.71192e-06  2.71192e-06  1.01888e-06
      low eigenvalue method done, cpu time[sec] = 2.16553, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.71e-06  1.02e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-07  1.02e-06         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01888e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.3691e-23  9.10193e-24  2.55312e-25  1.61705e-24  4.94356e-26  9.98912e-26  2.16061e-30  2.70723e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72166, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.37151e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270371, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.8238, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5312.35      1047.09      289.813      346.817      39.8718      4248.52       505.69      2.64539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07799, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.049652, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15546, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0148e-06  2.01481e-06  6.89813e-07
      low eigenvalue method done, cpu time[sec] = 2.15654, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.01e-06   6.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-07   6.9e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.89812e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.34141e-23  5.69002e-24  1.62813e-25  9.53421e-25  3.02852e-26  9.00429e-26  2.17735e-30  2.70729e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72532, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.92011e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269274, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.82984, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3794.54      747.923       207.01      247.726      28.4799      3034.66      361.207      1.88956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04594, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14951, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63742e-06  1.63743e-06  5.22216e-07
      low eigenvalue method done, cpu time[sec] = 2.15058, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-06  5.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-07  5.22e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.22216e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79978e-23  4.08422e-24  1.19238e-25  6.64621e-25  2.16461e-26  8.16791e-26  2.19425e-30  2.70734e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72781, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.46871e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271499, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83318, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2951.31      581.718      161.007      192.676       22.151      2360.29      280.939      1.46966
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08486, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.030943, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14352, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39374e-06  1.39374e-06  4.19348e-07
      low eigenvalue method done, cpu time[sec] = 2.1452, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-06  4.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-07  4.19e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.19348e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46036e-23  3.15195e-24  9.36875e-26  5.03901e-25  1.67184e-26  7.47215e-26  2.21099e-30  2.70739e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72799, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.8296, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2656.18      523.546      144.907      173.408      19.9359      2124.26      252.845      1.32269
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07525, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.049265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15235, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30061e-06  1.30061e-06  3.81362e-07
      low eigenvalue method done, cpu time[sec] = 2.15341, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-06  3.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-07  3.81e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.81362e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33356e-23  2.81928e-24  8.44876e-26  4.47806e-25  1.49723e-26   7.1678e-26  2.21923e-30  2.70742e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72177, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         4.11452e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.266206, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83015, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1770.78      349.031      96.6045      115.606      13.2906      1416.17      168.563     0.881795
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08797, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.026175, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.87933e-07  9.87934e-07  2.60233e-07
      low eigenvalue method done, cpu time[sec] = 2.14341, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.88e-07   2.6e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.3e-08   2.6e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.60233e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.23345e-24  1.80617e-24  5.60268e-26  2.81133e-25   9.6797e-27  5.96244e-26  2.25829e-30  2.70754e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71809, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         5.48602e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271145, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.836, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1328.09      261.773      72.4534      86.7042      9.96795      1062.13      126.423     0.661346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08759, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.029733, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.05965e-07  8.05965e-07  1.95189e-07
      low eigenvalue method done, cpu time[sec] = 2.14612, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.06e-07  1.95e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.74e-08  1.95e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.95189e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.98928e-24  1.29671e-24  4.13191e-26  1.99752e-25  7.01992e-27  5.10988e-26  2.29274e-30  2.70767e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73048, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         6.85753e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271628, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83986, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1062.47      209.419      57.9627      69.3634      7.97436      849.704      101.138     0.529077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.024429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13799, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.84951e-07  6.84951e-07  1.54667e-07
      low eigenvalue method done, cpu time[sec] = 2.13936, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.85e-07  1.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.7e-08  1.55e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54667e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.57421e-24   9.9397e-25  3.23734e-26   1.5219e-25  5.43272e-27  4.47148e-26  2.32194e-30   2.7078e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.72851, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271228, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.85311, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            885.392      174.515      48.3022      57.8028       6.6453      708.087      84.2817     0.440898
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08895, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.012073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.1288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.97863e-07  5.97863e-07  1.27083e-07
      low eigenvalue method done, cpu time[sec] = 2.12986, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.98e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.96e-08  1.27e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27083e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.60249e-24  7.95301e-25  2.63844e-26  1.21309e-25  4.38523e-27  3.97354e-26  2.34586e-30  2.70793e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73111, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         9.60054e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.84641, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            758.908      149.585      41.4019      49.5453      5.69597      606.932      72.2415     0.377912
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08378, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.024461, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13624, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.31805e-07  5.31805e-07  1.07155e-07
      low eigenvalue method done, cpu time[sec] = 2.13727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.32e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.4e-08  1.07e-07         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07155e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8958e-24  6.55995e-25  2.21111e-26  9.98117e-26  3.64626e-27  3.57324e-26  2.36476e-30  2.70806e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73259, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1          1.0972e+10
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271759, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.95444, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            664.044      130.887      36.2267      43.3521      4.98397      531.065      63.2113     0.330673
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08491, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.014724, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12778, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.79775e-07  4.79775e-07  9.21285e-08
      low eigenvalue method done, cpu time[sec] = 2.12884, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-07  9.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-08  9.21e-08         1
         *Z       ---       ---  1.04e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.21284e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36008e-24   5.5355e-25  1.89197e-26  8.40851e-26  3.09952e-27  3.24383e-26  2.37904e-30  2.70819e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83231, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 680 K
      Energy reference = 35716 1/cm
      Energy step      = 117 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008121
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.347126
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.184443
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.188373
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.837627
         W1 Well: minimal relaxation eigenvalue = 0.0738633
         W1 Well: maximal relaxation eigenvalue = 0.979926
         W1 Well:       grid size = 359
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6286 1/cm
         B1 Barrier:        grid size = 306
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -85 1/cm
         B2 Barrier:        grid size = 304
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 148 1/cm
         B3 Barrier:        grid size = 345
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4648 1/cm
         B4 Barrier:        grid size = 359
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6286 1/cm
         B5 Barrier: nonpositive number of states at -23135 1/cm => truncating
         B5 Barrier:        grid size = 503
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23134 1/cm
         B6 Barrier:        grid size = 293
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1435 1/cm
         B7 Barrier:        grid size = 265
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4711 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16762 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.91807, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 359
      MasterEquation::Barrier::truncate: real weight = 2.35869e+37
      MasterEquation::Barrier::truncate: effective weight = 1.25698e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6286  -6286  1.7e+09 1.99e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -85 4.94e+15
         B2    149 9.83e+14
         B3  -4648 2.73e+14
         B4  -6286 3.26e+14
         B5  -6286 3.76e+13
         B6   1436 3.99e+15
         B7   4712 4.79e+14
         B8  16763 2.59e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.92e-10  5.28e-10  2.41e-13  8.19e-15  3.28e-31   1.3e-07  0.000281  2.08e+08
          R  3.42e+09         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1   1.9e+09     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2  4.15e+12  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3  1.22e+14  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  3.05e+30  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  7.67e+06   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  3.56e+03  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7   4.8e-09   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.42e+03  2.56e+03      1.17    0.0398  1.59e-18  6.34e+05  1.36e+09  1.01e+21
          R  0.000704         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1   0.00039     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2     0.853  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3      25.1  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  6.28e+17  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  1.58e-06   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  7.33e-10  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7  9.88e-22   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.93272, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.80979, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27430.5       5455.9      1515.36       1810.2      208.602      22114.5      2655.27      14.3499
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07214, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18211, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.16176e-06  5.16177e-06  2.26693e-06
      low eigenvalue method done, cpu time[sec] = 2.18317, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.16e-06  2.27e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.52e-07  2.27e-06         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26693e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74819e-22  5.87359e-23  1.67633e-24  1.26856e-23  3.57902e-25  3.05204e-25  6.74107e-30  1.24917e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.7632, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+08
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.269634, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.84129, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9143.49      1818.63      505.121      603.398      69.5339      7371.51      885.091      4.78329
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07423, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.066224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14804, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.93133e-06  2.93133e-06  1.11964e-06
      low eigenvalue method done, cpu time[sec] = 2.14912, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.93e-06  1.12e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.52e-07  1.12e-06         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11963e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.24913e-23  2.47839e-23  6.96313e-25  4.38497e-24  1.34424e-25  2.82561e-25  6.79177e-30  1.24922e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.73792, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.35833e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.85276, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5486.09      1091.18      303.072      362.039      41.7203      4422.91      531.055      2.86997
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0859, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.04444, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13792, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.18602e-06  2.18602e-06  7.62134e-07
      low eigenvalue method done, cpu time[sec] = 2.13895, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-06  7.62e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-07  7.62e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.62133e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.46159e-23  1.55706e-23  4.46676e-25  2.60021e-24  8.28414e-26  2.55405e-25  6.84413e-30  1.24924e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74143, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.90167e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.272261, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.83082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3918.64      779.414       216.48      258.599      29.8002      3159.22      379.325      2.04998
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08065, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.068834, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.15701, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.78095e-06  1.78095e-06  5.79164e-07
      low eigenvalue method done, cpu time[sec] = 2.15804, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.78e-06  5.79e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-07  5.79e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.79163e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.98523e-23  1.12158e-23  3.28479e-25   1.8198e-24  5.94558e-26  2.32228e-25  6.89688e-30  1.24926e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74029, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           2.445e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271953, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.86293, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3047.83      606.211      168.374      201.133       23.178      2457.17       295.03      1.59443
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.039481, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13383, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51868e-06  1.51868e-06  4.66457e-07
      low eigenvalue method done, cpu time[sec] = 2.13487, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-06  4.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.28e-07  4.66e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.66457e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.05679e-23  8.67953e-24   2.5892e-25  1.38399e-24   4.6068e-26  2.12881e-25  6.94908e-30  1.24929e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.272701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.85738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2743.05       545.59      151.536       181.02      20.8602      2211.45      265.527      1.43499
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.051203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13875, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41828e-06  1.41828e-06  4.24743e-07
      low eigenvalue method done, cpu time[sec] = 2.13979, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-06  4.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-07  4.25e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.24743e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.70914e-23  7.77268e-24  2.33814e-25  1.23155e-24  4.13133e-26  2.04399e-25  6.97475e-30   1.2493e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74975, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           4.075e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.270949, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.87377, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1828.7      363.727      101.024       120.68      13.9068       1474.3      177.018     0.956657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.056234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.14429, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08045e-06  1.08045e-06  2.91305e-07
      low eigenvalue method done, cpu time[sec] = 2.14537, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-06  2.91e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.04e-08  2.91e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.91305e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.58091e-23  5.00316e-24  1.55895e-25  7.77217e-25  2.68549e-26  1.70694e-25  7.09638e-30  1.24936e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77115, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         5.43333e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.27118, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.86044, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1371.52      272.795      75.7681      90.5098      10.4301      1105.73      132.764     0.717493
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0852, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.040616, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13334, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.83228e-07  8.83228e-07  2.19312e-07
      low eigenvalue method done, cpu time[sec] = 2.13439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.83e-07  2.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.35e-08  2.19e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.19312e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.9608e-23  3.60456e-24  1.15432e-25   5.5436e-25  1.95538e-26  1.46743e-25  7.20357e-30  1.24942e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74604, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         6.79166e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.272047, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.86367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1097.22      218.236      60.6145      72.4078      8.34406      884.582      106.211     0.573994
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08102, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.041803, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.13042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.51772e-07  7.51772e-07  1.74301e-07
      low eigenvalue method done, cpu time[sec] = 2.13144, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.52e-07  1.74e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.23e-08  1.74e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.74301e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.56839e-23  2.77074e-24  9.07283e-26  4.23656e-25  1.51809e-26  1.28743e-25  7.29447e-30  1.24948e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74692, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.27202, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.86775, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            914.349      181.863      50.5121      60.3398      6.95339      737.151      88.5091     0.478329
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08224, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.036583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12624, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.57001e-07  6.57001e-07   1.4357e-07
      low eigenvalue method done, cpu time[sec] = 2.12728, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.57e-07  1.44e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.43e-08  1.44e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4357e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29814e-23  2.22212e-24  7.41397e-26  3.38548e-25  1.22863e-26  1.14661e-25  7.36902e-30  1.24954e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74719, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         9.50833e+09
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.271899, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.85595, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            783.727      155.883      43.2961      51.7199      5.96005      631.844      75.8649     0.409996
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.045843, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.133, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.85012e-07  5.85012e-07  1.21315e-07
      low eigenvalue method done, cpu time[sec] = 2.13404, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.85e-07  1.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.82e-08  1.21e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21315e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10112e-23  1.83656e-24  6.22728e-26   2.7916e-25   1.0239e-26  1.03311e-25  7.42808e-30   1.2496e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74018, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.08667e+10
      global relaxation matrix dimension = 359
      setting global matrices ... done, cpu time[sec] = 0.272637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.86831, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            685.762      136.397      37.8841      45.2549      5.21504      552.864      66.3818     0.358746
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.08615, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.033329, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12684, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.28239e-07  5.28239e-07  1.04497e-07
      low eigenvalue method done, cpu time[sec] = 2.12789, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.28e-07  1.04e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.34e-08  1.04e-07         1
         *Z       ---       ---  7.83e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.04497e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.51448e-24  1.55247e-24  5.33906e-26  2.35622e-25  8.72101e-27  9.39503e-26  7.47289e-30  1.24966e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.74825, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 690 K
      Energy reference = 35995 1/cm
      Energy step      = 119 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008294
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.342506
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.179852
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.168268
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.835081
         W1 Well: minimal relaxation eigenvalue = 0.0734231
         W1 Well: maximal relaxation eigenvalue = 0.979435
         W1 Well:       grid size = 356
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6368 1/cm
         B1 Barrier:        grid size = 303
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -61 1/cm
         B2 Barrier:        grid size = 301
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 342
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4702 1/cm
         B4 Barrier:        grid size = 355
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6249 1/cm
         B5 Barrier: nonpositive number of states at -23267 1/cm => truncating
         B5 Barrier:        grid size = 498
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23266 1/cm
         B6 Barrier:        grid size = 290
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1485 1/cm
         B7 Barrier:        grid size = 263
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16717 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.38629, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 356
      MasterEquation::Barrier::truncate: real weight = 1.42502e+37
      MasterEquation::Barrier::truncate: effective weight = 7.72471e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6368  -6368 1.66e+09 2.08e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -61 5.28e+15
         B2    177 1.06e+15
         B3  -4702 2.95e+14
         B4  -6249 3.52e+14
         B5  -6368 4.07e+13
         B6   1486 4.29e+15
         B7   4699 5.19e+14
         B8  16718  2.9e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.59e-10  4.65e-10  2.46e-13  8.79e-15  6.16e-31   1.1e-07  0.000216  1.12e+08
          R  3.87e+09         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1  2.15e+09     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2  4.07e+12  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3  1.14e+14  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  1.62e+30   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5  9.08e+06   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  4.62e+03  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7  8.92e-09  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       527       948     0.501    0.0179  1.26e-18  2.25e+05  4.41e+08  2.28e+20
          R    0.0019         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1   0.00105     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2      1.99  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3      55.8  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  7.96e+17   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5  4.45e-06   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  2.27e-09  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7  4.38e-21  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
   MasterEquation::set:  done, cpu time[sec] = 2.4007, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+08
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.265731, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68338, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28318.5      5683.84      1584.12         1889      218.193      23013.5       2787.2      15.5526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03481, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.181097, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.24476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.52405e-06  5.52406e-06  2.46027e-06
      low eigenvalue method done, cpu time[sec] = 2.25992, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.52e-06  2.46e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.81e-07  2.46e-06         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.46026e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.61296e-22  1.53861e-22  4.38847e-24  3.30369e-23  9.34155e-25  8.35698e-25  2.04679e-29  5.51208e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70724, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+08
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.265485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68742, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9439.49      1894.61      528.041      629.666      72.7312      7671.16      929.066      5.18419
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03659, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.180397, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.24605, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.16256e-06  3.16256e-06  1.22734e-06
      low eigenvalue method done, cpu time[sec] = 2.25672, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.16e-06  1.23e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.71e-07  1.23e-06         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22734e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.46407e-22  6.55089e-23  1.84337e-24  1.15438e-23  3.54833e-25  7.75387e-25  2.06209e-29  5.51225e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.68782, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.34548e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.265699, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.71305, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5663.69      1136.77      316.824        377.8      43.6387      4602.69       557.44      3.11051
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0326, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.180981, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.24169, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.36722e-06  2.36722e-06  8.39896e-07
      low eigenvalue method done, cpu time[sec] = 2.24274, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.37e-06   8.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.01e-07   8.4e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.39895e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.73032e-22  4.13578e-23  1.18939e-24  6.88377e-24  2.19954e-25  7.02637e-25  2.07787e-29  5.51237e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70176, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.88367e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.266724, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.73069, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4045.5      811.977      226.303      269.857      31.1705      3287.64      398.171       2.2218
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04061, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.165236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23402, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.93326e-06  1.93326e-06  6.40644e-07
      low eigenvalue method done, cpu time[sec] = 2.23544, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.93e-06  6.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-07  6.41e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.40643e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33983e-22   2.9894e-23   8.7821e-25  4.83661e-24  1.58505e-25  6.40307e-25  2.09374e-29  5.51245e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.71118, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.42186e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.266717, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.81444, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3146.5      631.537      176.014      209.889      24.2437      2557.05      309.689      1.72806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03677, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167615, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.2321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65154e-06  1.65154e-06  5.17476e-07
      low eigenvalue method done, cpu time[sec] = 2.23315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.65e-06  5.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-07  5.17e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.17475e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.0934e-22  2.31967e-23  6.94417e-25   3.6895e-24  1.23202e-25  5.88111e-25  2.10944e-29  5.51256e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79343, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267293, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.72154, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2831.85      568.384      158.412        188.9      21.8193      2301.35       278.72      1.55526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04413, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.161669, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.54352e-06  1.54353e-06  4.71788e-07
      low eigenvalue method done, cpu time[sec] = 2.23506, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-06  4.72e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-07  4.72e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.71788e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00092e-22  2.07973e-23   6.2793e-25  3.28737e-24  1.10635e-25  5.65182e-25  2.11715e-29   5.5126e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70148, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         4.03644e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.266394, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.7241, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1887.9      378.922      105.608      125.933      14.5462      1534.23      185.813      1.03684
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.04065, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.162028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23069, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17925e-06  1.17925e-06  3.25181e-07
      low eigenvalue method done, cpu time[sec] = 2.23174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-06  3.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.82e-08  3.25e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25181e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.99861e-23  1.34493e-23  4.20911e-25  2.08532e-24  7.23017e-26  4.73783e-25  2.15369e-29  5.51287e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70046, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         5.38192e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.26696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.71037, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1415.92      284.192      79.2061      94.4499      10.9097      1150.67       139.36     0.777629
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.180687, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.24099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.65931e-07  9.65931e-07  2.45717e-07
      low eigenvalue method done, cpu time[sec] = 2.24446, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.66e-07  2.46e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     8e-08  2.46e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.45717e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.33624e-23  9.72312e-24  3.12888e-25  1.49302e-24  5.28523e-26   4.0854e-25   2.1859e-29  5.51313e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1          6.7274e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267207, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.72001, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1132.74      227.353      63.3649      75.5599      8.72774      920.539      111.488     0.622103
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03744, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.169202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.23434, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.23428e-07  8.23429e-07  1.95858e-07
      low eigenvalue method done, cpu time[sec] = 2.23538, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.23e-07  1.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.79e-08  1.96e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.95858e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.28059e-23  7.49456e-24  2.46698e-25  1.14444e-24  4.11612e-26  3.59334e-25  2.21325e-29  5.51339e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69929, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267263, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.72508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            943.949      189.461      52.8041      62.9666      7.27312      767.116      92.9066     0.518419
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03318, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.16822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.20512e-07  7.20512e-07  1.61721e-07
      low eigenvalue method done, cpu time[sec] = 2.22998, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.21e-07  1.62e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.93e-08  1.62e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61721e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.55151e-23  6.02442e-24  2.02117e-25  9.16826e-25  3.33996e-26  3.20727e-25  2.23573e-29  5.51365e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70108, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         9.41836e+09
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267864, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.73479, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            809.099      162.395      45.2606      53.9714       6.2341      657.528      79.6342     0.444359
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03515, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.161626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22406, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.42222e-07  6.42222e-07  1.36938e-07
      low eigenvalue method done, cpu time[sec] = 2.22508, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.42e-07  1.37e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.27e-08  1.37e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36938e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.0187e-23  4.98896e-24  1.70146e-25  7.57617e-25  2.78964e-26  2.89532e-25   2.2536e-29  5.51391e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.70695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.07638e+10
      global relaxation matrix dimension = 356
      setting global matrices ... done, cpu time[sec] = 0.267072, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.722, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            707.962      142.096       39.603       47.225      5.45484      575.337        69.68     0.388814
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02371, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.172, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.22312, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.80406e-07  5.80406e-07  1.18172e-07
      low eigenvalue method done, cpu time[sec] = 2.22447, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.8e-07  1.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.75e-08  1.18e-07         1
         *Z       ---       ---  5.91e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.18172e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.61309e-23  4.22455e-24  1.46163e-25   6.4066e-25   2.3807e-26  2.63747e-25  2.26723e-29  5.51417e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.69276, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 700 K
      Energy reference = 36273 1/cm
      Energy step      = 121 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007813
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.333756
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.177138
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.183706
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.805616
         W1 Well: minimal relaxation eigenvalue = 0.0729919
         W1 Well: maximal relaxation eigenvalue = 0.978959
         W1 Well:       grid size = 353
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6440 1/cm
         B1 Barrier:        grid size = 300
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -26 1/cm
         B2 Barrier:        grid size = 299
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 93 1/cm
         B3 Barrier:        grid size = 338
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4625 1/cm
         B4 Barrier:        grid size = 351
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23259 1/cm => truncating
         B5 Barrier:        grid size = 492
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23259 1/cm
         B6 Barrier:        grid size = 288
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1425 1/cm
         B7 Barrier:        grid size = 261
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4691 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16792 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.85868, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 353
      MasterEquation::Barrier::truncate: real weight = 8.73715e+36
      MasterEquation::Barrier::truncate: effective weight = 4.81613e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6440  -6440 1.62e+09 2.17e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -26 5.63e+15
         B2     94 1.14e+15
         B3  -4625 3.19e+14
         B4  -6198  3.8e+14
         B5  -6440 4.39e+13
         B6   1426 4.61e+15
         B7   4692 5.63e+14
         B8  16792 3.24e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.25e-10  4.03e-10  2.46e-13  9.22e-15  1.11e-30  9.16e-08  0.000165  6.01e+07
          R  4.45e+09         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1  2.48e+09     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2  4.07e+12       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3  1.09e+14  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4  8.97e+29  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5  1.09e+07   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  6.07e+03  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  1.66e-08  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       201       361      0.22   0.00825  9.97e-19   8.2e+04  1.47e+08  5.38e+19
          R   0.00497         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1   0.00277     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2      4.55       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3       121  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4     1e+18  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5  1.22e-05   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  6.79e-09  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  1.86e-20  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.87392, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+08
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.262329, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.63958, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29221.3         5918      1655.01      1970.11      228.088      23934.8      2923.58      16.8307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9895, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.177069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19489, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.0182e-06  6.01822e-06  2.71777e-06
      low eigenvalue method done, cpu time[sec] = 2.21046, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.02e-06  2.72e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-07  2.72e-06         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.71777e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18309e-21  3.91917e-22  1.11688e-23  8.36549e-23  2.37058e-24  2.21431e-24  6.01947e-29  2.33109e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.60326, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+08
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260097, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.65406, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9740.45      1972.67       551.67      656.703      76.0293      7978.28      974.527      5.61023
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98672, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.175926, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19076, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.47243e-06  3.47244e-06  1.36891e-06
      low eigenvalue method done, cpu time[sec] = 2.20635, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-06  1.37e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.96e-07  1.37e-06         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36891e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37835e-22  1.68292e-22  4.74258e-24  2.95383e-23  9.10339e-25  2.06233e-24   6.0642e-29  2.33116e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.60841, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.33294e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.261602, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66486, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5844.27       1183.6      331.002      394.022      45.6176      4786.97      584.716      3.36614
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98006, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.176756, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.60856e-06  2.60856e-06  9.41613e-07
      low eigenvalue method done, cpu time[sec] = 2.20053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.61e-06  9.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-07  9.42e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.41612e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50146e-22  1.06749e-22  3.07739e-24  1.77107e-23  5.67515e-25  1.87451e-24  6.11025e-29   2.3312e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.61512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.86611e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.260852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.6576, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4174.48      845.429       236.43      281.444       32.584      3419.26      417.654      2.40438
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.176661, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13543e-06  2.13544e-06  7.20843e-07
      low eigenvalue method done, cpu time[sec] = 2.20838, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.14e-06  7.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-07  7.21e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.20843e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.49795e-22  7.74189e-23  2.28125e-24  1.24913e-23  4.10593e-25  1.71243e-24  6.15653e-29  2.33124e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.62064, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.39928e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.261954, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66226, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3246.82      657.556       183.89      218.901      25.3431      2659.43      324.842      1.87008
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9836, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.176516, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.82748e-06  1.82749e-06  5.83909e-07
      low eigenvalue method done, cpu time[sec] = 2.20529, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.83e-06  5.84e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-07  5.84e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.83908e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.86249e-22  6.02328e-23  1.80937e-24  9.55692e-24  3.20126e-25  1.57611e-24  6.20226e-29  2.33128e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.62108, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.263024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66913, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2922.13        591.8      165.501      197.011      22.8088      2393.48      292.358      1.68307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.17641, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19303, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70923e-06  1.70923e-06  5.33005e-07
      low eigenvalue method done, cpu time[sec] = 2.20915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-06  5.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-07  5.33e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.33005e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62351e-22  5.40639e-23  1.63828e-24   8.5261e-24  2.87852e-25  1.51607e-24  6.22472e-29   2.3313e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.63516, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         3.99881e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.26203, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1948.09      394.533      110.334      131.341      15.2059      1595.66      194.905      1.12205
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99267, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.176603, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19787, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30957e-06  1.30957e-06  3.69161e-07
      low eigenvalue method done, cpu time[sec] = 2.21398, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-06  3.69e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-07  3.69e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.69161e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84313e-22  3.51214e-23  1.10391e-24  5.43577e-24  1.89102e-25  1.27586e-24  6.33105e-29  2.33142e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.6495, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         5.33174e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.26241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.68603, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1461.07        295.9      82.7505      98.5054      11.4044      1196.74      146.179     0.841534
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.17698, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.18959, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07481e-06  1.07481e-06  2.79953e-07
      low eigenvalue method done, cpu time[sec] = 2.20575, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-06   2.8e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.87e-08   2.8e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.79953e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41029e-22  2.54767e-23  8.23769e-25   3.9063e-24  1.38767e-25  1.10354e-24   6.4248e-29  2.33153e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.64609, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         6.66468e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.262245, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.67891, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1168.85       236.72      66.2004      78.8043      9.12352      957.393      116.943     0.673227
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98663, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.1772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.17645e-07  9.17645e-07  2.23789e-07
      low eigenvalue method done, cpu time[sec] = 2.20824, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.18e-07  2.24e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.54e-08  2.24e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.23789e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13449e-22  1.96904e-23  6.51499e-25  3.00314e-24  1.08403e-25  9.73091e-25  6.50448e-29  2.33164e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.64113, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.262901, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.66838, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            974.045      197.267       55.167      65.6703      7.60293      797.828      97.4527     0.561023
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98618, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.176904, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19163, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.0394e-07   8.0394e-07  1.85225e-07
      low eigenvalue method done, cpu time[sec] = 2.20784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.04e-07  1.85e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.58e-08  1.85e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.85225e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.43476e-23  1.58637e-23  5.35133e-25  2.41176e-24  8.81871e-26  8.70426e-25  6.57013e-29  2.33175e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.63227, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         9.33055e+09
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.262218, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.67969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            834.895      169.086       47.286      56.2888       6.5168      683.852      83.5308     0.480877
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98653, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.177018, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19236, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.17319e-07  7.17319e-07  1.57163e-07
      low eigenvalue method done, cpu time[sec] = 2.20853, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.17e-07  1.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.86e-08  1.57e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57163e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.03555e-23  1.31626e-23  4.51472e-25  1.99716e-24  7.38184e-26  7.87259e-25  6.62249e-29  2.33186e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.64142, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.06635e+10
      global relaxation matrix dimension = 353
      setting global matrices ... done, cpu time[sec] = 0.263353, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.72013, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            730.533       147.95      41.3752      49.2527       5.7022      598.371      73.0895     0.420767
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99036, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.177092, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.19581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.48842e-07  6.48843e-07   1.3587e-07
      low eigenvalue method done, cpu time[sec] = 2.21196, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.49e-07  1.36e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.29e-08  1.36e-07         1
         *Z       ---       ---  4.45e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.3587e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9682e-23  1.11648e-23   3.8858e-25  1.69196e-24  6.31183e-26  7.18364e-25  6.66266e-29  2.33197e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.68752, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 800 K
      Energy reference = 39053 1/cm
      Energy step      = 138 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -84.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008171
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.313169
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.160834
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.162437
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.709846
         W1 Well: minimal relaxation eigenvalue = 0.0689629
         W1 Well: maximal relaxation eigenvalue = 0.980535
         W1 Well:       grid size = 335
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7176 1/cm
         B1 Barrier:        grid size = 283
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = 0 1/cm
         B2 Barrier:        grid size = 282
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 136 1/cm
         B3 Barrier:        grid size = 317
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4693 1/cm
         B4 Barrier:        grid size = 328
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6210 1/cm
         B5 Barrier: nonpositive number of states at -23185 1/cm => truncating
         B5 Barrier:        grid size = 451
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23185 1/cm
         B6 Barrier:        grid size = 273
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1379 1/cm
         B7 Barrier:        grid size = 249
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4691 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16697 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.70235, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 335
      MasterEquation::Barrier::truncate: real weight = 1.42288e+35
      MasterEquation::Barrier::truncate: effective weight = 8.94665e+31
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7176  -7176 1.26e+09 3.29e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1      0 1.05e+16
         B2    137 2.33e+15
         B3  -4693 6.72e+14
         B4  -6210 7.87e+14
         B5  -7176 9.31e+13
         B6   1380 9.29e+15
         B7   4691 1.23e+15
         B8  16697 9.38e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.56e-11  1.15e-10  2.35e-13  1.35e-14   1.8e-28  1.79e-08   1.5e-05  2.73e+05
          R  1.52e+10         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1  8.71e+09     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2  4.25e+12       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  7.41e+13  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  5.55e+27  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5  5.57e+07   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6  6.66e+04  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  3.66e-06   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1    0.0498     0.087  0.000178  1.02e-05  1.37e-19      13.6  1.14e+04  2.07e+14
          R      20.1         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1      11.5     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2  5.61e+03       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  9.77e+04  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  7.32e+18  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5    0.0735   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6  8.79e-05  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  4.83e-15   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
   MasterEquation::set:  done, cpu time[sec] = 1.71648, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+08
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.237115, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.19792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            39205.5      8668.73      2502.86       2931.4      346.809      34588.7      4577.83      34.9462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71405, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.157641, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89838, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.26102e-05  1.26103e-05  6.37654e-06
      low eigenvalue method done, cpu time[sec] = 1.91235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-05  6.38e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-06  6.38e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.37649e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.81609e-18  1.18069e-18  3.36839e-20  2.40856e-19  6.96513e-21  9.73345e-21  6.49211e-25   5.7726e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.78789, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+08
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.237993, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20226, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13068.5      2889.58      834.286      977.134      115.603      11529.6      1525.94      11.6487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71816, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.156467, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.79577e-06  7.79579e-06  3.50048e-06
      low eigenvalue method done, cpu time[sec] = 1.91438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-06   3.5e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.4e-07   3.5e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50047e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.23302e-18  5.48475e-19  1.57602e-20  9.34282e-20  2.95005e-21  9.29351e-21  6.53782e-25  5.77273e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.79322, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          1.2221e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.237244, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20296, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7841.1      1733.75      500.571       586.28      69.3618      6917.75      915.566      6.98923
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15689, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89859, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.05011e-06  6.05012e-06  2.52119e-06
      low eigenvalue method done, cpu time[sec] = 1.91259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.05e-06  2.52e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.92e-07  2.52e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.52118e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.64746e-18  3.63167e-19  1.07582e-20  5.88422e-20  1.93547e-21  8.64797e-21  6.58413e-25  5.77283e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.79241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         1.71094e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.237399, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.19815, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5600.78      1238.39      357.551      418.772      49.5442      4941.25      653.976      4.99231
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71982, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.158017, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90343, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.0613e-06  5.06131e-06  1.99374e-06
      low eigenvalue method done, cpu time[sec] = 1.91738, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.06e-06  1.99e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.09e-07  1.99e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.99373e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.32112e-18  2.71553e-19  8.26264e-21  4.29541e-20  1.45117e-21  8.06001e-21  6.63011e-25  5.77293e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.78818, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         2.19978e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.237515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20192, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4356.17      963.193      278.095      325.711      38.5343      3843.19      508.648      3.88291
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72148, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.157594, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.40256e-06  4.40256e-06  1.65647e-06
      low eigenvalue method done, cpu time[sec] = 1.92005, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.4e-06  1.66e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.54e-07  1.66e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65646e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1081e-18  2.16398e-19   6.7365e-21  3.37548e-20  1.16323e-21  7.54772e-21  6.67515e-25  5.77303e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.80065, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.23917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3920.55      866.873      250.286       293.14      34.6809      3458.87      457.783      3.49462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72019, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.158241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90495, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.14597e-06  4.14598e-06  1.52864e-06
      low eigenvalue method done, cpu time[sec] = 1.91992, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.15e-06  1.53e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.33e-07  1.53e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52864e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02643e-18  1.96255e-19  6.17205e-21  3.04617e-20  1.05847e-21  7.31726e-21  6.69718e-25  5.77309e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.80949, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         3.66629e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.238304, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.20021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2613.7      577.916      166.857      195.427      23.1206      2305.92      305.189      2.32974
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72441, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.157293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90779, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.2615e-06   3.2615e-06  1.10582e-06
      low eigenvalue method done, cpu time[sec] = 1.92345, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.26e-06  1.11e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.6e-07  1.11e-06         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10582e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.52391e-19  1.32879e-19   4.3589e-21  2.03272e-20  7.28991e-22   6.3659e-21   6.8009e-25  5.77334e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.80265, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         4.88839e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.238972, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21059, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1960.27      433.437      125.143       146.57      17.3405      1729.44      228.892      1.74731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71788, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15711, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90106, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72736e-06  2.72736e-06  8.66123e-07
      low eigenvalue method done, cpu time[sec] = 1.91601, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.73e-06  8.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-07  8.66e-07         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.66122e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.9418e-19   9.9407e-20   3.3677e-21  1.51087e-20   5.5395e-22  5.65359e-21  6.89232e-25  5.77361e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.80833, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         6.11049e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.239037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1568.22      346.749      100.114      117.256      13.8724      1383.55      183.113      1.39785
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.157467, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90006, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.36238e-06  2.36238e-06   7.1048e-07
      low eigenvalue method done, cpu time[sec] = 1.91394, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.36e-06   7.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-07   7.1e-07         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.10479e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.90233e-19  7.87522e-20   2.7383e-21  1.19321e-20  4.44957e-22  5.09642e-21  6.97071e-25  5.77387e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.80923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.23751, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.22011, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1306.85      288.958      83.4286      97.7134      11.5603      1152.96      152.594      1.16487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71819, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90205, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.09402e-06  2.09403e-06  6.00889e-07
      low eigenvalue method done, cpu time[sec] = 1.91699, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.09e-06  6.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-07  6.01e-07         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.00888e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.16422e-19  6.47732e-20  2.30185e-21  9.79982e-21  3.70483e-22  4.64607e-21  7.03643e-25  5.77413e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.81742, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         8.55469e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.238326, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.2213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1120.16      247.678      71.5102      83.7543      9.90883       988.25      130.795     0.998462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71727, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.157202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90101, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88684e-06  1.88684e-06  5.19419e-07
      low eigenvalue method done, cpu time[sec] = 1.91599, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-06  5.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-07  5.19e-07         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.19419e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.61197e-19  5.47108e-20    1.981e-21  8.27307e-21  3.16372e-22  4.27287e-21  7.09031e-25  5.77439e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.81736, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         9.77678e+09
      global relaxation matrix dimension = 335
      setting global matrices ... done, cpu time[sec] = 0.238509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21425, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            980.137      216.718      62.5714      73.2851      8.67023      864.718      114.446     0.873654
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71935, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.156785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72117e-06  1.72117e-06  4.56442e-07
      low eigenvalue method done, cpu time[sec] = 1.91744, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.72e-06  4.56e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-07  4.56e-07         1
         *Z       ---       ---   3.9e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.56442e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.18288e-19  4.71399e-20  1.73509e-21  7.12838e-21  2.75296e-22  3.95755e-21  7.13336e-25  5.77465e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.81263, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 900 K
      Energy reference = 41833 1/cm
      Energy step      = 155 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -82.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007653
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.291772
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.146874
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.149792
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.762846
         W1 Well: minimal relaxation eigenvalue = 0.0653056
         W1 Well: maximal relaxation eigenvalue = 0.982442
         W1 Well:       grid size = 321
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7921 1/cm
         B1 Barrier:        grid size = 270
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -16 1/cm
         B2 Barrier:        grid size = 269
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 138 1/cm
         B3 Barrier:        grid size = 300
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4667 1/cm
         B4 Barrier:        grid size = 310
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23267 1/cm => truncating
         B5 Barrier:        grid size = 420
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23266 1/cm
         B6 Barrier:        grid size = 261
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1378 1/cm
         B7 Barrier:        grid size = 240
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4633 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16723 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.70099, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 321
      MasterEquation::Barrier::truncate: real weight = 6.65815e+33
      MasterEquation::Barrier::truncate: effective weight = 4.70219e+30
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7921  -7921 9.72e+08 4.94e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -16  1.9e+16
         B2    139 4.56e+15
         B3  -4667 1.36e+15
         B4  -6217 1.57e+15
         B5  -7921 1.89e+14
         B6   1379 1.79e+16
         B7   4634 2.55e+15
         B8  16723 2.47e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.21e-11  3.81e-11  1.98e-13  1.58e-14  8.22e-27  4.34e-09  2.01e-06  3.61e+03
          R  4.53e+10         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  2.63e+10     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2  5.05e+12       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3  6.32e+13  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  1.22e+26  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5   2.3e+08   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6  4.98e+05   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7  0.000277  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.84e-05  0.000135  7.04e-07  5.62e-08  2.92e-20    0.0154      7.14  1.28e+10
          R  1.28e+04         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  7.39e+03     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2  1.42e+06       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3  1.78e+07  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  3.42e+19  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5      64.8   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6      0.14   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7   7.8e-11  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
   MasterEquation::set:  done, cpu time[sec] = 1.71538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+08
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217483, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.85091, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50879.2      12237.8      3641.27      4203.59      507.038      48081.3      6841.23      66.1657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5327, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.14107, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.37939e-05  2.37942e-05  1.30665e-05
      low eigenvalue method done, cpu time[sec] = 1.712, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.38e-05  1.31e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-06  1.31e-05         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30663e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.55351e-15  1.90549e-15  5.55613e-16  1.59537e-17  1.09643e-16  3.22789e-18  6.29802e-18  8.57217e-22  8.81361e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.18404, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+08
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.216711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.85644, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16959.7      4079.28      1213.76       1401.2      169.013      16027.1      2280.41      22.0552
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53075, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141056, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6972, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.55442e-05  1.55443e-05  7.68923e-06
      low eigenvalue method done, cpu time[sec] = 1.71019, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.55e-05  7.69e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-06  7.69e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.68917e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.55431e-15  1.19088e-15  2.75294e-16  8.08096e-18  4.59416e-17  1.48164e-18  6.12807e-18  8.62892e-22  8.81375e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.18607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.13212e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.218164, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.86891, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10175.8      2447.57      728.255      840.718      101.408      9616.26      1368.25      13.2331
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53287, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.140598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69768, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2393e-05  1.23931e-05   5.7491e-06
      low eigenvalue method done, cpu time[sec] = 1.71221, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-05  5.75e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.71e-07  5.75e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.74907e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.11022e-15  9.10737e-16  1.88867e-16  5.75063e-18  3.01359e-17  1.01392e-18  5.80646e-18  8.68552e-22  8.81391e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.20801, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.58497e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.218104, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87215, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7268.46      1748.26      520.182      600.513      72.4339      6868.76      977.318      9.45225
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.14088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69804, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05587e-05  1.05588e-05  4.66836e-06
      low eigenvalue method done, cpu time[sec] = 1.71262, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-05  4.67e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.22e-07  4.67e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.66834e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.88178e-16  7.49262e-16  1.44849e-16  4.54745e-18  2.26365e-17  7.83001e-19  5.49652e-18  8.74118e-22  8.81406e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.20877, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.03782e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5653.24      1359.76      404.586      467.065      56.3375      5342.37      760.136      7.35175
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53149, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141926, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69803, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.31302e-06  9.31306e-06  3.95997e-06
      low eigenvalue method done, cpu time[sec] = 1.71213, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.31e-06  3.96e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.21e-07  3.96e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.95995e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16  6.41222e-16  1.17758e-16  3.79276e-18  1.81893e-17   6.4224e-19  5.21721e-18  8.79535e-22  8.81421e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.20656, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87072, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5087.92      1223.78      364.127      420.359      50.7038      4808.13      684.123      6.61657
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53121, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141402, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69695, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.82206e-06  8.82209e-06  3.68725e-06
      low eigenvalue method done, cpu time[sec] = 1.71098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.82e-06  3.69e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.82e-07  3.69e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.68724e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16   5.9915e-16  1.07723e-16  3.50908e-18  1.65728e-17  5.90204e-19  5.08909e-18  8.82175e-22  8.81429e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.20612, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         3.39637e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87159, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3391.95      815.857      242.752      280.239      33.8025      3205.42      456.082      4.41105
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52924, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.142153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69603, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.1012e-06  7.10122e-06  2.76459e-06
      low eigenvalue method done, cpu time[sec] = 1.71033, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.1e-06  2.76e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.44e-07  2.76e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76458e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.55112e-16  4.54762e-16  7.55106e-17   2.5766e-18  1.14896e-17  4.22798e-19  4.54518e-18  8.94579e-22  8.81466e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.20585, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         4.52849e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.218451, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87963, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2543.96      611.892      182.064      210.179      25.3519      2404.07      342.061      3.30829
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53152, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.142134, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69844, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.03718e-06  6.03719e-06  2.22396e-06
      low eigenvalue method done, cpu time[sec] = 1.71256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.04e-06  2.22e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-07  2.22e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22395e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  3.68621e-16  5.79764e-17  2.04906e-18  8.78555e-18  3.30796e-19  4.12248e-18  9.05541e-22  8.81504e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.21711, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         5.66062e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.219009, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87851, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2035.17      489.514      145.651      168.144      20.2815      1923.25      273.649      2.64663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5265, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.29722e-06  5.29723e-06  1.86387e-06
      low eigenvalue method done, cpu time[sec] = 1.70683, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.3e-06  1.86e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-07  1.86e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.86387e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  3.10581e-16  4.69011e-17  1.70511e-18  7.09771e-18  2.71992e-19  3.78245e-18  9.15037e-22  8.81542e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.21036, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217399, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.88989, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1695.97      407.928      121.376       140.12      16.9013      1602.71      228.041      2.20552
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53174, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69838, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.74544e-06  4.74545e-06    1.605e-06
      low eigenvalue method done, cpu time[sec] = 1.71254, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.75e-06  1.61e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.58e-07  1.61e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.605e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.68509e-16  3.92601e-17  1.46137e-18  5.94117e-18  2.30939e-19   3.5013e-18  9.23131e-22   8.8158e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.22438, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         7.92486e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.218561, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.8829, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1453.69      349.653      104.036      120.103      14.4868      1373.75      195.464      1.89045
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53043, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.140745, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.69535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.3144e-06   4.3144e-06  1.40913e-06
      low eigenvalue method done, cpu time[sec] = 1.70962, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.31e-06  1.41e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.25e-07  1.41e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.40913e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.36474e-16   3.3669e-17  1.27886e-18  5.09839e-18  2.00561e-19   3.2638e-18  9.29927e-22  8.81618e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.21761, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         9.05698e+09
      global relaxation matrix dimension = 321
      setting global matrices ... done, cpu time[sec] = 0.217875, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.87202, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1271.98      305.946      91.0318       105.09      12.6759      1202.03      171.031      1.65414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47662, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.141301, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6435, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.96624e-06  3.96624e-06  1.25536e-06
      low eigenvalue method done, cpu time[sec] = 1.65729, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.97e-06  1.26e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.98e-07  1.26e-06         1
         *Z       ---       ---  5.75e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25536e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.11199e-16  2.94015e-17   1.1367e-18  4.45673e-18  1.77129e-19  3.05976e-18   9.3554e-22  8.81656e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.15054, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1000 K
      Energy reference = 44613 1/cm
      Energy step      = 172 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -81.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007495
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.27259
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.135595
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.14122
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.590728
         W1 Well: minimal relaxation eigenvalue = 0.0620047
         W1 Well: maximal relaxation eigenvalue = 0.98455
         W1 Well:       grid size = 309
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -8534 1/cm
         B1 Barrier:        grid size = 260
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -106 1/cm
         B2 Barrier:        grid size = 259
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 64 1/cm
         B3 Barrier:        grid size = 287
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4751 1/cm
         B4 Barrier:        grid size = 296
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6299 1/cm
         B5 Barrier: nonpositive number of states at -23155 1/cm => truncating
         B5 Barrier:        grid size = 394
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23154 1/cm
         B6 Barrier:        grid size = 251
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1441 1/cm
         B7 Barrier:        grid size = 232
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4709 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16749 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.48542, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 309
      MasterEquation::Barrier::truncate: real weight = 6.40609e+32
      MasterEquation::Barrier::truncate: effective weight = 5.02038e+29
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -8534  -8534 7.83e+08  7.3e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -106 3.29e+16
         B2     65 8.57e+15
         B3  -4751 2.64e+15
         B4  -6299 3.01e+15
         B5  -8534 3.69e+14
         B6   1442 3.32e+16
         B7   4710 5.06e+15
         B8  16750 5.99e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.05e-12  1.21e-11  1.31e-13  1.37e-14  1.33e-25  1.05e-09  3.03e-07      86.5
          R  1.42e+11         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  8.25e+10     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2  7.61e+12      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3   7.3e+13       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4   7.5e+24  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5   9.5e+08    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6   3.3e+06  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7    0.0116  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.52e-07  7.78e-07  8.43e-09  8.79e-10  8.55e-21  6.76e-05    0.0195  5.55e+06
          R  2.21e+06         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  1.29e+06     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2  1.19e+08      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3  1.14e+09       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4  1.17e+20  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5  1.48e+04    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6      51.4  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7   1.8e-07  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
   MasterEquation::set:  done, cpu time[sec] = 1.50026, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200281, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57985, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            63928.5      16639.8      5126.77      5842.42      717.087      64463.4      9832.11      116.289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3599, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.131677, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51445, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.79642e-05  4.79656e-05  2.83597e-05
      low eigenvalue method done, cpu time[sec] = 1.52686, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-05  2.84e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-06  2.84e-05         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.83589e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.4639e-13  2.57824e-13  7.13436e-14  2.06839e-15  1.37255e-14  4.10691e-16  1.06744e-15  2.60792e-19  1.91235e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67999, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60437, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21309.5      5546.61      1708.92      1947.47      239.029      21487.8      3277.37       38.763
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130157, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.2818e-05  3.28185e-05  1.76725e-05
      low eigenvalue method done, cpu time[sec] = 1.53943, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.28e-05  1.77e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.52e-06  1.77e-05         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.76722e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.15938e-13   1.7007e-13  3.73071e-14  1.11948e-15   6.1356e-15  2.01666e-16  1.05269e-15  2.62426e-19  1.91238e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.71639, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1          1.0573e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201227, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58842, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12785.7      3327.97      1025.35      1168.48      143.417      12892.7      1966.42      23.2578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37582, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130768, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52986, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6778e-05  2.67784e-05  1.36289e-05
      low eigenvalue method done, cpu time[sec] = 1.54235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-05  1.36e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-06  1.36e-05         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36287e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.66533e-13  1.33977e-13  2.63693e-14  8.24868e-16  4.16493e-15   1.4298e-16  1.01126e-15   2.6403e-19  1.91241e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70381, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.48022e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59453, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9132.64      2377.12      732.395      834.631      102.441      9209.06      1404.59      16.6127
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37092, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.131572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61489, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.318e-05  2.31802e-05  1.13129e-05
      low eigenvalue method done, cpu time[sec] = 1.6304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-05  1.13e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-06  1.13e-05         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13128e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.38223e-13  1.12583e-13  2.06605e-14  6.68416e-16  3.20482e-15  1.13194e-16   9.6892e-16  2.65592e-19  1.91244e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.80343, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.90315e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.202556, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7103.17      1848.87      569.641      649.158      79.6763      7162.61      1092.46       12.921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37794, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130635, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53193, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06961e-05  2.06963e-05  9.76343e-06
      low eigenvalue method done, cpu time[sec] = 1.54535, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-05  9.76e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-06  9.76e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.76334e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.19238e-13  9.79716e-14  1.70822e-14   5.6821e-16  2.62414e-15  9.46604e-17  9.29515e-16  2.67102e-19  1.91248e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.72206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59678, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6392.85      1663.98      512.677      584.242      71.7087      6446.34      983.211      11.6289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37769, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130122, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53129, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97072e-05  1.97073e-05  9.15909e-06
      low eigenvalue method done, cpu time[sec] = 1.54497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-05  9.16e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-06  9.16e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.159e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.1191e-13  9.22072e-14  1.57411e-14  5.30037e-16  2.41038e-15  8.77183e-17   9.1111e-16  2.67836e-19  1.91249e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.71884, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         3.17191e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.202156, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.61209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4261.9      1109.32      341.784      389.495      47.8058      4297.56      655.474       7.7526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37953, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.619e-05  1.61902e-05  7.07568e-06
      low eigenvalue method done, cpu time[sec] = 1.54662, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.62e-05  7.08e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-06  7.08e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.07563e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.64864e-14   7.2049e-14  1.13635e-14  4.02127e-16  1.72603e-15  6.49601e-17  8.30954e-16  2.71274e-19  1.91257e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.73612, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         4.22921e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201381, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59614, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3196.42      831.992      256.338      292.121      35.8544      3223.17      491.606      5.81445
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3771, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130305, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53043, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.397e-05  1.39701e-05  5.82083e-06
      low eigenvalue method done, cpu time[sec] = 1.5438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-05  5.82e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-06  5.82e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.8208e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.10543e-14   5.9689e-14  8.91994e-15  3.27672e-16  1.35199e-15  5.20954e-17  7.66566e-16  2.74316e-19  1.91265e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.71789, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         5.28652e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.202, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60434, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2557.14      665.594      205.071      233.697      28.6835      2578.54      393.284      4.65156
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37601, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.13117, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2402e-05  1.24021e-05  4.96713e-06
      low eigenvalue method done, cpu time[sec] = 1.54379, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-05  4.97e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.11e-07  4.97e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.96711e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.07292e-14  5.11837e-14    7.346e-15  2.78046e-16  1.11358e-15  4.36914e-17  7.13486e-16   2.7697e-19  1.91273e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.72575, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.202578, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.5971, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2130.95      554.661      170.892      194.747      23.9029      2148.78      327.737       3.8763
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37996, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129995, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53322, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1218e-05  1.12181e-05  4.34262e-06
      low eigenvalue method done, cpu time[sec] = 1.54646, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-05  4.34e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.21e-07  4.34e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.3426e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.30687e-14  4.49109e-14  6.24244e-15  2.42236e-16  9.47363e-16  3.77181e-17  6.68723e-16  2.79261e-19   1.9128e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.72203, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         7.40112e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.202951, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.61117, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1826.53      475.424      146.479      166.926      20.4882      1841.81      280.917      3.32254
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37785, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53174, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02833e-05  1.02833e-05  3.86301e-06
      low eigenvalue method done, cpu time[sec] = 1.54508, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-05  3.86e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.5e-07  3.86e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.86299e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.71845e-14  4.00638e-14   5.4237e-15  2.15003e-16  8.24438e-16  3.32295e-17  6.30279e-16  2.81218e-19  1.91288e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.73553, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         8.45843e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.203215, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60453, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1598.21      415.996      128.169       146.06      17.9272      1611.59      245.803      2.90722
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130307, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.52144e-06  9.52148e-06  3.48158e-06
      low eigenvalue method done, cpu time[sec] = 1.54322, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.52e-06  3.48e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.92e-07  3.48e-06         1
         *Z       ---       ---  1.13e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.48157e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.25215e-14  3.61901e-14  4.79116e-15  1.93501e-16  7.29629e-16  2.97205e-17  5.96773e-16  2.82873e-19  1.91296e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.72659, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1100 K
      Energy reference = 47393 1/cm
      Energy step      = 190 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -79.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006913
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.257126
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.126245
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.131809
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.538495
         W1 Well: minimal relaxation eigenvalue = 0.058906
         W1 Well: maximal relaxation eigenvalue = 0.985698
         W1 Well:       grid size = 298
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -9226 1/cm
         B1 Barrier:        grid size = 250
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -106 1/cm
         B2 Barrier:        grid size = 249
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 83 1/cm
         B3 Barrier:        grid size = 274
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4666 1/cm
         B4 Barrier:        grid size = 282
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6186 1/cm
         B5 Barrier: nonpositive number of states at -23287 1/cm => truncating
         B5 Barrier:        grid size = 372
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23286 1/cm
         B6 Barrier:        grid size = 242
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1413 1/cm
         B7 Barrier:        grid size = 225
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4643 1/cm
         B8 Barrier:        grid size = 161
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16803 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.39324, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 298
      MasterEquation::Barrier::truncate: real weight = 1.03116e+32
      MasterEquation::Barrier::truncate: effective weight = 8.92678e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -9226  -9226  6.1e+08 1.07e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -106 5.53e+16
         B2     84 1.55e+16
         B3  -4666 4.96e+15
         B4  -6186 5.59e+15
         B5  -9226 6.97e+14
         B6   1414 5.92e+16
         B7   4644 9.64e+15
         B8  16804 1.36e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.69e-12  4.63e-12  9.07e-14  1.18e-14  1.26e-24  3.16e-10  6.19e-08      3.95
          R  3.72e+11         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  2.16e+11     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2   1.1e+13      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3   8.5e+13       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  7.94e+23  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5  3.16e+09    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  1.62e+07  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7     0.253  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.72e-09  1.16e-08  2.27e-10  2.94e-11  3.15e-21  7.91e-07  0.000155  9.87e+03
          R  1.49e+08         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  8.64e+07     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2  4.41e+09      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3   3.4e+10       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  3.17e+20  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5  1.27e+06    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  6.47e+03  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7  0.000101  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.40724, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187918, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36308, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            78151.3      21904.4      7018.21      7905.21      985.665        83654      13626.2      192.239
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24217, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129847, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.39426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.26637e-05   8.2668e-05   5.1827e-05
      low eigenvalue method done, cpu time[sec] = 1.40603, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.27e-05  5.18e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.29e-06  5.18e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.18243e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.79421e-11  1.35102e-11  3.56641e-12  1.04665e-13  6.72949e-13  2.04398e-14  6.81573e-14    2.721e-17  1.00371e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.3055, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187236, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.35322, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26050.4      7301.45       2339.4      2635.07      328.555      27884.7      4542.07      64.0796
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24542, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119713, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.88002e-05  5.88022e-05  3.38887e-05
      low eigenvalue method done, cpu time[sec] = 1.3985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.88e-05  3.39e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.38e-06  3.39e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.38875e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.17322e-11  9.32314e-12    1.953e-12  5.99277e-14  3.17884e-13  1.06309e-14   6.7943e-14  2.73711e-17  1.00373e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.28641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         9.93901e+08
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187079, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36833, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15630.3      4380.87      1403.64      1581.04      197.133      16730.8      2725.24      38.4478
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2429, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11928, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38399, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.89366e-05  4.89379e-05   2.6825e-05
      low eigenvalue method done, cpu time[sec] = 1.39592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.89e-05  2.68e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-06  2.68e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68243e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.28679e-12  7.52958e-12  1.41607e-12  4.54805e-14  2.22189e-13  7.76831e-15  6.59894e-14  2.75268e-17  1.00374e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.29803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.39146e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187093, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36229, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11164.5      3129.19       1002.6      1129.32      140.809      11950.6       1946.6      27.4627
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24179, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119646, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38331, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.29449e-05  4.29458e-05  2.26835e-05
      low eigenvalue method done, cpu time[sec] = 1.39558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.29e-05  2.27e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.14e-06  2.27e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.2683e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.85305e-12  6.44098e-12  1.12998e-12  3.76267e-14   1.7453e-13  6.28171e-15  6.38428e-14  2.76771e-17  1.00376e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.29302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.78902e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.186894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36254, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8683.48      2433.82      779.801      878.357      109.518      9294.88      1514.02      21.3599
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24109, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.118582, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38151, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.87503e-05  3.87511e-05  1.98643e-05
      low eigenvalue method done, cpu time[sec] = 1.39328, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.88e-05  1.99e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-06  1.99e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98639e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.87705e-12  5.68447e-12  9.47885e-13  3.25079e-14  1.45227e-13  5.34073e-15  6.17735e-14  2.78217e-17  1.00377e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.28905, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.18686, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36602, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7815.13      2190.44      701.821      790.521      98.5665       8365.4      1362.62      19.2239
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119616, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.70656e-05  3.70663e-05  1.87526e-05
      low eigenvalue method done, cpu time[sec] = 1.39707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.71e-05  1.88e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.69e-06  1.88e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.87522e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.49225e-12  5.38272e-12  8.78961e-13   3.0536e-14  1.34326e-13  4.98436e-15   6.0789e-14  2.78918e-17  1.00378e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.2967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          2.9817e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.187937, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.3606, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5210.09      1460.29      467.881      527.014       65.711      5576.93      908.415      12.8159
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24384, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119809, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.09986e-05   3.0999e-05  1.48585e-05
      low eigenvalue method done, cpu time[sec] = 1.39731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-05  1.49e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-06  1.49e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.48582e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.14411e-12  4.31049e-12  6.50755e-13  2.38204e-14  9.88931e-14   3.7974e-15  5.63925e-14  2.82197e-17  1.00382e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.29415, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         3.97561e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.188369, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36503, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3907.57      1095.22       350.91      395.261      49.2832       4182.7      681.311      9.61195
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2438, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119881, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.71002e-05  2.71005e-05  1.24578e-05
      low eigenvalue method done, cpu time[sec] = 1.39841, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.71e-05  1.25e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-06  1.25e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.24577e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.31299e-12  3.63763e-12  5.20632e-13  1.98166e-14   7.9081e-14  3.11037e-15  5.27495e-14  2.85103e-17  1.00386e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.30009, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         4.96951e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.188331, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36609, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3126.05      876.174      280.728      316.208      39.4266      3346.16      545.049      7.68956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38408, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43092e-05  2.43094e-05   1.0795e-05
      low eigenvalue method done, cpu time[sec] = 1.39644, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.43e-05  1.08e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-06  1.08e-05         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07949e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.73734e-12  3.16625e-12  4.35417e-13  1.70978e-14   6.6227e-14  2.65323e-15  4.96784e-14  2.87657e-17   1.0039e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.29881, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.189045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.37477, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2605.04      730.145       233.94      263.507      32.8555      2788.47      454.207      6.40796
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24552, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119139, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38588, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21785e-05  2.21787e-05  9.56045e-06
      low eigenvalue method done, cpu time[sec] = 1.39821, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-05  9.56e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-06  9.56e-06         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.56036e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.30991e-12  2.81346e-12  3.74845e-13  1.51056e-14  5.71337e-14  2.32333e-15  4.70423e-14  2.89886e-17  1.00394e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.31152, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         6.95731e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.18711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.37105, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2232.89      625.839       200.52      225.863      28.1619      2390.11      389.321      5.49254
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24423, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119074, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38477, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.04808e-05   2.0481e-05  8.60033e-06
      low eigenvalue method done, cpu time[sec] = 1.39724, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-05   8.6e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-06   8.6e-06         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.60025e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.97751e-12  2.53742e-12  3.29374e-13  1.35705e-14  5.03238e-14  2.07219e-15  4.47447e-14  2.91819e-17  1.00397e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.30443, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         7.95121e+09
      global relaxation matrix dimension = 298
      setting global matrices ... done, cpu time[sec] = 0.188397, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.36705, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1953.78      547.609      175.455       197.63      24.6416      2091.35      340.655      4.80597
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24357, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.119578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9086e-05  1.90861e-05  7.82828e-06
      low eigenvalue method done, cpu time[sec] = 1.398, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.91e-05  7.83e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-06  7.83e-06         1
         *Z       ---       ---  3.04e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.82822e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.71017e-12  2.31439e-12  2.93878e-13  1.23445e-14  4.50136e-14  1.87359e-15  4.27167e-14  2.93484e-17  1.00401e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.30237, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1200 K
      Energy reference = 50173 1/cm
      Energy step      = 207 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -77.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006695
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.25017
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.121552
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.116884
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.507479
         W1 Well: minimal relaxation eigenvalue = 0.0559436
         W1 Well: maximal relaxation eigenvalue = 0.988876
         W1 Well:       grid size = 291
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10064 1/cm
         B1 Barrier:        grid size = 243
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -127 1/cm
         B2 Barrier:        grid size = 242
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 79 1/cm
         B3 Barrier:        grid size = 265
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 273
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6338 1/cm
         B5 Barrier: nonpositive number of states at -23105 1/cm => truncating
         B5 Barrier:        grid size = 354
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23105 1/cm
         B6 Barrier:        grid size = 236
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1321 1/cm
         B7 Barrier:        grid size = 220
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4633 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16638 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.33238, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 291
      MasterEquation::Barrier::truncate: real weight = 2.42646e+31
      MasterEquation::Barrier::truncate: effective weight = 2.28854e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10064 -10064 4.47e+08 1.54e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -127 9.01e+16
         B2     80 2.71e+16
         B3  -4681 9.05e+15
         B4  -6338 1.01e+16
         B5 -10064 1.28e+15
         B6   1322 1.02e+17
         B7   4634 1.76e+16
         B8  16639 2.91e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.24e-12  2.15e-12  6.84e-14  1.06e-14  8.42e-24  1.18e-10  1.68e-08      0.31
          R  8.06e+11         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  4.66e+11     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2  1.46e+13      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3  9.39e+13       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  1.19e+23  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  8.45e+09    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  5.97e+07   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7      3.23  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.03e-10  3.51e-10  1.12e-11  1.74e-12  1.38e-21  1.94e-08  2.74e-06      50.7
          R  4.92e+09         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  2.85e+09     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2  8.93e+10      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3  5.73e+11       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  7.25e+20  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  5.16e+07    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  3.64e+05   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7    0.0197  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.34654, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+08
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.179374, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23625, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            93342.6      28048.9         9376      10450.1      1321.75       105591        18247      301.931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114778, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3015, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000121512  0.000121522  7.94771e-05
      low eigenvalue method done, cpu time[sec] = 1.31328, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000122  7.95e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.89e-06  7.95e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.94708e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.57737e-10  3.48145e-10  8.80291e-11  2.62016e-12  1.63678e-11   5.0415e-13   2.0957e-12  1.27188e-15  1.81723e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.05917, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+08
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.178356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23445, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31114.2      9349.65      3125.33      3483.36      440.583        35197      6082.34      100.644
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16628, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113458, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30027, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.93052e-05    8.931e-05  5.41354e-05
      low eigenvalue method done, cpu time[sec] = 1.3124, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.93e-05  5.41e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.4e-06  5.41e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.41325e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.11794e-10   2.4958e-10  5.01621e-11  1.57448e-12  8.10785e-12  2.75534e-13  2.10646e-12    1.279e-15  1.81726e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.05626, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          9.3935e+08
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.178576, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18668.5      5609.79       1875.2      2090.01       264.35      21118.2       3649.4      60.3862
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16655, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114695, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.55893e-05  7.55926e-05  4.38137e-05
      low eigenvalue method done, cpu time[sec] = 1.31345, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.56e-05  4.38e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.35e-06  4.38e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.38118e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.52348e-10  2.05867e-10  3.71822e-11   1.2256e-12  5.81195e-12  2.06651e-13  2.06381e-12  1.28578e-15  1.81728e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0565, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.31509e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.179314, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13334.7      4006.99      1339.43      1492.87      188.821      15084.4      2606.72       43.133
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16534, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30129, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.71187e-05  6.71212e-05  3.76401e-05
      low eigenvalue method done, cpu time[sec] = 1.313, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.71e-05  3.76e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-06  3.76e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.76387e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.16792e-10  1.78793e-10  3.01442e-11  1.03218e-12  4.64726e-12  1.70185e-13  2.01233e-12  1.29227e-15  1.81731e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0555, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.69083e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.179661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23366, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10371.4      3116.55      1041.78      1161.12      146.861      11732.3      2027.45      33.5479
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114376, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.11179e-05  6.11199e-05  3.33752e-05
      low eigenvalue method done, cpu time[sec] = 1.31636, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.11e-05  3.34e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.27e-06  3.34e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.33741e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.92229e-10  1.59696e-10  2.56054e-11   9.0424e-13  3.92122e-12  1.46768e-13  1.96069e-12  1.29849e-15  1.81734e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.06144, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.179721, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.24745, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9334.26      2804.89        937.6      1045.01      132.175      10559.1       1824.7      30.1931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17006, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113539, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.86896e-05  5.86915e-05  3.16776e-05
      low eigenvalue method done, cpu time[sec] = 1.31722, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.87e-05  3.17e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.09e-06  3.17e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.16766e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.82451e-10  1.52007e-10  2.38729e-11  8.54487e-13  3.64869e-12  1.37817e-13  1.93564e-12   1.3015e-15  1.81735e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.07879, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         2.81805e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.180395, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.24129, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6222.84      1869.93      625.066      696.671      88.1165       7039.4      1216.47      20.1287
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16657, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114043, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3019, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.98502e-05  4.98515e-05  2.56493e-05
      low eigenvalue method done, cpu time[sec] = 1.31419, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.99e-05  2.56e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.44e-06  2.56e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.56486e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.47731e-10  1.24305e-10  1.80665e-11  6.82695e-13  2.75143e-12  1.07599e-13  1.82089e-12  1.31555e-15  1.81742e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0681, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          3.7574e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.180424, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.23213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4667.13      1402.45        468.8      522.503      66.0874      5279.55      912.351      15.0965
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16607, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.113694, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30056, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.40826e-05  4.40835e-05  2.18583e-05
      low eigenvalue method done, cpu time[sec] = 1.3132, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.41e-05  2.19e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-06  2.19e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18578e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.25897e-10  1.06573e-10   1.4695e-11  5.78162e-13  2.23996e-12  8.97541e-14   1.7229e-12  1.32804e-15  1.81748e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.05893, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         4.69675e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.18036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.22898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3733.7      1121.96       375.04      418.003      52.8699      4223.64      729.881      12.0772
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16819, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114187, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30345, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.99046e-05  3.99054e-05  1.91917e-05
      low eigenvalue method done, cpu time[sec] = 1.31558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.99e-05  1.92e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-06  1.92e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91913e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.10539e-10  9.39593e-11  1.24555e-11  5.06045e-13  1.90309e-12  7.76928e-14  1.63853e-12  1.33908e-15  1.81755e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.059, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.178762, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.2459, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3111.42      934.965      312.533      348.336      44.0583       3519.7      608.234      10.0644
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17044, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113652, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30422, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.66847e-05  3.66853e-05  1.71867e-05
      low eigenvalue method done, cpu time[sec] = 1.31692, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-05  1.72e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-06  1.72e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.71864e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.89905e-11  8.43988e-11  1.08447e-11  4.52504e-13  1.66178e-12  6.88751e-14  1.56492e-12  1.34881e-15  1.81761e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         6.57545e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.179245, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.25068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2666.93      801.399      267.886      298.573      37.7642      3016.89      521.344       8.6266
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113963, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30275, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40983e-05  3.40988e-05  1.56104e-05
      low eigenvalue method done, cpu time[sec] = 1.31497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.41e-05  1.56e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-06  1.56e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.56101e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.99116e-11  7.68372e-11  9.62329e-12  4.10782e-13  1.47912e-12  6.20874e-14   1.4999e-12  1.35736e-15  1.81768e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.07756, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          7.5148e+09
      global relaxation matrix dimension = 291
      setting global matrices ... done, cpu time[sec] = 0.17884, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.24636, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2333.56      701.224        234.4      261.252      33.0437      2639.78      456.176      7.54827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16988, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30492, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19583e-05  3.19587e-05  1.43308e-05
      low eigenvalue method done, cpu time[sec] = 1.31706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-05  1.43e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-06  1.43e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43306e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.25416e-11  7.06698e-11  8.66129e-12  3.77129e-13  1.33534e-12  5.66673e-14  1.44184e-12  1.36483e-15  1.81775e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.07521, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1300 K
      Energy reference = 52953 1/cm
      Energy step      = 224 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -75.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006613
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.238662
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.116487
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.123096
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.485619
         W1 Well: minimal relaxation eigenvalue = 0.0532815
         W1 Well: maximal relaxation eigenvalue = 0.992048
         W1 Well:       grid size = 284
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10663 1/cm
         B1 Barrier:        grid size = 237
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -135 1/cm
         B2 Barrier:        grid size = 236
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 88 1/cm
         B3 Barrier:        grid size = 257
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4615 1/cm
         B4 Barrier:        grid size = 264
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6183 1/cm
         B5 Barrier: nonpositive number of states at -23207 1/cm => truncating
         B5 Barrier:        grid size = 340
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23207 1/cm
         B6 Barrier:        grid size = 230
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1432 1/cm
         B7 Barrier:        grid size = 216
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4568 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16664 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.29729, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 284
      MasterEquation::Barrier::truncate: real weight = 7.61211e+30
      MasterEquation::Barrier::truncate: effective weight = 7.76905e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10663 -10663 3.56e+08  2.2e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -135 1.43e+17
         B2     89 4.59e+16
         B3  -4615  1.6e+16
         B4  -6183 1.77e+16
         B5 -10663 2.27e+15
         B6   1433  1.7e+17
         B7   4569  3.1e+16
         B8  16665 5.94e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.92e-13  8.59e-13   4.1e-14  7.46e-15  3.21e-23   3.9e-11   4.2e-09    0.0273
          R  2.03e+12         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  1.16e+12     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  2.44e+13        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3  1.34e+14        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4  3.12e+22  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  2.56e+10    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  2.38e+08  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7      36.6   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.06e-11  1.85e-11  8.83e-13  1.61e-13   6.9e-22   8.4e-10  9.04e-08     0.588
          R  9.43e+10         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  5.41e+10     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  1.13e+12        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3  6.22e+12        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4  1.45e+21  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  1.19e+09    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  1.11e+07  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7       1.7   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.31109, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.169982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.09127, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             109290      35073.1      12261.3      13535.2      1734.46       130151      23728.1      454.098
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0982, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.108319, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22747, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000207185  0.000207215  0.000143003
      low eigenvalue method done, cpu time[sec] = 1.23867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000207  0.000143         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-05  0.000143         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000142983
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.77963e-09  5.20034e-09  1.26539e-09  3.81988e-11   2.3223e-10  7.24976e-12  3.68362e-11  3.20654e-14  1.45157e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.81597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.17084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.08082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              36430        11691      4087.09      4511.72      578.155      43383.7      7909.36      151.366
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0979, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107449, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.225, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000156825  0.000156841  0.000100896
      low eigenvalue method done, cpu time[sec] = 1.23609, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000157  0.000101         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-05  0.000101         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000100886
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.78358e-09  3.85221e-09  7.46437e-10  2.39456e-11  1.19951e-10  4.13896e-12  3.72335e-11  3.22345e-14  1.45159e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.80322, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         8.91816e+08
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.170412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.09749, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              21858      7014.63      2452.25      2707.03      346.893      26030.2      4745.62      90.8196
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10159, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.108164, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22971, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000134794  0.000134805  8.32381e-05
      low eigenvalue method done, cpu time[sec] = 1.24153, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000135  8.32e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.32e-06  8.32e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.32312e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.94647e-09  3.23584e-09  5.64012e-10  1.90563e-11  8.79124e-11  3.17588e-12  3.67226e-11  3.23935e-14  1.45161e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.82622, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.24854e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.171976, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.08966, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15612.9      5010.45      1751.61      1933.59      247.781        18593      3389.73      64.8711
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.108425, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000120982  0.000120991  7.24935e-05
      low eigenvalue method done, cpu time[sec] = 1.24079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000121  7.25e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.3e-06  7.25e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.24882e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.43709e-09  2.84729e-09  4.63609e-10  1.62997e-11  7.14016e-11  2.65762e-12  3.60272e-11  3.25448e-14  1.45163e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.8193, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.60527e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.172342, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0882, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12143.3      3897.01      1362.36      1503.91      192.718      14461.2      2636.45      50.4553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1023, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107835, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22966, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000111091  0.000111098  6.49756e-05
      low eigenvalue method done, cpu time[sec] = 1.24092, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000111   6.5e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.58e-06   6.5e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49713e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.08067e-09  2.56964e-09  3.98131e-10  1.44532e-11  6.09864e-11  2.32067e-12  3.52988e-11  3.26892e-14  1.45165e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.81862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.171815, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.09107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10929      3507.31      1226.13      1353.52      173.446      13015.1      2372.81      45.4098
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.108245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23036, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000107061  0.000107068  6.19588e-05
      low eigenvalue method done, cpu time[sec] = 1.2416, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000107   6.2e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.28e-06   6.2e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.19549e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.93764e-09  2.45693e-09  3.72958e-10  1.37292e-11  5.70471e-11  2.19085e-12  3.49382e-11  3.27589e-14  1.45166e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.82251, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         2.67545e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.171657, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.09515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7286.01      2338.21      817.418      902.344      115.631      8676.74      1581.87      30.2732
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10194, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107554, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22907, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.22454e-05  9.22501e-05  5.11184e-05
      low eigenvalue method done, cpu time[sec] = 1.24077, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.23e-05  5.11e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.21e-06  5.11e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.11158e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.4237e-09  2.04597e-09  2.87705e-10  1.11996e-11  4.39328e-11  1.74747e-12  3.32436e-11  3.30848e-14  1.45171e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.82745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         3.56726e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.171636, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1031, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5464.5      1753.66      613.063      676.758      86.7232      6507.55       1186.4      22.7049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107828, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.24409e-05  8.24445e-05  4.41829e-05
      low eigenvalue method done, cpu time[sec] = 1.24014, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.24e-05  4.42e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.51e-06  4.42e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.4181e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.09487e-09  1.77832e-09  2.37425e-10  9.63318e-12   3.6332e-11  1.48108e-12  3.17538e-11  3.33751e-14  1.45176e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.83301, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         4.45908e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.172166, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.08852, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4371.6      1402.93      490.451      541.406      69.3786      5206.04      949.124      18.1639
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10263, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10762, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.52618e-05  7.52647e-05   3.9239e-05
      low eigenvalue method done, cpu time[sec] = 1.2413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.53e-05  3.92e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     5e-06  3.92e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92374e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.86047e-09  1.58537e-09  2.03617e-10  8.53759e-12  3.12605e-11  1.29858e-12  3.04456e-11  3.36335e-14  1.45181e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.81917, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.17165, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               3643       1169.1      408.709      451.172      57.8155      4338.37      790.936      15.1366
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1004, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.96798e-05  6.96823e-05  3.54805e-05
      low eigenvalue method done, cpu time[sec] = 1.24011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.97e-05  3.55e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.61e-06  3.55e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.54792e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.68228e-09  1.43751e-09  1.79053e-10  7.71492e-12  2.75883e-11  1.16366e-12  2.92869e-11  3.38632e-14  1.45186e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.82904, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         6.24271e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.172117, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.09574, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3122.57      1002.09      350.322      386.719      49.5561       3718.6      677.945      12.9742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10094, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.107911, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22934, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.51625e-05  6.51647e-05  3.24977e-05
      low eigenvalue method done, cpu time[sec] = 1.24098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.52e-05  3.25e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.29e-06  3.25e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.24967e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.54086e-09  1.31946e-09  1.60263e-10  7.06758e-12  2.47828e-11  1.05879e-12  2.82505e-11  3.40671e-14  1.45191e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.82706, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         7.13453e+09
      global relaxation matrix dimension = 284
      setting global matrices ... done, cpu time[sec] = 0.171932, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.10681, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2732.25      876.828      306.532      338.379      43.3616      3253.78      593.202      11.3524
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1028, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.109426, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23241, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.14005e-05  6.14024e-05  3.00563e-05
      low eigenvalue method done, cpu time[sec] = 1.24369, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.14e-05  3.01e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.03e-06  3.01e-05         1
         *Z       ---       ---  3.91e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.00554e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.4251e-09  1.22239e-09   1.4535e-10  6.54095e-12  2.25563e-11  9.74344e-13  2.73154e-11  3.42479e-14  1.45196e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.83937, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1400 K
      Energy reference = 55735 1/cm
      Energy step      = 241 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -73.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006381
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.233063
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.11193
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.11773
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.462155
         W1 Well: minimal relaxation eigenvalue = 0.0506354
         W1 Well: maximal relaxation eigenvalue = 0.996066
         W1 Well:       grid size = 279
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -11504 1/cm
         B1 Barrier:        grid size = 232
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -177 1/cm
         B2 Barrier:        grid size = 231
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 63 1/cm
         B3 Barrier:        grid size = 251
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4756 1/cm
         B4 Barrier:        grid size = 257
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23555 1/cm => truncating
         B5 Barrier:        grid size = 329
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23554 1/cm
         B6 Barrier:        grid size = 226
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1268 1/cm
         B7 Barrier:        grid size = 212
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4642 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16692 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.25849, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 279
      MasterEquation::Barrier::truncate: real weight = 2.98588e+30
      MasterEquation::Barrier::truncate: effective weight = 3.27872e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -11504 -11504 2.57e+08 3.11e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -177 2.22e+17
         B2     64 7.57e+16
         B3  -4756 2.77e+16
         B4  -6202 3.03e+16
         B5 -11504 3.94e+15
         B6   1269 2.77e+17
         B7   4643  5.3e+16
         B8  16693 1.16e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.43e-13  4.27e-13  2.88e-14  5.98e-15  1.09e-22  1.63e-11  1.38e-09    0.0037
          R  4.12e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  2.34e+12     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  3.48e+13      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  1.67e+14      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4  9.13e+21  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5  6.14e+10    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  7.22e+08  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7       270  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   8.5e-13   1.5e-12  1.01e-13  2.09e-14  3.83e-22   5.7e-11  4.85e-09     0.013
          R  1.18e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  6.69e+11     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  9.93e+12      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  4.78e+13      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4  2.61e+21  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5  1.75e+10    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  2.06e+08  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7      77.2  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.27213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+08
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165616, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.01749, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             125788      42962.6      15736.3      17219.2      2233.15       157168      30086.6      658.161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04844, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104351, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000292844  0.000292905  0.000209344
      low eigenvalue method done, cpu time[sec] = 1.17129, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000293  0.000209         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-05  0.000209         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0002093
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.56473e-08  5.07318e-08  1.19085e-08   3.6524e-10  2.16514e-09  6.84591e-11  4.16397e-10  4.98691e-13  6.09893e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.65826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+08
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.16396, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0158, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41929.2      14320.9      5245.43      5739.74      744.383      52389.4      10028.9      219.387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04499, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104519, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15678, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00022729  0.000227324  0.000152298
      low eigenvalue method done, cpu time[sec] = 1.16781, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000227  0.000152         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-05  0.000152         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000152275
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.77612e-08  3.86605e-08   7.2441e-09  2.37594e-10  1.16017e-09  4.06118e-11  4.22995e-10  5.01196e-13  6.09901e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.65137, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         8.49955e+08
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.163893, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03211, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25157.5      8592.52      3147.26      3443.84       446.63      31433.6      6017.32      131.632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04564, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103549, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15614, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00019795  0.000197975  0.000127759
      low eigenvalue method done, cpu time[sec] = 1.16679, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000198  0.000128         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.32e-05  0.000128         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000127743
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.00667e-08  3.29915e-08  5.56763e-09  1.92777e-10  8.67026e-10  3.17931e-11  4.19544e-10  5.03515e-13  6.09909e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.66727, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.18994e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165161, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.01639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17969.7      6137.51      2248.04      2459.89      319.021      22452.6      4298.08      94.0229
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04845, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103737, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15917, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00017932   0.00017934  0.000112601
      low eigenvalue method done, cpu time[sec] = 1.17095, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000179  0.000113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-05  0.000113         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000112589
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.53136e-08  2.93619e-08   4.6328e-09  1.67145e-10  7.13931e-10  2.69813e-11   4.1373e-10  5.05707e-13  6.09916e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.66091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.52992e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165659, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13976.4      4773.62      1748.48      1913.25      248.128      17463.1      3342.95      73.1289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05361, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104558, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000165852  0.000165869  0.000101877
      low eigenvalue method done, cpu time[sec] = 1.17741, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000166  0.000102         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-05  0.000102         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000101866
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.19506e-08  2.67385e-08  4.01717e-09  1.49787e-10  6.16376e-10  2.38198e-11  4.07266e-10  5.07792e-13  6.09924e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.68678, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.02191, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12578.8      4296.26      1573.63      1721.92      223.315      15716.8      3008.66      65.8161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04873, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103744, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000160333  0.000160349  9.75428e-05
      low eigenvalue method done, cpu time[sec] = 1.17161, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00016  9.75e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-05  9.75e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.75333e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.05915e-08  2.56659e-08  3.77901e-09  1.42935e-10  5.79237e-10  2.25934e-11  4.03983e-10  5.08797e-13  6.09928e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.66613, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         2.54986e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165632, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04563, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8385.85      2864.17      1049.09      1147.95      148.877      10477.9      2005.77      43.8774
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103982, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000139869  0.000139881  8.18062e-05
      low eigenvalue method done, cpu time[sec] = 1.17099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00014  8.18e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.06e-06  8.18e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.17995e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.56565e-08  2.17134e-08  2.96501e-09  1.18743e-10  4.54414e-10  1.83629e-11  3.88092e-10  5.13484e-13  6.09948e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.68927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         3.39982e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165588, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.02306, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6289.38      2148.13      786.814      860.961      111.657       7858.4      1504.33       32.908
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05082, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000126161   0.00012617  7.15855e-05
      low eigenvalue method done, cpu time[sec] = 1.17342, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000126  7.16e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.12e-06  7.16e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.15804e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.24513e-08  1.91001e-08  2.47837e-09  1.03533e-10  3.81028e-10   1.5783e-11  3.73674e-10  5.17666e-13  6.09967e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.66944, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         4.24977e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165523, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5031.51       1718.5      629.452      688.769      89.3259      6286.72      1203.46      26.3264
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04953, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000116029  0.000116036  6.42142e-05
      low eigenvalue method done, cpu time[sec] = 1.17253, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000116  6.42e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.42e-06  6.42e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.42101e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.01396e-08  1.71938e-08  2.14766e-09  9.27677e-11   3.3151e-10  1.39948e-11  3.60757e-10  5.21403e-13  6.09987e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.67641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04284, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4192.92      1432.09      524.543      573.974      74.4383      5238.94      1002.89      21.9387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00010809  0.000108096  5.85562e-05
      low eigenvalue method done, cpu time[sec] = 1.17167, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000108  5.86e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-06  5.86e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.85528e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.83652e-08  1.57189e-08  1.90523e-09  8.46042e-11   2.9532e-10    1.266e-11  3.49142e-10  5.24746e-13  6.10007e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.68623, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.94968e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.165505, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3593.93       1227.5      449.608      491.978      63.8042      4490.52      859.617      18.8046
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103369, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1563, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000101624   0.00010163  5.40288e-05
      low eigenvalue method done, cpu time[sec] = 1.16777, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000102   5.4e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.44e-06   5.4e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.40259e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.69453e-08  1.45317e-08  1.71837e-09  7.81259e-11  2.67448e-10  1.16138e-11  3.38628e-10  5.27738e-13  6.10026e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.67616, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         6.79964e+09
      global relaxation matrix dimension = 279
      setting global matrices ... done, cpu time[sec] = 0.164692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03431, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3144.69      1074.07      393.407       430.48      55.8287       3929.2      752.165       16.454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04996, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10374, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.16057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.62085e-05  9.62133e-05  5.02964e-05
      low eigenvalue method done, cpu time[sec] = 1.17209, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.62e-05  5.03e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.07e-06  5.03e-05         1
         *Z       ---       ---  1.77e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.02938e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.57747e-08  1.35483e-08  1.56906e-09  7.28162e-11  2.45171e-10  1.07651e-11  3.29046e-10  5.30416e-13  6.10046e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.67865, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1500 K
      Energy reference = 58514 1/cm
      Energy step      = 259 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -72 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006209
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.223448
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.106419
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.115454
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.443299
         W1 Well: minimal relaxation eigenvalue = 0.0482106
         W1 Well: maximal relaxation eigenvalue = 0.999167
         W1 Well:       grid size = 273
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12193 1/cm
         B1 Barrier:        grid size = 226
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 226
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -19 1/cm
         B3 Barrier:        grid size = 244
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 250
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6236 1/cm
         B5 Barrier: nonpositive number of states at -23589 1/cm => truncating
         B5 Barrier:        grid size = 317
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23589 1/cm
         B6 Barrier:        grid size = 221
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1275 1/cm
         B7 Barrier:        grid size = 208
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4641 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16556 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.21713, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 273
      MasterEquation::Barrier::truncate: real weight = 1.39375e+30
      MasterEquation::Barrier::truncate: effective weight = 1.64474e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12193 -12193 1.95e+08 4.35e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 3.36e+17
         B2    -19 1.22e+17
         B3  -4681 4.68e+16
         B4  -6236 5.08e+16
         B5 -12193 6.67e+15
         B6   1276  4.4e+17
         B7   4642  8.8e+16
         B8  16556 2.18e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.11e-13  1.97e-13  1.78e-14  4.15e-15  2.67e-22  6.38e-12  4.42e-10  0.000549
          R  9.04e+12         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  5.08e+12     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  5.63e+13      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  2.41e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  3.75e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5  1.57e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6  2.26e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7  1.82e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.61e-14  1.71e-13  1.54e-14   3.6e-15  2.32e-22  5.54e-12  3.84e-10  0.000476
          R  1.04e+13         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  5.85e+12     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  6.48e+13      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  2.78e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  4.32e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5   1.8e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6  2.61e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7   2.1e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.23116, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+08
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.157326, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.89621, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             142627      51682.7      19859.7      21556.6      2826.63       186417      37316.9      923.742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.985099, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101589, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10543, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000446127  0.000446276  0.000333208
      low eigenvalue method done, cpu time[sec] = 1.11589, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000446  0.000333         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-05  0.000333         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000333097
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.52824e-07  3.52186e-07  8.00303e-08  2.49324e-09  1.44258e-08  4.61857e-10  3.31296e-09  5.26522e-12  1.53311e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.46047, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+08
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.15823, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91577, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            47542.2      17227.6      6619.89      7185.55      942.211      62138.9        12439      307.914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.9841, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.097911, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08874, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000354206  0.000354294  0.000248998
      low eigenvalue method done, cpu time[sec] = 1.09948, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000354  0.000249         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.32e-05  0.000249         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000248936
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.38411e-07  2.75124e-07  5.00144e-08  1.67623e-09  7.98844e-09  2.83559e-10  3.37811e-09  5.29037e-12  1.53313e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.4635, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         8.12751e+08
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.156786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.9262, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28525.3      10336.5      3971.93      4311.33      565.326      37283.3      7463.38      184.748
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.98383, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000312222  0.000312288  0.000211965
      low eigenvalue method done, cpu time[sec] = 1.0992, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000312  0.000212         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-05  0.000212         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00021192
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.88092e-07  2.38059e-07  3.90232e-08   1.3836e-09  6.07496e-09  2.25993e-10  3.36577e-09  5.31335e-12  1.53315e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.47224, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.13785e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91186, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20375.2      7383.24      2837.09      3079.52      403.805        26631      5330.99      131.963
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.985349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09316, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000285251  0.000285305  0.000188787
      low eigenvalue method done, cpu time[sec] = 1.10399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000285  0.000189         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.83e-05  0.000189         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000188751
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.56594e-07  2.13996e-07  3.28252e-08  1.21416e-09  5.06404e-09  1.94205e-10  3.33327e-09  5.33494e-12  1.53317e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.46373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.46295e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158536, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92577, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15847.4      5742.52      2206.63      2395.18       314.07        20713      4146.32      102.638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.98258, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.098943, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08792, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000265588  0.000265634  0.000172226
      low eigenvalue method done, cpu time[sec] = 1.09916, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000266  0.000172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-05  0.000172         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000172196
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.34089e-07  1.96428e-07   2.8709e-08  1.09833e-09  4.41419e-09  1.73128e-10  3.29397e-09   5.3554e-12  1.53319e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.4765, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158475, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14262.7      5168.27      1985.97      2155.66      282.663      18641.7      3731.69      92.3742
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.99059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099538, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09695, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000257487  0.000257529  0.000165491
      low eigenvalue method done, cpu time[sec] = 1.10859, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000258  0.000165         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.64e-05  0.000165         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000165464
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.24937e-07  1.89199e-07   2.7108e-08  1.05232e-09  4.16539e-09  1.64904e-10  3.27337e-09  5.36525e-12   1.5332e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48346, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         2.43825e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92912, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9508.44      3445.51      1323.98      1437.11      188.442      12427.8      2487.79      61.5828
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.988982, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099174, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09463, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000227209  0.000227241  0.000140813
      low eigenvalue method done, cpu time[sec] = 1.10604, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000227  0.000141         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-05  0.000141         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000140793
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.91399e-07  1.62309e-07  2.15922e-08   8.8843e-10  3.32218e-09  1.36285e-10  3.17012e-09  5.41115e-12  1.53324e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48802, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1           3.251e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158261, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7131.33      2584.13      992.983      1077.83      141.332      9320.83      1865.85      46.1871
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.983557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099216, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000206698  0.000206724  0.000124571
      low eigenvalue method done, cpu time[sec] = 1.10042, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000207  0.000125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-05  0.000125         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000124556
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.69325e-07  1.44288e-07  1.82553e-08  7.84011e-10  2.82022e-09  1.18604e-10  3.07314e-09  5.45216e-12  1.53329e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.46952, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         4.06375e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.157851, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92534, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5705.06      2067.31      794.386      862.265      113.065      7456.67      1492.68      36.9497
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.989223, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000191407  0.000191428  0.000112736
      low eigenvalue method done, cpu time[sec] = 1.10642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000191  0.000113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-05  0.000113         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000112723
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.53239e-07  1.31006e-07  1.59664e-08  7.09333e-10  2.47819e-09  1.06224e-10   2.9844e-09  5.48896e-12  1.53333e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48204, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.159147, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92073, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4754.22      1722.76      661.989      718.555      94.2211      6213.89       1243.9      30.7914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.990574, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098368, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0954, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000179341   0.00017936  0.000103573
      low eigenvalue method done, cpu time[sec] = 1.10656, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000179  0.000104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-05  0.000104         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000103563
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.40787e-07  1.20642e-07  1.42755e-08  6.52211e-10  2.22616e-09  9.69036e-11  2.90339e-09  5.52207e-12  1.53338e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.4791, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         5.68926e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158205, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92939, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4075.04      1476.65      567.419      615.904      80.7609      5326.19       1066.2      26.3926
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.987675, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09843, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0927, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000169453   0.00016947  9.61885e-05
      low eigenvalue method done, cpu time[sec] = 1.10388, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000169  9.62e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-05  9.62e-05         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.61792e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.30749e-07  1.12238e-07  1.29634e-08   6.0654e-10  2.03068e-09   8.9545e-11  2.82918e-09  5.55192e-12  1.53343e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48473, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         6.50201e+09
      global relaxation matrix dimension = 273
      setting global matrices ... done, cpu time[sec] = 0.158492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92273, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3565.66      1292.07      496.491      538.916      70.6658      4660.42      932.923      23.0936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.989495, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099401, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.09559, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000161129  0.000161143  9.00611e-05
      low eigenvalue method done, cpu time[sec] = 1.10677, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000161  9.01e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.88e-06  9.01e-05         1
         *Z       ---       ---  8.33e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.0053e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22421e-07  1.05232e-07  1.19088e-08  5.68862e-10  1.87347e-09  8.35366e-11  2.76088e-09  5.57885e-12  1.53347e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48053, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1600 K
      Energy reference = 61294 1/cm
      Energy step      = 276 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -70 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006104
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.218886
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.102275
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.110583
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.428924
         W1 Well: minimal relaxation eigenvalue = 0.0460516
         W1 Well: maximal relaxation eigenvalue = 1.00328
         W1 Well:       grid size = 268
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12674 1/cm
         B1 Barrier:        grid size = 223
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -254 1/cm
         B2 Barrier:        grid size = 222
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 21 1/cm
         B3 Barrier:        grid size = 239
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4670 1/cm
         B4 Barrier:        grid size = 245
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6325 1/cm
         B5 Barrier: nonpositive number of states at -23714 1/cm => truncating
         B5 Barrier:        grid size = 308
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23714 1/cm
         B6 Barrier:        grid size = 217
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1401 1/cm
         B7 Barrier:        grid size = 205
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4714 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16581 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.19221, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 268
      MasterEquation::Barrier::truncate: real weight = 7.48208e+29
      MasterEquation::Barrier::truncate: effective weight = 9.40907e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12674 -12674 1.61e+08 6.03e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -254 5.01e+17
         B2     22 1.92e+17
         B3  -4670 7.74e+16
         B4  -6325 8.34e+16
         B5 -12674 1.11e+16
         B6   1402 6.83e+17
         B7   4715 1.42e+17
         B8  16582 3.95e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.72e-14  8.49e-14  9.87e-15  2.55e-15  4.93e-22  2.37e-12  1.37e-10  8.73e-05
          R  2.12e+13         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  1.18e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  1.01e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  3.92e+14      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  2.03e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  4.22e+11    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6  7.29e+09  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7  1.15e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.43e-14  2.58e-14     3e-15  7.76e-16   1.5e-22  7.22e-13  4.17e-11  2.66e-05
          R  6.97e+13         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  3.87e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  3.33e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  1.29e+15      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  6.67e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  1.39e+12    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6   2.4e+10  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7  3.77e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.20585, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.153258, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             159624      61193.7        24671      26603.3      3524.04       217666      45403.6      1260.83
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.935307, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05036, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000725475  0.000725892  0.000573821
      low eigenvalue method done, cpu time[sec] = 1.06066, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000726  0.000573         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.82e-05  0.000573         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000573492
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  2.37075e-06   1.8553e-06  4.07883e-07  1.29456e-08  7.31342e-08  2.37096e-09  1.98636e-08   4.0614e-11  2.53965e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.30526, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152392, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80233, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53207.9      20397.9      8223.66      8867.76      1174.68      72555.5      15134.5      420.276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.936194, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05065, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000588415  0.000588673  0.000439267
      low eigenvalue method done, cpu time[sec] = 1.06085, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000589  0.000439         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.82e-05  0.000439         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000439074
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.81508e-06  1.48159e-06  2.61468e-07  8.96681e-09  4.17347e-08  1.50198e-09  2.03024e-08  4.07987e-11  2.53968e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.29606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         7.79424e+08
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152467, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31924.7      12238.7      4934.19      5320.66      704.808      43533.3      9080.71      252.166
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.937489, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095343, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000524571   0.00052477  0.000378879
      low eigenvalue method done, cpu time[sec] = 1.06103, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000525  0.000379         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.36e-05  0.000379         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000378736
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.56565e-06  1.29788e-06  2.06869e-07  7.51679e-09  3.22453e-08  1.21665e-09  2.02985e-08  4.09654e-11  2.53971e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.30739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.09119e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152764, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80564, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22803.4      8741.96      3524.42      3800.47      503.434      31095.2      6486.22      180.118
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.942402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095577, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000483097  0.000483262  0.000340626
      low eigenvalue method done, cpu time[sec] = 1.06642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000483  0.000341         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-05  0.000341         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00034051
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.40763e-06  1.17711e-06  1.75756e-07  6.66795e-09  2.71805e-08  1.05741e-09  2.01708e-08  4.11211e-11  2.53973e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.30765, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.40296e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80342, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              17736      6799.31      2741.22      2955.92       391.56      24185.2      5044.84      140.092
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.940336, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09528, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05372, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000452615  0.000452756  0.000313052
      low eigenvalue method done, cpu time[sec] = 1.0642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000453  0.000313         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-05  0.000313         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000312954
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.29372e-06  1.08812e-06  1.54932e-07  6.08286e-09  2.38994e-08  9.50985e-10  1.99962e-08  4.12681e-11  2.53976e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.30317, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.153446, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15962.4      6119.37       2467.1      2660.33      352.404      21766.6      4540.36      126.083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.94053, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094469, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05293, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000439992  0.000440125  0.000301776
      low eigenvalue method done, cpu time[sec] = 1.06389, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00044  0.000302         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.77e-05  0.000302         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000301685
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.24713e-06   1.0513e-06  1.46792e-07  5.84921e-09  2.26368e-08  9.09237e-10  1.99008e-08  4.13388e-11  2.53978e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31137, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         2.33827e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10641.6      4079.58      1644.73      1773.55      234.936      14511.1       3026.9      84.0552
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.939994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0951, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.053, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00039246  0.000392562  0.000260111
      low eigenvalue method done, cpu time[sec] = 1.06353, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000393   0.00026         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.44e-05   0.00026         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000260043
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.07499e-06  9.13136e-07  1.18543e-07  5.01016e-09  1.83261e-08  7.62836e-10  1.94028e-08  4.16681e-11  2.53985e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.30194, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          3.1177e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152887, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81452, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7981.18      3059.69      1233.55      1330.16      176.202      10883.3      2270.18      63.0414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.93855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05186, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000359914  0.000359998  0.000232359
      low eigenvalue method done, cpu time[sec] = 1.06261, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00036  0.000232         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-05  0.000232         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000232305
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  9.60322e-07  8.19419e-07  1.01269e-07  4.46924e-09  1.57315e-08  6.71346e-10   1.8917e-08  4.19627e-11  2.53992e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31273, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         3.89712e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.82071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6384.95      2447.75      986.839      1064.13      140.962      8706.66      1816.14      50.4331
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.93926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094933, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05251, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000335451  0.000335522  0.000211949
      low eigenvalue method done, cpu time[sec] = 1.06299, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000336  0.000212         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.05e-05  0.000212         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000211904
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.75985e-07  7.49698e-07  8.93196e-08  4.07877e-09  1.39479e-08    6.067e-10  1.84624e-08  4.22281e-11  2.53999e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31936, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.153737, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5320.79      2039.79      822.366      886.776      117.468      7255.55      1513.45      42.0276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.936902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095211, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05011, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000316018  0.000316079  0.000196027
      low eigenvalue method done, cpu time[sec] = 1.06049, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000316  0.000196         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-05  0.000196         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000195989
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.10194e-07  6.94872e-07  8.04302e-08  3.77778e-09  1.26242e-08  5.57661e-10  1.80411e-08   4.2468e-11  2.54007e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31625, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         5.45597e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.153687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81692, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4560.68      1748.39      704.885      760.094      100.687      6219.04      1297.24      36.0237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.939875, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05377, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000300001  0.000300056   0.00018311
      low eigenvalue method done, cpu time[sec] = 1.06422, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0003  0.000183         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.82e-05  0.000183         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000183076
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.56816e-07  6.50123e-07  7.34903e-08  3.53553e-09   1.1591e-08  5.18691e-10  1.76505e-08  4.26857e-11  2.54014e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31827, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          6.2354e+09
      global relaxation matrix dimension = 268
      setting global matrices ... done, cpu time[sec] = 0.152773, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81605, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3990.59      1529.84      616.774      665.082       88.101      5441.66      1135.09      31.5207
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.93657, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000286448  0.000286498  0.000172331
      low eigenvalue method done, cpu time[sec] = 1.06068, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000286  0.000172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-05  0.000172         1
         *Z       ---       ---  4.04e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000172301
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.12271e-07  6.12605e-07  6.78826e-08   3.3345e-09  1.07554e-08  4.86688e-10  1.72876e-08  4.28834e-11  2.54021e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.31211, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1700 K
      Energy reference = 64074 1/cm
      Energy step      = 293 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -67.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00613
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.211295
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.100819
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.110453
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.409508
         W1 Well: minimal relaxation eigenvalue = 0.0437473
         W1 Well: maximal relaxation eigenvalue = 1.00906
         W1 Well:       grid size = 265
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -13571 1/cm
         B1 Barrier:        grid size = 219
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -93 1/cm
         B2 Barrier:        grid size = 218
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 200 1/cm
         B3 Barrier:        grid size = 235
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4780 1/cm
         B4 Barrier:        grid size = 240
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6246 1/cm
         B5 Barrier: nonpositive number of states at -23533 1/cm => truncating
         B5 Barrier:        grid size = 299
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23533 1/cm
         B6 Barrier:        grid size = 214
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1371 1/cm
         B7 Barrier:        grid size = 203
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4594 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16608 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.16031, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 265
      MasterEquation::Barrier::truncate: real weight = 4.49766e+29
      MasterEquation::Barrier::truncate: effective weight = 6.0044e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -13571 -13571  1.1e+08 8.29e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -93 7.32e+17
         B2    201 2.96e+17
         B3  -4780 1.25e+17
         B4  -6246 1.34e+17
         B5 -13571  1.8e+16
         B6   1372 1.04e+18
         B7   4595 2.25e+17
         B8  16608 6.96e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.55e-14  4.64e-14  6.72e-15   1.9e-15  9.69e-22  1.13e-12  5.57e-11  1.97e-05
          R  3.93e+13         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1  2.15e+13     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  1.49e+14      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  5.26e+14      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  1.03e+21  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5  8.86e+11    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6   1.8e+10  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7  5.08e+04  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.7e-15  4.91e-15  7.12e-16  2.01e-16  1.03e-22   1.2e-13   5.9e-12  2.08e-06
          R  3.71e+14         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1  2.03e+14     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  1.41e+15      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  4.97e+15      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  9.74e+21  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5  8.36e+12    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6   1.7e+11  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7   4.8e+05  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.17418, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76564, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             176609      71445.1      30209.3      32412.2      4334.15       250664        54316      1679.33
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.910047, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092745, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01059, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000968769  0.000969534  0.000789151
      low eigenvalue method done, cpu time[sec] = 1.02091, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00097  0.000789         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.2e-05  0.000789         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000788529
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99999  9.94061e-06  7.81699e-06  1.67172e-06  5.39422e-08  2.98065e-07   9.7782e-09  9.42977e-08  2.42114e-10  2.98606e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21011, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149063, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.77234, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            58869.7        23815      10069.8      10804.1      1444.72      83554.7      18105.3      559.776
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.909258, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091588, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00733, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000799701  0.000800194  0.000616962
      low eigenvalue method done, cpu time[sec] = 1.01807, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0008  0.000617         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.99e-05  0.000617         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000616582
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999992  7.77295e-06  6.36467e-06  1.09508e-06  3.83622e-08   1.7467e-07  6.36882e-09  9.65911e-08  2.43167e-10   2.9861e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.21754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         7.49365e+08
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78834, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35321.8        14289      6041.86      6482.43       866.83      50132.8      10863.2      335.866
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.910492, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09181, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00892, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000719714  0.000720101  0.000538335
      low eigenvalue method done, cpu time[sec] = 1.01974, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00072  0.000538         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-05  0.000538         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000538045
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999993  6.78288e-06  5.63653e-06  8.76994e-07  3.26023e-08  1.36866e-07  5.23378e-09  9.68604e-08  2.44105e-10  2.98613e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.23416, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.04911e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149609, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78329, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25229.9      10206.4      4315.61      4630.31      619.164      35809.1      7759.43      239.904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.912092, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09159, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01027, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000667278  0.000667604  0.000488005
      low eigenvalue method done, cpu time[sec] = 1.02125, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000668  0.000488         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.08e-05  0.000488         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000487767
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  6.14905e-06  5.15244e-06  7.51645e-07  2.91992e-08  1.16515e-07  4.59475e-09  9.65293e-08  2.44977e-10  2.98616e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.23084, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.34886e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149976, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19623.2      7938.35      3356.59      3601.35      481.572      27851.6      6035.11      186.592
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.91096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092655, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01024, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000628479  0.000628763  0.000451443
      low eigenvalue method done, cpu time[sec] = 1.02106, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000629  0.000451         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.81e-05  0.000451         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000451239
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  5.68856e-06  4.79279e-06    6.672e-07  2.68367e-08  1.03245e-07  4.16471e-09  9.59519e-08  2.45797e-10  2.98619e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.22942, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78838, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17660.9      7144.51      3020.93      3241.22      433.415      25066.4       5431.6      167.933
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.912555, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092217, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01098, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000612345  0.000612612  0.000436417
      low eigenvalue method done, cpu time[sec] = 1.02178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000613  0.000436         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.71e-05  0.000436         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000436227
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995   5.4993e-06  4.64317e-06  6.34052e-07  2.58888e-08  9.81162e-08  3.99527e-09  9.56163e-08  2.46191e-10  2.98621e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.23671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.24809e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.14965, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78458, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11773.9      4763.01      2013.95      2160.81      288.943      16710.9      3621.07      111.955
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.905856, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092067, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00414, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000551205  0.000551415  0.000380489
      low eigenvalue method done, cpu time[sec] = 1.01491, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000551   0.00038         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.3e-05   0.00038         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000380345
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  4.79483e-06   4.0776e-06  5.18304e-07  2.24615e-08  8.04954e-08  3.39714e-09  9.37597e-08  2.48024e-10  2.98629e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.22594, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.99746e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79612, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8830.46      3572.26      1510.46      1620.61      216.708      12533.2       2715.8      83.9664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.909866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092555, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00911, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000508967  0.000509142  0.000342843
      low eigenvalue method done, cpu time[sec] = 1.02011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000509  0.000343         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-05  0.000343         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000342726
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  4.32058e-06  3.68979e-06  4.46871e-07  2.02292e-08  6.97877e-08  3.01963e-09  9.18607e-08  2.49666e-10  2.98637e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.24234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         3.74682e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149813, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78736, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7064.36      2857.81      1208.37      1296.49      173.366      10026.6      2172.64      67.1731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.909083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0921, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00764, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000476999  0.000477149  0.000314928
      low eigenvalue method done, cpu time[sec] = 1.01835, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000477  0.000315         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.81e-05  0.000315         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000314829
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.96889e-06  3.39885e-06  3.97099e-07  1.86047e-08  6.23718e-08  2.75079e-09   9.0039e-08  2.51149e-10  2.98644e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.23268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149622, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78943, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5886.97       2381.5      1006.98      1080.41      144.472      8355.47      1810.53      55.9776
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.909942, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092921, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00934, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000451458  0.000451591  0.000293004
      low eigenvalue method done, cpu time[sec] = 1.02046, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000452  0.000293         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-05  0.000293         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000292918
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.69268e-06   3.1685e-06  3.59848e-07  1.73439e-08  5.68327e-08   2.5455e-09  8.83214e-08  2.52496e-10  2.98652e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.23665, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.24555e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.149891, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79767, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5045.97      2041.29      863.123      926.062      123.833      7161.83      1551.89      47.9808
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.910488, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092422, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000430306  0.000430425  0.000275113
      low eigenvalue method done, cpu time[sec] = 1.02059, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00043  0.000275         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-05  0.000275         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000275038
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.46727e-06  2.97937e-06  3.30614e-07  1.63233e-08  5.24859e-08  2.38144e-09  8.67093e-08  2.53724e-10   2.9866e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.24505, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.99492e+09
      global relaxation matrix dimension = 265
      setting global matrices ... done, cpu time[sec] = 0.148917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4415.23      1786.13      755.232      810.304      108.354       6266.6       1357.9      41.9832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.911035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000412332  0.000412439  0.000260107
      low eigenvalue method done, cpu time[sec] = 1.0204, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000412   0.00026         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.39e-05   0.00026         1
         *Z       ---       ---  2.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00026004
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997   3.2782e-06  2.81999e-06  3.06882e-07  1.54719e-08  4.89535e-08  2.24602e-09   8.5196e-08  2.54846e-10  2.98668e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2382, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1800 K
      Energy reference = 66854 1/cm
      Energy step      = 310 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -65.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006212
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.207271
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.097601
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.105319
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.402672
         W1 Well: minimal relaxation eigenvalue = 0.0418273
         W1 Well: maximal relaxation eigenvalue = 1.01409
         W1 Well:       grid size = 261
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -14055 1/cm
         B1 Barrier:        grid size = 216
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -105 1/cm
         B2 Barrier:        grid size = 215
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 203 1/cm
         B3 Barrier:        grid size = 231
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4756 1/cm
         B4 Barrier:        grid size = 236
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6306 1/cm
         B5 Barrier: nonpositive number of states at -23666 1/cm => truncating
         B5 Barrier:        grid size = 292
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23666 1/cm
         B6 Barrier:        grid size = 211
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 201
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4543 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16633 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.14002, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 261
      MasterEquation::Barrier::truncate: real weight = 2.9657e+29
      MasterEquation::Barrier::truncate: effective weight = 4.18894e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -14055 -14055 8.97e+07 1.13e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -105 1.05e+18
         B2    204 4.49e+17
         B3  -4756 1.99e+17
         B4  -6306 2.13e+17
         B5 -14055 2.87e+16
         B6   1444 1.55e+18
         B7   4544 3.49e+17
         B8  16634 1.19e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.17e-14  2.16e-14   3.8e-15  1.17e-15  1.41e-21  4.63e-13  1.98e-11  4.16e-06
          R  8.53e+13         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  4.62e+13     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  2.63e+14      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3  8.58e+14      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  7.11e+20  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  2.16e+12    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6  5.05e+10  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7   2.4e+05  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.13e-16  1.13e-15  1.99e-16   6.1e-17  7.36e-23  2.42e-14  1.04e-12  2.18e-07
          R  1.63e+15         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  8.83e+14     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  5.03e+15      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3  1.64e+16      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  1.36e+22  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  4.13e+13    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6  9.66e+11  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7   4.6e+06  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.15363, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.14458, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70428, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             193432      82379.5        36551        39034      5265.48       285148      64012.7      2188.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.870417, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091698, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979537, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00148335   0.00148525   0.00127999
      low eigenvalue method done, cpu time[sec] = 0.989923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00149   0.00128         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.44e-05   0.00128     0.999
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00127836
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999965  3.45107e-05  2.72643e-05  5.67422e-06  1.86327e-07  1.00631e-06  3.34248e-08   3.6884e-07  1.16493e-09  2.63921e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10694, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.14502, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70612, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64477.3      27459.8      12183.7      13011.3      1755.16      95049.4      21337.6      729.649
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.87153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089533, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.978524, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00124578   0.00124705   0.00102005
      low eigenvalue method done, cpu time[sec] = 0.988368, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00125   0.00102         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.73e-05   0.00102     0.999
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00101901
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999972  2.75093e-05  2.25913e-05  3.79251e-06  1.35798e-07  6.04701e-07  2.23467e-08  3.78356e-07  1.16977e-09  2.63923e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         7.22087e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145066, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38686.4      16475.9      7310.19       7806.8       1053.1      57029.6      12802.5       437.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.871284, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089765, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.978449, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00113163   0.00113264  0.000899445
      low eigenvalue method done, cpu time[sec] = 0.988709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00113  0.000899         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.93e-05  0.000899         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000898637
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999976  2.42597e-05   2.0205e-05  3.07157e-06  1.16873e-07  4.80098e-07  1.86116e-08  3.80293e-07  1.17404e-09  2.63926e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10716, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.01092e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145378, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71182, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27633.1      11768.5      5221.57      5576.29      752.212      40735.4      9144.68      312.707
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.871073, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090779, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.97953, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00105611   0.00105698  0.000821506
      low eigenvalue method done, cpu time[sec] = 0.989979, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00106  0.000821         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.4e-05  0.000821         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000820831
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999978  2.21592e-05  1.86018e-05  2.65393e-06  1.05597e-07  4.12494e-07  1.64919e-08  3.79882e-07  1.17798e-09  2.63929e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1156, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.29976e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70831, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21492.4      9153.28      4061.22      4337.11      585.054      31683.1      7112.53      243.216
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.873082, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089808, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.980392, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000999867   0.00100063  0.000764482
      low eigenvalue method done, cpu time[sec] = 0.990944, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.001  0.000764         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.02e-05  0.000764         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000763898
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999979  2.06223e-05  1.74017e-05  2.37092e-06  9.77192e-08  3.68144e-07  1.50565e-08  3.78452e-07  1.18168e-09  2.63931e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11304, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145855, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6992, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19343.2      8237.95       3655.1       3903.4      526.548      28514.8      6401.27      218.895
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.872226, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979613, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000976379  0.000977103  0.000740942
      low eigenvalue method done, cpu time[sec] = 0.99006, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000977   0.00074         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.86e-05   0.00074         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000740393
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99998  1.99877e-05     1.69e-05   2.2594e-06  9.45453e-08  3.50938e-07  1.44887e-08   3.7753e-07  1.18345e-09  2.63933e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.16626e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.14577, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71047, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12895.5      5491.97      2436.73      2602.27      351.032      19009.9      4267.52       145.93
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.875872, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.089012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.982118, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000886817  0.000887396  0.000652733
      low eigenvalue method done, cpu time[sec] = 0.99339, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000887  0.000652         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.25e-05  0.000652         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000652307
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999982  1.76097e-05  1.49903e-05  1.86781e-06  8.29959e-08  2.91478e-07  1.24722e-08  3.71995e-07  1.19171e-09  2.63939e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11929, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.88835e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145949, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7101, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9671.59      4118.98      1827.55       1951.7      263.274      14257.4      3200.64      109.447
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.872718, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979915, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000824393  0.000824881  0.000592783
      low eigenvalue method done, cpu time[sec] = 0.990472, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000825  0.000592         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.84e-05  0.000592         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000592432
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999984  1.59933e-05  1.36678e-05  1.62411e-06  7.54031e-08  2.55031e-07   1.1188e-08  3.65989e-07   1.1991e-09  2.63946e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11829, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         3.61043e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.146404, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71094, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7737.27      3295.18      1462.04      1561.36      210.619      11405.9      2560.51      87.5579
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.870064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090009, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.977599, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00077682  0.000777246  0.000547995
      low eigenvalue method done, cpu time[sec] = 0.988071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000777  0.000548         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.53e-05  0.000548         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000547695
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999985  1.47856e-05   1.2668e-05  1.45319e-06  6.98369e-08  2.29615e-07  1.02669e-08  3.60057e-07   1.2058e-09  2.63952e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11419, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.146075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6447.73      2745.98      1218.37      1301.13      175.516      9504.94      2133.76      72.9649
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.872597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089036, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000738598  0.000738977  0.000512602
      low eigenvalue method done, cpu time[sec] = 0.989597, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000739  0.000512         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.28e-05  0.000512         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000512339
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.38311e-05  1.18713e-05  1.32457e-06  6.54903e-08  2.10522e-07  9.55941e-09   3.5436e-07   1.2119e-09  2.63959e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11924, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.05461e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145552, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5526.62       2353.7      1044.31      1115.26      150.442      8147.09      1828.94      62.5414
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.873155, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979665, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000706791  0.000707133  0.000483566
      low eigenvalue method done, cpu time[sec] = 0.990689, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000707  0.000483         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.07e-05  0.000483         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000483332
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999987  1.30481e-05  1.12137e-05  1.22314e-06  6.19528e-08  1.95464e-07    8.991e-09   3.4894e-07   1.2175e-09  2.63965e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.12325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.77669e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.146169, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.72084, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4835.79      2059.49      913.774       975.85      131.637       7128.7      1600.32      54.7237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.873623, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089011, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.979789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000679647  0.000679959  0.000459098
      low eigenvalue method done, cpu time[sec] = 0.990763, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00068  0.000459         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.9e-05  0.000459         1
         *Z       ---       ---  1.28e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000458888
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999988  1.23882e-05   1.0657e-05  1.14046e-06   5.8988e-08  1.83174e-07  8.51971e-09  3.43799e-07  1.22263e-09  2.63972e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.12685, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1900 K
      Energy reference = 69634 1/cm
      Energy step      = 328 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -63.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006023
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.201302
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.095859
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.10714
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.382948
         W1 Well: minimal relaxation eigenvalue = 0.0397159
         W1 Well: maximal relaxation eigenvalue = 1.02054
         W1 Well:       grid size = 258
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -14989 1/cm
         B1 Barrier:        grid size = 213
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -230 1/cm
         B2 Barrier:        grid size = 212
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 98 1/cm
         B3 Barrier:        grid size = 227
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4821 1/cm
         B4 Barrier:        grid size = 232
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6461 1/cm
         B5 Barrier: nonpositive number of states at -23846 1/cm => truncating
         B5 Barrier:        grid size = 285
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23845 1/cm
         B6 Barrier:        grid size = 208
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1410 1/cm
         B7 Barrier:        grid size = 198
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4690 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16498 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.10944, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 258
      MasterEquation::Barrier::truncate: real weight = 2.11076e+29
      MasterEquation::Barrier::truncate: effective weight = 3.15448e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -14989 -14989 5.93e+07 1.53e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -230 1.49e+18
         B2     99 6.68e+17
         B3  -4821 3.11e+17
         B4  -6461 3.31e+17
         B5 -14989  4.5e+16
         B6   1411 2.28e+18
         B7   4691  5.3e+17
         B8  16499 1.99e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.53e-15  1.22e-14  2.54e-15  8.39e-16  2.19e-21  2.32e-13  8.71e-12  1.15e-06
          R  1.53e+14         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  8.19e+13     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2  3.93e+14      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  1.19e+15      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4  4.57e+20  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  4.32e+12    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6  1.15e+11  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7  8.69e+05  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.64e-16  3.06e-16  6.38e-17   2.1e-17  5.49e-23  5.81e-15  2.19e-13  2.89e-08
          R   6.1e+15         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  3.26e+15     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2  1.57e+16      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  4.75e+16      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4  1.82e+22  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  1.72e+14    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6  4.57e+12  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7  3.46e+07  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.12287, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63912, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             209960      93934.8      43747.2      46517.1      6326.24       320857      74443.6      2799.03
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.84645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941505, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00194454   0.00194791     0.001728
      low eigenvalue method done, cpu time[sec] = 0.951601, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00195   0.00173         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000119   0.00173     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00172502
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999897  0.000102743  8.15567e-05  1.64682e-05   5.5359e-07  2.92753e-06  9.83817e-08  1.22743e-06  4.68333e-09  1.83516e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99526, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142408, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66114, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            69986.6      31311.6      14582.4      15505.7      2108.75       106952      24814.5      933.011
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.8481, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.94182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0016578   0.00166012    0.0014015
      low eigenvalue method done, cpu time[sec] = 0.951985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00166    0.0014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.91e-05    0.0014     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00139954
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999917  8.33571e-05  6.86407e-05  1.12412e-05  4.12334e-07  1.79855e-06  6.73156e-08  1.26059e-06  4.70208e-09  1.83518e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.01805, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         6.97198e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142365, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66591, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              41992        18787      8749.43      9303.41      1265.25      64171.4      14888.7      559.806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848697, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.942365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00151797   0.00151986    0.0012476
      low eigenvalue method done, cpu time[sec] = 0.952574, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00152   0.00125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.95e-05   0.00125     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00124605
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999926  7.42151e-05  6.19333e-05  9.20417e-06  3.58889e-07  1.44481e-06  5.67395e-08  1.26955e-06  4.71839e-09   1.8352e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02226, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         9.76077e+08
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142494, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66054, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29994.3      13419.3      6249.59       6645.3      903.749      45836.7      10634.8      399.862
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846771, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087103, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.940786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00142471   0.00142635   0.00114725
      low eigenvalue method done, cpu time[sec] = 0.951304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00143   0.00115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.32e-05   0.00115     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00114593
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999932  6.82522e-05  5.73838e-05  8.01401e-06  3.26823e-07  1.25163e-06  5.06976e-08  1.27072e-06  4.73337e-09  1.83521e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.01646, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         1.25496e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141844, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66176, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23328.9      10437.2       4860.8      5168.56      702.916      35650.8      8271.51      311.004
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.844999, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.93909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00135484   0.00135629   0.00107334
      low eigenvalue method done, cpu time[sec] = 0.949245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00136   0.00107         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.86e-05   0.00107     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00107219
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999936  6.38599e-05  5.39544e-05  7.20258e-06  3.04295e-07  1.12426e-06  4.65851e-08  1.26836e-06   4.7474e-09  1.83523e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.01595, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142091, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              20996      9393.48      4374.72      4651.71      632.624      32085.7      7444.36      279.903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087677, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.942619, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00132555   0.00132693    0.0010427
      low eigenvalue method done, cpu time[sec] = 0.952719, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00133   0.00104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.66e-05   0.00104     0.999
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00104162
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999938   6.2039e-05  5.25147e-05  6.88164e-06  2.95186e-07  1.07468e-06  4.49528e-08  1.26642e-06  4.75412e-09  1.83524e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.01595, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.09159e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141561, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66715, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13997.3      6262.32      2916.48      3101.14       421.75      21390.5       4962.9      186.602
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.847731, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00121326   0.00121438  0.000927189
      low eigenvalue method done, cpu time[sec] = 0.951195, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00121  0.000926         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.93e-05  0.000926         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00092633
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999945  5.51725e-05  4.69989e-05  5.74848e-06  2.61859e-07  9.02498e-07  3.91254e-08  1.25307e-06  4.78533e-09  1.83528e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.78879e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142376, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66551, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10498      4696.74      2187.36      2325.85      316.312      16042.8      3722.18      139.952
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846492, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.940055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00113439   0.00113535  0.000847991
      low eigenvalue method done, cpu time[sec] = 0.950217, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00114  0.000847         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.42e-05  0.000847         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000847273
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99995  5.04638e-05  4.31443e-05  5.03769e-06   2.3977e-07  7.96167e-07  3.53855e-08  1.23731e-06   4.8133e-09  1.83532e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02089, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         3.48599e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141866, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6658, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8398.39      3757.39      1749.89      1860.68       253.05      12834.3      2977.74      111.961
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846569, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087384, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.940592, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00107392   0.00107477   0.00078842
      low eigenvalue method done, cpu time[sec] = 0.950819, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00107  0.000788         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.03e-05  0.000788         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000787799
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999953  4.69215e-05  4.02099e-05   4.5361e-06  2.23472e-07  7.21576e-07  3.26865e-08  1.22116e-06  4.83869e-09  1.83537e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02129, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.142048, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66881, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6998.66      3131.16      1458.24      1550.57      210.875      10695.2      2481.45      93.3011
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087546, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.942294, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0010251   0.00102586   0.00074108
      low eigenvalue method done, cpu time[sec] = 0.952466, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00103  0.000741         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-05  0.000741         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000740531
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999956  4.41062e-05  3.78585e-05  4.15669e-06  2.10676e-07  6.65261e-07  3.06023e-08  1.20531e-06   4.8619e-09  1.83541e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.88039e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141256, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66485, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5998.85      2683.85      1249.92      1329.06       180.75      9167.34      2126.96      79.9723
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848632, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00098431  0.000985001  0.000702057
      low eigenvalue method done, cpu time[sec] = 0.951969, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000985  0.000702         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.46e-05  0.000702         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000701564
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999958  4.17854e-05  3.59081e-05  3.85622e-06  2.00212e-07  6.20655e-07  2.89205e-08  1.18999e-06  4.88323e-09  1.83545e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02092, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         5.57758e+09
      global relaxation matrix dimension = 258
      setting global matrices ... done, cpu time[sec] = 0.141844, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66692, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               5249      2348.37      1093.68      1162.93      158.156      8021.42      1861.09      69.9758
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848459, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086815, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.941492, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00094937  0.000950006  0.000669035
      low eigenvalue method done, cpu time[sec] = 0.951555, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00095  0.000669         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.25e-05  0.000669         1
         *Z       ---       ---  8.07e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000668588
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99996  3.98213e-05  3.42496e-05  3.61032e-06  1.91407e-07  5.84107e-07  2.75203e-08  1.17529e-06  4.90292e-09   1.8355e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02197, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2000 K
      Energy reference = 72415 1/cm
      Energy step      = 345 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -61.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00601
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.176654
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.093687
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.10088
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.380707
         W1 Well: minimal relaxation eigenvalue = 0.0379641
         W1 Well: maximal relaxation eigenvalue = 1.02714
         W1 Well:       grid size = 255
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15559 1/cm
         B1 Barrier:        grid size = 210
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -34 1/cm
         B2 Barrier:        grid size = 210
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -34 1/cm
         B3 Barrier:        grid size = 224
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4864 1/cm
         B4 Barrier:        grid size = 228
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6244 1/cm
         B5 Barrier: nonpositive number of states at -23495 1/cm => truncating
         B5 Barrier:        grid size = 278
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23494 1/cm
         B6 Barrier:        grid size = 206
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1345 1/cm
         B7 Barrier:        grid size = 197
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4450 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16525 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.07555, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 255
      MasterEquation::Barrier::truncate: real weight = 1.60208e+29
      MasterEquation::Barrier::truncate: effective weight = 2.51836e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15559 -15559 4.59e+07 2.05e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -34 2.09e+18
         B2    -34  9.8e+17
         B3  -4864 4.79e+17
         B4  -6244 5.07e+17
         B5 -15559 6.95e+16
         B6   1346  3.3e+18
         B7   4451 7.91e+17
         B8  16526 3.25e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.27e-15   6.2e-15   1.5e-15  5.28e-16  2.76e-21  1.05e-13  3.52e-12  3.07e-07
          R  3.06e+14         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1  1.61e+14     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  6.66e+14      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3  1.89e+15      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4  3.62e+20  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  9.53e+12    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6  2.84e+11  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  3.26e+06  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.02e-17  9.51e-17  2.31e-17  8.11e-18  4.24e-23  1.61e-15   5.4e-14   4.7e-09
          R  1.99e+16         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1  1.05e+16     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  4.34e+16      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3  1.23e+17      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4  2.36e+22  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  6.21e+14    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6  1.85e+13  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  2.13e+08  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.08984, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137713, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62308, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             226084       106049        51849      54909.6      7524.65       357543      85554.7      3518.67
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.817924, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088593, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.923107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0027917   0.00279902   0.00261983
      low eigenvalue method done, cpu time[sec] = 0.932861, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0028   0.00261         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00017   0.00261     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00261298
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999732  0.000267686  0.000213214  4.21222e-05  1.43859e-06   7.4399e-06  2.53177e-07  3.55848e-06  1.61602e-08  1.04096e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94984, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61526, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            75361.3      35349.8        17283      18303.2      2508.22       119181      28518.2      1172.89
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085418, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.922889, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00241402   0.00241923   0.00215825
      low eigenvalue method done, cpu time[sec] = 0.933687, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00242   0.00215         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000143   0.00215     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0021536
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999779  0.000220625  0.000182049  2.92255e-05  1.09403e-06  4.67105e-06  1.77172e-07  3.65764e-06  1.62221e-08  1.04097e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9448, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          6.7438e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138897, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61819, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45216.8      21209.9      10369.8      10981.9      1504.93      71508.7      17110.9      703.733
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.822103, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.924268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00222737   0.00223169   0.00193775
      low eigenvalue method done, cpu time[sec] = 0.934465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00223   0.00193         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00013   0.00193     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.001934
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999802  0.000198128  0.000165591  2.41493e-05  9.62305e-07  3.79461e-06  1.51038e-07   3.6895e-06  1.62755e-08  1.04098e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94902, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         9.44132e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.139365, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61635, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32297.7      15149.9      7407.01      7844.23      1074.95      51077.6      12222.1      502.667
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.817425, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085815, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.920276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00210195   0.00210572   0.00179284
      low eigenvalue method done, cpu time[sec] = 0.930521, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00211   0.00179         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000122   0.00179     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00178963
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999817  0.000183338  0.000154326  2.11662e-05  8.82752e-07  3.31301e-06  1.36014e-07  3.69902e-06  1.63242e-08  1.04099e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94467, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.21388e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.1384, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62133, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25120.4      11783.3         5761      6101.07      836.072      39727.1      9506.08      390.963
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.816598, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086161, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.91961, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00200745   0.00201083    0.0016855
      low eigenvalue method done, cpu time[sec] = 0.929827, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00201   0.00168         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000115   0.00168     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00168266
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999828   0.00017238  0.000145779  1.91234e-05  8.26575e-07  2.99395e-06  1.25738e-07  3.69806e-06  1.63698e-08    1.041e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.139088, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22608.4      10604.9       5184.9      5490.96      752.465      35754.3      8555.47      351.867
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820427, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.922514, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0019677   0.00197093   0.00164084
      low eigenvalue method done, cpu time[sec] = 0.932756, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00197   0.00164         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000113   0.00164     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00163815
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999832  0.000167819  0.000142176  1.83131e-05  8.03785e-07  2.86937e-06  1.21647e-07  3.69526e-06  1.63916e-08    1.041e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.02314e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138823, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6281, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15072.3      7069.95       3456.6      3660.64      501.643      23836.2      5703.65      234.578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820872, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085797, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.923558, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00181452   0.00181719   0.00147152
      low eigenvalue method done, cpu time[sec] = 0.933813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00182   0.00147         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000103   0.00147     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00146936
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999849  0.000150528  0.000128289  1.54399e-05  7.19978e-07  2.43473e-06   1.0697e-07  3.66932e-06  1.64927e-08  1.04103e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95879, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.69752e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62131, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11304.2      5302.47      2592.45      2745.48      376.233      17877.2      4277.74      175.933
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.821507, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.923156, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00170613   0.00170844   0.00135451
      low eigenvalue method done, cpu time[sec] = 0.933643, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00171   0.00135         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.55e-05   0.00135     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00135268
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999861  0.000138575  0.000118503  1.36261e-05  6.64017e-07  2.16446e-06  9.74838e-08  3.63449e-06  1.65835e-08  1.04105e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95151, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          3.3719e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.139324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62777, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9043.35      4241.97      2073.96      2196.38      300.986      14301.7      3422.19      140.747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820394, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.922512, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00162255   0.00162461   0.00126596
      low eigenvalue method done, cpu time[sec] = 0.93277, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00162   0.00126         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.01e-05   0.00126     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00126436
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99987  0.000129527  0.000111005  1.23396e-05   6.2248e-07  1.97382e-06  9.05986e-08  3.59703e-06   1.6666e-08  1.04107e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95747, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62777, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7536.13      3534.98       1728.3      1830.32      250.822      11918.1      2851.82      117.289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819501, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.922227, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00155476   0.00155662   0.00119523
      low eigenvalue method done, cpu time[sec] = 0.932501, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00156   0.00119         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.58e-05   0.00119     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00119381
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999878  0.000122299  0.000104965  1.13623e-05  5.89705e-07  1.82923e-06  8.52565e-08  3.55925e-06  1.67417e-08  1.04109e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.72066e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13885, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62019, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6459.54      3029.98       1481.4      1568.85       214.99      10215.5      2444.42      100.533
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.922189, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00149788   0.00149958   0.00113667
      low eigenvalue method done, cpu time[sec] = 0.932464, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0015   0.00114         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.22e-05   0.00114     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00113538
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999884  0.000116314  9.99317e-05  1.05854e-05  5.62788e-07  1.71425e-06  8.09275e-08  3.52209e-06  1.68116e-08  1.04112e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         5.39504e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138641, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5652.1      2651.23      1296.23      1372.74      188.116      8938.59      2138.87      87.9667
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.818855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085267, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.920962, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00144898   0.00145056   0.00108693
      low eigenvalue method done, cpu time[sec] = 0.931232, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00145   0.00109         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.91e-05   0.00109     0.999
         *Z       ---       ---  4.96e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00108575
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999889  0.000111229  9.56352e-05  9.94751e-06  5.40049e-07   1.6197e-06  7.73103e-08  3.48595e-06  1.68763e-08  1.04114e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94816, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2100 K
      Energy reference = 75195 1/cm
      Energy step      = 362 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -59.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006263
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.196593
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.091489
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.089599
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.366387
         W1 Well: minimal relaxation eigenvalue = 0.0361471
         W1 Well: maximal relaxation eigenvalue = 1.03594
         W1 Well:       grid size = 253
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -16391 1/cm
         B1 Barrier:        grid size = 208
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -101 1/cm
         B2 Barrier:        grid size = 208
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -101 1/cm
         B3 Barrier:        grid size = 221
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4807 1/cm
         B4 Barrier:        grid size = 225
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6255 1/cm
         B5 Barrier: nonpositive number of states at -23269 1/cm => truncating
         B5 Barrier:        grid size = 272
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23269 1/cm
         B6 Barrier:        grid size = 204
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1346 1/cm
         B7 Barrier:        grid size = 195
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4604 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16551 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06843, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 253
      MasterEquation::Barrier::truncate: real weight = 1.28164e+29
      MasterEquation::Barrier::truncate: effective weight = 2.11393e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -16391 -16391 3.11e+07 2.74e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -101 2.89e+18
         B2   -101 1.42e+18
         B3  -4807 7.27e+17
         B4  -6255 7.67e+17
         B5 -16391 1.06e+17
         B6   1347 4.71e+18
         B7   4605 1.16e+18
         B8  16551  5.2e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.8e-15  3.46e-15  9.59e-16  3.58e-16   3.5e-21  5.26e-14  1.59e-12   9.5e-08
          R  5.56e+14         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  2.89e+14     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2  1.04e+15      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3  2.79e+15      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  2.85e+20  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5   1.9e+13    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6   6.3e+11   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7  1.05e+07  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.73e-17  3.32e-17   9.2e-18  3.43e-18  3.36e-23  5.05e-16  1.52e-14  9.12e-10
          R  5.79e+16         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  3.01e+16     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2  1.09e+17      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3  2.91e+17      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  2.97e+22  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5  1.98e+15    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6  6.56e+13   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7   1.1e+09  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.08179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57438, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             241703       118650        60898      64249.7      8867.48       394942      97278.5      4355.66
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083796, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00373642   0.00375007    0.0036491
      low eigenvalue method done, cpu time[sec] = 0.908676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00375   0.00364         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000222   0.00364     0.998
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00363583
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999375    0.0006248  0.000499096  9.66737e-05  3.35506e-06  1.69857e-05  5.85121e-07  9.18533e-06  4.89918e-08  4.96121e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87249, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136064, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57937, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            80567.7      39550.1      20299.3      21416.6      2955.83       131647      32426.2      1451.89
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.800293, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083189, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899827, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00327076   0.00328074   0.00304836
      low eigenvalue method done, cpu time[sec] = 0.90929, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00328   0.00304         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000189   0.00304     0.998
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00303909
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999478  0.000522254  0.000431689  6.80384e-05  2.59972e-06  1.08752e-05  4.17878e-07  9.44653e-06  4.91739e-08  4.96125e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87498, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         6.53369e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136311, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58732, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48340.6      23730.1      12179.6      12849.9       1773.5      78988.5      19455.7      871.131
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.799566, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083207, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899167, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00303816   0.00304654   0.00275812
      low eigenvalue method done, cpu time[sec] = 0.908939, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00305   0.00275         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000173   0.00275     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00275054
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999527  0.000472667  0.000395535  5.66899e-05  2.30856e-06  8.92484e-06  3.59913e-07  9.54105e-06  4.93286e-08  4.96129e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88652, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         9.14716e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136705, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58604, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              34529        16950      8699.72      9178.53      1266.78      56420.3      13896.9      622.237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.801218, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.901502, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00288084   0.00288824   0.00256605
      low eigenvalue method done, cpu time[sec] = 0.911558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00289   0.00256         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000163   0.00256     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00255948
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99956  0.000439835  0.000370577  4.99883e-05  2.13174e-06  7.84752e-06  3.26419e-07  9.57885e-06  4.94694e-08  4.96133e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88638, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.17606e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136038, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58818, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26855.9      13183.4      6766.45      7138.86      985.276      43882.5      10808.7      483.962
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.802737, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083636, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.90292, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00276175   0.00276844   0.00242302
      low eigenvalue method done, cpu time[sec] = 0.912599, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00277   0.00242         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000155   0.00242     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00241717
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999585  0.000415379  0.000351527  4.53817e-05  2.00634e-06  7.13092e-06  3.03416e-07   9.5893e-06  4.96004e-08  4.96137e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88781, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135935, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24170.3        11865       6089.8      6424.97      886.748      39494.2      9727.85      435.566
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.801645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08392, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.901998, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0027115   0.00271792   0.00236332
      low eigenvalue method done, cpu time[sec] = 0.912123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00272   0.00236         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000152   0.00236     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00235774
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999595  0.000405167  0.000343466  4.35499e-05  1.95532e-06  6.85038e-06  2.94232e-07  9.58832e-06   4.9663e-08  4.96139e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87857, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.96011e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.1361, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58232, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16113.5      7910.02      4059.87      4283.31      591.165      26329.5      6485.23      290.377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.802272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.902347, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00251698   0.00252236   0.00213584
      low eigenvalue method done, cpu time[sec] = 0.912462, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00252   0.00213         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000139   0.00213     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00213128
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999634  0.000366251  0.000312229  3.70299e-05  1.76687e-06  5.86768e-06  2.61155e-07  9.55004e-06  4.99532e-08  4.96149e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88457, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         2.61347e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136307, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59217, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12085.2      5932.52       3044.9      3212.49      443.374      19747.1      4863.92      217.783
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.801665, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.901619, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00237843   0.00238314   0.00197751
      low eigenvalue method done, cpu time[sec] = 0.912063, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00238   0.00197         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00013   0.00197     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0019736
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999661  0.000339155  0.000290044  3.28906e-05   1.6402e-06  5.25297e-06  2.39643e-07  9.48491e-06  5.02133e-08   4.9616e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.89329, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.26684e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.137043, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59587, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9668.13      4746.01      2435.92      2569.99      354.699      15797.7      3891.14      174.226
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.803446, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.892805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00227106   0.00227528   0.00185701
      low eigenvalue method done, cpu time[sec] = 0.902972, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00228   0.00185         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000123   0.00185     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00185357
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999681  0.000318527  0.000272945  2.99412e-05  1.54569e-06   4.8173e-06  2.23952e-07  9.40986e-06  5.04501e-08   4.9617e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88931, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.137157, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59876, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8056.77      3955.01      2029.93      2141.66      295.583      13164.7      3242.62      145.189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.803457, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893198, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00218361   0.00218745   0.00176032
      low eigenvalue method done, cpu time[sec] = 0.903311, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00219   0.00176         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000118   0.00176     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00175723
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999698  0.000301971  0.000259104  2.76922e-05  1.47079e-06  4.48552e-06  2.11726e-07  9.33144e-06  5.06676e-08   4.9618e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.89224, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         4.57358e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13575, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6905.8      3390.01      1739.94      1835.71      253.357      11284.1      2779.39      124.447
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.803342, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.892175, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00210996   0.00211351   0.00167995
      low eigenvalue method done, cpu time[sec] = 0.902276, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00211   0.00168         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000113   0.00168     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00167713
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999712  0.000288208  0.000247523  2.58984e-05  1.40904e-06  4.22074e-06  2.01782e-07  9.25258e-06  5.08687e-08   4.9619e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         5.22695e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5951, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6042.58      2966.26      1522.45      1606.24      221.687      9873.56      2431.96      108.891
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.803741, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082729, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.89262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00204646   0.00204976   0.00161144
      low eigenvalue method done, cpu time[sec] = 0.903031, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00205   0.00161         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000109   0.00161     0.999
         *Z       ---       ---  3.28e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00160885
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999724  0.000276473  0.000237601  2.44212e-05  1.35669e-06  4.00234e-06  1.93446e-07  9.17467e-06  5.10555e-08    4.962e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88721, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2200 K
      Energy reference = 77975 1/cm
      Energy step      = 379 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -57 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006127
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.194714
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.089676
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.080522
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.358631
         W1 Well: minimal relaxation eigenvalue = 0.0344914
         W1 Well: maximal relaxation eigenvalue = 1.04541
         W1 Well:       grid size = 251
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17154 1/cm
         B1 Barrier:        grid size = 206
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -98 1/cm
         B2 Barrier:        grid size = 206
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -98 1/cm
         B3 Barrier:        grid size = 218
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4647 1/cm
         B4 Barrier:        grid size = 223
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6541 1/cm
         B5 Barrier: nonpositive number of states at -23597 1/cm => truncating
         B5 Barrier:        grid size = 268
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23597 1/cm
         B6 Barrier:        grid size = 202
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1416 1/cm
         B7 Barrier:        grid size = 194
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4448 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16576 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.04297, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 251
      MasterEquation::Barrier::truncate: real weight = 1.07253e+29
      MasterEquation::Barrier::truncate: effective weight = 1.8521e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17154 -17154 2.15e+07 3.63e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -98 3.94e+18
         B2    -98 2.02e+18
         B3  -4647 1.09e+18
         B4  -6541 1.14e+18
         B5 -17154 1.59e+17
         B6   1417 6.64e+18
         B7   4449 1.68e+18
         B8  16577 8.16e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.82e-16  1.91e-15  5.99e-16  2.36e-16  4.08e-21  2.63e-14  7.21e-13  3.07e-08
          R  1.02e+15         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1  5.23e+14     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  1.67e+15      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  4.24e+15      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  2.45e+20   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5   3.8e+13    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  1.39e+12   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  3.26e+07   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.57e-18  1.28e-17  4.01e-18  1.58e-18  2.73e-23  1.76e-16  4.83e-15  2.06e-10
          R  1.52e+17         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1  7.82e+16     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  2.49e+17      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  6.33e+17      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  3.66e+22   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5  5.68e+15    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  2.07e+14   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  4.86e+09   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.05677, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53498, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             256744       131675      70939.7      74579.8      10362.1       432829       109553      5317.76
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781263, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082483, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879198, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00503635   0.00506233   0.00515284
      low eigenvalue method done, cpu time[sec] = 0.888617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00506   0.00513         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000296   0.00513     0.997
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00512643
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998678   0.00132228   0.00106003  0.000200369   7.1099e-06  3.52235e-05  1.22879e-06  2.14481e-05  1.32735e-07  2.03488e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.80692, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134487, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55929, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            85581.3      43891.6      23646.6      24859.9      3454.04       144276      36517.7      1772.59
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.788459, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081499, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876067, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00446074   0.00448021   0.00436154
      low eigenvalue method done, cpu time[sec] = 0.885633, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00448   0.00434         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000255   0.00434     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0043426
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99888    0.0011201  0.000927702   0.00014328  5.60551e-06  2.29694e-05   8.9442e-07  2.20631e-05  1.33211e-07  2.03489e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82807, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         6.33945e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134529, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56273, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            51348.8      26334.9      14187.9        14916      2072.43      86565.8      21910.6      1063.55
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784674, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082643, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.873766, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00416989   0.00418648    0.0039747
      low eigenvalue method done, cpu time[sec] = 0.88328, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00419   0.00396         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000235   0.00396     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00395896
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998979   0.00102115  0.000855701  0.000120394  5.02178e-06   1.9031e-05  7.77783e-07  2.23052e-05   1.3361e-07  2.03491e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82807, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         8.87523e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.13293, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5616, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36677.7      18810.7      10134.2      10654.3       1480.3      61832.7      15650.5       759.68
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082295, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.87262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0039719   0.00398668   0.00371694
      low eigenvalue method done, cpu time[sec] = 0.88222, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00399    0.0037         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000221    0.0037     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00370318
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999045  0.000955172  0.000805603    0.0001068  4.66559e-06  1.68454e-05  7.10082e-07  2.24181e-05  1.33972e-07  2.03492e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82497, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1          1.1411e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134008, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56223, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28527.1      14630.5      7882.18      8286.65      1151.35      48092.1      12172.6      590.862
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.785769, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083797, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0038213   0.00383478   0.00352404
      low eigenvalue method done, cpu time[sec] = 0.886111, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00383   0.00351         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000211   0.00351     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00351166
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999094  0.000905774  0.000767146  9.74156e-05  4.41198e-06  1.53864e-05   6.6342e-07  2.24673e-05  1.34309e-07  2.03494e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83176, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.13458, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25674.4      13167.5      7093.97      7457.98      1036.21      43282.9      10955.3      531.776
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.789818, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082107, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878666, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00375758   0.00377053   0.00344326
      low eigenvalue method done, cpu time[sec] = 0.8887, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00377   0.00343         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000207   0.00343     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00343144
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999115  0.000885083  0.000750817  9.36739e-05  4.30853e-06  1.48138e-05  6.44745e-07  2.24772e-05  1.34469e-07  2.03495e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83588, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.90183e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17116.3      8778.31      4729.31      4971.99      690.809      28855.3      7303.55      354.517
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.785257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081946, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.873559, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00350977   0.00352078   0.00313402
      low eigenvalue method done, cpu time[sec] = 0.88358, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00352   0.00312         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00019   0.00312     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00312423
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999194  0.000805843  0.000687207  8.03037e-05  3.92493e-06   1.2801e-05  5.77237e-07  2.24447e-05  1.35212e-07  2.03499e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83775, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         2.53578e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.13335, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56833, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12837.2      6583.73      3546.98      3728.99      518.107      21641.4      5477.66      265.888
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.787499, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876021, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00333216   0.00334189   0.00291734
      low eigenvalue method done, cpu time[sec] = 0.886031, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00334   0.00291         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000179   0.00291     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00290886
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99925  0.000750291  0.000641703  7.17669e-05  3.66556e-06  1.15351e-05  5.33089e-07   2.2343e-05  1.35878e-07  2.03502e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83684, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.16972e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57263, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10269.8      5266.99      2837.59      2983.19      414.485      17313.2      4382.13       212.71
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.787005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082305, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.875567, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00319385   0.00320264   0.00275158
      low eigenvalue method done, cpu time[sec] = 0.88558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0032   0.00274         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00017   0.00274     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00274403
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999292  0.000707776  0.000606438  6.56571e-05  3.47111e-06  1.06339e-05  5.00741e-07  2.22124e-05  1.36485e-07  2.03506e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84307, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134604, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8558.13      4389.16      2364.66      2485.99      345.404      14427.6      3651.77      177.259
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784187, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082617, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.873042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00308073    0.0030888   0.00261799
      low eigenvalue method done, cpu time[sec] = 0.883538, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00309   0.00261         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000163   0.00261     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00261115
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999326  0.000673503   0.00057776  6.09807e-05  3.31636e-06  9.94515e-06  4.75441e-07  2.20693e-05  1.37044e-07   2.0351e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         4.43761e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134677, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57075, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7335.54      3762.13      2026.85      2130.85      296.061      12366.5      3130.09      151.936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.787431, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082483, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876054, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00298515   0.00299264   0.00250654
      low eigenvalue method done, cpu time[sec] = 0.886151, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00299    0.0025         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000157    0.0025     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00250027
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999355  0.000644902  0.000553674  5.72389e-05  3.18834e-06  9.39371e-06  4.54794e-07  2.19211e-05  1.37563e-07  2.03514e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84126, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         5.07156e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134252, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56992, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6418.6      3291.87      1773.49       1864.5      259.053      10820.7      2738.83      132.944
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.787245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.876065, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00290249    0.0029095   0.00241122
      low eigenvalue method done, cpu time[sec] = 0.886475, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00291   0.00241         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000152   0.00241     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00240542
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99938  0.000620438  0.000532967  5.41486e-05  3.07947e-06  8.93755e-06  4.37435e-07   2.1772e-05  1.38045e-07  2.03518e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84023, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2300 K
      Energy reference = 80755 1/cm
      Energy step      = 397 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -54.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006422
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.188101
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.088507
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.095273
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.361933
         W1 Well: minimal relaxation eigenvalue = 0.0330906
         W1 Well: maximal relaxation eigenvalue = 1.05375
         W1 Well:       grid size = 248
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17700 1/cm
         B1 Barrier:        grid size = 204
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -233 1/cm
         B2 Barrier:        grid size = 203
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 163 1/cm
         B3 Barrier: nonpositive number of states at -4600 1/cm => truncating
         B3 Barrier:        grid size = 215
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4599 1/cm
         B4 Barrier:        grid size = 219
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6187 1/cm
         B5 Barrier: nonpositive number of states at -23259 1/cm => truncating
         B5 Barrier:        grid size = 262
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23259 1/cm
         B6 Barrier:        grid size = 200
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1354 1/cm
         B7 Barrier:        grid size = 192
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4530 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16441 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.05864, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 248
      MasterEquation::Barrier::truncate: real weight = 9.32532e+28
      MasterEquation::Barrier::truncate: effective weight = 1.68682e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17700 -17700 1.64e+07 4.77e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -233 5.32e+18
         B2    164 2.84e+18
         B3  -4599 1.61e+18
         B4  -6187 1.68e+18
         B5 -17700 2.36e+17
         B6   1355 9.23e+18
         B7   4531  2.4e+18
         B8  16441 1.26e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   5.2e-16  1.03e-15  3.59e-16  1.48e-16  4.33e-21  1.28e-14  3.22e-13  1.01e-08
          R  1.92e+15         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  9.75e+14     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  2.79e+15      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  6.74e+15       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4  2.31e+20   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5   7.8e+13    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6   3.1e+12   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  9.93e+07  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.73e-18  5.39e-18  1.88e-18  7.79e-19  2.27e-23  6.74e-17  1.69e-15  5.29e-11
          R  3.66e+17         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  1.86e+17     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  5.31e+17      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  1.28e+18       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4   4.4e+22   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5  1.48e+16    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6  5.91e+14   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  1.89e+10  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07198, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131593, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             271145       145057      82014.6      85937.3      12015.3       470984       122313      6411.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760932, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080597, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.857766, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00691345   0.00696553    0.0075198
      low eigenvalue method done, cpu time[sec] = 0.867275, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00697   0.00746         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000408   0.00746     0.996
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00746368
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99743   0.00257048   0.00206639  0.000383521  1.38384e-05  6.69874e-05   2.3691e-06  4.58808e-05  3.26467e-07  7.32709e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73439, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131122, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50316, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            90381.8      48352.3      27338.2      28645.8      4005.09       156995      40770.9      2137.26
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.757596, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853109, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00618798   0.00622789   0.00643843
      low eigenvalue method done, cpu time[sec] = 0.862489, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00623    0.0064         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000355    0.0064     0.997
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00639724
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997797    0.0022032   0.00182798  0.000277402   1.1093e-05  4.44798e-05   1.7567e-06  4.71948e-05  3.27595e-07  7.32714e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73775, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         6.15924e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131288, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50236, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            54229.1      29011.4      16402.9      17187.5      2403.05      94196.9      24462.6      1282.36
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758796, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080135, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.854841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00581858   0.00585299   0.00590544
      low eigenvalue method done, cpu time[sec] = 0.864556, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00585   0.00587         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000329   0.00587     0.997
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00587077
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997978   0.00202188   0.00169648  0.000234766  1.00207e-05   3.7194e-05  1.54168e-06   4.7748e-05  3.28534e-07  7.32719e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74016, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         8.62294e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130871, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51608, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              38735      20722.4      11716.4      12276.8      1716.47      67283.5      17473.3       915.97
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.76314, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080193, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.859429, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00556578   0.00559671   0.00554831
      low eigenvalue method done, cpu time[sec] = 0.868867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0056   0.00552         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000311   0.00552     0.997
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0055177
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9981   0.00190029    0.0016043  0.000209356  9.36342e-06  3.31331e-05  1.41634e-06  4.80327e-05   3.2938e-07  7.32725e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.10866e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131442, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51544, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30127.3      16117.4      9112.73      9548.59      1335.03      52331.6      13590.3      712.421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.759244, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.856055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0053727   0.00540111   0.00527989
      low eigenvalue method done, cpu time[sec] = 0.865441, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0054   0.00525         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000298   0.00525     0.997
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00525216
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998191   0.00180883   0.00153317  0.000191765  8.89379e-06  3.04128e-05  1.32967e-06  4.81824e-05  3.30164e-07   7.3273e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75461, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131235, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51043, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27114.5      14505.7      8201.46      8593.73      1201.53      47098.4      12231.3      641.179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.76122, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079757, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.856849, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00529078   0.00531816   0.00516717
      low eigenvalue method done, cpu time[sec] = 0.86625, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00532   0.00514         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000292   0.00514     0.997
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00514061
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99823   0.00177042   0.00150287  0.000184738  8.70179e-06   2.9343e-05   1.2949e-06  4.82256e-05  3.30538e-07  7.32733e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75076, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.84777e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131631, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18076.4      9670.46      5467.64      5729.15      801.017        31399      8154.19      427.452
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.762774, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079923, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.858486, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00497095   0.00499451   0.00473387
      low eigenvalue method done, cpu time[sec] = 0.868331, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00499   0.00471         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00027   0.00471     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00471157
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998377   0.00162266   0.00138425  0.000159553  7.98717e-06  2.55693e-05  1.16881e-06   4.8261e-05  3.32265e-07  7.32746e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          2.4637e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13557.3      7252.84      4100.73      4296.86      600.763      23549.2      6115.64      320.589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08225, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.859276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0047404   0.00476142   0.00442843
      low eigenvalue method done, cpu time[sec] = 0.868832, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00476   0.00441         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000255   0.00441     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0044089
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998482   0.00151842   0.00129882  0.000143399  7.50133e-06  2.31838e-05  1.08592e-06  4.81377e-05  3.33812e-07  7.32759e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75617, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.07962e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130642, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10845.8      5802.27      3280.58      3437.49       480.61      18839.4      4892.51      256.471
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.857104, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00456006   0.00457921   0.00419365
      low eigenvalue method done, cpu time[sec] = 0.866546, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00458   0.00418         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000243   0.00418     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00417614
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998562   0.00143825   0.00123227  0.000131794  7.13547e-06  2.14789e-05  1.02493e-06  4.79429e-05  3.35224e-07  7.32772e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76211, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5166, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9038.18      4835.23      2733.82      2864.58      400.509      15699.5      4077.09      213.726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760107, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080526, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.85661, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00441202    0.0044297    0.0040037
      low eigenvalue method done, cpu time[sec] = 0.866086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00443   0.00399         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000234   0.00399     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00398773
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998627   0.00137337   0.00117792  0.000122884  6.84324e-06  2.01714e-05  9.77069e-07  4.77129e-05  3.36525e-07  7.32786e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75667, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         4.31147e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131156, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51365, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7747.01      4144.48      2343.27      2455.35      343.293      13456.7      3494.65      183.194
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760023, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.080128, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.855958, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00428652   0.00430302   0.00384469
      low eigenvalue method done, cpu time[sec] = 0.865451, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0043   0.00383         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000226   0.00383     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00382997
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998681   0.00131903   0.00113211  0.000115735  6.60067e-06  1.91213e-05  9.37886e-07  4.74654e-05  3.37734e-07  7.32799e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75547, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          4.9274e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.131684, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51867, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6778.63      3626.42      2050.36      2148.43      300.381      11774.6      3057.82      160.295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.763144, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080251, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.859239, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00417768   0.00419319    0.0037083
      low eigenvalue method done, cpu time[sec] = 0.868829, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00419   0.00369         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000219   0.00369     0.998
         *Z       ---       ---  1.48e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0036946
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998728   0.00127241    0.0010926  0.000109816  6.39379e-06  1.82504e-05  9.04849e-07  4.72097e-05  3.38862e-07  7.32812e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76296, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2400 K
      Energy reference = 83535 1/cm
      Energy step      = 414 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -52.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006405
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.187296
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.08626
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.09723
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.345321
         W1 Well: minimal relaxation eigenvalue = 0.0317656
         W1 Well: maximal relaxation eigenvalue = 1.06444
         W1 Well:       grid size = 246
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -18309 1/cm
         B1 Barrier:        grid size = 202
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -93 1/cm
         B2 Barrier:        grid size = 202
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -93 1/cm
         B3 Barrier:        grid size = 213
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4646 1/cm
         B4 Barrier:        grid size = 217
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6303 1/cm
         B5 Barrier: nonpositive number of states at -23277 1/cm => truncating
         B5 Barrier:        grid size = 258
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23276 1/cm
         B6 Barrier:        grid size = 199
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1149 1/cm
         B7 Barrier:        grid size = 191
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4461 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16466 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.04773, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 246
      MasterEquation::Barrier::truncate: real weight = 8.37718e+28
      MasterEquation::Barrier::truncate: effective weight = 1.5802e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -18309 -18309  1.2e+07 6.24e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -93  7.1e+18
         B2    -93 3.96e+18
         B3  -4646 2.35e+18
         B4  -6303 2.45e+18
         B5 -18309 3.45e+17
         B6   1150 1.27e+19
         B7   4462 3.38e+18
         B8  16467 1.91e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.86e-16  5.71e-16  2.21e-16  9.55e-17  4.49e-21  6.53e-15  1.51e-13  3.56e-09
          R   3.5e+15         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1  1.75e+15       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2  4.53e+15       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  1.05e+16      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4  2.23e+20  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  1.53e+14    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6  6.61e+12   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7  2.81e+08  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e-18  2.45e-18  9.45e-19  4.09e-19  1.92e-23   2.8e-17  6.48e-16  1.52e-11
          R  8.17e+17         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1  4.09e+17       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2  1.06e+18       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  2.44e+18      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4   5.2e+22  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  3.58e+16    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6  1.54e+15   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7  6.56e+10  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.06116, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129948, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46024, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             284860       158733      94160.5      98356.6      13833.1       509207       135491      7643.77
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079781, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833359, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00922292   0.00932132     0.010644
      low eigenvalue method done, cpu time[sec] = 0.842983, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00932    0.0105         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000548    0.0105     0.995
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0105319
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995363   0.00463681   0.00374537  0.000673212  2.50969e-05  0.000118691   4.2568e-06  9.09044e-05   7.3791e-07  2.35478e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47583, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            94953.3      52911.1      31386.8      32785.5      4611.03       169736      45163.7      2547.92
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.744387, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078901, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.82936, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00834262   0.00841971   0.00922029
      low eigenvalue method done, cpu time[sec] = 0.838701, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00842   0.00914         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000481   0.00914     0.995
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00913605
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995978   0.00402229    0.0033458  0.000495931  2.04223e-05   8.0117e-05   3.2103e-06  9.35236e-05  7.40364e-07  2.35479e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68214, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         5.99151e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129445, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48256, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              56972      31746.7      18832.1      19671.3      2766.62       101841      27098.2      1528.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745171, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831062, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00788857   0.00795584   0.00850962
      low eigenvalue method done, cpu time[sec] = 0.840959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00796   0.00844         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000448   0.00844     0.996
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00843782
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996285   0.00371488   0.00312267  0.000423321  1.85897e-05  6.75711e-05  2.84141e-06   9.4689e-05  7.42388e-07  2.35481e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69349, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         8.38812e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48713, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40694.3      22676.2      13451.5      14050.9      1976.16      72743.9      19355.9      1091.97
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.747709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079408, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833211, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00757586   0.00763682   0.00803036
      low eigenvalue method done, cpu time[sec] = 0.84277, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00764   0.00797         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000425   0.00797     0.996
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00796638
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996493   0.00350732   0.00296518  0.000379718  1.74624e-05  6.05532e-05  2.62568e-06  9.53314e-05  7.44204e-07  2.35482e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69764, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.07847e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.130048, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49048, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31651.1        17637      10462.3      10928.5      1537.01      56578.6      15054.6      849.308
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745428, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079698, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831997, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00733594   0.00739231   0.00766848
      low eigenvalue method done, cpu time[sec] = 0.841628, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00739   0.00761         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000408   0.00761     0.996
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00761012
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99665   0.00335047   0.00284303  0.000349385  1.66546e-05  5.58386e-05  2.47608e-06  9.57073e-05  7.45883e-07  2.35484e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70152, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129596, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49551, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              28486      15873.3      9416.05      9835.66      1383.31      50920.7      13549.1      764.377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.747766, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079288, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833483, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00723387   0.00728835   0.00751609
      low eigenvalue method done, cpu time[sec] = 0.843159, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00729   0.00746         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000401   0.00746     0.996
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00746002
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996716   0.00328439   0.00279084  0.000337232  1.63236e-05  5.39808e-05  2.41596e-06  9.58318e-05  7.46682e-07  2.35485e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70831, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.79745e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.130408, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49549, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18990.7      10582.2      6277.36      6557.11      922.206      33947.1      9032.74      509.585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745164, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079428, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.830647, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00683371   0.00688114    0.0069278
      low eigenvalue method done, cpu time[sec] = 0.840235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00688   0.00688         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000373   0.00688     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00688014
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996971   0.00302908   0.00258558  0.000293496  1.50879e-05  4.74085e-05  2.19725e-06  9.60865e-05  7.50372e-07  2.35489e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70582, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.39661e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129188, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49696, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14243      7936.67      4708.02      4917.83      691.655      25460.3      6774.55      382.188
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745275, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00654361   0.00658629   0.00651064
      low eigenvalue method done, cpu time[sec] = 0.840739, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00659   0.00647         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000353   0.00647     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00646853
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997152   0.00284787   0.00243681  0.000265283  1.42437e-05  4.32352e-05  2.05284e-06  9.60083e-05  7.53678e-07  2.35493e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.99576e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128992, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49043, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11394.4      6349.34      3766.42      3934.26      553.324      20368.3      5419.64      305.751
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746228, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079599, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832258, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00631568   0.00635484   0.00618853
      low eigenvalue method done, cpu time[sec] = 0.841747, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00635   0.00615         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000338   0.00615     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00615047
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997292   0.00270784   0.00232035  0.000244927  1.36054e-05  4.02417e-05  1.94619e-06  9.57722e-05  7.56695e-07  2.35497e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70151, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129098, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49247, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9495.33      5291.11      3138.68      3278.55      461.103      16973.6      4516.37      254.792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.744634, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.829487, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00612789   0.00616428   0.00592694
      low eigenvalue method done, cpu time[sec] = 0.839029, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00616   0.00589         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000325   0.00589     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00589202
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997406   0.00259405   0.00222487  0.000229242  1.30938e-05  3.79387e-05  1.86222e-06  9.54524e-05  7.59481e-07  2.35501e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.19406e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49945, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8138.86      4535.24       2690.3      2810.19      395.231      14548.8      3871.17      218.393
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.74766, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07913, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832989, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00596822   0.00600234   0.00570726
      low eigenvalue method done, cpu time[sec] = 0.842851, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.006   0.00567         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000315   0.00567     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00567487
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997502   0.00249845    0.0021441  0.000216619  1.26679e-05  3.60843e-05  1.79329e-06  9.50861e-05  7.62072e-07  2.35505e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.79321e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49712, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7121.5      3968.34      2354.01      2458.92      345.827      12730.2      3387.28      191.094
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745959, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.83166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00582936   0.00586159    0.0055183
      low eigenvalue method done, cpu time[sec] = 0.841144, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00586   0.00549         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000306   0.00549     0.997
         *Z       ---       ---  1.03e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00548801
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997584   0.00241618   0.00207425  0.000206141  1.23037e-05  3.45425e-05  1.73503e-06  9.46937e-05  7.64497e-07  2.35509e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70783, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2500 K
      Energy reference = 86315 1/cm
      Energy step      = 431 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -50.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006281
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.18528
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.086589
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094548
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.356262
         W1 Well: minimal relaxation eigenvalue = 0.0303502
         W1 Well: maximal relaxation eigenvalue = 1.08016
         W1 Well:       grid size = 245
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19279 1/cm
         B1 Barrier:        grid size = 201
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -316 1/cm
         B2 Barrier:        grid size = 200
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 115 1/cm
         B3 Barrier:        grid size = 211
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4625 1/cm
         B4 Barrier:        grid size = 215
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6349 1/cm
         B5 Barrier: nonpositive number of states at -23159 1/cm => truncating
         B5 Barrier:        grid size = 254
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23159 1/cm
         B6 Barrier:        grid size = 197
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1408 1/cm
         B7 Barrier:        grid size = 190
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4424 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16493 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0437, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 245
      MasterEquation::Barrier::truncate: real weight = 7.73915e+28
      MasterEquation::Barrier::truncate: effective weight = 1.5198e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19279 -19279 7.15e+06 8.11e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -316 9.41e+18
         B2    116 5.45e+18
         B3  -4625 3.39e+18
         B4  -6349 3.53e+18
         B5 -19279    5e+17
         B6   1409 1.73e+19
         B7   4425 4.71e+18
         B8  16493 2.85e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.68e-16   3.4e-16  1.44e-16  6.49e-17  4.73e-21  3.57e-15  7.67e-14  1.39e-09
          R  5.95e+15         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  2.94e+15     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  6.96e+15      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  1.54e+16      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4  2.11e+20  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5   2.8e+14    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6   1.3e+13   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7  7.19e+08  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.87e-19  1.19e-18  5.03e-19  2.27e-19  1.65e-23  1.25e-17  2.68e-16  4.86e-12
          R   1.7e+18         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  8.41e+17     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  1.99e+18      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  4.41e+18      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4  6.05e+22  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5  8.02e+16    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6  3.73e+15   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7  2.06e+11  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.05748, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.12932, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             297854       172643       107412       111870      15821.5       547312       149022      9018.93
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.736752, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078773, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831523, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0118431    0.0120127    0.0142716
      low eigenvalue method done, cpu time[sec] = 0.841045, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.012    0.0141         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000695    0.0141     0.993
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0140708
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992098   0.00790188   0.00639328   0.00113668  4.29065e-05  0.000198391  7.21423e-06  0.000169225  1.54924e-06  6.84887e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65847, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.12685, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45224, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            99284.6      57547.8      35804.1      37289.8      5273.82       182437      49674.1      3006.31
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.734387, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078568, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.829009, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0107984    0.0109335    0.0124754
      low eigenvalue method done, cpu time[sec] = 0.838533, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0109    0.0123         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000615    0.0123     0.994
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0123216
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99308    0.0069196   0.00576275  0.000843402  3.54179e-05  0.000136066  5.52965e-06  0.000173991  1.55423e-06  6.84892e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         5.83492e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128353, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            59570.8      34528.7      21482.5      22373.9      3164.29       109462      29804.5      1803.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.735526, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077794, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.828831, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0102575    0.0103765    0.0115745
      low eigenvalue method done, cpu time[sec] = 0.838644, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0104    0.0114         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000574    0.0114     0.994
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.011442
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993574   0.00642563   0.00540609  0.000723851  3.24671e-05  0.000115677  4.93286e-06  0.000176194   1.5583e-06  6.84896e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         8.16889e+08
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128018, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46796, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            42550.6      24663.3      15344.6      15981.4      2260.21      78187.4      21288.9      1288.42
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.736685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.819899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00988353   0.00999218    0.0109644
      low eigenvalue method done, cpu time[sec] = 0.829193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00999    0.0108         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000547    0.0108     0.995
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0108455
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993909   0.00609062   0.00515264  0.000652003  3.06461e-05  0.000104233  4.58277e-06  0.000177469  1.56194e-06  6.84901e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66253, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.05029e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128035, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47208, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            33094.9      19182.6      11934.7      12429.9      1757.94      60812.5        16558       1002.1
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738465, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079571, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.824249, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00959577   0.00969682    0.0105022
      low eigenvalue method done, cpu time[sec] = 0.834137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0097    0.0104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000526    0.0104     0.995
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0103931
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994163   0.00583655   0.00495513  0.000601954  2.93376e-05   9.6525e-05   4.3394e-06  0.000178266   1.5653e-06  6.84905e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47251, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29785.4      17264.3      10741.2        11187      1582.15      54731.2      14902.2      901.893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738984, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.823223, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00947311   0.00957101    0.0103071
      low eigenvalue method done, cpu time[sec] = 0.83296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00957    0.0102         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000518    0.0102     0.995
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.010202
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994271   0.00572925   0.00487049  0.000581881  2.88005e-05  9.34824e-05  4.24144e-06  0.000178548  1.56689e-06  6.84907e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6734, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.75048e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.1274, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47951, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19856.9      11509.6      7160.83      7457.97      1054.76      36487.5      9934.82      601.262
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739203, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07756, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.822914, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00899076   0.00907685   0.00955165
      low eigenvalue method done, cpu time[sec] = 0.832619, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00908   0.00946         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000484   0.00946     0.995
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00946128
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994687   0.00531328   0.00453621  0.000509513  2.67895e-05  8.26907e-05  3.88416e-06  0.000179283  1.57425e-06  6.84918e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.33397e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48176, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14892.7      8632.16      5370.62      5593.48      791.073      27365.6      7451.12      450.947
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.736968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077699, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.820579, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00863952   0.00871758   0.00901333
      low eigenvalue method done, cpu time[sec] = 0.83032, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00872   0.00893         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00046   0.00893     0.996
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00893281
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994983    0.0050165   0.00429249  0.000462689  2.54097e-05  7.58114e-05  3.64733e-06  0.000179388  1.58084e-06  6.84929e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67851, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.91746e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128109, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47309, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11914.2      6905.73       4296.5      4474.78      632.858      21892.5      5960.89      360.757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739522, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078044, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.823621, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00836258   0.00843464   0.00859606
      low eigenvalue method done, cpu time[sec] = 0.833316, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00843   0.00852         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000441   0.00852     0.996
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00852279
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995214   0.00478624   0.00410084   0.00042882  2.43629e-05  7.08611e-05  3.47187e-06  0.000179182  1.58685e-06   6.8494e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67283, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47664, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9928.46      5754.78      3580.41      3728.98      527.382      18243.7      4967.41      300.631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.735337, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.819251, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00813375   0.00820106    0.0082561
      low eigenvalue method done, cpu time[sec] = 0.82894, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0082   0.00819         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000426   0.00819     0.996
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0081885
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995401   0.00459851   0.00394313  0.000402664  2.35213e-05  6.70425e-05  3.33333e-06  0.000178803  1.59241e-06  6.84951e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67217, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.08445e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.128173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48377, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8510.11      4932.66      3068.93      3196.27      452.041      15637.5      4257.78      257.684
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.73898, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078127, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.823025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00793869    0.0080021   0.00796983
      low eigenvalue method done, cpu time[sec] = 0.832917, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.008   0.00791         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000413   0.00791     0.996
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00790681
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99556   0.00444032   0.00380933  0.000381571  2.28187e-05  6.39605e-05  3.21933e-06  0.000178322  1.59759e-06  6.84962e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6828, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.66794e+09
      global relaxation matrix dimension = 245
      setting global matrices ... done, cpu time[sec] = 0.129529, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47899, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7446.35      4316.08      2685.31      2796.74      395.536      13682.8      3725.56      225.473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.736052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077934, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.820594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00776867    0.0078288   0.00772298
      low eigenvalue method done, cpu time[sec] = 0.830823, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00783   0.00766         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000401   0.00766     0.996
         *Z       ---       ---  7.54e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00766379
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995696   0.00430384   0.00369328   0.00036403  2.22165e-05  6.13926e-05  3.12276e-06  0.000177779  1.60244e-06  6.84973e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67792, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2600 K
      Energy reference = 89096 1/cm
      Energy step      = 448 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -47.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005972
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.179507
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.085154
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.091055
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.338717
         W1 Well: minimal relaxation eigenvalue = 0.029333
         W1 Well: maximal relaxation eigenvalue = 1.09278
         W1 Well:       grid size = 243
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19768 1/cm
         B1 Barrier:        grid size = 199
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 199
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -56 1/cm
         B3 Barrier:        grid size = 210
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4984 1/cm
         B4 Barrier:        grid size = 213
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6328 1/cm
         B5 Barrier: nonpositive number of states at -23800 1/cm => truncating
         B5 Barrier:        grid size = 252
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23800 1/cm
         B6 Barrier:        grid size = 196
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1288 1/cm
         B7 Barrier:        grid size = 189
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4423 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16520 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0132, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 243
      MasterEquation::Barrier::truncate: real weight = 7.32827e+28
      MasterEquation::Barrier::truncate: effective weight = 1.49587e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19768 -19768 5.48e+06 1.05e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 1.23e+19
         B2    -56 7.43e+18
         B3  -4984 4.85e+18
         B4  -6328 5.03e+18
         B5 -19768 7.16e+17
         B6   1289 2.33e+19
         B7   4424 6.48e+18
         B8  16520  4.2e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.43e-17  1.93e-16  8.87e-17  4.16e-17  4.55e-21  1.87e-15  3.75e-14  5.35e-10
          R  1.06e+16         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1  5.17e+15     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  1.13e+16      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3   2.4e+16      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4   2.2e+20  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  5.36e+14    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6  2.67e+13   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  1.87e+09  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.99e-19  6.13e-19  2.81e-19  1.32e-19  1.44e-23  5.92e-18  1.19e-16   1.7e-12
          R  3.35e+18         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1  1.63e+18     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  3.55e+18      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3  7.58e+18      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4  6.93e+22  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  1.69e+17    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6  8.41e+15   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  5.89e+11  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.02668, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.12529, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41342, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             310106       186732       121807       126509      17986.4       585141       162846      10542.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.720285, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0154716    0.0157819    0.0199773
      low eigenvalue method done, cpu time[sec] = 0.81435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0158    0.0196         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000932    0.0196      0.99
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.019586
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987392    0.0126079    0.0102601   0.00175521  6.90772e-05  0.000311394  1.15029e-05  0.000296441  3.04762e-06   1.8241e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.58726, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125908, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.43277, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             103369      62243.9      40602.3      42169.8      5995.45       195047      54282.1      3514.06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.722885, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076806, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.80574, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0142358    0.0144879    0.0176404
      low eigenvalue method done, cpu time[sec] = 0.815297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0145    0.0173         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000831    0.0173     0.991
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0173346
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988841    0.0111586   0.00932225   0.00132861  5.77733e-05  0.000216774  8.95207e-06  0.000304552  3.05703e-06  1.82411e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.60797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         5.68833e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.42672, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            62021.1      37346.3      24361.4      25301.9      3597.27       117028      32569.3      2108.44
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.717942, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076722, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.800752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0135877    0.0138121    0.0164535
      low eigenvalue method done, cpu time[sec] = 0.810836, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0138    0.0162         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00078    0.0162     0.992
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0161871
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98958      0.01042    0.0087868   0.00115023  5.33157e-05  0.000185745  8.04718e-06  0.000308446  3.06466e-06  1.82413e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.59963, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         7.96367e+08
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.12661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44300.8        26676        17401      18072.8      2569.48      83591.6      23263.8      1506.03
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.720744, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077716, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0131371    0.0133433    0.0156448
      low eigenvalue method done, cpu time[sec] = 0.814652, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0133    0.0154         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000745    0.0154     0.992
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0154038
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990084   0.00991573   0.00840404   0.00104204   5.0558e-05  0.000168281  7.51507e-06  0.000310789  3.07145e-06  1.82414e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62204, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.0239e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126288, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44781, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34456.2        20748      13534.1      14056.6      1998.48      65015.7        18094      1171.35
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.721731, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804575, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0127888    0.0129817    0.0150297
      low eigenvalue method done, cpu time[sec] = 0.814142, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.013    0.0148         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000718    0.0148     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0148071
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990468   0.00953161   0.00810448  0.000966249  4.85717e-05   0.00015649  7.14437e-06  0.000312321  3.07769e-06  1.82415e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45337, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31010.6      18673.2      12180.7      12650.9      1798.64      58514.1      16284.6      1054.22
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.71958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.802895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0      0.01264    0.0128273    0.0147694
      low eigenvalue method done, cpu time[sec] = 0.81248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0128    0.0146         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000707    0.0146     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0145544
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990631   0.00936895   0.00797576  0.000935753  4.77552e-05  0.000151829  6.99494e-06  0.000312891  3.08066e-06  1.82415e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62585, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.7065e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44637, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20673.7      12448.8      8120.46      8433.96      1199.09      39009.4      10856.4      702.812
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.719763, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077297, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0120526     0.012219    0.0137575
      low eigenvalue method done, cpu time[sec] = 0.812848, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0122    0.0136         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000664    0.0136     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0135708
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991264   0.00873581   0.00746538  0.000825327  4.46898e-05  0.000135253   6.4486e-06  0.000314558  3.09431e-06  1.82418e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62098, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.27533e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45907, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15505.3      9336.59      6090.35      6325.47      899.318      29257.1      8142.32      527.109
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.72041, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803586, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0116227    0.0117747    0.0130329
      low eigenvalue method done, cpu time[sec] = 0.813521, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0118    0.0129         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000632    0.0129     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0128652
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991718   0.00828157   0.00709119  0.000753457  4.25782e-05  0.000124647   6.0851e-06  0.000315113  3.10652e-06  1.82421e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.63379, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.84417e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.125853, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45899, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12404.2      7469.27      4872.28      5060.38      719.454      23405.7      6513.86      421.687
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.721935, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076634, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.804329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0112824    0.0114236     0.012469
      low eigenvalue method done, cpu time[sec] = 0.814393, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0114    0.0123         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000608    0.0123     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0123154
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992072   0.00792766    0.0067957  0.000701248  4.09706e-05  0.000116991  5.81497e-06  0.000315103  3.11768e-06  1.82424e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.63502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45257, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10336.9      6224.39      4060.23      4216.98      599.545      19504.7      5428.21      351.406
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.719033, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076418, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.801525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0110004    0.0111329    0.0120081
      low eigenvalue method done, cpu time[sec] = 0.81113, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0111    0.0119         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000588    0.0119     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0118656
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992362    0.0076381   0.00655169  0.000660791  3.96746e-05   0.00011107  5.60112e-06  0.000314768  3.12799e-06  1.82426e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62552, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         3.98183e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.451, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8860.16      5335.19       3480.2      3614.56      513.896      16718.3      4652.75      301.205
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.720126, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07674, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803167, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0107593    0.0108847    0.0116189
      low eigenvalue method done, cpu time[sec] = 0.812705, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0109    0.0115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000571    0.0115     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0114854
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992607    0.0073934   0.00634405  0.000628072    3.859e-05   0.00010628  5.42474e-06  0.000314233  3.13762e-06  1.82429e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         4.55067e+09
      global relaxation matrix dimension = 243
      setting global matrices ... done, cpu time[sec] = 0.126243, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45368, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7752.64      4668.29      3045.17      3162.74      449.659      14628.5      4071.16      263.555
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.719527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076585, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.802022, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0105487    0.0106681    0.0112825
      low eigenvalue method done, cpu time[sec] = 0.811932, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0107    0.0112         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000557    0.0112     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0111566
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992818   0.00718174    0.0061635  0.000600795  3.76581e-05  0.000102281    5.275e-06  0.000313569  3.14664e-06  1.82432e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.62663, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2700 K
      Energy reference = 91876 1/cm
      Energy step      = 466 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -45.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005937
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.178117
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.083254
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.092092
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.331006
         W1 Well: minimal relaxation eigenvalue = 0.028337
         W1 Well: maximal relaxation eigenvalue = 1.10827
         W1 Well:       grid size = 241
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -20429 1/cm
         B1 Barrier:        grid size = 198
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -392 1/cm
         B2 Barrier:        grid size = 197
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 73 1/cm
         B3 Barrier:        grid size = 208
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -5051 1/cm
         B4 Barrier:        grid size = 211
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6450 1/cm
         B5 Barrier: nonpositive number of states at -23692 1/cm => truncating
         B5 Barrier:        grid size = 248
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23691 1/cm
         B6 Barrier:        grid size = 194
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1471 1/cm
         B7 Barrier:        grid size = 188
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4268 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16384 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.00604, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 241
      MasterEquation::Barrier::truncate: real weight = 7.0813e+28
      MasterEquation::Barrier::truncate: effective weight = 1.50354e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -20429 -20429 3.77e+06 1.35e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -392 1.61e+19
         B2     74    1e+19
         B3  -5051 6.86e+18
         B4  -6450  7.1e+18
         B5 -20429 1.02e+18
         B6   1472 3.11e+19
         B7   4268 8.83e+18
         B8  16385  6.1e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   5.5e-17  1.14e-16  5.65e-17  2.75e-17  4.37e-21  1.02e-15  1.92e-14   2.2e-10
          R  1.82e+16         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1  8.76e+15     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  1.77e+16     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3  3.64e+16         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  2.29e+20  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5  9.81e+14    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  5.21e+13   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  4.55e+09   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.6e-19  3.33e-19  1.65e-19  8.01e-20  1.27e-23  2.97e-18   5.6e-17  6.41e-13
          R  6.24e+18         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1     3e+18     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  6.07e+18     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3  1.25e+19         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  7.85e+22  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5  3.36e+17    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  1.79e+16   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  1.56e+12   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.0199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.124056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39451, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             321599       200937       137365       142291      20331.5       622529       176895      12216.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.700832, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076825, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.793098, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0197481    0.0202872    0.0271601
      low eigenvalue method done, cpu time[sec] = 0.802471, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0203    0.0264         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00122    0.0264     0.987
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0264419
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980757    0.0192426    0.0156823   0.00266529  0.000105963  0.000465185  1.74735e-05  0.000493472  5.66027e-06  4.49344e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54942, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123418, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39334, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             107200      66979.1      45788.4      47430.5      6777.18       207510      58964.9      4072.08
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.703799, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075347, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.794373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.018291     0.018735    0.0241563
      low eigenvalue method done, cpu time[sec] = 0.803315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0187    0.0236         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00109    0.0236     0.988
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0235865
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982835    0.0171647    0.0143598   0.00202442  8.98299e-05  0.000329116  1.38171e-05  0.000506716  5.67708e-06  4.49346e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54949, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         5.55075e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.122998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64319.7      40187.4      27473.1      28458.3      4066.31       124506      35378.9      2443.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.702599, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075507, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.79321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0175259    0.0179243    0.0226279
      low eigenvalue method done, cpu time[sec] = 0.802185, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0179    0.0221         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00103    0.0221     0.989
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0221273
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983897    0.0161027    0.0135946   0.00175986  8.34268e-05  0.000284173  1.25118e-05  0.000513237  5.69057e-06  4.49349e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.55451, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         7.77105e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123841, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45942.7      28705.3      19623.6      20327.3      2904.51      88932.7      25270.7      1745.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.709758, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075694, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.800967, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0169924    0.0173609    0.0215839
      low eigenvalue method done, cpu time[sec] = 0.810473, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0174    0.0211         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000983    0.0211     0.989
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0211278
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.984625    0.0153754    0.0130442   0.00159971  7.94532e-05  0.000258792  1.17419e-05   0.00051727  5.70253e-06  4.49351e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.56262, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         9.99135e+08
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.124441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40217, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35733.2      22326.4      15262.8      15810.2      2259.06      69169.9        19655      1357.36
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.703682, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.076237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.794756, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0165793    0.0169256    0.0207877
      low eigenvalue method done, cpu time[sec] = 0.804223, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0169    0.0204         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00095    0.0204      0.99
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0203644
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98518    0.0148198    0.0126116   0.00148755  7.65844e-05  0.000241613  1.12044e-05  0.000519996  5.71351e-06  4.49354e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.56118, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.124103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40608, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32159.9      20093.7      13736.5      14229.1      2033.15      62252.9      17689.5      1221.62
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.7045, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074967, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.794644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0164025    0.0167395    0.0204503
      low eigenvalue method done, cpu time[sec] = 0.804493, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0167      0.02         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000936      0.02      0.99
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0200405
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.985416    0.0145841    0.0124252   0.00144242  7.54032e-05  0.000234811  1.09874e-05  0.000521038  5.71872e-06  4.49355e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.56469, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.66523e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.124355, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41243, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21439.9      13395.8      9157.69      9486.09      1355.44      41501.9        11793      814.415
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.704931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.795538, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0157031    0.0160049    0.0191353
      low eigenvalue method done, cpu time[sec] = 0.805102, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.016    0.0188         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000881    0.0188     0.991
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.018776
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986336    0.0136639    0.0116833   0.00127887  7.09577e-05  0.000210567  1.01922e-05  0.000524317  5.74266e-06  4.49362e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.57267, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          2.2203e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.123968, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40888, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16079.9      10046.9      6868.26      7114.57      1016.58      31126.4      8844.73      610.811
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.707289, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07613, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.798752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0151893    0.0154668    0.0181899
      low eigenvalue method done, cpu time[sec] = 0.808212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0155    0.0179         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000842    0.0179     0.991
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0178649
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986999    0.0130009    0.0111365   0.00117226  6.78839e-05     0.000195  9.66137e-06  0.000525749  5.76406e-06  4.49368e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.57229, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         2.77538e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.12446, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.42079, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12863.9      8037.49      5494.61      5691.66      813.262      24901.2      7075.79      488.649
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.705983, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07565, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.796676, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0147815    0.0150405    0.0174519
      low eigenvalue method done, cpu time[sec] = 0.806262, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.015    0.0172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000811    0.0172     0.991
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0171526
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987518    0.0124825     0.010703    0.0010947  6.55368e-05  0.000183731  9.26578e-06  0.000526218   5.7836e-06  4.49374e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5825, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.12448, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41758, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10720      6697.91      4578.84      4743.05      677.718        20751      5896.49      407.208
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.706888, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074769, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.797001, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0144426    0.0146869    0.0168472
      low eigenvalue method done, cpu time[sec] = 0.806491, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0147    0.0166         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000786    0.0166     0.992
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0165681
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987943    0.0120572    0.0103438   0.00103449  6.36395e-05  0.000174995  8.95187e-06  0.000526122  5.80168e-06  4.49381e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.57996, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.88553e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.124067, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41528, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9188.53      5741.06      3924.72      4065.47      580.901      17786.5      5054.13      349.035
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.704349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.7968, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0141523    0.0143845    0.0163355
      low eigenvalue method done, cpu time[sec] = 0.807292, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0144    0.0161         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000765    0.0161     0.992
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0160729
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988303    0.0116968    0.0100374  0.000985738  6.20481e-05  0.000167914   8.6924e-06  0.000525667  5.81856e-06  4.49387e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.57704, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          4.4406e+09
      global relaxation matrix dimension = 241
      setting global matrices ... done, cpu time[sec] = 0.125008, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8039.97      5023.43      3434.13      3557.28      508.289      15563.2      4422.37      305.406
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.706929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075551, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.797839, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0138983    0.0141201    0.0158923
      low eigenvalue method done, cpu time[sec] = 0.807383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0141    0.0156         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000746    0.0156     0.992
         *Z       ---       ---  4.04e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0156436
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988616    0.0113844   0.00977022  0.000945035   6.0678e-05   0.00016199  8.47172e-06  0.000524975  5.83442e-06  4.49394e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.58445, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2800 K
      Energy reference = 94656 1/cm
      Energy step      = 483 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -43.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005912
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.177189
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.082405
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.090293
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.337234
         W1 Well: minimal relaxation eigenvalue = 0.0273928
         W1 Well: maximal relaxation eigenvalue = 1.1304
         W1 Well:       grid size = 240
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21264 1/cm
         B1 Barrier:        grid size = 196
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -11 1/cm
         B2 Barrier:        grid size = 196
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -11 1/cm
         B3 Barrier:        grid size = 206
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4841 1/cm
         B4 Barrier:        grid size = 209
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6290 1/cm
         B5 Barrier: nonpositive number of states at -23679 1/cm => truncating
         B5 Barrier:        grid size = 245
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23679 1/cm
         B6 Barrier:        grid size = 193
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1437 1/cm
         B7 Barrier:        grid size = 187
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4334 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16409 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.007, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 240
      MasterEquation::Barrier::truncate: real weight = 6.96746e+28
      MasterEquation::Barrier::truncate: effective weight = 1.53333e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21264 -21264  2.3e+06 1.72e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -11 2.07e+19
         B2    -11 1.34e+19
         B3  -4841 9.61e+18
         B4  -6290 9.93e+18
         B5 -21264 1.43e+18
         B6   1438 4.11e+19
         B7   4335 1.19e+19
         B8  16410 8.76e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.31e-17  6.96e-17  3.69e-17  1.85e-17  4.18e-21  5.76e-16  1.02e-14  9.53e-11
          R  3.02e+16         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1  1.44e+16     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  2.71e+16     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  5.39e+16      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4  2.39e+20  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5  1.73e+15    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  9.78e+13   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  1.05e+10  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.02e-20   1.9e-19  1.01e-19  5.05e-20  1.14e-23  1.57e-18  2.79e-17   2.6e-13
          R  1.11e+19         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1  5.27e+18     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  9.95e+18     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  1.98e+19      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4  8.78e+22  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5  6.37e+17    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  3.59e+16   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  3.85e+12  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
   MasterEquation::set:  done, cpu time[sec] = 1.02053, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.12223, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36303, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             332330       215212       154118       159135      22862.2       659351       191112      14044.4
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.696424, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077168, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.789262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.024693    0.0255872     0.035982
      low eigenvalue method done, cpu time[sec] = 0.798215, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0256    0.0347         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00155    0.0347     0.982
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0347323
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.971946    0.0280536    0.0229752   0.00378236  0.000156202  0.000668061  2.55182e-05  0.000785787  9.98924e-06  1.03259e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51062, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122803, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37191, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             110777      71737.2      51372.8      53044.8      7620.72       219784        63704      4681.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.697215, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.787825, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0230289    0.0237763    0.0322575
      low eigenvalue method done, cpu time[sec] = 0.796649, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0238    0.0312         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0014    0.0312     0.984
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0312495
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974759    0.0252405    0.0211757   0.00291847  0.000133941  0.000479094   2.0455e-05  0.000806096  1.00177e-05  1.03259e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52033, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         5.42133e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123332, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37823, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              66466      43042.3      30823.7      31826.9      4572.43       131870      38222.4      2808.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695456, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785178, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0221477    0.0228238    0.0303457
      low eigenvalue method done, cpu time[sec] = 0.794333, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0228    0.0295         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00132    0.0295     0.985
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.029452
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.976211    0.0237887    0.0201266   0.00255542  0.000125109  0.000416576  1.86467e-05  0.000816344  1.00403e-05   1.0326e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52212, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         7.58986e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37184, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            47475.7      30744.5      22016.9      22733.5      3266.02        94193      27301.7      2006.34
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074846, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785881, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0215307    0.0221595    0.0290338
      low eigenvalue method done, cpu time[sec] = 0.794768, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0222    0.0282         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00127    0.0282     0.986
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0282146
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.977211    0.0227892    0.0193681   0.00233416  0.000119619  0.000381196  1.75785e-05  0.000822839  1.00603e-05   1.0326e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         9.75839e+08
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38136, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36925.6      23912.4      17124.3      17681.6      2540.24      73261.2      21234.7      1560.48
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.696892, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074961, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.786893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0210514    0.0216449    0.0280302
      low eigenvalue method done, cpu time[sec] = 0.79583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0216    0.0273         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00123    0.0273     0.986
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0272659
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.977977     0.022023    0.0187696   0.00217854  0.000115649  0.000357207  1.68316e-05  0.000827344  1.00787e-05  1.03261e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52877, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123043, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38996, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              33233      21521.2      15411.8      15913.5      2286.22      65935.1      19111.2      1404.44
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.6976, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.788097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0208459    0.0214246     0.027604
      low eigenvalue method done, cpu time[sec] = 0.79709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0214    0.0269         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00121    0.0269     0.986
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0268625
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.978303    0.0216971    0.0185112   0.00211576  0.000114013  0.000347696  1.65297e-05  0.000829106  1.00874e-05  1.03261e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53897, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          1.6264e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122812, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39197, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22155.3      14347.4      10274.6        10609      1524.14      43956.7      12740.8       936.29
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695252, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074607, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0200304    0.0205529    0.0259382
      low eigenvalue method done, cpu time[sec] = 0.794372, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0206    0.0253         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00114    0.0253     0.987
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0252824
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.979579    0.0204209     0.017479   0.00188752  0.000107841  0.000313734  1.54217e-05  0.000834924  1.01272e-05  1.03262e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53731, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.16853e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123317, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39266, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16616.5      10760.6      7705.92      7956.73      1143.11      32967.6      9555.61      702.218
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.696709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075738, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.787404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0194292    0.0199125    0.0247357
      low eigenvalue method done, cpu time[sec] = 0.796275, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0199    0.0241         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0011    0.0241     0.988
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0241386
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980503     0.019497    0.0167145   0.00173805  0.000103561  0.000291861  1.46798e-05  0.000837848  1.01628e-05  1.03264e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.71066e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123132, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39889, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13293.2      8608.47      6164.74      6365.38      914.486        26374      7644.48      561.774
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695634, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075326, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.786046, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0189505    0.0194039    0.0237942
      low eigenvalue method done, cpu time[sec] = 0.794952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0194    0.0232         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00106    0.0232     0.988
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0232412
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981228    0.0187722    0.0161062   0.00162894  0.000100284   0.00027599  1.41257e-05  0.000839236  1.01953e-05  1.03265e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54499, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123284, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39489, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11077.7      7173.72      5137.28      5304.48      762.072      21978.4       6370.4      468.145
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.695622, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0185518    0.0189812    0.0230207
      low eigenvalue method done, cpu time[sec] = 0.794782, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.019    0.0225         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00103    0.0225     0.989
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0225027
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981824    0.0181756    0.0156007   0.00154402   9.7629e-05   0.00026366  1.36851e-05  0.000839702  1.02254e-05  1.03267e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54071, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.122888, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39373, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9495.14      6148.91      4403.38       4546.7      653.204      18838.6      5460.35      401.267
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.698118, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07589, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.789332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0182095     0.018619    0.0223646
      low eigenvalue method done, cpu time[sec] = 0.798217, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0186    0.0219         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     0.001    0.0219     0.989
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0218754
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982331     0.017669    0.0151682    0.0014751  9.53972e-05  0.000253646  1.33202e-05  0.000839572  1.02535e-05  1.03268e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54292, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         4.33706e+09
      global relaxation matrix dimension = 240
      setting global matrices ... done, cpu time[sec] = 0.123274, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38983, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8308.25      5380.29      3852.96      3978.36      571.554      16483.8       4777.8      351.109
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.694998, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.075407, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.785626, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0179094    0.0183018    0.0217953
      low eigenvalue method done, cpu time[sec] = 0.794542, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0183    0.0213         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000977    0.0213     0.989
         *Z       ---       ---  3.07e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0213304
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982771    0.0172288    0.0147904   0.00141744  9.34723e-05  0.000245256  1.30093e-05  0.000839037    1.028e-05  1.03269e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53585, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2900 K
      Energy reference = 97436 1/cm
      Energy step      = 500 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -40.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006054
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.176423
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.08261
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.089516
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.322918
         W1 Well: minimal relaxation eigenvalue = 0.0265973
         W1 Well: maximal relaxation eigenvalue = 1.15561
         W1 Well:       grid size = 239
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22063 1/cm
         B1 Barrier:        grid size = 195
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -63 1/cm
         B2 Barrier:        grid size = 195
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -63 1/cm
         B3 Barrier:        grid size = 205
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -5063 1/cm
         B4 Barrier:        grid size = 208
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6563 1/cm
         B5 Barrier: nonpositive number of states at -24064 1/cm => truncating
         B5 Barrier:        grid size = 243
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -24063 1/cm
         B6 Barrier:        grid size = 192
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1436 1/cm
         B7 Barrier:        grid size = 186
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4436 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16436 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 0.989163, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 239
      MasterEquation::Barrier::truncate: real weight = 6.96409e+28
      MasterEquation::Barrier::truncate: effective weight = 1.58653e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22063 -22063  1.4e+06  2.2e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -63 2.66e+19
         B2    -63 1.78e+19
         B3  -5063 1.34e+19
         B4  -6563 1.37e+19
         B5 -22063 1.99e+18
         B6   1437  5.4e+19
         B7   4437 1.59e+19
         B8  16437 1.24e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.02e-17  4.29e-17  2.43e-17  1.26e-17  3.92e-21  3.31e-16  5.56e-15  4.28e-11
          R  4.96e+16         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  2.33e+16      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2  4.12e+16     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3  7.95e+16       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4  2.55e+20  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  3.02e+15     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6   1.8e+14   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7  2.34e+10  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.29e-20  1.13e-19  6.36e-20   3.3e-20  1.03e-23  8.68e-19  1.46e-17  1.12e-13
          R  1.89e+19         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  8.88e+18      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2  1.57e+19     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3  3.03e+19       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4  9.73e+22  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  1.15e+18     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6  6.87e+16   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7  8.92e+12  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
   MasterEquation::set:  done, cpu time[sec] = 1.00276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35747, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             342302       229508       172091       177147      25582.4       695492       205443      16028.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.688137, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.77719, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0305222    0.0319783    0.0473342
      low eigenvalue method done, cpu time[sec] = 0.786364, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.032    0.0452         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00198    0.0452     0.977
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0451949
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960713    0.0392872    0.0323111   0.00517893  0.000221368  0.000920634  3.58114e-05   0.00120106  1.68457e-05   2.2299e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121044, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37135, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             114101      76502.6      57363.5        59049      8527.45       231831      68481.1      5342.89
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.689072, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.777965, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0286397    0.0298728     0.042733
      low eigenvalue method done, cpu time[sec] = 0.787003, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0299     0.041         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00179     0.041     0.979
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0409817
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964375    0.0356247    0.0299656   0.00404805  0.000191945  0.000669383  2.90983e-05   0.00123084  1.68916e-05  2.22992e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1          5.2993e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121865, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            68460.3      45901.6      34418.1      35429.4      5116.47       139098      41088.7      3205.74
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.687681, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074193, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.776737, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0276353    0.0287588    0.0403531
      low eigenvalue method done, cpu time[sec] = 0.785568, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0288    0.0388         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0017    0.0388      0.98
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0387879
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.966282    0.0337177    0.0285855   0.00356667  0.000180264  0.000586048  2.66975e-05   0.00124619  1.69279e-05  2.22993e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52119, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         7.41902e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.3778, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48900.2      32786.8      24584.4      25306.7      3654.62      99356.1        29349      2289.81
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.686283, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073732, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.765942, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0269294    0.0279796    0.0387137
      low eigenvalue method done, cpu time[sec] = 0.774919, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.028    0.0373         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00163    0.0373     0.981
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0372708
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.967601    0.0323989    0.0275824   0.00327184  0.000172992  0.000538785  2.52769e-05    0.0012561  1.69599e-05  2.22994e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.4995, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         9.53874e+08
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121349, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38033.5      25500.9      19121.2        19683      2842.48      77276.9        22827      1780.96
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.685425, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.766109, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0263796    0.0273749    0.0374561
      low eigenvalue method done, cpu time[sec] = 0.775264, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0274    0.0361         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00159    0.0361     0.982
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0361038
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.968616    0.0313844    0.0267882   0.00306384  0.000167724  0.000506682  2.42821e-05   0.00126312   1.6989e-05  2.22995e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50865, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121762, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34230.2      22950.8      17209.1      17714.7      2558.24      69549.2      20544.3      1602.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.685386, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073376, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0261435    0.0271157    0.0369211
      low eigenvalue method done, cpu time[sec] = 0.774337, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0271    0.0356         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00156    0.0356     0.982
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0356065
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.969048    0.0309522    0.0264444   0.00297977  0.000165551  0.000493939  2.38796e-05   0.00126591  1.70028e-05  2.22996e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.51439, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.58979e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122044, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.39924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22820.1      15300.5      11472.7      11809.8      1705.49      46366.2      13696.2      1068.58
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.690041, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073695, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.769953, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0252043    0.0260882     0.034825
      low eigenvalue method done, cpu time[sec] = 0.779383, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0261    0.0337         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00148    0.0337     0.983
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.033653
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.970746     0.029254    0.0250668   0.00267333  0.000157339  0.000448349  2.23998e-05   0.00127545  1.70661e-05  2.22998e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52715, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.11972e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.121894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17115.1      11475.4      8604.53      8857.35      1279.12      34774.6      10272.2      801.434
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.689052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.768203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0245094    0.0253314    0.0333065
      low eigenvalue method done, cpu time[sec] = 0.777568, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0253    0.0322         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00142    0.0322     0.984
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0322329
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.97198    0.0280195    0.0240419   0.00247194  0.000151627  0.000418904  2.14065e-05   0.00128067  1.71225e-05  2.23001e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.52875, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.64965e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40631, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13692.1      9180.32      6883.63      7085.88      1023.29      27819.7      8217.73      641.147
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.689573, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073691, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.769744, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0239547    0.0247293    0.0321143
      low eigenvalue method done, cpu time[sec] = 0.779189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0247    0.0311         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00137    0.0311     0.984
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.031115
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.972952    0.0270478    0.0232234   0.00232451  0.000147243  0.000397489  2.06629e-05   0.00128357   1.7174e-05  2.23004e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53585, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122286, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.41214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11410.1      7650.26      5736.35       5904.9      852.745      23183.1      6848.11      534.289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.689997, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.073738, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.769862, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0234917    0.0242281    0.0311326
      low eigenvalue method done, cpu time[sec] = 0.779291, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0242    0.0302         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00134    0.0302     0.985
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0301926
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.973754     0.026246    0.0225413   0.00220952  0.000143683  0.000380819  2.00704e-05   0.00128505  1.72217e-05  2.23007e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.54108, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.70951e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122719, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40659, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9780.05      6557.37      4916.88      5061.34      730.925      19871.2      5869.81      457.962
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.688017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073752, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.767804, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0230935     0.023798    0.0302984
      low eigenvalue method done, cpu time[sec] = 0.777261, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0238    0.0294         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0013    0.0294     0.985
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0294074
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974437    0.0255634    0.0219564     0.002116  0.000140685  0.000367256  1.95789e-05    0.0012856  1.72663e-05   2.2301e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.5336, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         4.23944e+09
      global relaxation matrix dimension = 239
      setting global matrices ... done, cpu time[sec] = 0.122337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.40375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8557.54       5737.7      4302.27      4428.68      639.559      17387.3      5136.08      400.717
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.690563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073549, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.770207, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0227438     0.023421    0.0295733
      low eigenvalue method done, cpu time[sec] = 0.779628, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0234    0.0287         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00128    0.0287     0.986
         *Z       ---       ---  2.37e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0287238
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975031    0.0249692    0.0214444   0.00203764  0.000138094  0.000355876  1.91595e-05    0.0012855  1.73082e-05  2.23013e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.53255, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 3000 K
      Energy reference = 100216 1/cm
      Energy step      = 517 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -38.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006031
         W1 Well: collisional kernel bandwidth = 42
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.175391
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.081144
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.096514
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.327499
         W1 Well: minimal relaxation eigenvalue = 0.0259368
         W1 Well: maximal relaxation eigenvalue = 1.18567
         W1 Well:       grid size = 238
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22829 1/cm
         B1 Barrier:        grid size = 194
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 194
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -81 1/cm
         B3 Barrier:        grid size = 203
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4735 1/cm
         B4 Barrier:        grid size = 206
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6286 1/cm
         B5 Barrier: nonpositive number of states at -23347 1/cm => truncating
         B5 Barrier:        grid size = 239
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23346 1/cm
         B6 Barrier:        grid size = 191
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1468 1/cm
         B7 Barrier:        grid size = 185
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4570 1/cm
         B8 Barrier:        grid size = 162
         B8 Barrier:      real height = 16811 1/cm
         B8 Barrier: effective height = 16462 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 0.997993, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 238
      MasterEquation::Barrier::truncate: real weight = 7.05679e+28
      MasterEquation::Barrier::truncate: effective weight = 1.66231e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22829 -22829  8.5e+05 2.78e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 3.38e+19
         B2    -81 2.34e+19
         B3  -4735 1.84e+19
         B4  -6286 1.89e+19
         B5 -22829 2.74e+18
         B6   1469 7.03e+19
         B7   4571 2.11e+19
         B8  16462 1.75e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.25e-17  2.69e-17  1.61e-17   8.6e-18  3.63e-21  1.94e-16  3.09e-15  1.99e-11
          R     8e+16         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  3.71e+16     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2   6.2e+16     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  1.16e+17      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4  2.75e+20  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5  5.16e+15    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  3.24e+14   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  5.03e+10  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.22e-20  6.94e-20  4.16e-20  2.22e-20  9.36e-24  4.99e-19  7.95e-18  5.12e-14
          R  3.11e+19         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  1.44e+19     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2  2.41e+19     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  4.51e+19      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4  1.07e+23  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5     2e+18    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  1.26e+17   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  1.95e+13  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
   MasterEquation::set:  done, cpu time[sec] = 1.01157, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120972, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.3403, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             351522       243782       191304       196352      28495.9       730853       219836      18170.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.679349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.074292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.759871, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0372066    0.0395224    0.0616522
      low eigenvalue method done, cpu time[sec] = 0.768816, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0395    0.0581         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00252    0.0581     0.971
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0580719
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.946914    0.0530862    0.0438224   0.00686266  0.000302964   0.00122287  4.85164e-05   0.00177003  2.72731e-05  4.55445e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.45444, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120773, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.35664, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             117174      81260.6        63768      65450.5      9498.65       243618      73278.7      6056.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682135, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.761488, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0350963    0.0370797    0.0559934
      low eigenvalue method done, cpu time[sec] = 0.770663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0371     0.053         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00229     0.053     0.973
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0530244
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.951528     0.048472    0.0408714   0.00542006  0.000265548  0.000901632  3.99554e-05   0.00181189  2.73439e-05  4.55447e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.4733, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         5.18403e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70304.4      48756.4      38260.8      39270.3      5699.19       146171      43967.2      3634.12
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682757, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.762041, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0339647     0.035783    0.0530512
      low eigenvalue method done, cpu time[sec] = 0.771179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0358    0.0504         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00218    0.0504     0.974
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0503786
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.953947    0.0460534    0.0391197    0.0048018  0.000250669  0.000794725  3.68868e-05   0.00183385  2.73994e-05   4.5545e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         7.25764e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50217.4        34826      27329.1      28050.2      4070.85       104408      31405.2       2595.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.683402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073636, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763127, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.033167    0.0348744    0.0510182
      low eigenvalue method done, cpu time[sec] = 0.772256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0349    0.0485         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0021    0.0485     0.975
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0485417
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.955626    0.0443742    0.0378404   0.00442192   0.00024139  0.000733955  3.50678e-05   0.00184827  2.74481e-05  4.55452e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.48232, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         9.33125e+08
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.36092, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              39058      27086.9        21256      21816.8      3166.22      81205.9      24426.2      2018.96
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682882, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073723, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.76323, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0325444    0.0341683    0.0494554
      low eigenvalue method done, cpu time[sec] = 0.772727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0342    0.0471         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00204    0.0471     0.976
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0471248
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.956921     0.043079     0.036824   0.00415333  0.000234659  0.000692602  3.37921e-05   0.00185864  2.74925e-05  4.55454e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.47948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121555, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35152.2      24378.2      19130.4      19635.2      2849.59      73085.3      21983.6      1817.06
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.682955, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.762953, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0322766    0.0338655    0.0487897
      low eigenvalue method done, cpu time[sec] = 0.77239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0339    0.0465         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00201    0.0465     0.976
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.04652
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.957474    0.0425261    0.0363831   0.00404462  0.000231879  0.000676168  3.32754e-05   0.00186282  2.75135e-05  4.55455e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49482, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.55521e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121873, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37125, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23434.8      16252.1      12753.6      13090.1      1899.73      48723.5      14655.7      1211.37
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.685333, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072592, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.764229, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0312096    0.0326633    0.0461758
      low eigenvalue method done, cpu time[sec] = 0.773572, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0327    0.0441         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00191    0.0441     0.978
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0441377
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.959652    0.0403483     0.034611    0.0036476  0.000221357  0.000617269  3.13729e-05   0.00187747  2.76096e-05  4.55461e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.07361e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37324, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17576.1      12189.1       9565.2      9817.58       1424.8      36542.6      10991.8       908.53
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.683486, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763202, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0304179    0.0317763    0.0442766
      low eigenvalue method done, cpu time[sec] = 0.772345, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0318    0.0424         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00184    0.0424     0.979
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0423993
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.961241    0.0387592     0.033287   0.00338592  0.000214018  0.000579126  3.00928e-05   0.00188597  2.76951e-05  4.55466e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49209, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.59201e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120666, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37305, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14060.9      9751.27      7652.16      7854.06      1139.84      29234.1      8793.45      726.824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.683108, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073476, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.762816, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0297845    0.0310697    0.0427821
      low eigenvalue method done, cpu time[sec] = 0.771868, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0311     0.041         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00178     0.041     0.979
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0410268
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.962495    0.0375045    0.0322263   0.00319393  0.000208373  0.000551324  2.91325e-05   0.00189111  2.77731e-05  4.55472e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121496, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38545, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11717.4      8126.06       6376.8      6545.05      949.865      24361.8      7327.87      605.687
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.685035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073545, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.764712, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0292548    0.0304806    0.0415491
      low eigenvalue method done, cpu time[sec] = 0.773777, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0305    0.0399         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00173    0.0399      0.98
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0398916
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.963533    0.0364668    0.0313401   0.00304391  0.000203779  0.000529642  2.83659e-05   0.00189419  2.78453e-05  4.55477e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50505, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.62882e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.121857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.38898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10043.5       6965.2      5465.83      5610.05       814.17      20881.5      6281.03       519.16
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.680621, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.073019, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.759791, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0287986    0.0299747    0.0404995
      low eigenvalue method done, cpu time[sec] = 0.768883, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0      0.03    0.0389         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00169    0.0389      0.98
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0389232
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964419    0.0355814    0.0305784   0.00292169  0.000199904  0.000511973  2.77291e-05   0.00189588  2.79129e-05  4.55483e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.50595, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         4.14722e+09
      global relaxation matrix dimension = 238
      setting global matrices ... done, cpu time[sec] = 0.120991, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.37856, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8788.05      6094.55       4782.6      4908.79      712.398      18271.3      5495.91      454.265
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.684731, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.072468, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763202, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0283973    0.0295308    0.0395859
      low eigenvalue method done, cpu time[sec] = 0.772317, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0295    0.0381         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00166    0.0381     0.981
         *Z       ---       ---  1.86e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0380785
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.965191    0.0348093    0.0299103   0.00281915  0.000196551  0.000497125  2.71848e-05    0.0018966  2.79764e-05  4.55488e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.49773, elapsed time[sec] = 0
rate calculation done, cpu time[sec] = 4991.24, elapsed time[sec] = 98
