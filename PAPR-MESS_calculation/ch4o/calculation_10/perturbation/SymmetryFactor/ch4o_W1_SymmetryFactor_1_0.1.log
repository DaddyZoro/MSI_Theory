Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000518, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 0.001303, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 0.000549, elapsed time[sec] = 0
         Model::HinderedRotor::_init: WARNING: potential second derivative at the minimum is negative, assuming zero
         effective rotational constant[1/cm]  = 27.3382
         analytic  frequency at minimum[1/cm] = 0
         numerical frequency at minimum[1/cm] = 0
         minimum energy[kcal/mol]             = 0
         maximum energy[kcal/mol]             = 0
         maximum frequency[1/cm]              = 0
         ground energy [kcal/mol]             = 0
         highest energy level [kcal/mol]      = 19462.6
         number of levels                     = 999
         10 lowest excited states [kcal/mol] relative to the ground: 0.0782 0.0782 0.313 0.313 0.703 0.703 1.25 1.25 1.95
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum             PG             PI  ***
           100        2.82615        2.82615        2.82615
           200        3.99678        3.99678        3.99678
           300        4.89503        4.89503        4.89503
           400         5.6523         5.6523         5.6523
           500        6.31946        6.31946        6.31946
           600        6.92262        6.92262        6.92262
           700        7.47729        7.47729        7.47729
           800        7.99355        7.99355        7.99355
           900        8.47844        8.47844        8.47844
          1000        8.93707        8.93707        8.93707
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 1.81233, elapsed time[sec] = 0
      ground state energy, kcal/mol:   -90.2506
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.193248, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.056337, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.000255, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.53309, elapsed time[sec] = 0
         effective power exponent at 690.248 kcal/mol = 11.4574
      interpolating states number/density done, cpu time[sec] = 2.60585, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 4.43056, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         18.6633
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001947, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00386, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007453, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.55015        9.55009        4.77506
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.00157, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003416, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007316, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.021387, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         19.7111        11.2504        7.16236
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001616, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003463, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006502, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         27.4886        14.3446        9.42584
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001536, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003377, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006349, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018369, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001479, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003321, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006211, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:          9.3775        1.21307        1.07412
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002258, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00413, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007234, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018884, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001468, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003294, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006179, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.70353        1.21666        1.08111
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001554, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.00368, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006765, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.018373, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001468, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003316, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006184, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.46633        1.30142        1.14413
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001546, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003427, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006833, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.019015, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         6.45642       0.996004        0.86988
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.002043, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003938, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.007102, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.012447, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.24335        0.93381       0.927142
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001554, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.003419, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.006609, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.011928, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.068436, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.031325, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000341, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000775, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -22.6613
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.020544, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.004095, elapsed time[sec] = 0
            effective power exponent at 622.659 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.071068, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.072868, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -19.4076
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001455, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000519, elapsed time[sec] = 0
            effective power exponent at 619.406 kcal/mol = 11.9694
         interpolating states number/density done, cpu time[sec] = 0.017715, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017784, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.4142
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001443, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000511, elapsed time[sec] = 0
            effective power exponent at 616.412 kcal/mol = 11.9705
         interpolating states number/density done, cpu time[sec] = 0.017419, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017484, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.678
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00144, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000499, elapsed time[sec] = 0
            effective power exponent at 613.676 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.017423, elapsed time[sec] = 1
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017486, elapsed time[sec] = 1
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.2049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001433, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00051, elapsed time[sec] = 0
            effective power exponent at 611.203 kcal/mol = 11.9723
         interpolating states number/density done, cpu time[sec] = 0.017345, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017411, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.00049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001425, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000513, elapsed time[sec] = 0
            effective power exponent at 608.998 kcal/mol = 11.9731
         interpolating states number/density done, cpu time[sec] = 0.017373, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.0175, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.4e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.06773
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001433, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000498, elapsed time[sec] = 0
            effective power exponent at 607.066 kcal/mol = 11.9737
         interpolating states number/density done, cpu time[sec] = 0.017121, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017236, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.40945
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001416, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000473, elapsed time[sec] = 0
            effective power exponent at 605.407 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.017048, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017113, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.05137
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001405, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000482, elapsed time[sec] = 0
            effective power exponent at 604.049 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016953, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017076, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.98779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001408, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 602.986 kcal/mol = 11.9739
         interpolating states number/density done, cpu time[sec] = 0.016929, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017046, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.23584
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001403, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000486, elapsed time[sec] = 0
            effective power exponent at 602.234 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.017064, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01713, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.76409
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001392, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000482, elapsed time[sec] = 0
            effective power exponent at 601.762 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.017044, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01711, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.54966
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001407, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000495, elapsed time[sec] = 0
            effective power exponent at 601.548 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.017033, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017096, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.6097
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.0014, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000519, elapsed time[sec] = 0
            effective power exponent at 601.608 kcal/mol = 11.9746
         interpolating states number/density done, cpu time[sec] = 0.01687, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016933, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.85844
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001394, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000499, elapsed time[sec] = 0
            effective power exponent at 601.856 kcal/mol = 11.9754
         interpolating states number/density done, cpu time[sec] = 0.01708, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017151, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.25586
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.0014, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000492, elapsed time[sec] = 0
            effective power exponent at 602.254 kcal/mol = 11.9765
         interpolating states number/density done, cpu time[sec] = 0.016842, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016903, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.76478
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001877, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000478, elapsed time[sec] = 0
            effective power exponent at 602.763 kcal/mol = 11.978
         interpolating states number/density done, cpu time[sec] = 0.017334, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017399, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.36412, elapsed time[sec] = 1
      effective power exponent at 601.548 kcal/mol = 12.1579
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.74132, elapsed time[sec] = 2
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -21.8779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001407, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000486, elapsed time[sec] = 0
            effective power exponent at 621.876 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.018036, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.018123, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -18.8158
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001384, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000494, elapsed time[sec] = 0
            effective power exponent at 618.814 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016873, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016943, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.0339
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001394, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000478, elapsed time[sec] = 0
            effective power exponent at 616.032 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016634, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016702, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.5322
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001386, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000494, elapsed time[sec] = 0
            effective power exponent at 613.53 kcal/mol = 11.9729
         interpolating states number/density done, cpu time[sec] = 0.016651, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016719, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.3135
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001367, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000466, elapsed time[sec] = 0
            effective power exponent at 611.311 kcal/mol = 11.9725
         interpolating states number/density done, cpu time[sec] = 0.016436, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016505, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.39794
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001377, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000478, elapsed time[sec] = 0
            effective power exponent at 609.396 kcal/mol = 11.972
         interpolating states number/density done, cpu time[sec] = 0.016597, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016664, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.79112
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001378, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000483, elapsed time[sec] = 0
            effective power exponent at 607.789 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.01639, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016454, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.49595
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000504, elapsed time[sec] = 0
            effective power exponent at 606.494 kcal/mol = 11.9706
         interpolating states number/density done, cpu time[sec] = 0.01643, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016494, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.53243
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001368, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000476, elapsed time[sec] = 0
            effective power exponent at 605.53 kcal/mol = 11.9698
         interpolating states number/density done, cpu time[sec] = 0.016414, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016479, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.86054
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001364, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000469, elapsed time[sec] = 0
            effective power exponent at 604.858 kcal/mol = 11.9691
         interpolating states number/density done, cpu time[sec] = 0.016525, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016591, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.47456
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001373, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000563, elapsed time[sec] = 0
            effective power exponent at 604.472 kcal/mol = 11.9684
         interpolating states number/density done, cpu time[sec] = 0.016524, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016592, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.40594
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001365, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00049, elapsed time[sec] = 0
            effective power exponent at 604.404 kcal/mol = 11.9683
         interpolating states number/density done, cpu time[sec] = 0.016391, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016457, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.57463
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001362, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000451, elapsed time[sec] = 0
            effective power exponent at 604.572 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.016496, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016561, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.93202
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00136, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000477, elapsed time[sec] = 0
            effective power exponent at 604.93 kcal/mol = 11.9692
         interpolating states number/density done, cpu time[sec] = 0.016492, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016556, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.43522
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001367, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000456, elapsed time[sec] = 0
            effective power exponent at 605.433 kcal/mol = 11.9702
         interpolating states number/density done, cpu time[sec] = 0.016597, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016664, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.04421
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001365, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000577, elapsed time[sec] = 0
            effective power exponent at 606.042 kcal/mol = 11.9715
         interpolating states number/density done, cpu time[sec] = 0.016452, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016526, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.52071, elapsed time[sec] = 2
      effective power exponent at 604.404 kcal/mol = 12.2165
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.81624, elapsed time[sec] = 2
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      ground state energy, kcal/mol:   -0.195851
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.00151, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000538, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 7.25849, elapsed time[sec] = 7
         effective power exponent at 669.903 kcal/mol = 13.426
      interpolating states number/density done, cpu time[sec] = 7.27792, elapsed time[sec] = 7
   Model::RRHO::RRHO:  done, cpu time[sec] = 7.27801, elapsed time[sec] = 7
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000833, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000797, elapsed time[sec] = 0
   BIMOLECULAR: P7
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.47873        5.47873        5.47873
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.1e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 5.9e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000103, elapsed time[sec] = 0
   BARRIER: B8
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.47873        5.47873        5.47873
            TST level: E
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  done, cpu time[sec] = 3.5e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 5.3e-05, elapsed time[sec] = 0
      ground state energy, kcal/mol:   47.9656
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.003009, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000341, elapsed time[sec] = 0
         effective power exponent at 552.034 kcal/mol = 10.6123
      interpolating states number/density done, cpu time[sec] = 0.015812, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.015904, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O            o          CH4           B1           B2           B3           B4           B5           B6           B7           B8
     100  1.79396e+28  1.11806e+26  1.79604e+26   1.2706e+26  1.20995e+26  3.09408e+23  9.07788e+27  3.09408e+23  8.88203e+27  3.09408e+23    4.226e+27  3.80284e+23  1.41451e+28  3.80284e+23  1.04337e+28  1.20275e+25  8.05078e+25  1.02816e+30  3.90845e+30  1.47525e+35  6.97811e+37 5.12326e+128  6.66948e+29  2.86822e+29  6.30386e+29
     200   2.0324e+29  7.62333e+26  1.46726e+27  1.01653e+27  9.67966e+26  1.75028e+24  7.26953e+28  1.75028e+24  7.11008e+28  1.75028e+24  3.38185e+28  1.07561e+24  1.21889e+29  1.07561e+24  8.41759e+28   3.4019e+25  6.44206e+26  2.65947e+31  6.23677e+31  1.08314e+30  2.15615e+30  1.52798e+59  8.88053e+30  3.66779e+30  8.00719e+30
     300  8.56131e+29   2.3228e+27   5.2604e+27  3.43512e+27  3.26835e+27   4.8232e+24  2.48522e+29   4.8232e+24  2.42385e+29   4.8232e+24  1.14827e+29  1.97601e+24  4.86817e+29  1.97601e+24  2.97918e+29   6.2497e+25  2.18681e+27  1.82852e+32  2.59538e+32  1.44208e+30  1.73256e+30  1.89702e+39  4.41749e+31  1.66476e+31  3.56174e+31
     400  2.49319e+30  5.05886e+27  1.36172e+28  8.18855e+27  7.76803e+27  9.90107e+24  6.13453e+29  9.90107e+24  5.94872e+29  9.90107e+24   2.7863e+29  3.04227e+24   1.4458e+30  3.04227e+24  7.82149e+29  9.62204e+25  5.31893e+27  7.43446e+32  6.76087e+32   3.1193e+30  3.38436e+30  5.81364e+32  1.53178e+32  5.25536e+31  1.04946e+32
     500  6.09891e+30   9.1848e+27   2.9582e+28  1.61907e+28  1.52765e+28  1.72965e+25  1.28796e+30  1.72965e+25  1.23988e+30  1.72965e+25    5.706e+29   4.2517e+24  3.66252e+30   4.2517e+24  1.77798e+30  1.34472e+26  1.09838e+28  2.27531e+33  1.40935e+33  6.99392e+30  7.25794e+30    2.174e+31  4.38422e+32  1.38727e+32   2.5148e+32
     600   1.3539e+31  1.48864e+28  5.75744e+28  2.85247e+28  2.67121e+28  2.72848e+25  2.45857e+30  2.72848e+25  2.34862e+30  2.72848e+25  1.05862e+30  5.58901e+24  8.37682e+30  5.58901e+24  3.71377e+30  1.76768e+26  2.06944e+28  5.83137e+33  2.59752e+33  1.53859e+31   1.5531e+31  1.56572e+31  1.10962e+33  3.28769e+32  5.35043e+32
     700  2.82296e+31  2.23336e+28  1.03869e+29  4.64933e+28  4.31306e+28  4.01168e+25  4.40321e+30  4.01168e+25   4.1744e+30  4.01168e+25  1.84194e+30  7.04296e+24  1.77967e+31  7.04296e+24  7.32198e+30  2.22753e+26  3.68096e+28  1.32406e+34  4.44573e+33  3.28489e+31  3.24865e+31  2.00151e+31  2.57036e+33  7.23031e+32   1.0547e+33
     800  5.62429e+31  3.16898e+28  1.77211e+29  7.16682e+28  6.57497e+28  5.60287e+25  7.52441e+30  5.60287e+25  7.08144e+30  5.60287e+25  3.06214e+30  8.60484e+24  3.57037e+31  8.60484e+24  1.38193e+31  2.72152e+26  6.29237e+28  2.75326e+34  7.26034e+33  6.79296e+31  6.61031e+31  3.04639e+31  5.55986e+33  1.50225e+33   1.9708e+33
     900  1.08106e+32  4.31186e+28  2.89608e+29  1.05938e+29  9.59741e+28  7.52507e+25  1.23926e+31  7.52507e+25  1.15823e+31  7.52507e+25  4.91733e+30  1.02677e+25  6.83675e+31  1.02677e+25  2.51777e+31  3.24744e+26   1.0442e+29  5.35429e+34  1.14977e+34  1.36146e+32  1.30791e+32  4.96309e+31  1.13781e+34  2.98133e+33  3.53766e+33
    1000  2.01668e+32  5.67887e+28  4.57314e+29  1.51557e+29  1.35425e+29  9.80136e+25  1.98016e+31  9.80136e+25  1.83853e+31  9.80136e+25  7.67995e+30  1.20256e+25  1.25901e+32  1.20256e+25  4.45239e+31  3.80344e+26  1.69248e+29  9.87598e+34  1.78334e+34  2.64867e+32  2.51886e+32  8.31132e+31  2.22341e+34  5.69316e+33   6.1512e+33
    1100  3.66579e+32  7.28764e+28   7.0205e+29  2.11192e+29  1.85967e+29  1.24554e+26  3.08377e+31  1.24554e+26  2.84544e+31  1.24554e+26  1.17192e+31  1.38738e+25  2.24222e+32  1.38738e+25  7.67157e+31  4.38799e+26  2.68985e+29  1.74488e+35  2.72616e+34  5.01139e+32  4.72857e+32  1.40422e+32  4.17722e+34  1.05163e+34  1.04174e+34
    1200  6.51162e+32  9.15662e+28  1.05248e+30  2.87967e+29  2.49743e+29  1.55119e+26  4.69659e+31  1.55119e+26  4.30822e+31  1.55119e+26  1.75283e+31  1.58081e+25  3.87856e+32  1.58081e+25  1.29162e+32  4.99976e+26  4.20283e+29   2.9743e+35  4.12339e+34  9.23956e+32  8.66602e+32  2.37075e+32  7.58498e+34  1.88656e+34   1.7249e+34
    1300  1.13279e+33  1.13052e+29    1.546e+30  3.85517e+29  3.29195e+29  1.89964e+26  7.01353e+31  1.89964e+26  6.39799e+31  1.89964e+26  2.57585e+31  1.78247e+25  6.53851e+32  1.78247e+25  2.12965e+32  5.63757e+26  6.46803e+29  4.91797e+35  6.18545e+34  1.66316e+33  1.55283e+33  3.97869e+32  1.33665e+35   3.2971e+34  2.80008e+34
    1400  1.93331e+33  1.37535e+29  2.23088e+30  5.08038e+29  4.27102e+29  2.29356e+26  1.02907e+32  2.29356e+26  9.33855e+31  2.29356e+26  3.72593e+31  1.99205e+25   1.0772e+33  1.99205e+25  3.44505e+32  6.30041e+26  9.81784e+29  7.92117e+35  9.21487e+34  2.92799e+33  2.72427e+33  6.61788e+32  2.29366e+35  5.62797e+34   4.4655e+34
    1500  3.24164e+33  1.65225e+29  3.16878e+30  6.60342e+29  5.46603e+29  2.73576e+26  1.48608e+32  2.73576e+26  1.34194e+32  2.73576e+26   5.3127e+31  2.20925e+25  1.73819e+33  2.20925e+25  5.47579e+32  6.98737e+26  1.47141e+30  1.24691e+36  1.36433e+35  5.04957e+33  4.68567e+33   1.0892e+33  3.84301e+35  9.40249e+34  7.00752e+34
    1600   5.3464e+33  1.96339e+29  4.43778e+30  8.47909e+29  6.91231e+29  3.22912e+26  2.11513e+32  3.22912e+26  1.90113e+32  3.22912e+26  7.47631e+31  2.43382e+25  2.75236e+33  2.43382e+25  8.56291e+32  7.69763e+26  2.17922e+30  1.92344e+36  2.00816e+35  8.54299e+33  7.91062e+33  1.77228e+33   6.3014e+35  1.54022e+35  1.08347e+35
    1700  8.68251e+33  2.31102e+29  6.13586e+30  1.07695e+30  8.64943e+29  3.77663e+26  2.97068e+32  3.77663e+26  2.65843e+32  3.77663e+26  1.03942e+32  2.66552e+25  4.28362e+33  2.66552e+25  1.31889e+33  8.43044e+26  3.19172e+30  2.91389e+36  2.93879e+35  1.41969e+34  1.31235e+34  2.84985e+33  1.01312e+36  2.47765e+35  1.65232e+35
    1800  1.38969e+34  2.69743e+29  8.38503e+30  1.35448e+30  1.07215e+30   4.3814e+26  4.12136e+32   4.3814e+26  3.67296e+32   4.3814e+26  1.42893e+32  2.90413e+25  6.56161e+33  2.90413e+25  2.00279e+33  9.18514e+26  4.62568e+30  4.34318e+36  4.27578e+35  2.32007e+34  2.14159e+34  4.52832e+33  1.59976e+36  3.91921e+35  2.48767e+35
    1900  2.19401e+34    3.125e+29   1.1336e+31  1.68836e+30  1.31777e+30  5.04659e+26  5.65308e+32  5.04659e+26  5.01844e+32  5.04659e+26  1.94391e+32  3.14948e+25  9.90424e+33  3.14948e+25  3.00115e+33   9.9611e+26  6.63727e+30   6.3789e+36  6.18455e+35  3.73235e+34  3.44092e+34  7.11085e+33   2.4845e+36  6.10341e+35  3.70051e+35
    2000  3.41924e+34  3.59614e+29  1.51739e+31  2.08737e+30  1.60722e+30  5.77547e+26  7.67243e+32  5.77547e+26  6.78607e+32  5.77547e+26  2.61867e+32  3.40136e+25  1.47468e+34  3.40136e+25  4.44133e+33  1.07578e+27  9.43368e+30  9.24376e+36  8.89218e+35   5.9162e+34  5.44811e+34  1.10376e+34  3.79973e+36  9.36743e+35  5.44256e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7           B8
     100 3.11568e+225  1.02816e+30  1.82422e+29  3.59409e+38  2.97017e+47 1.37269e+129  2.66912e+20     0.948966  9.38107e-76
     200  8.4699e+127  2.65947e+31   1.3474e+31   5.3462e+31   1.4067e+35   2.5011e+59  1.77655e+26  6.67151e+15   3.0889e-22
     300  4.77661e+95  1.82852e+32  9.34454e+31  1.94043e+31  2.80781e+33  2.63481e+39  3.25537e+28  2.48065e+21   0.00040664
     400  5.08967e+79  7.43446e+32  3.14247e+32  2.19148e+31  8.64445e+32  7.43797e+32  6.85118e+29  2.24136e+24       651820
     500   1.7108e+70  2.27531e+33   7.6354e+32   3.3271e+31  6.11818e+32  2.64767e+31  5.78559e+30  1.76233e+26   2.7229e+11
     600  1.01129e+64  5.83137e+33  1.55861e+33  5.64385e+31  6.25229e+32  1.84524e+31  3.01222e+31  4.01325e+27  1.80785e+15
     700  4.24434e+59  1.32406e+34  2.86953e+33  1.00078e+32  7.71401e+32  2.30412e+31  1.16805e+32    4.443e+28  1.11633e+18
     800  2.54118e+56  2.75326e+34  4.94984e+33  1.80053e+32  1.05646e+33  3.44579e+31  3.71834e+32   3.1024e+29  1.55319e+20
     900  8.89974e+53  5.35429e+34  8.17953e+33  3.23822e+32  1.53628e+33  5.53746e+31  1.02773e+33  1.58057e+30  7.96585e+21
    1000   1.0681e+52  9.87598e+34  1.31263e+34  5.77697e+32  2.31264e+33  9.17219e+31  2.55416e+33  6.41678e+30  2.02406e+23
    1100  3.12646e+50  1.74488e+35  2.06328e+34  1.01822e+33  3.54893e+33  1.53585e+32  5.84183e+33    2.197e+31  3.07609e+24
    1200  1.77965e+49   2.9743e+35  3.19407e+34  1.76961e+33  5.49845e+33  2.57368e+32  1.24971e+34  6.59133e+31  3.17068e+25
    1300  1.68437e+48  4.91797e+35  4.88644e+34  3.03006e+33  8.54709e+33  4.29205e+32  2.52998e+34  1.77997e+32   2.4184e+26
    1400  2.37058e+47  7.92117e+35  7.40326e+34  5.11068e+33  1.32752e+34  7.10056e+32  4.88948e+34  4.41176e+32  1.45279e+27
    1500  4.57173e+46  1.24691e+36  1.11222e+35  8.49252e+33  2.05451e+34  1.16317e+33  9.08149e+34  1.01832e+33  7.19572e+27
    1600  1.13644e+46  1.92344e+36  1.65812e+35  1.39085e+34  3.16247e+34  1.88489e+33  1.62959e+35   2.2134e+33  3.04163e+28
    1700  3.47523e+45  2.91389e+36  2.45402e+35  2.24601e+34  4.83576e+34  3.01995e+33  2.83696e+35  4.56984e+33  1.12662e+29
    1800   1.2609e+45  4.34318e+36  3.60641e+35  3.57809e+34  7.33977e+34  4.78317e+33  4.80794e+35  9.02403e+33  3.73294e+29
    1900  5.27566e+44   6.3789e+36  5.26331e+35  5.62641e+34  1.10527e+35  7.48943e+33  7.95467e+35  1.71386e+34  1.12469e+30
    2000  2.48838e+44  9.24376e+36   7.6289e+35  8.73733e+34  1.65081e+35  1.15951e+34  1.28785e+36  3.14487e+34  3.12202e+30
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D           B8            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0            1           -0
Model::init:  done, cpu time[sec] = 15.6548, elapsed time[sec] = 11
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 300 K
      Energy reference = 25117 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 4.8e-05
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.005034
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.004544
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.55819
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.90553
         W1 Well: minimal relaxation eigenvalue = 0.0968407
         W1 Well: maximal relaxation eigenvalue = 0.989621
         W1 Well:       grid size = 575
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3632 1/cm
         B1 Barrier:        grid size = 503
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -32 1/cm
         B2 Barrier:        grid size = 499
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 595
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4632 1/cm
         B4 Barrier:        grid size = 626
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6182 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 965
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23132 1/cm
         B6 Barrier:        grid size = 473
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1467 1/cm
         B7 Barrier:        grid size = 408
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4717 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16767 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.95557, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 2.2614e+57
      MasterEquation::Barrier::truncate: effective weight = 5.15183e+53
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 3.27226e+59
      MasterEquation::Barrier::truncate: effective weight = 7.45324e+55
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 3.07063e+65
      MasterEquation::Barrier::truncate: effective weight = 3.50467e+55
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3632  -3632 3.63e+09 3.11e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -32 2.86e+14
         B2    168  3.9e+13
         B3  -3632 9.11e+12
         B4  -3632 1.19e+13
         B5  -3632 1.22e+12
         B6   1468 1.56e+14
         B7   4718 1.22e+13
         B8  16767 9.32e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.67e-06  5.05e-06  5.14e-15  2.19e-18  4.96e-56    0.0288  2.33e+05  1.31e+31
          R  5.98e+05         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  1.98e+05     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  1.95e+14  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  4.56e+17  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  2.02e+55  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5      34.7   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6   4.3e-06  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  7.64e-32  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.91e+40  1.18e+41   1.2e+32  5.13e+28  1.16e-09  6.74e+44  5.45e+51  3.06e+77
          R  2.56e-41         1      3.02  3.07e-09  1.31e-12  2.97e-50  1.72e+04  1.39e+11  7.83e+36
         P1  8.46e-42     0.331         1  1.02e-09  4.34e-13  9.82e-51   5.7e+03  4.61e+10  2.59e+36
         P2  8.32e-33  3.25e+08  9.83e+08         1  0.000427  9.66e-42  5.61e+12  4.53e+19  2.55e+45
         P3  1.95e-29  7.62e+11   2.3e+12  2.34e+03         1  2.26e-38  1.31e+16  1.06e+23  5.97e+48
         P4  8.62e+08  3.37e+49  1.02e+50  1.04e+41  4.42e+37         1  5.81e+53  4.69e+60  2.64e+86
         P5  1.48e-45   5.8e-05  0.000175  1.78e-13  7.62e-17  1.72e-54         1  8.08e+06  4.54e+32
         P6  1.84e-52  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.13e-61  1.24e-07         1  5.62e+25
         P7  3.27e-78  1.28e-37  3.86e-37  3.92e-46  1.68e-49  3.79e-87   2.2e-33  1.78e-26         1
   MasterEquation::set:  done, cpu time[sec] = 4.97079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+08
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.670819, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1808, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5849.09      798.621      186.654      243.697      24.9952      3187.35      249.211      0.19077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081233, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087945, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17307e-07  1.17307e-07  1.43345e-09
      low eigenvalue method done, cpu time[sec] = 0.088258, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-07  1.43e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-08  1.43e-09         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43345e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.72519e-60  3.93816e-60  1.59803e-61  2.08532e-60  5.00443e-62  8.92998e-64  2.77182e-72  -2.1568e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.28934, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.670697, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.3693, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1949.7      266.207      62.2181      81.2323      8.33174      1062.45      83.0703    0.0635899
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081428, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00616, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088123, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.00126e-08  4.00126e-08  3.52682e-10
      low eigenvalue method done, cpu time[sec] = 0.088439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     4e-08  3.53e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-09  3.53e-10         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.52682e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.11406e-60  9.40461e-61  3.14036e-62  3.39414e-61  8.54126e-63  6.56026e-64  2.79391e-72 -8.07813e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         2.35656e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.671001, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.38522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1169.82      159.724      37.3309      48.7394      4.99905      637.469      49.8422    0.0381539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081475, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088186, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.42282e-08  2.42282e-08  1.70177e-10
      low eigenvalue method done, cpu time[sec] = 0.088507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.42e-08   1.7e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-09   1.7e-10         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70177e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05637e-60  4.41215e-61  1.40143e-62  1.41528e-61  3.63366e-63  4.84803e-64  2.81741e-72 -1.24732e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4433, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         3.29919e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.672358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.38553, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            835.584      114.089      26.6649      34.8138      3.57075      455.335      35.6015    0.0272528
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081488, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.7401e-08   1.7401e-08  1.02482e-10
      low eigenvalue method done, cpu time[sec] = 0.088496, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-08  1.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-09  1.02e-10         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02482e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.48555e-61  2.60418e-61  8.08165e-63  7.85347e-62  2.04089e-63  3.74111e-64  2.84224e-72  1.92827e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4439, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.24181e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.671575, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.39514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            649.898      88.7356      20.7394      27.0774      2.77725       354.15      27.6901    0.0211966
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081565, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088269, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35861e-08  1.35861e-08   6.9215e-11
      low eigenvalue method done, cpu time[sec] = 0.088583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.36e-08  6.92e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-09  6.92e-11         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.92149e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.43637e-61  1.73239e-61  5.30486e-63  5.02427e-62  1.31665e-63  2.98952e-64  2.86817e-72  -6.6603e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4572, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.40568, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            584.909      79.8621      18.6654      24.3697      2.49952      318.735      24.9211     0.019077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08837, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22463e-08  1.22463e-08  5.85162e-11
      low eigenvalue method done, cpu time[sec] = 0.088688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-08  5.85e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-09  5.85e-11         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.85163e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.76918e-61  1.45542e-61   4.4357e-63  4.15913e-62  1.09358e-63  2.70055e-64  2.88143e-72  7.68759e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4664, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         7.06969e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.673399, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.39541, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            389.939      53.2414      12.4436      16.2465      1.66635       212.49      16.6141     0.012718
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081538, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.006176, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088252, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.20999e-09  8.20998e-09  3.01231e-11
      low eigenvalue method done, cpu time[sec] = 0.088565, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.21e-09  3.01e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.37e-10  3.01e-11         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.01232e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.97347e-61  7.31827e-62  2.19901e-63  1.99149e-62  5.29875e-64  1.75356e-64  2.94866e-72 -1.24969e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2981, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         9.42625e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.671661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.39887, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            292.454       39.931      9.33271      12.1848      1.24976      159.367      12.4605   0.00953848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081537, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.18013e-09  6.18012e-09  1.85033e-11
      low eigenvalue method done, cpu time[sec] = 0.088555, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.18e-09  1.85e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.28e-10  1.85e-11         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.8503e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.22464e-61  4.42573e-62  1.32073e-63  1.17111e-62  3.13917e-64  1.24356e-64   3.0128e-72 -7.55018e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.305, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.17828e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.38841, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            233.963      31.9448      7.46617      9.74788     0.999809      127.494      9.96843   0.00763078
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081663, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006177, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088375, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.95744e-09  4.95742e-09  1.25706e-11
      low eigenvalue method done, cpu time[sec] = 0.088691, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-09  1.26e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-10  1.26e-11         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25704e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.3779e-62   2.9729e-62  8.83706e-64  7.72316e-63  2.08098e-64  9.33709e-65  3.06901e-72  1.19002e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2887, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.672805, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.40488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             194.97      26.6207      6.22181      8.12323     0.833174      106.245      8.30703   0.00635899
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081594, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006171, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088302, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.1399e-09  4.13989e-09  9.11841e-12
      low eigenvalue method done, cpu time[sec] = 0.088622, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.14e-09  9.12e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.19e-10  9.12e-12         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.11848e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.10827e-62  2.13789e-62  6.33933e-64  5.48137e-63  1.48268e-64  7.29798e-65  3.11451e-72 -1.10887e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4653, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.64959e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.67539, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.39467, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            167.117      22.8177      5.33298      6.96277     0.714149      91.0671      7.12031   0.00545056
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081584, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006157, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088279, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.55457e-09  3.55458e-09  6.92692e-12
      low eigenvalue method done, cpu time[sec] = 0.088617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.55e-09  6.93e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.59e-10  6.93e-12         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.92713e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.65855e-62  1.61293e-62  4.77485e-64  4.09463e-63  1.11094e-64  5.87729e-65  3.14816e-72  7.73908e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4577, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.88525e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.672074, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.40165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            146.227      19.9655      4.66636      6.09242     0.624881      79.6837      6.23027   0.00476924
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081529, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.11476e-09  3.11477e-09  5.44615e-12
      low eigenvalue method done, cpu time[sec] = 0.08853, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-09  5.45e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-10  5.45e-12         1
         *Z       ---       ---  4.88e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.44609e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.67422e-62    1.261e-62  3.72874e-64  3.17646e-63  8.63933e-65  4.84414e-65  3.16996e-72  3.23864e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4634, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 310 K
      Energy reference = 25395 1/cm
      Energy step      = 52 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008506
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.682094
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.441729
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.62838
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.74173
         W1 Well: minimal relaxation eigenvalue = 0.0959371
         W1 Well: maximal relaxation eigenvalue = 0.987815
         W1 Well:       grid size = 560
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3725 1/cm
         B1 Barrier:        grid size = 489
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -33 1/cm
         B2 Barrier:        grid size = 485
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 174 1/cm
         B3 Barrier:        grid size = 577
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4609 1/cm
         B4 Barrier:        grid size = 608
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6221 1/cm
         B5 Barrier: nonpositive number of states at -23121 1/cm => truncating
         B5 Barrier:        grid size = 933
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23121 1/cm
         B6 Barrier:        grid size = 460
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1474 1/cm
         B7 Barrier:        grid size = 398
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 5.98912, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.58535e+56
      MasterEquation::Barrier::truncate: effective weight = 3.75615e+52
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.93404e+58
      MasterEquation::Barrier::truncate: effective weight = 4.58191e+54
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.93679e+63
      MasterEquation::Barrier::truncate: effective weight = 1.89759e+54
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3725  -3725 3.53e+09 3.26e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -33 3.11e+14
         B2    175  4.3e+13
         B3  -3725 1.01e+13
         B4  -3725 1.31e+13
         B5  -3725 1.35e+12
         B6   1475 1.72e+14
         B7   4699 1.36e+13
         B8  16763 1.13e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e-06  3.56e-06   7.7e-15  4.23e-18  1.61e-54    0.0171  8.52e+04  7.47e+29
          R   8.2e+05         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  2.81e+05     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2   1.3e+14  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  2.37e+17  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  6.23e+53  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5      58.4  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  1.17e-05  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  1.34e-30  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.74e+38     8e+38  1.73e+30   9.5e+26  3.61e-10  3.85e+42  1.92e+49  1.68e+74
          R  3.65e-39         1      2.92  6.31e-09  3.47e-12  1.32e-48   1.4e+04  6.99e+10  6.12e+35
         P1  1.25e-39     0.343         1  2.16e-09  1.19e-12  4.51e-49  4.81e+03  2.39e+10   2.1e+35
         P2  5.78e-31  1.58e+08  4.62e+08         1  0.000549  2.09e-40  2.22e+12  1.11e+19   9.7e+43
         P3  1.05e-27  2.88e+11  8.42e+11  1.82e+03         1   3.8e-37  4.05e+15  2.02e+22  1.77e+47
         P4  2.77e+09  7.59e+47  2.22e+48  4.79e+39  2.63e+36         1  1.07e+52  5.31e+58  4.65e+83
         P5   2.6e-43  7.12e-05  0.000208   4.5e-13  2.47e-16  9.38e-53         1  4.98e+06  4.36e+31
         P6  5.22e-50  1.43e-11  4.18e-11  9.03e-20  4.96e-23  1.88e-59  2.01e-07         1  8.76e+24
         P7  5.96e-75  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.15e-84  2.29e-32  1.14e-25         1
   MasterEquation::set:  done, cpu time[sec] = 6.00492, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+08
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.638594, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.20486, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6207.37      856.676      201.403      262.151      26.9943      3427.57      271.959     0.226121
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075845, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005816, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082186, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10143e-07  1.10143e-07  1.90739e-09
      low eigenvalue method done, cpu time[sec] = 0.082485, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-07  1.91e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-08  1.91e-09         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.90739e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13429e-57  5.70142e-58  2.23088e-59  2.76999e-58  6.70067e-60  1.51432e-61  7.77771e-70 -1.08163e-92

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.15039, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.638876, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.43382, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2069.12      285.559      67.1342      87.3836       8.9981      1142.52      90.6531    0.0753736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075737, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005783, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.7786e-08   3.7786e-08  4.86449e-10
      low eigenvalue method done, cpu time[sec] = 0.082337, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.78e-08  4.86e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.88e-09  4.86e-10         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.86449e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.20394e-58    1.397e-58  4.54007e-60  4.68294e-59  1.19126e-60  1.12766e-61  7.83945e-70 -3.23801e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.2245, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         2.30227e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.641675, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09682, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1241.47      171.335      40.2805      52.4301      5.39886      685.514      54.3919    0.0452242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081984, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.29292e-08  2.29292e-08  2.38416e-10
      low eigenvalue method done, cpu time[sec] = 0.082282, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.29e-08  2.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-09  2.38e-10         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.38416e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62496e-58  6.63296e-59  2.05719e-60  1.98328e-59  5.15361e-61  8.42211e-62  7.90512e-70 -8.98145e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0439, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         3.22318e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639863, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08702, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            886.767      122.382      28.7718      37.4501      3.85633      489.653      38.8513     0.032303
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075606, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005783, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.64878e-08  1.64878e-08  1.44999e-10
      low eigenvalue method done, cpu time[sec] = 0.0822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.65e-08  1.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-09  1.45e-10         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44999e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00728e-58  3.94505e-59   1.1977e-60  1.11092e-59  2.92423e-61  6.55224e-62  7.97448e-70 -5.03428e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0306, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.14409e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.638861, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09807, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            689.708      95.1862      22.3781      29.1279      2.99937      380.841      30.2177    0.0251245
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.28831e-08  1.28831e-08  9.86281e-11
      low eigenvalue method done, cpu time[sec] = 0.082286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.29e-08  9.86e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-09  9.86e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.86287e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9387e-59  2.63892e-59  7.91554e-61  7.15379e-60  1.90004e-61  5.27024e-62  8.04681e-70 -7.84883e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.88311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13435, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            620.737      85.6676      20.1403      26.2151      2.69943      342.757      27.1959    0.0226121
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075653, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005771, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081936, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16162e-08  1.16162e-08   8.3625e-11
      low eigenvalue method done, cpu time[sec] = 0.082234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08  8.36e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-09  8.36e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.36249e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.9122e-59  2.22202e-59    6.637e-61  5.93748e-60  1.58265e-61  4.77433e-62  8.08377e-70 -2.09815e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0885, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         6.90681e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640207, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13181, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            413.825      57.1117      13.4268      17.4767      1.79962      228.505      18.1306    0.0150747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005777, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.79543e-09  7.79543e-09  4.35106e-11
      low eigenvalue method done, cpu time[sec] = 0.082219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-09  4.35e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.88e-10  4.35e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.3511e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.12879e-59  1.12657e-59  3.32378e-61  2.86976e-60  7.74794e-62  3.13525e-62  8.27065e-70 -3.09056e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0744, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         9.20908e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08868, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            310.369      42.8338      10.0701      13.1075      1.34972      171.378       13.598     0.011306
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075646, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005783, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081928, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.87154e-09  5.87153e-09  2.69156e-11
      low eigenvalue method done, cpu time[sec] = 0.082229, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.87e-09  2.69e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-10  2.69e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.69154e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.95547e-59  6.84996e-60  2.00951e-61  1.69763e-60  4.62054e-62  2.24166e-62  8.44846e-70  8.88278e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0318, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.15114e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640743, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08989, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            248.295       34.267      8.05611       10.486      1.07977      137.103      10.8784   0.00904484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075595, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005777, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081876, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.71173e-09  4.71173e-09  1.83796e-11
      low eigenvalue method done, cpu time[sec] = 0.082179, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.71e-09  1.84e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.74e-10  1.84e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.838e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34475e-59  4.61936e-60    1.351e-61  1.12425e-60  3.07741e-62  1.69384e-62  8.60415e-70 -6.18287e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0376, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.641701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13617, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            206.912      28.5559      6.71342      8.73836      0.89981      114.252      9.06531   0.00753736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075701, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005769, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081978, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.93583e-09  3.93583e-09  1.33849e-11
      low eigenvalue method done, cpu time[sec] = 0.08228, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.94e-09  1.34e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.95e-10  1.34e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33848e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.84417e-60  3.33184e-60  9.72697e-62  8.00446e-61  2.20045e-62  1.33075e-62   8.7303e-70 -1.40163e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0846, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.61159e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.636887, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08976, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            177.353      24.4764      5.75436      7.49002     0.771266      97.9305      7.77027    0.0064606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075683, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005804, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081992, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.38009e-09  3.38011e-09  1.02002e-11
      low eigenvalue method done, cpu time[sec] = 0.082287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.38e-09  1.02e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-10  1.02e-11         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02007e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.5322e-60  2.51969e-60  7.34783e-62  5.99432e-61  1.65339e-62  1.07629e-62  8.82396e-70  8.37287e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.84182e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639125, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09009, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            155.184      21.4169      5.03507      6.55377     0.674858      85.6892      6.79899   0.00565302
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075636, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005768, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081913, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.9624e-09  2.96238e-09  8.04067e-12
      low eigenvalue method done, cpu time[sec] = 0.08221, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.96e-09  8.04e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.97e-10  8.04e-12         1
         *Z       ---       ---  1.22e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.0409e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.95667e-60  1.97376e-60  5.75176e-62  4.65957e-61  1.28874e-62   8.9034e-63  8.88523e-70 -4.43338e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.032, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 320 K
      Energy reference = 25673 1/cm
      Energy step      = 53 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007743
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.678983
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.431514
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.389803
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.70371
         W1 Well: minimal relaxation eigenvalue = 0.0951007
         W1 Well: maximal relaxation eigenvalue = 0.990724
         W1 Well:       grid size = 556
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3795 1/cm
         B1 Barrier:        grid size = 485
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -32 1/cm
         B2 Barrier:        grid size = 481
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 179 1/cm
         B3 Barrier:        grid size = 572
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 601
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6180 1/cm
         B5 Barrier: nonpositive number of states at -23193 1/cm => truncating
         B5 Barrier:        grid size = 922
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23193 1/cm
         B6 Barrier:        grid size = 457
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 396
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4684 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16769 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.68435, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.31915e+55
      MasterEquation::Barrier::truncate: effective weight = 3.18555e+51
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.37264e+57
      MasterEquation::Barrier::truncate: effective weight = 3.31458e+53
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.85215e+61
      MasterEquation::Barrier::truncate: effective weight = 1.16494e+53
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3795  -3795 3.45e+09 3.43e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -32 3.39e+14
         B2    180 4.73e+13
         B3  -3795 1.12e+13
         B4  -3795 1.45e+13
         B5  -3795  1.5e+12
         B6   1452  1.9e+14
         B7   4685 1.53e+13
         B8  16769 1.37e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   8.4e-07  2.37e-06  1.04e-14  7.24e-18  3.87e-53   0.00973  3.08e+04  4.72e+28
          R  1.19e+06         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  4.21e+05     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2   9.6e+13  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  1.38e+17  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  2.58e+52  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5       103  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  3.25e-05  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7  2.12e-29  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.62e+36  7.39e+36  3.24e+28  2.25e+25  1.21e-10  3.03e+40  9.58e+46  1.47e+71
          R  3.82e-37         1      2.83  1.24e-08  8.62e-12  4.61e-47  1.16e+04  3.66e+10  5.62e+34
         P1  1.35e-37     0.354         1  4.39e-09  3.05e-12  1.63e-47   4.1e+03   1.3e+10  1.99e+34
         P2  3.08e-29  8.07e+07  2.28e+08         1  0.000695  3.72e-39  9.34e+11  2.95e+18  4.53e+42
         P3  4.44e-26  1.16e+11  3.28e+11  1.44e+03         1  5.35e-36  1.34e+15  4.25e+21  6.52e+45
         P4  8.29e+09  2.17e+46  6.13e+46  2.69e+38  1.87e+35         1  2.51e+50  7.94e+56  1.22e+81
         P5   3.3e-41  8.64e-05  0.000244  1.07e-12  7.44e-16  3.98e-51         1  3.16e+06  4.85e+30
         P6  1.04e-47  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.26e-57  3.16e-07         1  1.53e+24
         P7   6.8e-72  1.78e-35  5.03e-35  2.21e-43  1.53e-46  8.21e-82  2.06e-31  6.52e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.69922, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+08
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.636668, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.22594, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6578.48      917.632      216.985      281.586      29.1084      3680.03      296.237     0.266558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074277, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005681, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08047, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14036e-07  1.14036e-07  2.73942e-09
      low eigenvalue method done, cpu time[sec] = 0.080768, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.14e-07  2.74e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-08  2.74e-09         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.73942e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21863e-55  6.04003e-56  2.28931e-57  2.72446e-56   6.6416e-58  1.86906e-59  1.53553e-67  2.07822e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.15942, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.631299, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.085, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2192.83      305.877      72.3282      93.8619      9.70281      1226.68      98.7456    0.0888527
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074524, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005682, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08071, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.94265e-08  3.94264e-08  7.22608e-10
      low eigenvalue method done, cpu time[sec] = 0.081006, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.94e-08  7.23e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-09  7.23e-10         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.22607e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.54829e-56  1.51712e-56  4.81784e-58   4.7756e-57  1.22721e-58  1.40794e-59  1.54768e-67 -3.71746e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0037, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          2.2512e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.63098, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.11718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1315.7      183.526      43.3969      56.3171      5.82169      736.006      59.2474    0.0533116
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074287, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005665, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080452, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39951e-08  2.39951e-08  3.59501e-10
      low eigenvalue method done, cpu time[sec] = 0.080798, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-08   3.6e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.44e-09   3.6e-10         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.595e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82572e-56  7.28788e-57  2.21563e-58  2.05309e-57   5.3952e-59  1.06166e-59   1.5606e-67  5.75882e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0335, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         3.15168e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.630973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.03812, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            939.783       131.09      30.9978      40.2265      4.15835      525.719      42.3195    0.0380797
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074179, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005676, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080362, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72829e-08  1.72828e-08  2.20739e-10
      low eigenvalue method done, cpu time[sec] = 0.080662, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-08  2.21e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-09  2.21e-10         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.20738e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1424e-56  4.36732e-57  1.30208e-58   1.1606e-57  3.09166e-59  8.32187e-60  1.57424e-67  7.97471e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.95337, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         4.05216e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.630508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.04438, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            730.943      101.959      24.1094      31.2873      3.23427      408.892      32.9152    0.0296176
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074191, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005664, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35191e-08  1.35191e-08   1.5119e-10
      low eigenvalue method done, cpu time[sec] = 0.080663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-08  1.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-09  1.51e-10         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5119e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.92372e-57  2.93739e-57  8.66354e-59  7.52184e-58  2.02288e-59  6.73471e-60  1.58844e-67 -8.03626e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.96288, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.629113, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.0918, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            657.848      91.7632      21.6985      28.1586      2.91084      368.003      29.6237    0.0266558
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07422, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005678, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21947e-08  1.21947e-08  1.28556e-10
      low eigenvalue method done, cpu time[sec] = 0.0807, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-08  1.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.23e-09  1.29e-10         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28556e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.77068e-57  2.47888e-57  7.28417e-59  6.25911e-58  1.68972e-59  6.11732e-60  1.59569e-67 -1.53065e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.67358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         6.75361e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.383933, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.93673, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            438.566      61.1754      14.4656      18.7724      1.94056      245.335      19.7491    0.0177705
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074381, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005666, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.1953e-09  8.19529e-09  6.75967e-11
      low eigenvalue method done, cpu time[sec] = 0.080861, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.2e-09  6.76e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.23e-10  6.76e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.75962e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.62121e-57  1.26723e-57  3.68495e-59  3.05353e-58  8.35693e-60  4.06039e-60  1.63226e-67 -1.00715e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.60281, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         9.00481e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.628857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09549, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            328.924      45.8816      10.8492      14.0793      1.45542      184.002      14.8118    0.0133279
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074242, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005673, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.17787e-09  6.17786e-09  4.21096e-11
      low eigenvalue method done, cpu time[sec] = 0.080712, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.18e-09  4.21e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.19e-10  4.21e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.21094e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27936e-57  7.74738e-58  2.24277e-59  1.81717e-58  5.01675e-60  2.92601e-60  1.66696e-67  5.28745e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0115, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          1.1256e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.629572, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09281, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            263.139      36.7053      8.67938      11.2634      1.16434      147.201      11.8495    0.0106623
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074215, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005667, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080379, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.96032e-09  4.96032e-09   2.8903e-11
      low eigenvalue method done, cpu time[sec] = 0.080676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-09  2.89e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.96e-10  2.89e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.89029e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57571e-57  5.24531e-58  1.51515e-59  1.20856e-58  3.35718e-60  2.22456e-60   1.6973e-67 -1.06852e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.009, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.63055, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09687, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            219.283      30.5877      7.23282      9.38619     0.970281      122.668      9.87456   0.00888527
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005658, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08035, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.14519e-09  4.14517e-09  2.11326e-11
      low eigenvalue method done, cpu time[sec] = 0.080647, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.15e-09  2.11e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-10  2.11e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11322e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.15819e-57   3.7949e-58  1.09497e-59  8.63264e-59  2.40921e-60  1.75646e-60  1.72191e-67 -1.62118e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.67398, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.57584e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.382238, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.99362, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            187.957       26.218      6.19956      8.04531      0.83167      105.144      8.46391   0.00761595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074326, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005674, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080558, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.561e-09  3.56099e-09  1.61563e-11
      low eigenvalue method done, cpu time[sec] = 0.08086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.56e-09  1.62e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.55e-10  1.62e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61562e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.89106e-58   2.8769e-58  8.29632e-60  6.48133e-59  1.81548e-60  1.42657e-60  1.74024e-67   1.1778e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.65174, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.80096e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.630206, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.43498, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            164.462      22.9408      5.42461      7.03964     0.727711      92.0008      7.40592   0.00666395
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074058, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005658, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080212, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.12168e-09  3.12167e-09  1.27697e-11
      low eigenvalue method done, cpu time[sec] = 0.080506, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.12e-09  1.28e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.11e-10  1.28e-11         1
         *Z       ---       ---  3.23e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27689e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.05052e-58  2.25811e-58   6.5103e-60  5.04869e-59  1.41842e-60  1.18433e-60  1.75233e-67 -4.65987e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.3467, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 330 K
      Energy reference = 25951 1/cm
      Energy step      = 55 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007867
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.651303
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.412104
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.353538
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.51141
         W1 Well: minimal relaxation eigenvalue = 0.0942545
         W1 Well: maximal relaxation eigenvalue = 0.988973
         W1 Well:       grid size = 542
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3859 1/cm
         B1 Barrier:        grid size = 472
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -9 1/cm
         B2 Barrier:        grid size = 468
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 210 1/cm
         B3 Barrier:        grid size = 556
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4629 1/cm
         B4 Barrier:        grid size = 585
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6224 1/cm
         B5 Barrier: nonpositive number of states at -23109 1/cm => truncating
         B5 Barrier:        grid size = 892
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23109 1/cm
         B6 Barrier:        grid size = 445
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 387
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4666 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16766 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.38861, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 1.2824e+54
      MasterEquation::Barrier::truncate: effective weight = 3.21367e+50
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 1.15008e+56
      MasterEquation::Barrier::truncate: effective weight = 2.88202e+52
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 2.58752e+59
      MasterEquation::Barrier::truncate: effective weight = 8.52329e+51
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3859  -3859 3.39e+09  3.6e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -9 3.69e+14
         B2    211  5.2e+13
         B3  -3859 1.24e+13
         B4  -3859  1.6e+13
         B5  -3859 1.66e+12
         B6   1476 2.09e+14
         B7   4666 1.71e+13
         B8  16766 1.66e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.63e-07  1.54e-06  1.32e-14  1.14e-17  7.33e-52   0.00544  1.12e+04  3.36e+27
          R  1.78e+06         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1  6.48e+05     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2   7.6e+13  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  8.76e+16  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  1.36e+51  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5       184  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  8.89e-05     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  2.98e-28  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.3e+34  9.05e+34  7.72e+26   6.7e+23   4.3e-11  3.19e+38   6.6e+44  1.97e+68
          R  3.03e-35         1      2.74  2.34e-08  2.03e-11   1.3e-45  9.67e+03     2e+10  5.97e+33
         P1   1.1e-35     0.365         1  8.53e-09   7.4e-12  4.75e-46  3.52e+03  7.29e+09  2.18e+33
         P2   1.3e-27  4.28e+07  1.17e+08         1  0.000868  5.57e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.49e-24  4.93e+10  1.35e+11  1.15e+03         1  6.42e-35  4.76e+14  9.85e+20  2.94e+44
         P4  2.33e+10  7.68e+44  2.11e+45   1.8e+37  1.56e+34         1  7.42e+48  1.53e+55  4.59e+78
         P5  3.13e-39  0.000103  0.000284  2.42e-12   2.1e-15  1.35e-49         1  2.07e+06  6.18e+29
         P6  1.52e-45     5e-11  1.37e-10  1.17e-18  1.02e-21  6.52e-56  4.84e-07         1  2.99e+23
         P7  5.07e-69  1.67e-34  4.59e-34  3.92e-42   3.4e-45  2.18e-79  1.62e-30  3.35e-24         1
   MasterEquation::set:  done, cpu time[sec] = 4.40345, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+08
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.601635, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3771, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6962.59       981.59      233.433      302.037      31.3422       3945.1      322.114     0.313049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069118, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074938, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22652e-07  1.22652e-07  3.96859e-09
      low eigenvalue method done, cpu time[sec] = 0.075229, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-07  3.97e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-08  3.97e-09         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.96859e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.86199e-54  4.82148e-54  1.77703e-55  2.03912e-54  5.00797e-56  1.71572e-57  2.20351e-65 -2.93062e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.1952, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.601435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.8679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2320.86      327.197      77.8108      100.679      10.4474      1315.03      107.371      0.10435
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068793, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074588, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28195e-08  4.28195e-08  1.08083e-09
      low eigenvalue method done, cpu time[sec] = 0.074873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.28e-08  1.08e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.34e-09  1.08e-09         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08083e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.95685e-54  1.24049e-54  3.86225e-56  3.69953e-55  9.59756e-57  1.30887e-57  2.22089e-65   5.5336e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68158, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         2.20306e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602984, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.87243, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1392.52      196.318      46.6865      60.4074      6.26844       789.02      64.4229    0.0626097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068822, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074619, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.61575e-08  2.61575e-08  5.45543e-10
      low eigenvalue method done, cpu time[sec] = 0.074904, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.62e-08  5.46e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-09  5.46e-10         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.45543e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54289e-54  6.02765e-55  1.80202e-56  1.61368e-55  4.28506e-57  9.96737e-58  2.23938e-65  2.93881e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68663, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.08429e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86709, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            994.656      140.227      33.3475      43.1482      4.47746      563.585      46.0163    0.0447212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068953, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005344, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074769, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88802e-08  1.88803e-08  3.38104e-10
      low eigenvalue method done, cpu time[sec] = 0.075056, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08  3.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.9e-09  3.38e-10         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.38103e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.74334e-55  3.63905e-55  1.06879e-56   9.2038e-56  2.47915e-57  7.87276e-58  2.25887e-65 -1.51628e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.5189, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.96551e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86885, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            773.621      109.066      25.9369      33.5597      3.48247      438.344      35.7905    0.0347832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068843, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005333, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074648, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47892e-08  1.47892e-08  2.33155e-10
      low eigenvalue method done, cpu time[sec] = 0.074948, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-08  2.33e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-09  2.33e-10         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.33156e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.8039e-55  2.46088e-55  7.15892e-57   6.0028e-56  1.63321e-57  6.41062e-58  2.27915e-65 -1.26564e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68097, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.601779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86971, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            696.259       98.159      23.3433      30.2037      3.13422       394.51      32.2114    0.0313049
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068871, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005295, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074651, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33476e-08  1.33476e-08  1.98806e-10
      low eigenvalue method done, cpu time[sec] = 0.074934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-08  1.99e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-09  1.99e-10         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98807e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.8301e-55  2.08139e-55  6.03557e-57  5.00786e-56  1.36801e-57  5.83855e-58  2.28949e-65  2.00737e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68415, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         6.60918e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.88015, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            464.173      65.4393      15.5622      20.1358      2.08948      263.007      21.4743    0.0208699
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069006, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005323, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074802, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.9866e-09  8.98662e-09  1.05631e-10
      low eigenvalue method done, cpu time[sec] = 0.075095, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.99e-09  1.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.97e-10  1.06e-10         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05632e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15104e-55  1.07287e-55  3.08432e-57  2.46587e-56  6.83459e-58  3.91712e-58  2.34151e-65  1.81591e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.69968, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         8.81225e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86649, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            348.129      49.0795      11.6716      15.1019      1.56711      197.255      16.1057    0.0156524
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068835, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00533, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074635, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.78173e-09  6.78174e-09  6.62658e-11
      low eigenvalue method done, cpu time[sec] = 0.074923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.78e-09  6.63e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.75e-10  6.63e-11         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.62659e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.99754e-55  6.59541e-56  1.88989e-57  1.47631e-56  4.13013e-58  2.84503e-58  2.39073e-65   3.2487e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68159, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.10153e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.603464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.86805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            278.504      39.2636       9.3373      12.0815      1.25369      157.804      12.8846    0.0125219
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069184, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005322, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.44913e-09  5.44915e-09  4.57189e-11
      low eigenvalue method done, cpu time[sec] = 0.075269, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.45e-09  4.57e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.41e-10  4.57e-11         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.5719e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38817e-55  4.48342e-56  1.28306e-57  9.86122e-57  2.77714e-58  2.17633e-58  2.43371e-65  1.05125e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.68374, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.599321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.85757, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            232.086      32.7197      7.78108      10.0679      1.04474      131.503      10.7371     0.010435
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068889, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005311, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55605e-09  4.55607e-09  3.35625e-11
      low eigenvalue method done, cpu time[sec] = 0.074959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-09  3.36e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.51e-10  3.36e-11         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.35627e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02456e-55  3.25383e-56  9.30792e-58  7.06711e-57  2.00031e-58  1.72702e-58  2.46859e-65  -1.1671e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.67155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.54214e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602731, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.84955, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            198.931      28.0454       6.6695      8.62963     0.895492      112.717      9.20327   0.00894425
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06891, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005319, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074707, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.91555e-09  3.91555e-09   2.5743e-11
      low eigenvalue method done, cpu time[sec] = 0.074995, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.92e-09  2.57e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.87e-10  2.57e-11         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57432e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.89146e-56  2.47291e-56  7.07415e-58  5.31995e-57   1.5118e-58  1.40856e-58  2.49466e-65 -5.73448e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.66306, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.76245e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600351, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.8489, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            174.065      24.5398      5.83581      7.55093     0.783555      98.6275      8.05286   0.00782622
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068934, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005332, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07474, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.43357e-09  3.43359e-09   2.0402e-11
      low eigenvalue method done, cpu time[sec] = 0.075026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.43e-09  2.04e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-10  2.04e-11         1
         *Z       ---       ---  9.04e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.04021e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.27528e-56  1.94504e-56  5.56542e-58  4.15299e-57  1.18404e-58   1.1736e-58  2.51199e-65  7.16665e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.65857, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 340 K
      Energy reference = 26229 1/cm
      Energy step      = 57 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007558
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.629765
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.391456
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.338474
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.32815
         W1 Well: minimal relaxation eigenvalue = 0.0934324
         W1 Well: maximal relaxation eigenvalue = 0.987344
         W1 Well:       grid size = 529
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3924 1/cm
         B1 Barrier:        grid size = 461
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -48 1/cm
         B2 Barrier:        grid size = 457
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 179 1/cm
         B3 Barrier:        grid size = 541
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4608 1/cm
         B4 Barrier:        grid size = 569
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6204 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 866
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23133 1/cm
         B6 Barrier:        grid size = 434
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1490 1/cm
         B7 Barrier:        grid size = 378
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4682 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16767 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.14618, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 1.4364e+53
      MasterEquation::Barrier::truncate: effective weight = 3.7305e+49
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 1.12071e+55
      MasterEquation::Barrier::truncate: effective weight = 2.91059e+51
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 5.11034e+57
      MasterEquation::Barrier::truncate: effective weight = 7.26659e+50
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3924  -3924 3.32e+09 3.78e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -48 4.01e+14
         B2    180 5.71e+13
         B3  -3924 1.37e+13
         B4  -3924 1.76e+13
         B5  -3924 1.84e+12
         B6   1491  2.3e+14
         B7   4683  1.9e+13
         B8  16767    2e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.85e-07  1.03e-06  1.64e-14  1.75e-17  1.16e-50   0.00314  4.36e+03  2.79e+26
          R   2.6e+06         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  9.73e+05     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  6.11e+13  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  5.71e+16   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  8.58e+49  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5       318  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6   0.00023  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  3.58e-27  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.38e+32  1.43e+33  2.29e+25  2.44e+22  1.63e-11  4.39e+36  6.08e+42   3.9e+65
          R  1.86e-33         1      2.67  4.25e-08  4.54e-11  3.02e-44  8.15e+03  1.13e+10  7.25e+32
         P1  6.97e-34     0.375         1  1.59e-08   1.7e-11  1.13e-44  3.06e+03  4.24e+09  2.72e+32
         P2  4.37e-26  2.35e+07  6.28e+07         1   0.00107  7.11e-37  1.92e+11  2.66e+17  1.71e+40
         P3  4.09e-23   2.2e+10  5.87e+10       935         1  6.65e-34  1.79e+14  2.49e+20   1.6e+43
         P4  6.15e+10  3.31e+43  8.82e+43  1.41e+36   1.5e+33         1   2.7e+47  3.74e+53   2.4e+76
         P5  2.28e-37  0.000123  0.000327  5.21e-12  5.57e-15  3.71e-48         1  1.39e+06  8.89e+28
         P6  1.64e-43  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.67e-54  7.21e-07         1  6.41e+22
         P7  2.57e-66  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.17e-77  1.12e-29  1.56e-23         1
   MasterEquation::set:  done, cpu time[sec] = 4.16079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+08
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571048, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25796, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7359.98      1048.65       250.78      323.541      33.7003      4223.15      349.664     0.366581
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064397, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069857, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32967e-07  1.32967e-07  5.62043e-09
      low eigenvalue method done, cpu time[sec] = 0.070125, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-07  5.62e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08  5.62e-09         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.62043e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.16054e-52  2.97089e-52  1.06838e-53   1.1877e-52  2.93775e-54  1.21242e-55  2.35757e-63 -7.66788e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.98364, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68361, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2453.33      349.551      83.5932      107.847      11.2334      1407.72      116.555     0.122194
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064237, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004984, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069676, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.69628e-08  4.69628e-08  1.57792e-09
      low eigenvalue method done, cpu time[sec] = 0.069953, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.7e-08  1.58e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.73e-09  1.58e-09         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57792e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89988e-52  7.82398e-53  2.39518e-54  2.22666e-53  5.82822e-55  9.34512e-56  2.37608e-63 -4.04818e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.40569, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         2.15759e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573471, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.70351, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1472       209.73      50.1559      64.7083      6.74007       844.63      69.9327    0.0733163
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064309, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069762, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.8818e-08   2.8818e-08  8.07646e-10
      low eigenvalue method done, cpu time[sec] = 0.070035, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.88e-08  8.08e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-09  8.08e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.07646e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00494e-52  3.84459e-53  1.13335e-54  9.84916e-54  2.64108e-55  7.17936e-56  2.39578e-63 -6.38236e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.42704, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.02062e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571853, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.69691, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1051.43      149.807      35.8257      46.2202      4.81433      603.307      49.9519    0.0523688
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064293, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004996, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0854e-08   2.0854e-08    5.051e-10
      low eigenvalue method done, cpu time[sec] = 0.070023, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.09e-08  5.05e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-09  5.05e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.051e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.40338e-53  2.33813e-53  6.78299e-55  5.66665e-54  1.54229e-55  5.71039e-56  2.41654e-63  4.96639e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.41983, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.88366e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.57187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67802, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            817.776      116.517      27.8644       35.949      3.74448      469.239      38.8515    0.0407313
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064416, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63632e-08  1.63632e-08   3.5064e-10
      low eigenvalue method done, cpu time[sec] = 0.070135, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-08  3.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-09  3.51e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.5064e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50132e-53  1.58966e-53  4.57331e-55  3.71883e-54  1.02283e-55  4.67655e-56  2.43809e-63  2.78247e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.40023, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572084, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            735.998      104.865       25.078      32.3541      3.37003      422.315      34.9664    0.0366581
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06422, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004998, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069671, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47779e-08  1.47779e-08  2.99806e-10
      low eigenvalue method done, cpu time[sec] = 0.069945, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-08     3e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-09     3e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99806e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.86771e-53  1.34749e-53  3.86614e-55  3.11028e-54  8.59076e-56  4.26993e-56  2.44907e-63 -7.40424e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.40059, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         6.47276e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573335, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67841, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            490.665      69.9101      16.7186      21.5694      2.24669      281.543      23.3109    0.0244388
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064278, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004984, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069719, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.97203e-09  9.97204e-09  1.60944e-10
      low eigenvalue method done, cpu time[sec] = 0.069996, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.97e-09  1.61e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.89e-10  1.61e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.60944e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.11218e-53  7.00343e-54  1.99569e-55  1.54568e-54  4.33511e-56  2.89391e-56   2.5042e-63  -1.3349e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.39938, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         8.63035e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.57128, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68833, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            367.999      52.4326       12.539      16.1771      1.68502      211.157      17.4832    0.0183291
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064334, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005018, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069815, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.53542e-09  7.53544e-09  1.01672e-10
      low eigenvalue method done, cpu time[sec] = 0.070087, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.54e-09  1.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.45e-10  1.02e-10         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01672e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34846e-53  4.32926e-54  1.23113e-55  9.30999e-55  2.63708e-56  2.11773e-56  2.55623e-63 -5.06724e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.41025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.07879e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.570681, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67849, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            294.399      41.9461      10.0312      12.9417      1.34801      168.926      13.9865    0.0146633
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064285, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005021, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069764, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.0602e-09   6.0602e-09  7.05102e-11
      low eigenvalue method done, cpu time[sec] = 0.070039, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.06e-09  7.05e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.98e-10  7.05e-11         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.05107e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.4204e-54  2.95497e-54  8.39997e-56  6.24601e-55  1.78178e-56  1.62961e-56  2.60164e-63  1.24016e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.39998, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572951, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.70455, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            245.333      34.9551      8.35932      10.7847      1.12334      140.772      11.6555    0.0122194
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06971, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.07026e-09  5.07027e-09  5.19721e-11
      low eigenvalue method done, cpu time[sec] = 0.069983, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.07e-09   5.2e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.99e-10   5.2e-11         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.19726e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9816e-54  2.15138e-54  6.11747e-56  4.49134e-55  1.28818e-56  1.29947e-56  2.63853e-63   1.4015e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.42421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.51031e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573267, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.70032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            210.285      29.9615      7.16513      9.24404     0.962867      120.661      9.99039    0.0104738
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064745, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.070209, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.35962e-09  4.35963e-09   3.9995e-11
      low eigenvalue method done, cpu time[sec] = 0.070482, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-09     4e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.28e-10     4e-11         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.99953e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.39559e-54  1.63924e-54  4.66401e-56   3.3901e-55  9.76521e-57  1.06421e-56  2.66622e-63  4.29027e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.42521, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.72607e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571299, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31155, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
                184      26.2163      6.26949      8.08853     0.842509      105.579      8.74159   0.00916453
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069856, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.82451e-09  3.82451e-09  3.17843e-11
      low eigenvalue method done, cpu time[sec] = 0.070151, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.82e-09  3.18e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.75e-10  3.18e-11         1
         *Z       ---       ---  2.73e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.17848e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.30266e-54  1.29208e-54  3.67892e-56  2.65235e-55  7.66711e-57  8.89819e-57  2.68477e-63  1.32449e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.03449, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 350 K
      Energy reference = 26507 1/cm
      Energy step      = 58 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007588
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.629613
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.388313
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.314334
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.32215
         W1 Well: minimal relaxation eigenvalue = 0.0926631
         W1 Well: maximal relaxation eigenvalue = 0.990026
         W1 Well:       grid size = 526
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4001 1/cm
         B1 Barrier:        grid size = 458
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 454
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 175 1/cm
         B3 Barrier:        grid size = 537
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4638 1/cm
         B4 Barrier:        grid size = 564
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23141 1/cm => truncating
         B5 Barrier:        grid size = 856
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23141 1/cm
         B6 Barrier:        grid size = 432
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 376
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.10776, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.83113e+52
      MasterEquation::Barrier::truncate: effective weight = 4.83908e+48
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.25351e+54
      MasterEquation::Barrier::truncate: effective weight = 3.31261e+50
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.38583e+56
      MasterEquation::Barrier::truncate: effective weight = 7.08635e+49
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4001  -4001 3.24e+09 3.97e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 4.36e+14
         B2    176 6.27e+13
         B3  -4001 1.51e+13
         B4  -4001 1.94e+13
         B5  -4001 2.03e+12
         B6   1452 2.53e+14
         B7   4700 2.12e+13
         B8  16763  2.4e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.86e-07  7.43e-07  2.14e-14  2.78e-17  1.68e-49   0.00199  1.89e+03  2.84e+25
          R  3.49e+06         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  1.35e+06     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  4.68e+13  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3   3.6e+16  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  5.96e+48   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5       503  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  0.000529  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  3.52e-26  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.11e+31  2.88e+31  8.27e+23  1.08e+21  6.49e-12  7.69e+34  7.32e+40   1.1e+63
          R  9.03e-32         1       2.6  7.47e-08  9.72e-11  5.87e-43  6.94e+03  6.61e+09  9.94e+31
         P1  3.48e-32     0.385         1  2.87e-08  3.74e-11  2.26e-43  2.67e+03  2.54e+09  3.83e+31
         P2  1.21e-24  1.34e+07  3.48e+07         1    0.0013  7.86e-36   9.3e+10  8.85e+16  1.33e+39
         P3   9.3e-22  1.03e+10  2.67e+10       768         1  6.04e-33  7.15e+13   6.8e+19  1.02e+42
         P4  1.54e+11   1.7e+42  4.43e+42  1.27e+35  1.66e+32         1  1.18e+46  1.13e+52  1.69e+74
         P5   1.3e-35  0.000144  0.000374  1.08e-11   1.4e-14  8.45e-47         1  9.52e+05  1.43e+28
         P6  1.37e-41  1.51e-10  3.93e-10  1.13e-17  1.47e-20  8.88e-53  1.05e-06         1   1.5e+22
         P7  9.09e-64  1.01e-32  2.61e-32  7.51e-40  9.78e-43   5.9e-75  6.99e-29  6.65e-23         1
   MasterEquation::set:  done, cpu time[sec] = 4.12307, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+08
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.569164, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7770.77      1118.91       269.06      346.135      36.1876      4514.56      378.958     0.427741
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004958, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068931, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39237e-07  1.39237e-07  7.46013e-09
      low eigenvalue method done, cpu time[sec] = 0.069278, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-07  7.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.41e-08  7.46e-09         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.46013e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.03612e-50  1.44465e-50  5.08216e-52  5.49432e-51   1.3683e-52  6.69365e-54  1.93561e-61  2.89229e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.96609, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.566229, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66003, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2590.26      372.969      89.6866      115.378      12.0625      1504.85      126.319      0.14258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063337, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004976, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068769, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.98338e-08  4.98338e-08  2.15573e-09
      low eigenvalue method done, cpu time[sec] = 0.069052, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.98e-08  2.16e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.99e-09  2.16e-09         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15573e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.61976e-51  3.89082e-51  1.17379e-52   1.0627e-51  2.80496e-53  5.21668e-54  1.95077e-61  2.65388e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.11455e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.566516, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.64899, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1554.15      223.782       53.812       69.227      7.23752      902.912      75.7916    0.0855483
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063362, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068785, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.07386e-08  3.07386e-08  1.11832e-09
      low eigenvalue method done, cpu time[sec] = 0.069138, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.07e-08  1.12e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.06e-09  1.12e-09         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11832e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.15579e-51  1.93283e-51  5.63046e-53  4.76439e-52  1.28934e-53  4.04336e-54  1.96691e-61 -3.52742e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.35183, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.96037e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565225, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.64409, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1110.11      159.844      38.4371      49.4478      5.16966      644.937      54.1369    0.0611059
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063416, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004932, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068842, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.231e-08    2.231e-08  7.05572e-10
      low eigenvalue method done, cpu time[sec] = 0.069119, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.23e-08  7.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-09  7.06e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.05572e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.31396e-51  1.18392e-51  3.39966e-53  2.76444e-52  7.59743e-54  3.23844e-54   1.9839e-61  1.57174e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.18597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         3.80619e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.56789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.62558, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            863.419      124.323      29.8955      38.4594      4.02085      501.618      42.1065    0.0475268
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063365, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06875, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75402e-08  1.75402e-08  4.92995e-10
      low eigenvalue method done, cpu time[sec] = 0.069025, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-08  4.93e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.74e-09  4.93e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.92995e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.3447e-51  8.09184e-52  2.30703e-53  1.82525e-52  5.07141e-54   2.6672e-54  2.00151e-61  -6.0214e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.33205, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.568451, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.6195, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            777.077      111.891       26.906      34.6135      3.61876      451.456      37.8958    0.0427741
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004946, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58531e-08  1.58531e-08  4.22658e-10
      low eigenvalue method done, cpu time[sec] = 0.068971, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-08  4.23e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-09  4.23e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.22658e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02009e-51  6.87416e-52   1.9555e-53  1.53035e-52  4.27087e-54  2.44133e-54  2.01047e-61  9.63769e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.32223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         6.34365e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.61919, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            518.051      74.5939      17.9373      23.0757      2.41251      300.971      25.2639    0.0285161
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068657, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07257e-08  1.07257e-08  2.29203e-10
      low eigenvalue method done, cpu time[sec] = 0.068938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-08  2.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-09  2.29e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.29202e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11448e-51  3.60214e-52  1.01955e-53  7.67485e-53  2.17656e-54  1.67121e-54  2.05537e-61  8.14055e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.32175, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         8.45821e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.568485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.62957, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            388.539      55.9454       13.453      17.3067      1.80938      225.728      18.9479    0.0213871
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00493, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068649, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.11761e-09  8.11759e-09  1.45795e-10
      low eigenvalue method done, cpu time[sec] = 0.068924, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.12e-09  1.46e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.97e-10  1.46e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45795e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.16489e-52  2.23907e-52  6.33215e-54  4.65071e-53  1.33277e-54  1.23206e-54   2.0976e-61  8.00831e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.33797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.05728e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567533, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.63014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            310.831      44.7563      10.7624      13.8454       1.4475      180.582      15.1583    0.0171097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063275, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.53526e-09  6.53525e-09  1.01632e-10
      low eigenvalue method done, cpu time[sec] = 0.068951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-09  1.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.4e-10  1.02e-10         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01632e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03163e-52  1.53457e-52  4.34209e-54   3.1339e-53  9.04874e-55  9.53645e-55  2.13442e-61 -7.79403e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.33152, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.566127, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.62185, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            259.026      37.2969      8.96866      11.5378      1.20625      150.485      12.6319     0.014258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004957, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068674, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.4719e-09  5.47189e-09  7.52159e-11
      low eigenvalue method done, cpu time[sec] = 0.068953, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.47e-09  7.52e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.35e-10  7.52e-11         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.52158e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.74443e-52  1.12084e-52  3.17466e-54   2.2612e-53  6.56669e-55  7.64109e-55  2.16433e-61 -1.46029e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.32437, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.48019e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.619, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            222.022      31.9688      7.68743      9.88957      1.03393      128.987      10.8274    0.0122212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063301, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004934, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.70771e-09  4.70771e-09   5.8074e-11
      low eigenvalue method done, cpu time[sec] = 0.068961, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.71e-09  5.81e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-10  5.81e-11         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.8074e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.90358e-52  8.56245e-53  2.42813e-54  1.71146e-53  4.99315e-55  6.28314e-55  2.18683e-61  4.16964e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.31944, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.69164e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.568232, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.62302, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            194.269      27.9727       6.7265      8.65337     0.904691      112.864      9.47395    0.0106935
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063233, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004916, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068608, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.13176e-09  4.13177e-09  4.62798e-11
      low eigenvalue method done, cpu time[sec] = 0.068887, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.13e-09  4.63e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.03e-10  4.63e-11         1
         *Z       ---       ---   9.1e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.62796e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.32199e-52  6.76367e-53  1.92039e-54  1.34206e-53  3.93029e-55  5.27194e-55  2.20201e-61 -4.25951e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.32875, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 360 K
      Energy reference = 26785 1/cm
      Energy step      = 60 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007584
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.608246
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.372198
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.350407
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.1813
         W1 Well: minimal relaxation eigenvalue = 0.0918867
         W1 Well: maximal relaxation eigenvalue = 0.988445
         W1 Well:       grid size = 514
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4055 1/cm
         B1 Barrier:        grid size = 447
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -34 1/cm
         B2 Barrier:        grid size = 443
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 204 1/cm
         B3 Barrier:        grid size = 524
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4655 1/cm
         B4 Barrier:        grid size = 550
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6215 1/cm
         B5 Barrier: nonpositive number of states at -23135 1/cm => truncating
         B5 Barrier:        grid size = 832
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23135 1/cm
         B6 Barrier:        grid size = 422
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 368
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4704 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16765 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.95431, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 2.62796e+51
      MasterEquation::Barrier::truncate: effective weight = 7.1843e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 1.59059e+53
      MasterEquation::Barrier::truncate: effective weight = 4.34835e+49
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 5.02779e+54
      MasterEquation::Barrier::truncate: effective weight = 7.81975e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4055  -4055 3.19e+09 4.17e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -34 4.73e+14
         B2    205 6.88e+13
         B3  -4055 1.66e+13
         B4  -4055 2.13e+13
         B5  -4055 2.24e+12
         B6   1465 2.78e+14
         B7   4705 2.37e+13
         B8  16765 2.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.94e-07  4.91e-07  2.46e-14  3.86e-17  1.87e-48   0.00116       772  2.95e+24
          R  5.16e+06         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1  2.04e+06     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  4.06e+13  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  2.59e+16  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  5.34e+47  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5       865  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6    0.0013  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  3.39e-25  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.82e+29  7.16e+29  3.59e+22  5.63e+19  2.73e-12  1.68e+33  1.12e+39   4.3e+60
          R  3.54e-30         1      2.53  1.27e-07  1.99e-10  9.66e-42  5.97e+03  3.98e+09  1.52e+31
         P1   1.4e-30     0.395         1  5.02e-08  7.86e-11  3.81e-42  2.35e+03  1.57e+09  6.01e+30
         P2  2.79e-23  7.87e+06  1.99e+07         1   0.00157   7.6e-35  4.69e+10  3.13e+16   1.2e+38
         P3  1.78e-20  5.02e+09  1.27e+10       638         1  4.85e-32  2.99e+13     2e+19  7.64e+40
         P4  3.67e+11  1.04e+41  2.62e+41  1.32e+34  2.06e+31         1  6.18e+44  4.12e+50  1.58e+72
         P5  5.94e-34  0.000168  0.000425  2.13e-11  3.34e-14  1.62e-45         1  6.68e+05  2.55e+27
         P6  8.89e-40  2.51e-10  6.36e-10  3.19e-17     5e-20  2.42e-51   1.5e-06         1  3.82e+21
         P7  2.33e-61  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.34e-73  3.92e-28  2.61e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.96888, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+08
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541961, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.26695, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8195.25      1192.46      288.308      369.855       38.809      4819.72      410.074     0.496819
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059319, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004649, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60298e-07  1.60298e-07  1.06616e-08
      low eigenvalue method done, cpu time[sec] = 0.064658, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-07  1.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-08  1.07e-08         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06616e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20468e-48  5.65812e-49   1.9517e-50  2.05852e-49   5.1593e-51  2.95482e-52  1.24312e-59   3.5223e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89341, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.542711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4616, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2731.75      397.485      96.1026      123.285      12.9363      1606.57      136.691     0.165606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059232, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004615, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064281, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82556e-08  5.82556e-08   3.1671e-09
      low eigenvalue method done, cpu time[sec] = 0.06457, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.83e-08  3.17e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.81e-09  3.17e-09         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.1671e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91787e-49  1.55735e-49  4.63888e-51  4.10185e-50  1.09114e-51  2.32772e-52  1.25283e-59  3.16548e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.08914, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.07375e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540627, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.60556, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1639.05      238.491      57.6616       73.971      7.76179      963.945      82.0147    0.0993637
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004617, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064314, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.61501e-08  3.61501e-08  1.66454e-09
      low eigenvalue method done, cpu time[sec] = 0.06458, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.62e-08  1.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.58e-09  1.66e-09         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.66454e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.12686e-49  7.81919e-50  2.25498e-51   1.8631e-50  5.08513e-52  1.81984e-52  1.26315e-59  2.06951e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.22729, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.90325e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.47916, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1170.75      170.351      41.1868      52.8364      5.54414      688.532       58.582    0.0709741
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059264, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00462, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064328, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.63288e-08  2.63288e-08  1.05923e-09
      low eigenvalue method done, cpu time[sec] = 0.06459, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.63e-08  1.06e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.6e-09  1.06e-09         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05923e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.37876e-49  4.82333e-50  1.37339e-51  1.08998e-50  3.02285e-52  1.46749e-52  1.27402e-59  4.30459e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.10974, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         3.73275e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.54045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.47365, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            910.583      132.495      32.0342       41.095      4.31211      535.525      45.5637    0.0552021
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059308, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004617, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064352, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0748e-08   2.0748e-08  7.44823e-10
      low eigenvalue method done, cpu time[sec] = 0.064611, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  7.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-09  7.45e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.44822e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.81712e-50  3.31389e-50  9.37948e-52  7.23977e-51  2.03071e-52  1.21534e-52  1.28526e-59  -9.5557e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.09838, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541196, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.45741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            819.525      119.246      28.8308      36.9855       3.8809      481.972      41.0074    0.0496819
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059282, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004633, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064345, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87693e-08  1.87693e-08  6.40247e-10
      low eigenvalue method done, cpu time[sec] = 0.064605, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-08   6.4e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.85e-09   6.4e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.40246e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.48042e-50  2.82131e-50   7.9713e-52  6.08489e-51  1.71465e-52  1.11513e-52  1.29098e-59  8.88559e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.0816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         6.22124e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.46198, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             546.35       79.497      19.2205       24.657      2.58726      321.315      27.3382    0.0331212
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059263, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004633, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27383e-08  1.27383e-08  3.50686e-10
      low eigenvalue method done, cpu time[sec] = 0.064588, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-08  3.51e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-09  3.51e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50686e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.72587e-50   1.4905e-50  4.19747e-52  3.07935e-51  8.82415e-53  7.70877e-53  1.31955e-59  3.18208e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.08765, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         8.29499e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541845, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.45805, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            409.762      59.6228      14.4154      18.4928      1.94045      240.986      20.5037    0.0248409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059279, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064364, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.65884e-09  9.65883e-09  2.24605e-10
      low eigenvalue method done, cpu time[sec] = 0.064625, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.66e-09  2.25e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.43e-10  2.25e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.24605e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.05934e-50   9.3164e-51   2.6246e-52  1.87728e-51  5.43891e-53  5.72472e-53  1.34636e-59 -2.72362e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.09032, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.03687e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.54191, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4647, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             327.81      47.6982      11.5323      14.7942      1.55236      192.789      16.4029    0.0198727
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05932, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004646, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064403, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.7859e-09   7.7859e-09  1.57377e-10
      low eigenvalue method done, cpu time[sec] = 0.064668, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.79e-09  1.57e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.58e-10  1.57e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57376e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.15968e-50  6.41153e-51  1.80884e-52  1.27064e-51  3.71071e-53  4.45669e-53  1.36971e-59  7.62273e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.08797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.542226, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.46543, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            273.175      39.7485      9.61026      12.3285      1.29363      160.657      13.6691    0.0165606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004638, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064529, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.52509e-09  6.52508e-09  1.16946e-10
      low eigenvalue method done, cpu time[sec] = 0.064797, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.53e-09  1.17e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.34e-10  1.17e-10         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16945e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.61384e-50  4.69813e-51  1.32776e-52  9.19974e-52  2.70314e-53  3.58793e-53  1.38871e-59  8.35438e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.09276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.45162e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541873, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.4616, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             234.15      34.0701      8.23737      10.5673      1.10883      137.706      11.7164    0.0141948
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059284, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00464, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06436, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.61778e-09  5.61778e-09  9.05945e-11
      low eigenvalue method done, cpu time[sec] = 0.064628, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.62e-09  9.06e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.45e-10  9.06e-11         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.05942e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25568e-50  3.59854e-51  1.01883e-52  6.98259e-52  2.06176e-53  2.96218e-53  1.40303e-59  1.43385e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.08967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1           1.659e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541552, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.46575, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            204.881      29.8114       7.2077      9.24638     0.970224      120.493      10.2518    0.0124205
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004633, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.93329e-09  4.93328e-09  7.23981e-11
      low eigenvalue method done, cpu time[sec] = 0.064576, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.93e-09  7.24e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.78e-10  7.24e-11         1
         *Z       ---       ---  3.06e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.23979e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00703e-50  2.84885e-51  8.07979e-53   5.4882e-52  1.62709e-53  2.49409e-53  1.41277e-59  1.07094e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.09322, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 370 K
      Energy reference = 27063 1/cm
      Energy step      = 62 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007466
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.584993
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.355861
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.286744
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.02003
         W1 Well: minimal relaxation eigenvalue = 0.0911276
         W1 Well: maximal relaxation eigenvalue = 0.98697
         W1 Well:       grid size = 503
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4123 1/cm
         B1 Barrier:        grid size = 437
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 434
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 155 1/cm
         B3 Barrier:        grid size = 511
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4619 1/cm
         B4 Barrier:        grid size = 537
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6231 1/cm
         B5 Barrier: nonpositive number of states at -23157 1/cm => truncating
         B5 Barrier:        grid size = 810
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23157 1/cm
         B6 Barrier:        grid size = 413
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1456 1/cm
         B7 Barrier:        grid size = 361
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4680 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16771 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.6828, elapsed time[sec] = 1
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 4.20494e+50
      MasterEquation::Barrier::truncate: effective weight = 1.18787e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 2.26607e+52
      MasterEquation::Barrier::truncate: effective weight = 6.40146e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 2.38408e+53
      MasterEquation::Barrier::truncate: effective weight = 9.84743e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4123  -4123 3.12e+09 4.38e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 5.13e+14
         B2    156 7.55e+13
         B3  -4123 1.83e+13
         B4  -4123 2.35e+13
         B5  -4123 2.47e+12
         B6   1457 3.06e+14
         B7   4681 2.63e+13
         B8  16771 3.42e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.4e-07  3.48e-07  2.95e-14  5.52e-17  1.92e-47  0.000725       346  3.63e+23
          R  7.12e+06         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  2.88e+06     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  3.39e+13  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3  1.81e+16  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  5.21e+46  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  1.38e+03  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6   0.00289  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  2.75e-24  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.77e+27  2.17e+28  1.84e+21  3.45e+18   1.2e-12  4.53e+31  2.16e+37  2.27e+58
          R  1.14e-28         1      2.48   2.1e-07  3.93e-10  1.37e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.61e-29     0.404         1   8.5e-08  1.59e-10  5.52e-41  2.09e+03  9.96e+08  1.04e+30
         P2  5.42e-22  4.75e+06  1.18e+07         1   0.00187   6.5e-34  2.46e+10  1.17e+16  1.23e+37
         P3   2.9e-19  2.54e+09   6.3e+09       535         1  3.48e-31  1.31e+13  6.27e+18  6.58e+39
         P4  8.34e+11  7.31e+39  1.81e+40  1.54e+33  2.88e+30         1  3.78e+43  1.81e+49  1.89e+70
         P5  2.21e-32  0.000194  0.000479  4.07e-11  7.61e-14  2.65e-44         1  4.78e+05  5.01e+26
         P6  4.62e-38  4.05e-10     1e-09  8.53e-17  1.59e-19  5.54e-50  2.09e-06         1  1.05e+21
         P7  4.41e-59  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.29e-71     2e-27  9.54e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.69782, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+08
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519609, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.33311, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8633.58      1269.43      308.559       394.74      41.5694      5139.02      443.088     0.574516
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055935, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00442, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060765, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77012e-07  1.77012e-07  1.42458e-08
      low eigenvalue method done, cpu time[sec] = 0.061024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-07  1.42e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-08  1.42e-08         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.42458e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91491e-47  1.81501e-47  6.15235e-49  6.34717e-48  1.60047e-49  1.06393e-50  6.36606e-58 -4.73373e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87892, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.520112, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34356, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2877.86      423.142      102.853       131.58      13.8565      1713.01      147.696     0.191505
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055823, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004417, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060658, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.54011e-08  6.54011e-08  4.34531e-09
      low eigenvalue method done, cpu time[sec] = 0.060917, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-08  4.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.48e-09  4.35e-09         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.34531e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30562e-47  5.10228e-48  1.50333e-49  1.30125e-48  3.48699e-50  8.46397e-51  6.41553e-58  1.01449e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88544, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.03499e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3426, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1726.72      253.885      61.7118      78.9481      8.31389       1027.8      88.6176     0.114903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055644, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060461, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.08498e-08  4.08498e-08  2.31278e-09
      low eigenvalue method done, cpu time[sec] = 0.060724, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.08e-08  2.31e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.03e-09  2.31e-09         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.31278e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.17617e-48  2.58858e-48  7.40297e-50  5.98539e-49  1.64683e-50  6.67106e-51  6.46817e-58  5.68978e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88508, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.84899e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.33615, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1233.37      181.347      44.0799      56.3915      5.93849      734.146      63.2983    0.0820738
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004422, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.98643e-08  2.98643e-08  1.48409e-09
      low eigenvalue method done, cpu time[sec] = 0.060802, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.99e-08  1.48e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.93e-09  1.48e-09         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.48409e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.69075e-48  1.60787e-48  4.54714e-50  3.52996e-49  9.87356e-51   5.4141e-51  6.52349e-58   2.1811e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87515, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         3.66299e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.518293, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32529, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            959.286      141.047      34.2843        43.86      4.61883      571.002       49.232    0.0638352
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055769, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004409, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060592, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.35938e-08  2.35938e-08  1.05008e-09
      low eigenvalue method done, cpu time[sec] = 0.060845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.36e-08  1.05e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-09  1.05e-09         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05008e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36072e-48  1.11039e-48  3.12494e-50  2.35838e-49  6.67449e-51  4.50759e-51  6.58069e-58  1.20827e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.862, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.33975, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            863.358      126.943      30.8559       39.474      4.15694      513.902      44.3088    0.0574516
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05573, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004412, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060555, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13649e-08  2.13649e-08  9.04983e-10
      low eigenvalue method done, cpu time[sec] = 0.060883, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.14e-08  9.05e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-09  9.05e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.04983e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91066e-48  9.47362e-49   2.6627e-50  1.98695e-49   5.6502e-51  4.14551e-51  6.60972e-58  5.49667e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         6.10498e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517568, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34206, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            575.572      84.6284      20.5706       26.316       2.7713      342.601      29.5392    0.0383011
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055789, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0044, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060597, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.45495e-08  1.45495e-08  5.00592e-10
      low eigenvalue method done, cpu time[sec] = 0.060846, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-08  5.01e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-09  5.01e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.00592e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.63812e-48  5.04558e-49  1.41594e-50  1.01457e-49  2.93597e-51  2.89289e-51  6.75459e-58  4.69242e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89035, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         8.13998e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519948, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34408, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            431.679      63.4713      15.4279       19.737      2.07847      256.951      22.1544    0.0287258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055802, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00441, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060618, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10549e-08  1.10549e-08    3.228e-10
      low eigenvalue method done, cpu time[sec] = 0.060871, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-08  3.23e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-09  3.23e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.228e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.06774e-48  3.17128e-49  8.91341e-51  6.22253e-50  1.82151e-51  2.16353e-51  6.89027e-58  5.90564e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88806, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.0175e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.520182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3398, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            345.343      50.7771      12.3424      15.7896      1.66278      205.561      17.7235    0.0229807
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055772, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060606, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.92372e-09  8.92373e-09  2.27339e-10
      low eigenvalue method done, cpu time[sec] = 0.060857, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.92e-09  2.27e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.63e-10  2.27e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.27339e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.57655e-49  2.19154e-49  6.17408e-51  4.23052e-50   1.2488e-51  1.69378e-51  7.00838e-58  9.51016e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89199, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519323, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            287.786      42.3142      10.2853       13.158      1.38565      171.301      14.7696    0.0191505
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055825, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0044, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.48631e-09   7.4863e-09  1.69621e-10
      low eigenvalue method done, cpu time[sec] = 0.060898, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.49e-09   1.7e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.23e-10   1.7e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.69621e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.68496e-49  1.61113e-49  4.55016e-51   3.0737e-50  9.13201e-52  1.36994e-51  7.10459e-58  1.72794e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.4245e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            246.674      36.2693      8.81597      11.2783       1.1877      146.829      12.6597    0.0164148
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055882, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004425, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060729, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.45042e-09  6.45041e-09   1.3184e-10
      low eigenvalue method done, cpu time[sec] = 0.060981, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.45e-09  1.32e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-10  1.32e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.3184e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.43831e-49  1.23735e-49  3.50291e-51  2.33955e-50  6.98706e-52  1.13547e-51  7.17746e-58  2.14612e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89904, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.628e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519025, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34042, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            215.839      31.7357      7.71397      9.86851      1.03924      128.476      11.0772    0.0143629
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004403, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060607, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.66801e-09    5.668e-09  1.05656e-10
      low eigenvalue method done, cpu time[sec] = 0.060857, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.67e-09  1.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.46e-10  1.06e-10         1
         *Z       ---       ---  1.12e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05655e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.56964e-49  9.81766e-50  2.78562e-51   1.8432e-50  5.52845e-52  9.59303e-52  7.22738e-58   1.7481e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87241, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 380 K
      Energy reference = 27341 1/cm
      Energy step      = 63 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00745
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.572037
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.353281
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.310253
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.01462
         W1 Well: minimal relaxation eigenvalue = 0.0904106
         W1 Well: maximal relaxation eigenvalue = 0.989469
         W1 Well:       grid size = 501
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4222 1/cm
         B1 Barrier:        grid size = 434
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = 0 1/cm
         B2 Barrier:        grid size = 431
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier: nonpositive number of states at -4600 1/cm => truncating
         B3 Barrier:        grid size = 507
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4599 1/cm
         B4 Barrier:        grid size = 533
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6238 1/cm
         B5 Barrier: nonpositive number of states at -23185 1/cm => truncating
         B5 Barrier:        grid size = 802
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23184 1/cm
         B6 Barrier:        grid size = 411
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1447 1/cm
         B7 Barrier:        grid size = 360
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4661 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.68137, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 7.43671e+49
      MasterEquation::Barrier::truncate: effective weight = 2.1347e+46
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 3.59124e+51
      MasterEquation::Barrier::truncate: effective weight = 1.03086e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 1.44668e+52
      MasterEquation::Barrier::truncate: effective weight = 1.39163e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4222  -4222 3.02e+09  4.6e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1      0 5.57e+14
         B2    189 8.27e+13
         B3  -4222 2.02e+13
         B4  -4222 2.58e+13
         B5  -4222 2.72e+12
         B6   1448 3.35e+14
         B7   4661 2.93e+13
         B8  16757 4.06e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.17e-07  2.83e-07  3.96e-14  8.73e-17  1.96e-46  0.000526       183  5.63e+22
          R  8.58e+06         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  3.54e+06     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  2.53e+13  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  1.14e+16  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  5.09e+45  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5   1.9e+03  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6   0.00547  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  1.78e-23  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.26e+26  7.91e+26  1.11e+20  2.44e+17   5.5e-13  1.47e+30  5.12e+35  1.58e+56
          R  3.06e-27         1      2.42  3.39e-07  7.49e-10  1.68e-39  4.51e+03  1.57e+09  4.83e+29
         P1  1.26e-27     0.413         1   1.4e-07  3.09e-10  6.95e-40  1.86e+03  6.47e+08  1.99e+29
         P2  9.03e-21  2.95e+06  7.15e+06         1   0.00221  4.96e-33  1.33e+10  4.62e+15  1.42e+36
         P3  4.09e-18  1.34e+09  3.24e+09       453         1  2.25e-30  6.02e+12  2.09e+18  6.44e+38
         P4  1.82e+12  5.94e+38  1.44e+39  2.01e+32  4.45e+29         1  2.68e+42  9.31e+47  2.87e+68
         P5  6.79e-31  0.000222  0.000538  7.52e-11  1.66e-13  3.73e-43         1  3.48e+05  1.07e+26
         P6  1.95e-36  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.07e-48  2.87e-06         1  3.08e+20
         P7  6.35e-57  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.49e-69  9.34e-27  3.25e-21         1
   MasterEquation::set:  done, cpu time[sec] = 3.69597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+08
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514337, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32775, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9085.94       1349.9      329.849       420.83      44.4741      5472.84      478.081     0.662083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055228, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059986, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77116e-07  1.77116e-07  1.68389e-08
      low eigenvalue method done, cpu time[sec] = 0.060237, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-07  1.68e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-08  1.68e-08         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.68389e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05822e-45  4.84402e-46  1.61623e-47   1.6344e-46  4.14514e-48  3.17323e-49  2.65223e-56 -1.61833e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.8675, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.51457, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31156, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3028.65      449.966       109.95      140.277      14.8247      1824.28       159.36     0.220694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055161, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004347, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059924, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.65782e-08  6.65781e-08  5.26784e-09
      low eigenvalue method done, cpu time[sec] = 0.060177, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.66e-08  5.27e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.55e-09  5.27e-09         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.26784e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.61536e-46  1.38968e-46  4.05576e-48  3.44297e-47   9.2906e-49  2.54728e-49  2.67276e-56  8.57799e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.84264, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.99813e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514436, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30799, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1817.19       269.98      65.9699      84.1659      8.89483      1094.57      95.6161     0.132417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055193, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004341, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059947, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.18698e-08  4.18698e-08  2.83816e-09
      low eigenvalue method done, cpu time[sec] = 0.060198, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.19e-08  2.84e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.1e-09  2.84e-09         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.83816e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0111e-46  7.12201e-47  2.02247e-48  1.60308e-47  4.44438e-49  2.02304e-49   2.6946e-56  1.01459e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83902, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         2.79738e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515039, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30835, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1297.99      192.843      47.1213      60.1185      6.35345      781.834      68.2972    0.0945833
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055102, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004324, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.07315e-08  3.07315e-08  1.83604e-09
      low eigenvalue method done, cpu time[sec] = 0.060175, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.07e-08  1.84e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     3e-09  1.84e-09         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.83604e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.32518e-46  4.45372e-47  1.25258e-48  9.52864e-48  2.68684e-49   1.6519e-49  2.71754e-56  9.22841e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83892, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.59663e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515012, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31311, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1009.55      149.989      36.6499      46.7589      4.94157      608.093      53.1201    0.0735648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05508, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004344, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059836, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43438e-08  2.43438e-08  1.30699e-09
      low eigenvalue method done, cpu time[sec] = 0.060086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.43e-08  1.31e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-09  1.31e-09         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30699e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.55185e-47  3.09126e-47  8.66109e-49  6.40263e-48  1.82741e-49  1.38226e-49  2.74122e-56  1.21436e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.8413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514207, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31278, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            908.594       134.99      32.9849       42.083      4.44741      547.284      47.8081    0.0662083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05526, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004358, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060022, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2067e-08   2.2067e-08  1.12925e-09
      low eigenvalue method done, cpu time[sec] = 0.060271, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.21e-08  1.13e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.14e-09  1.13e-09         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12925e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.29364e-47  2.64296e-47  7.39881e-49  5.40698e-48  1.55087e-49  1.27406e-49  2.75322e-56  5.91503e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.84373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         5.99438e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515605, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.31632, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            605.729      89.9932        21.99      28.0553      2.96494      364.856       31.872    0.0441389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055105, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059868, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50819e-08  1.50819e-08  6.30698e-10
      low eigenvalue method done, cpu time[sec] = 0.060119, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-08  6.31e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-09  6.31e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.30698e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.71301e-47   1.4189e-47  3.97275e-49  2.78538e-48  8.13561e-50  8.97172e-50  2.81302e-56  9.00372e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.8463, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         7.99251e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514475, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30416, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            454.297      67.4949      16.4925      21.0415      2.22371      273.642       23.904    0.0331041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004321, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14844e-08  1.14844e-08  4.09426e-10
      low eigenvalue method done, cpu time[sec] = 0.060108, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-08  4.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-09  4.09e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.09426e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.09272e-47  8.96736e-48  2.51762e-49  1.71858e-48  5.08027e-50  6.75565e-50   2.8689e-56  5.58066e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83293, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         9.99064e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513633, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30572, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            363.438      53.9959       13.194      16.8332      1.77897      218.914      19.1232    0.0264833
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055111, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00432, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059846, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.28418e-09  9.28418e-09   2.8981e-10
      low eigenvalue method done, cpu time[sec] = 0.060098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.28e-09   2.9e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.92e-10   2.9e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.8981e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2058e-47  6.22262e-48  1.75268e-49  1.17363e-48  3.49989e-50  5.31769e-50  2.91752e-56   9.0095e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83096, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515135, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30943, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            302.865      44.9966       10.995      14.0277      1.48247      182.428       15.936    0.0220694
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055121, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004307, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059845, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.79716e-09  7.79714e-09  2.17106e-10
      low eigenvalue method done, cpu time[sec] = 0.060094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-09  2.17e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.48e-10  2.17e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.17105e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.66185e-47  4.58963e-48  1.29686e-49  8.55695e-49  2.56918e-50   4.3204e-50  2.95717e-56  1.07643e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83724, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.39869e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513307, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30593, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            259.598      38.5685      9.42427      12.0237      1.27069      156.367      13.6594    0.0189167
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05516, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059885, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.72383e-09  6.72385e-09   1.6931e-10
      low eigenvalue method done, cpu time[sec] = 0.060136, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.72e-09  1.69e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.44e-10  1.69e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.69309e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3018e-47  3.53431e-48  1.00166e-49  6.53176e-49  1.97191e-50  3.59472e-50   2.9873e-56  3.55769e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83277, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1          1.5985e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514354, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30616, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            227.149      33.7475      8.24623      10.5207      1.11185      136.821       11.952    0.0165521
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060009, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.91218e-09  5.91219e-09  1.36066e-10
      low eigenvalue method done, cpu time[sec] = 0.060267, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.91e-09  1.36e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.65e-10  1.36e-10         1
         *Z       ---       ---   4.6e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36065e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0     1.05e-47  2.81061e-48  7.98763e-50  5.15833e-49  1.56439e-50  3.04713e-50  3.00809e-56  6.96598e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.83834, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 390 K
      Energy reference = 27619 1/cm
      Energy step      = 65 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008116
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.548903
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.339826
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.298708
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.8826
         W1 Well: minimal relaxation eigenvalue = 0.0896865
         W1 Well: maximal relaxation eigenvalue = 0.988042
         W1 Well:       grid size = 491
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4296 1/cm
         B1 Barrier:        grid size = 425
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -6 1/cm
         B2 Barrier:        grid size = 422
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier:        grid size = 496
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4621 1/cm
         B4 Barrier:        grid size = 520
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6181 1/cm
         B5 Barrier: nonpositive number of states at -23211 1/cm => truncating
         B5 Barrier:        grid size = 782
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23211 1/cm
         B6 Barrier:        grid size = 402
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 353
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.50477, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 1.44247e+49
      MasterEquation::Barrier::truncate: effective weight = 4.27203e+45
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 6.27866e+50
      MasterEquation::Barrier::truncate: effective weight = 1.8595e+47
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 1.10182e+51
      MasterEquation::Barrier::truncate: effective weight = 2.17126e+46
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4296  -4296 2.95e+09 4.82e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -6 6.03e+14
         B2    189 9.06e+13
         B3  -4296 2.22e+13
         B4  -4296 2.83e+13
         B5  -4296    3e+12
         B6   1489 3.68e+14
         B7   4674 3.25e+13
         B8  16764 4.81e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.79e-08  2.09e-07  4.69e-14  1.21e-16   1.6e-45  0.000348      89.8  8.64e+21
          R  1.14e+07         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  4.79e+06     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2  2.13e+13  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  8.24e+15  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  6.23e+44  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  2.87e+03  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6    0.0111   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  1.16e-22  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.44e+25  3.41e+25  7.67e+18  1.98e+16  2.62e-13  5.69e+28  1.47e+34  1.41e+54
          R  6.96e-26         1      2.37  5.34e-07  1.38e-09  1.82e-38  3.96e+03  1.02e+09  9.82e+28
         P1  2.93e-26     0.421         1  2.25e-07  5.81e-10  7.68e-39  1.67e+03   4.3e+08  4.14e+28
         P2   1.3e-19  1.87e+06  4.45e+06         1   0.00259  3.42e-32  7.42e+09  1.91e+15  1.84e+35
         P3  5.04e-17  7.25e+08  1.72e+09       387         1  1.32e-29  2.87e+12   7.4e+17  7.12e+37
         P4  3.81e+12  5.48e+37   1.3e+38  2.93e+31  7.57e+28         1  2.17e+41   5.6e+46  5.39e+66
         P5  1.76e-29  0.000252    0.0006  1.35e-10  3.48e-13  4.61e-42         1  2.58e+05  2.48e+25
         P6  6.82e-35   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.79e-47  3.88e-06         1  9.63e+19
         P7  7.08e-55  1.02e-29  2.42e-29  5.43e-36   1.4e-38  1.86e-67  4.03e-26  1.04e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.51997, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+08
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494646, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.27201, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9552.62      1433.97      352.216      448.163      47.5283      5821.57      515.132      0.76096
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052195, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056835, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9496e-07   1.9496e-07   2.1567e-08
      low eigenvalue method done, cpu time[sec] = 0.057081, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.95e-07  2.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-08  2.16e-08         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.1567e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.41431e-44  1.09153e-44  3.59047e-46  3.56553e-45    9.092e-47  7.96752e-48  9.13065e-55   3.3635e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.74111, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.493645, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3184.21      477.991      117.405      149.388      15.8428      1940.52      171.711     0.253653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052134, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004212, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056745, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.46505e-08  7.46505e-08  6.91329e-09
      low eigenvalue method done, cpu time[sec] = 0.056993, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.47e-08  6.91e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.31e-09  6.91e-09         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.91329e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.44305e-45  3.19388e-45  9.24459e-47   7.7092e-46  2.09391e-47  6.44553e-48   9.2011e-55  1.07112e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1           1.963e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.493678, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19141, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1910.52      286.795      70.4432      89.6325      9.50566      1164.31      103.026     0.152192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05218, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056783, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.72915e-08  4.72915e-08  3.76902e-09
      low eigenvalue method done, cpu time[sec] = 0.057026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.73e-08  3.77e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-09  3.77e-09         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.76902e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.75162e-45  1.65309e-45  4.66673e-47  3.63214e-46  1.01421e-47  5.15504e-48  9.27603e-55  8.30805e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          2.7482e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.18992, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1364.66      204.853      50.3166      64.0232      6.78976      831.653      73.5903     0.108709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052114, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00421, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056721, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48594e-08  3.48594e-08  2.45758e-09
      low eigenvalue method done, cpu time[sec] = 0.056966, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.49e-08  2.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.38e-09  2.46e-09         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.45758e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15569e-45  1.04063e-45  2.91375e-47   2.1755e-46  6.18125e-48  4.23348e-48   9.3546e-55  6.24403e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65882, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          3.5334e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494608, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.18165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1061.4       159.33      39.1351      49.7958      5.28092      646.841      57.2369    0.0845511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052145, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056748, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76936e-08  2.76936e-08  1.75984e-09
      low eigenvalue method done, cpu time[sec] = 0.056984, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-08  1.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-09  1.76e-09         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75984e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.28808e-45  7.25881e-46  2.02693e-47  1.47003e-46  4.22928e-48  3.55942e-48  9.43564e-55  1.01771e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.492379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            955.262      143.397      35.2216      44.8163      4.75283      582.157      51.5132     0.076096
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052126, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.5132e-08   2.5132e-08   1.5243e-09
      low eigenvalue method done, cpu time[sec] = 0.057059, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.51e-08  1.52e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.43e-09  1.52e-09         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5243e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.99162e-45  6.21903e-46  1.73589e-47  1.24432e-46  3.59821e-48  3.28774e-48  9.47667e-55  8.97812e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65592, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         5.88901e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.49492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19023, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            636.842      95.5983      23.4811      29.8775      3.16855      388.105      34.3421    0.0507307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052115, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056725, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72444e-08  1.72444e-08  8.59455e-10
      low eigenvalue method done, cpu time[sec] = 0.056967, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.72e-08  8.59e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-09  8.59e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.59454e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14259e-45  3.36529e-46  9.41049e-48  6.46633e-47  1.90535e-48  2.33539e-48  9.68063e-55  9.46589e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65794, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         7.85201e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495753, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.20714, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            477.631      71.6987      17.6108      22.4081      2.37642      291.079      25.7566     0.038048
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052205, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004218, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056817, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31626e-08  1.31626e-08  5.61631e-10
      low eigenvalue method done, cpu time[sec] = 0.05706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-08  5.62e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-09  5.62e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.61631e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.5478e-46  2.13853e-46  6.00336e-48  4.01359e-47  1.19749e-48  1.77016e-48  9.87079e-55  1.00268e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.67437, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         9.81501e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494959, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19415, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            382.105       57.359      14.0886      17.9265      1.90113      232.863      20.6053    0.0304384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004221, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056717, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06584e-08  1.06584e-08  3.99552e-10
      low eigenvalue method done, cpu time[sec] = 0.056957, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-08     4e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-09     4e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.99552e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.4106e-46  1.49012e-46  4.20038e-48  2.75316e-47  8.28988e-49  1.40076e-48  1.00361e-54  9.86949e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.66, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19966, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            318.421      47.7991      11.7405      14.9388      1.58428      194.052      17.1711    0.0253653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052152, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004232, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056782, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.96204e-09  8.96205e-09  3.00521e-10
      low eigenvalue method done, cpu time[sec] = 0.057022, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.96e-09  3.01e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.54e-10  3.01e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.00521e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.09291e-46  1.10269e-46  3.12045e-48  2.01442e-47  6.10887e-49  1.14307e-48  1.01711e-54   1.1591e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.66577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.3741e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495691, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19385, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            272.932      40.9707      10.0633      12.8046      1.35795      166.331      14.7181    0.0217417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004205, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.73561e-09  7.73562e-09  2.35141e-10
      low eigenvalue method done, cpu time[sec] = 0.056937, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.74e-09  2.35e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.36e-10  2.35e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.35141e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.21694e-46  8.51445e-47  2.41814e-48   1.5421e-47  4.70357e-49  9.54653e-49  1.02739e-54  9.47389e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.66185, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.5704e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494392, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.18699, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            238.816      35.8493       8.8054      11.2041      1.18821      145.539      12.8783     0.019024
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052091, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004195, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.80689e-09   6.8069e-09  1.89504e-10
      low eigenvalue method done, cpu time[sec] = 0.056925, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.81e-09   1.9e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.47e-10   1.9e-10         1
         *Z       ---       ---  1.88e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89504e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.60211e-46  6.78646e-47  1.93372e-48   1.2208e-47  3.74148e-49  8.11875e-49  1.03453e-54  9.21519e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.65079, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 400 K
      Energy reference = 27897 1/cm
      Energy step      = 67 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008004
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.533592
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.324746
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.296208
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.79779
         W1 Well: minimal relaxation eigenvalue = 0.0889884
         W1 Well: maximal relaxation eigenvalue = 0.986687
         W1 Well:       grid size = 481
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4330 1/cm
         B1 Barrier:        grid size = 417
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -42 1/cm
         B2 Barrier:        grid size = 414
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 486
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4664 1/cm
         B4 Barrier:        grid size = 509
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23157 1/cm => truncating
         B5 Barrier:        grid size = 762
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23157 1/cm
         B6 Barrier:        grid size = 394
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1498 1/cm
         B7 Barrier:        grid size = 346
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16775 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.46004, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 3.04721e+48
      MasterEquation::Barrier::truncate: effective weight = 9.30235e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 1.202e+50
      MasterEquation::Barrier::truncate: effective weight = 3.66938e+46
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 1.03424e+50
      MasterEquation::Barrier::truncate: effective weight = 3.65361e+45
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4330  -4330 2.92e+09 5.06e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -42 6.53e+14
         B2    159 9.91e+13
         B3  -4330 2.45e+13
         B4  -4330 3.11e+13
         B5  -4330  3.3e+12
         B6   1499 4.03e+14
         B7   4715 3.61e+13
         B8  16775 5.68e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.87e-08  1.37e-07  4.82e-14  1.45e-16  1.03e-44  0.000206      39.9  1.27e+21
          R   1.7e+07         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  7.31e+06     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2  2.07e+13  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3   6.9e+15  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4   9.7e+43   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  4.86e+03  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6    0.0251  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  7.85e-22  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.39e+23  1.72e+24  6.06e+17  1.82e+15   1.3e-13  2.59e+27  5.02e+32   1.6e+52
          R  1.35e-24         1      2.33  8.21e-07  2.47e-09  1.75e-37   3.5e+03  6.79e+08  2.17e+28
         P1  5.81e-25     0.429         1  3.52e-07  1.06e-09  7.53e-38   1.5e+03  2.91e+08   9.3e+27
         P2  1.65e-18  1.22e+06  2.84e+06         1   0.00301  2.14e-31  4.27e+09  8.27e+14  2.64e+34
         P3  5.49e-16  4.05e+08  9.44e+08       333         1  7.11e-29  1.42e+12  2.75e+17  8.78e+36
         P4  7.71e+12   5.7e+36  1.33e+37  4.68e+30  1.41e+28         1     2e+40  3.87e+45  1.24e+65
         P5  3.87e-28  0.000286  0.000665  2.34e-10  7.05e-13  5.01e-41         1  1.94e+05  6.19e+24
         P6  1.99e-33  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.58e-46  5.16e-06         1  3.19e+19
         P7  6.24e-53  4.61e-29  1.07e-28  3.79e-35  1.14e-37  8.09e-66  1.62e-25  3.13e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.4745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+08
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.476685, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1287, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10033.7      1521.79      375.696      476.779      50.7373      6185.62      554.324     0.872318
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049326, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004057, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053769, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45303e-07  2.45303e-07  3.11588e-08
      low eigenvalue method done, cpu time[sec] = 0.054004, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-07  3.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.42e-08  3.12e-08         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.11588e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.70677e-43  2.10163e-43  6.82622e-45  6.66669e-44  1.70872e-45  1.69433e-46  2.63281e-53  2.38704e-73

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.53578, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.474586, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05634, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3344.57      507.263      125.232      158.926      16.9124      2061.87      184.775     0.290773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.050759, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003992, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055133, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.57716e-08  9.57716e-08  1.02252e-08
      low eigenvalue method done, cpu time[sec] = 0.055365, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.58e-08  1.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.34e-09  1.02e-08         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02252e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68347e-43  6.26899e-44  1.80184e-45  1.47798e-44  4.03925e-46  1.38338e-46  2.65305e-53  8.33976e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.46154, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.92949e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.474895, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05954, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2006.74      304.358      75.1393      95.3558      10.1475      1237.12      110.865     0.174464
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049206, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053587, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.11433e-08  6.11433e-08  5.63902e-09
      low eigenvalue method done, cpu time[sec] = 0.053818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.11e-08  5.64e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.93e-09  5.64e-09         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.63902e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.58203e-44  3.27624e-44  9.20485e-46  7.04374e-45  1.98021e-46  1.11467e-46  2.67456e-53  8.96001e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.46358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         2.70128e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473893, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05925, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1433.39      217.398      53.6709      68.1113      7.24819       883.66      79.1892     0.124617
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003979, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053646, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.52747e-08  4.52747e-08  3.70535e-09
      low eigenvalue method done, cpu time[sec] = 0.053885, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.53e-08  3.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.37e-09  3.71e-09         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.70535e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.41249e-44  2.07588e-44  5.79289e-46  4.25054e-45  1.21645e-46  9.20818e-47   2.6971e-53   8.3773e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.47308e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475652, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05694, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1114.86      169.088       41.744      52.9755      5.63748      687.291      61.5916    0.0969242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049211, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053574, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.60789e-08   3.6079e-08  2.66876e-09
      low eigenvalue method done, cpu time[sec] = 0.053813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.61e-08  2.67e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.47e-09  2.67e-09         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.66876e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.67636e-44   1.4551e-44  4.05371e-46  2.88803e-45    8.372e-47  7.77974e-47  2.72031e-53  8.55913e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45751, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.474011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.0558, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1003.37      152.179      37.5696      47.6779      5.07373      618.562      55.4324    0.0872318
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049202, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003968, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053546, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.27815e-08  3.27815e-08  2.31719e-09
      low eigenvalue method done, cpu time[sec] = 0.053788, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.28e-08  2.32e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-09  2.32e-09         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.31719e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.08033e-44  1.24923e-44  3.48024e-46  2.45019e-45  7.14018e-47  7.20132e-47  2.73204e-53  8.37197e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45505, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         5.78846e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475833, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.06141, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            668.914      101.453      25.0464      31.7853      3.38249      412.374       36.955    0.0581545
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049233, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003992, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053608, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.25888e-08  2.25888e-08  1.31875e-09
      low eigenvalue method done, cpu time[sec] = 0.05384, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.26e-08  1.32e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-09  1.32e-09         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.31875e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.3628e-44  6.81305e-45   1.9046e-46  1.28433e-45  3.81609e-47  5.16014e-47   2.7903e-53  8.83681e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.30253, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         7.71795e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.476283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05605, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            501.686      76.0894      18.7848       23.839      2.53687      309.281      27.7162    0.0436159
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049206, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003977, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053566, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72868e-08  1.72869e-08  8.67415e-10
      low eigenvalue method done, cpu time[sec] = 0.053797, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-08  8.67e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-09  8.67e-10         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.67415e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57109e-44  4.35313e-45  1.22305e-46  8.01913e-46  2.41376e-47  3.93703e-47   2.8445e-53  8.83877e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45738, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         9.64744e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475867, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            401.349      60.8715      15.0279      19.0712      2.02949      247.425       22.173    0.0348927
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049236, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003994, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053613, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40231e-08  1.40231e-08  6.20169e-10
      low eigenvalue method done, cpu time[sec] = 0.053847, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-08   6.2e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-09   6.2e-10         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.20169e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13188e-44   3.0458e-45   8.6002e-47  5.52536e-46  1.67907e-47  3.13188e-47  2.89161e-53  8.44942e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45689, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475106, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05766, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            334.457      50.7263      12.5232      15.8926      1.69124      206.187      18.4775    0.0290773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04919, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00398, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053551, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1807e-08   1.1807e-08  4.68323e-10
      low eigenvalue method done, cpu time[sec] = 0.053783, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-08  4.68e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-09  4.68e-10         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.68322e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.59669e-45  2.26133e-45  6.41467e-47  4.05708e-46  1.24209e-47  2.56693e-47  2.93011e-53  8.13366e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45869, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.35064e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.476151, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04998, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            286.678      43.4797      10.7342      13.6223      1.44964      176.732      15.8378    0.0249234
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049192, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003989, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053556, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02018e-08  1.02018e-08  3.67651e-10
      low eigenvalue method done, cpu time[sec] = 0.053786, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-08  3.68e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.66e-10  3.68e-10         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.67651e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.7794e-45  1.75085e-45  4.98743e-47  3.11486e-46  9.59403e-48  2.15182e-47  2.95955e-53  8.49663e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.45025, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.54359e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475153, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.06954, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            250.843      38.0447      9.39241      11.9195      1.26843       154.64      13.8581    0.0218079
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003976, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053515, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.98446e-09  8.98445e-09   2.9713e-10
      low eigenvalue method done, cpu time[sec] = 0.053748, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.98e-09  2.97e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.49e-10  2.97e-10         1
         *Z       ---       ---   7.5e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.9713e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.49929e-45  1.39873e-45  3.99952e-47  2.47191e-46  7.65216e-48  1.83595e-47  2.98014e-53  8.37629e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.47266, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 410 K
      Energy reference = 28175 1/cm
      Energy step      = 68 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007965
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.534484
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.322123
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.71243
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.78034
         W1 Well: minimal relaxation eigenvalue = 0.0883265
         W1 Well: maximal relaxation eigenvalue = 0.989015
         W1 Well:       grid size = 479
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4396 1/cm
         B1 Barrier:        grid size = 415
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -44 1/cm
         B2 Barrier:        grid size = 412
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 482
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4600 1/cm
         B4 Barrier:        grid size = 506
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 755
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 393
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 345
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16751 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.76239, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 6.96686e+47
      MasterEquation::Barrier::truncate: effective weight = 2.15855e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 2.50284e+49
      MasterEquation::Barrier::truncate: effective weight = 7.75457e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 1.1757e+49
      MasterEquation::Barrier::truncate: effective weight = 6.75969e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4396  -4396 2.86e+09 5.31e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -44 7.07e+14
         B2    159 1.08e+14
         B3  -4396 2.69e+13
         B4  -4396  3.4e+13
         B5  -4396 3.63e+12
         B6   1452 4.41e+14
         B7   4716    4e+13
         B8  16751  6.7e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.5e-08  1.03e-07  5.57e-14  1.93e-16  6.81e-44   0.00014      20.7  2.32e+20
          R  2.22e+07         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1   9.7e+06     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2   1.8e+13  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  5.18e+15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.47e+43  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  7.13e+03  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6    0.0482  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  4.31e-21  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.39e+22     1e+23  5.42e+16  1.88e+14  6.63e-14  1.37e+26  2.02e+31  2.26e+50
          R  2.28e-23         1      2.29  1.24e-06  4.29e-09  1.51e-36  3.11e+03  4.61e+08  5.15e+27
         P1  9.96e-24     0.437         1   5.4e-07  1.87e-09  6.61e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.84e-17  8.09e+05  1.85e+06         1   0.00347  1.22e-30  2.52e+09  3.73e+14  4.17e+33
         P3  5.32e-15  2.33e+08  5.34e+08       288         1  3.52e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.51e+13  6.62e+35  1.51e+36  8.18e+29  2.84e+27         1  2.06e+39  3.05e+44  3.41e+63
         P5  7.32e-27  0.000321  0.000735  3.97e-10  1.38e-12  4.86e-40         1  1.48e+05  1.65e+24
         P6  4.95e-32  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.28e-45  6.76e-06         1  1.12e+19
         P7  4.43e-51  1.94e-28  4.44e-28   2.4e-34  8.32e-37  2.93e-64  6.04e-25  8.94e-20         1
   MasterEquation::set:  done, cpu time[sec] = 4.77797, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+08
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12558, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10529.5      1613.41      400.329      506.721      54.1067      6565.37      595.743     0.996773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048741, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003998, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053115, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.77565e-07  2.77565e-07  3.97773e-08
      low eigenvalue method done, cpu time[sec] = 0.053348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.78e-07  3.98e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.73e-08  3.98e-08         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.97773e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.92998e-42  3.49839e-42  1.12312e-43   1.0801e-42  2.78201e-44  3.10341e-45  6.44245e-52  1.26327e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51245, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3509.84      537.804      133.443      168.907      18.0356      2188.46      198.581     0.332258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048604, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003967, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052954, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1048e-07   1.1048e-07  1.33504e-08
      low eigenvalue method done, cpu time[sec] = 0.053184, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.1e-07  1.34e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  1.34e-08         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33504e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.89834e-42  1.06301e-42  3.03642e-44  2.45266e-43  6.74271e-45  2.55547e-45  6.49179e-52  5.18037e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.43506, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.89747e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470601, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04567, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2105.9      322.683      80.0657      101.344      10.8213      1313.07      119.149     0.199355
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048614, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00396, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052948, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.10773e-08  7.10773e-08  7.44461e-09
      low eigenvalue method done, cpu time[sec] = 0.053182, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.11e-08  7.44e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.85e-09  7.44e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.44461e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.66779e-42  5.60766e-43  1.56922e-44  1.18193e-43  3.34436e-45  2.07368e-45  6.54422e-52  6.41467e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.43484, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         2.65645e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471309, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05725, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1504.22      230.488      57.1898      72.3887      7.72952       937.91      85.1061     0.142396
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048563, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052875, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.28685e-08  5.28685e-08  4.92848e-09
      low eigenvalue method done, cpu time[sec] = 0.053109, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.29e-08  4.93e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-09  4.93e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.92847e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12441e-42  3.57567e-43  9.95204e-45  7.18437e-44   2.0703e-45  1.72272e-45  6.59909e-52  6.19182e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.4408, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.41544e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.05113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1169.95      179.268       44.481      56.3023      6.01185      729.485      66.1936     0.110753
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003947, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052983, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    4.226e-08    4.226e-08  3.56976e-09
      low eigenvalue method done, cpu time[sec] = 0.053215, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.23e-08  3.57e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.05e-09  3.57e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.56976e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.24593e-43  2.51839e-43  7.00454e-45  4.90777e-44  1.43301e-45  1.46228e-45  6.65552e-52   5.9745e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.43787, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.47029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.0544, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1052.95      161.341      40.0329      50.6721      5.41067      656.537      59.5743    0.0996773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0486, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052933, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.84441e-08  3.84441e-08  3.10685e-09
      low eigenvalue method done, cpu time[sec] = 0.053169, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.84e-08  3.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-09  3.11e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.10685e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.21195e-43  2.16641e-43  6.02822e-45  4.17307e-44  1.22509e-45  1.35635e-45  6.68403e-52  6.02459e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.4417, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1          5.6924e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470805, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04343, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            701.967      107.561      26.6886      33.7814      3.60711      437.691      39.7162    0.0664515
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048656, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.66033e-08  2.66033e-08  1.78435e-09
      low eigenvalue method done, cpu time[sec] = 0.053219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-08  1.78e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-09  1.78e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.78435e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.21439e-43  1.19065e-43  3.32976e-45  2.20608e-44  6.60731e-46  9.80105e-46  6.82525e-52  6.08339e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.4296, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         7.58986e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04511, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            526.475      80.6706      20.0164       25.336      2.70533      328.268      29.7871    0.0498387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003947, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052985, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.04124e-08  2.04124e-08   1.1812e-09
      low eigenvalue method done, cpu time[sec] = 0.05322, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.04e-08  1.18e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-09  1.18e-09         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1812e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.82031e-43  7.64855e-44  2.15216e-45  1.38554e-44  4.20576e-46  7.52566e-46  6.95639e-52  6.18511e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.4314, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         9.48733e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.46988, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.03822, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             421.18      64.5365      16.0131      20.2688      2.16427      262.615      23.8297    0.0398709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003956, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052979, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65886e-08  1.65886e-08  8.48666e-10
      low eigenvalue method done, cpu time[sec] = 0.05321, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-08  8.49e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-09  8.49e-10         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.48666e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.04189e-43  5.37351e-44  1.52087e-45  9.58907e-45  2.93969e-46  6.01727e-46   7.0703e-52  5.95008e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42572, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.472548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.0442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            350.984      53.7804      13.3443      16.8907      1.80356      218.846      19.8581    0.0332258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04865, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00394, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39858e-08  1.39858e-08  6.43404e-10
      low eigenvalue method done, cpu time[sec] = 0.053198, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-08  6.43e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.32e-09  6.43e-10         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.43404e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.55699e-43  4.00261e-44  1.13889e-45  7.06579e-45  2.18298e-46  4.95288e-46  7.16349e-52  6.08494e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.43432, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.32823e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470709, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.03104, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            300.843      46.0975       11.438      14.4777       1.5459      187.582      17.0212    0.0284792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048586, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004019, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052989, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2097e-08   1.2097e-08  5.06755e-10
      low eigenvalue method done, cpu time[sec] = 0.053226, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-08  5.07e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-09  5.07e-10         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.06755e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.23191e-43  3.10746e-44  8.88418e-46  5.44062e-45  1.69151e-46  4.16708e-46  7.23496e-52  6.20071e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.41933, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.51797e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470545, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.04305, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            263.238      40.3353      10.0082       12.668      1.35267      164.134      14.8936    0.0249193
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003944, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052875, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06624e-08  1.06624e-08  4.10697e-10
      low eigenvalue method done, cpu time[sec] = 0.053108, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-08  4.11e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     1e-09  4.11e-10         1
         *Z       ---       ---  3.33e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.10697e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00211e-43  2.48822e-44  7.14442e-46  4.32824e-45  1.35278e-46  3.56668e-46  7.28526e-52  6.17526e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.42962, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 420 K
      Energy reference = 28453 1/cm
      Energy step      = 70 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007164
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.520495
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.312683
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.289522
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.68676
         W1 Well: minimal relaxation eigenvalue = 0.08764
         W1 Well: maximal relaxation eigenvalue = 0.987729
         W1 Well:       grid size = 471
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4517 1/cm
         B1 Barrier:        grid size = 407
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -37 1/cm
         B2 Barrier:        grid size = 404
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 473
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4657 1/cm
         B4 Barrier:        grid size = 495
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6197 1/cm
         B5 Barrier: nonpositive number of states at -23137 1/cm => truncating
         B5 Barrier:        grid size = 737
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23137 1/cm
         B6 Barrier:        grid size = 385
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 340
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4652 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.21279, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 1.71411e+47
      MasterEquation::Barrier::truncate: effective weight = 5.46703e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 5.63409e+48
      MasterEquation::Barrier::truncate: effective weight = 1.79695e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 1.59106e+48
      MasterEquation::Barrier::truncate: effective weight = 1.40826e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4517  -4517 2.75e+09 5.56e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -37 7.65e+14
         B2    174 1.18e+14
         B3  -4517 2.95e+13
         B4  -4517 3.73e+13
         B5  -4517 3.99e+12
         B6   1503 4.82e+14
         B7   4653 4.43e+13
         B8  16763 7.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.04e-08  9.09e-08  7.38e-14  2.93e-16  4.75e-43  0.000112      12.9   5.3e+19
          R  2.48e+07         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1   1.1e+07     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.36e+13  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  3.41e+15  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  2.11e+42   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5   8.9e+03  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6    0.0778  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  1.89e-20  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.98e+21   6.7e+21  5.44e+15  2.16e+13   3.5e-14  8.28e+24  9.47e+29  3.91e+48
          R  3.36e-22         1      2.25  1.83e-06  7.26e-09  1.18e-35  2.78e+03  3.18e+08  1.31e+27
         P1  1.49e-22     0.444         1  8.12e-07  3.23e-09  5.22e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.84e-16  5.47e+05  1.23e+06         1   0.00398  6.44e-30  1.52e+09  1.74e+14  7.19e+32
         P3  4.63e-14  1.38e+08   3.1e+08       252         1  1.62e-27  3.83e+11  4.38e+16  1.81e+35
         P4  2.86e+13   8.5e+34  1.91e+35  1.55e+29  6.18e+26         1  2.37e+38  2.71e+43  1.12e+62
         P5  1.21e-25  0.000359  0.000809  6.56e-10  2.61e-12  4.22e-39         1  1.14e+05  4.72e+23
         P6  1.06e-30  3.14e-09  7.07e-09  5.74e-15  2.28e-17  3.69e-44  8.74e-06         1  4.12e+18
         P7  2.56e-49  7.62e-28  1.71e-27  1.39e-33  5.53e-36  8.96e-63  2.12e-24  2.43e-19         1
   MasterEquation::set:  done, cpu time[sec] = 3.22713, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+08
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.330637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.02789, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11040.1      1709.01      426.152      538.029      57.6419      6961.22      639.473      1.13507
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046478, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003864, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050716, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.68668e-07  2.68668e-07  4.27376e-08
      low eigenvalue method done, cpu time[sec] = 0.050959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.69e-07  4.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.62e-08  4.27e-08         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.27376e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.16725e-40  5.09003e-41   1.6167e-42  1.53287e-41   3.9667e-43  4.95446e-44  1.35305e-50  1.82991e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.24005, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454957, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94567, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3680.05      569.669      142.051      179.343       19.214      2320.41      213.158     0.378358
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046431, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050586, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08971e-07  1.08971e-07  1.46585e-08
      low eigenvalue method done, cpu time[sec] = 0.050811, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-07  1.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-08  1.47e-08         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46585e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.35637e-41  1.57458e-41  4.47326e-43  3.56195e-42  9.84745e-44   4.1115e-44  1.36337e-50  3.49996e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28547, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.86683e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.45431, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94725, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2208.03      341.801      85.2304      107.606      11.5284      1392.24      127.895     0.227015
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046394, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003783, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.06339e-08  7.06339e-08  8.26256e-09
      low eigenvalue method done, cpu time[sec] = 0.05078, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.06e-08  8.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.76e-09  8.26e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.26256e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.53352e-41  8.38255e-42  2.33795e-43  1.73509e-42   4.9399e-44  3.35845e-44  1.37433e-50  3.51121e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28242, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         2.61356e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.455127, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95307, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1577.16      244.144      60.8789      76.8613      8.23455       994.46      91.3533     0.162153
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046391, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003782, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.27705e-08  5.27706e-08  5.50996e-09
      low eigenvalue method done, cpu time[sec] = 0.050799, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.28e-08  5.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-09  5.51e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.50996e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72046e-41   5.3783e-42  1.49396e-43  1.06219e-42  3.08102e-44  2.80498e-44  1.38579e-50  3.51401e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.29295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.36029e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.453908, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1226.68       189.89      47.3502       59.781      6.40465      773.469      71.0525     0.126119
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046379, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003775, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050537, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.23085e-08  4.23085e-08  4.01298e-09
      low eigenvalue method done, cpu time[sec] = 0.05077, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.23e-08  4.01e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-09  4.01e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.01298e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26863e-41  3.80581e-42  1.05747e-43  7.29437e-43  2.14459e-44  2.39152e-44  1.39755e-50  3.44717e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.29391, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.453157, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94593, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1104.01      170.901      42.6152      53.8029      5.76419      696.122      63.9473     0.113507
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046382, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0038, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050558, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.8534e-08   3.8534e-08  3.50071e-09
      low eigenvalue method done, cpu time[sec] = 0.050806, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.85e-08   3.5e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.66e-09   3.5e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50071e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11212e-41  3.28037e-42  9.12245e-44  6.21607e-43  1.83771e-44  2.22264e-44  1.40349e-50  3.51848e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1321, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         5.60049e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94765, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            736.009      113.934      28.4101      35.8686      3.84279      464.081      42.6315    0.0756715
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003766, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050583, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.67767e-08  2.67767e-08  2.02862e-09
      low eigenvalue method done, cpu time[sec] = 0.050815, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-08  2.03e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-09  2.03e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.02862e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.5571e-42  1.81661e-42  5.08519e-44  3.31377e-43  1.00006e-44  1.61914e-44  1.43286e-50  3.54465e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28359, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         7.46731e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454827, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.9497, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            552.007      85.4503      21.3076      26.9014      2.88209      348.061      31.9736    0.0567537
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046418, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003783, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050557, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05983e-08  2.05983e-08  1.35142e-09
      low eigenvalue method done, cpu time[sec] = 0.050784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-08  1.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-09  1.35e-09         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35142e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.41591e-42  1.17321e-42  3.30796e-44  2.09338e-43  6.40564e-45  1.25092e-44  1.46008e-50  3.40175e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.2851, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         9.33414e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.455747, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95105, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            441.606      68.3603      17.0461      21.5212      2.30567      278.449      25.5789    0.0454029
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046419, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003794, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050597, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.67694e-08  1.67694e-08  9.75678e-10
      low eigenvalue method done, cpu time[sec] = 0.050824, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.68e-08  9.76e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-09  9.76e-10         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.75677e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.21266e-42  8.27607e-43  2.34916e-44   1.4552e-43  4.49872e-45  1.00517e-44  1.48372e-50  3.47352e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28804, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.45412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            368.005      56.9669      14.2051      17.9343       1.9214      232.041      21.3158    0.0378358
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046388, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003778, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050524, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.4157e-08   1.4157e-08  7.42594e-10
      low eigenvalue method done, cpu time[sec] = 0.050746, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-08  7.43e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-09  7.43e-10         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.42594e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.45937e-42  6.18487e-43  1.76614e-44  1.07606e-43  3.35351e-45  8.30802e-45  1.50309e-50  3.61669e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34722, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.30678e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.456713, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.94626, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            315.433      48.8288      12.1758      15.3723      1.64691      198.892      18.2707    0.0324307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003794, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050556, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22577e-08  1.22576e-08  5.86788e-10
      low eigenvalue method done, cpu time[sec] = 0.050782, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-08  5.87e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-09  5.87e-10         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.86788e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.95226e-42  4.81472e-43  1.38226e-44  8.30982e-44  2.60676e-45  7.01479e-45  1.51799e-50  3.51266e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28228, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.49346e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.455226, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.95067, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            276.003      42.7252      10.6538      13.4507      1.44105      174.031      15.9868    0.0283768
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046396, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003775, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0813e-08   1.0813e-08  4.76884e-10
      low eigenvalue method done, cpu time[sec] = 0.050749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-08  4.77e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-09  4.77e-10         1
         *Z       ---       ---  1.65e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.76884e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.59254e-42  3.86419e-43   1.1147e-44  6.62718e-44  2.09038e-45  6.02278e-45  1.52855e-50  3.49986e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.28916, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 430 K
      Energy reference = 28731 1/cm
      Energy step      = 72 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006653
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.502902
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.299807
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.278737
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.61128
         W1 Well: minimal relaxation eigenvalue = 0.0869921
         W1 Well: maximal relaxation eigenvalue = 0.98648
         W1 Well:       grid size = 462
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4532 1/cm
         B1 Barrier:        grid size = 400
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -69 1/cm
         B2 Barrier:        grid size = 397
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 146 1/cm
         B3 Barrier:        grid size = 463
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4604 1/cm
         B4 Barrier:        grid size = 485
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23109 1/cm => truncating
         B5 Barrier:        grid size = 720
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23108 1/cm
         B6 Barrier:        grid size = 379
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 334
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4682 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16707 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.08776, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 4.51508e+46
      MasterEquation::Barrier::truncate: effective weight = 1.4812e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 1.3636e+48
      MasterEquation::Barrier::truncate: effective weight = 4.47335e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 2.52039e+47
      MasterEquation::Barrier::truncate: effective weight = 3.06033e+43
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4532  -4532 2.74e+09 5.83e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -69 8.27e+14
         B2    147 1.29e+14
         B3  -4532 3.24e+13
         B4  -4532 4.08e+13
         B5  -4532 4.39e+12
         B6   1444 5.27e+14
         B7   4683  4.9e+13
         B8  16707 9.22e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.65e-08  5.86e-08  7.01e-14  3.18e-16   2.2e-42  6.62e-05      5.93  9.44e+18
          R  3.78e+07         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1  1.71e+07     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  1.43e+13  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.15e+15  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.54e+41   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.51e+04    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6     0.169  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.06e-19   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.29e+20  5.06e+20  6.06e+14  2.74e+12   1.9e-14  5.72e+23  5.12e+28  8.15e+46
          R  4.37e-21         1      2.21  2.65e-06   1.2e-08  8.32e-35   2.5e+03  2.24e+08  3.57e+26
         P1  1.97e-21     0.451         1   1.2e-06  5.42e-09  3.75e-35  1.13e+03  1.01e+08  1.61e+26
         P2  1.65e-15  3.77e+05  8.36e+05         1   0.00453  3.14e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.65e-13  8.34e+07  1.85e+08       221         1  6.93e-27  2.08e+11  1.87e+16  2.97e+34
         P4  5.26e+13   1.2e+34  2.66e+34  3.19e+28  1.44e+26         1  3.01e+37  2.69e+42  4.29e+60
         P5  1.75e-24    0.0004  0.000886  1.06e-09   4.8e-12  3.33e-38         1  8.96e+04  1.43e+23
         P6  1.95e-29  4.47e-09  9.89e-09  1.18e-14  5.36e-17  3.71e-43  1.12e-05         1  1.59e+18
         P7  1.23e-47   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.33e-61  7.01e-24  6.28e-19         1
   MasterEquation::set:  done, cpu time[sec] = 3.10233, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+08
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.424534, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.86104, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11565.8      1808.65      453.207      570.746      61.3486      7373.59      685.603      1.28865
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04397, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00369, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.048024, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.57256e-07  3.57256e-07  6.28069e-08
      low eigenvalue method done, cpu time[sec] = 0.048256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.57e-07  6.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.48e-08  6.28e-08         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.28069e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.51458e-39   6.5277e-40  2.05378e-41  1.92151e-40   4.9945e-42   6.9464e-43  2.47326e-49  1.62628e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1333, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.43812, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83566, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3855.27      602.885      151.069      190.249      20.4495      2457.86      228.534     0.429551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043944, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003644, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04795, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47785e-07  1.47785e-07  2.19993e-08
      low eigenvalue method done, cpu time[sec] = 0.048178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-07   2.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-08   2.2e-08         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.19993e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.76826e-40  2.05501e-40  5.81176e-42  4.56569e-41  1.26902e-42  5.80771e-43   2.4921e-49   1.6802e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.83748e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437351, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8331, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2313.16      361.731      90.6413      114.149      12.2697      1474.72      137.121     0.257731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043993, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00362, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047976, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.65494e-08  9.65494e-08  1.25309e-08
      low eigenvalue method done, cpu time[sec] = 0.048193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.65e-08  1.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.21e-09  1.25e-08         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2531e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.38937e-40  1.10386e-40  3.07103e-42   2.2475e-41   6.4365e-43  4.77455e-43  2.51209e-49  1.66981e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11395, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         2.57247e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437331, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83645, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1652.26      258.379      64.7438      81.5351      8.76409      1053.37      97.9432     0.184093
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003615, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.24694e-08  7.24694e-08  8.41593e-09
      low eigenvalue method done, cpu time[sec] = 0.048101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.25e-08  8.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-09  8.42e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.41593e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.31787e-40  7.12568e-41  1.97692e-42  1.38545e-41  4.04399e-43  4.00848e-43  2.53297e-49  1.67119e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.9556, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.30747e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.438533, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83452, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1285.09      200.962      50.3563      63.4162      6.81651      819.287      76.1781     0.143184
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043892, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047863, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82885e-08  5.82885e-08  6.16251e-09
      low eigenvalue method done, cpu time[sec] = 0.048085, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.83e-08  6.16e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.52e-09  6.16e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.16251e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7183e-40  5.06562e-41  1.40712e-42  9.56376e-42  2.83037e-43  3.43245e-43  2.55437e-49  1.68464e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.12003, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437929, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.834, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1156.58      180.865      45.3207      57.0746      6.13486      737.359      68.5603     0.128865
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.044063, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.048038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.31558e-08  5.31558e-08  5.38806e-09
      low eigenvalue method done, cpu time[sec] = 0.048259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.32e-08  5.39e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-09  5.39e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.38806e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.50972e-40  4.37474e-41  1.21672e-42  8.16766e-42  2.43095e-43   3.1962e-43  2.56516e-49  1.67731e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11471, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         5.51244e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437303, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83705, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            771.053      120.577      30.2138      38.0497      4.08991      491.572      45.7068    0.0859103
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043872, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047843, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71036e-08  3.71036e-08  3.14983e-09
      low eigenvalue method done, cpu time[sec] = 0.048064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.71e-08  3.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.49e-09  3.15e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.14983e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.97948e-41  2.44089e-41  6.84374e-43  4.39032e-42  1.33462e-43  2.34681e-43  2.61841e-49   1.6751e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         7.34992e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437494, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83247, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             578.29      90.4327      22.6603      28.5373      3.06743      368.679      34.2801    0.0644327
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043916, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003611, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04788, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.86228e-08  2.86228e-08  2.11142e-09
      low eigenvalue method done, cpu time[sec] = 0.04811, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.86e-08  2.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-09  2.11e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11142e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.08492e-41  1.58475e-41  4.48027e-43  2.78951e-42  8.60164e-44  1.82406e-43  2.66764e-49  1.67585e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.114, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1          9.1874e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.834, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            462.632      72.3462      18.1283      22.8298      2.45395      294.943      27.4241    0.0515462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043943, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.33483e-08  2.33483e-08  1.53169e-09
      low eigenvalue method done, cpu time[sec] = 0.048122, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-08  1.53e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-09  1.53e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53169e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.44814e-41  1.12245e-41  3.19723e-43  1.94764e-42  6.06965e-44  1.47285e-43  2.71033e-49  1.69039e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437699, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83645, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            385.527      60.2885      15.1069      19.0249      2.04495      245.786      22.8534    0.0429551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043967, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003616, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97401e-08  1.97401e-08  1.17029e-09
      low eigenvalue method done, cpu time[sec] = 0.048152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-08  1.17e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-09  1.17e-09         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17029e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.41837e-41  8.41574e-42   2.4132e-43  1.44528e-42  4.54179e-44  1.22232e-43   2.7453e-49  1.68296e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11477, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.28624e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.4387, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83554, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            330.451      51.6758      12.9488       16.307      1.75282      210.674      19.5886    0.0368187
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003608, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.71115e-08  1.71115e-08  9.27742e-10
      low eigenvalue method done, cpu time[sec] = 0.048126, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-08  9.28e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-09  9.28e-10         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.27742e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.72234e-41  6.56919e-42  1.89489e-43  1.11937e-42  3.54165e-44  1.03566e-43  2.77225e-49  1.67181e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1175, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.46998e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.439006, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8331, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            289.145      45.2163      11.3302      14.2686      1.53372       184.34      17.1401    0.0322163
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047798, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5109e-08   1.5109e-08  7.56065e-10
      low eigenvalue method done, cpu time[sec] = 0.048018, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-08  7.56e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-09  7.56e-10         1
         *Z       ---       ---  7.25e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.56065e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22689e-41  5.28448e-42  1.53239e-43  8.94929e-43  2.84775e-44  8.91917e-44  2.79142e-49   1.6768e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97972, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 440 K
      Energy reference = 29009 1/cm
      Energy step      = 73 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006984
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.504359
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.298929
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.27284
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.61342
         W1 Well: minimal relaxation eigenvalue = 0.0863609
         W1 Well: maximal relaxation eigenvalue = 0.988688
         W1 Well:       grid size = 461
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4643 1/cm
         B1 Barrier:        grid size = 398
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -44 1/cm
         B2 Barrier:        grid size = 395
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 174 1/cm
         B3 Barrier:        grid size = 461
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 482
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6176 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 714
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23112 1/cm
         B6 Barrier:        grid size = 377
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 333
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4700 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16745 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.08295, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 461
      MasterEquation::Barrier::truncate: real weight = 3.53062e+47
      MasterEquation::Barrier::truncate: effective weight = 1.17433e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 461
      MasterEquation::Barrier::truncate: real weight = 4.59753e+46
      MasterEquation::Barrier::truncate: effective weight = 7.28608e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4643  -4643 2.64e+09 6.12e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -44 8.94e+14
         B2    175 1.41e+14
         B3  -4643 3.55e+13
         B4  -4643 4.47e+13
         B5  -4643 4.82e+12
         B6   1489 5.76e+14
         B7   4701 5.42e+13
         B8  16745 1.08e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.37e-08  5.17e-08  8.95e-14  4.59e-16  1.27e-41  5.35e-05      3.79  2.44e+18
          R  4.22e+07         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  1.93e+07     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.12e+13  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.18e+15  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  7.85e+40  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  1.87e+04  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6     0.264  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.11e-19  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.97e+19   4.3e+19  7.46e+13  3.82e+11  1.06e-14  4.45e+22  3.16e+27  2.03e+45
          R  5.07e-20         1      2.18  3.78e-06  1.94e-08  5.38e-34  2.26e+03   1.6e+08  1.03e+26
         P1  2.32e-20     0.458         1  1.73e-06  8.88e-09  2.47e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.34e-14  2.65e+05  5.77e+05         1   0.00513  1.42e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.62e-12  5.16e+07  1.13e+08       195         1  2.78e-26  1.16e+11  8.26e+15  5.31e+33
         P4  9.42e+13  1.86e+33  4.06e+33  7.03e+27   3.6e+25         1  4.19e+36  2.97e+41  1.91e+59
         P5  2.25e-23  0.000443  0.000967  1.68e-09  8.59e-12  2.38e-37         1  7.09e+04  4.56e+22
         P6  3.17e-28  6.25e-09  1.36e-08  2.36e-14  1.21e-16  3.36e-42  1.41e-05         1  6.42e+17
         P7  4.93e-46  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.23e-60  2.19e-23  1.56e-18         1
   MasterEquation::set:  done, cpu time[sec] = 3.09693, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+08
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.9179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12106.7      1912.47      481.532      604.915      65.2327      7802.86      734.222      1.45938
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043699, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003643, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047696, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.58259e-07  3.58259e-07  6.85037e-08
      low eigenvalue method done, cpu time[sec] = 0.047923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.58e-07  6.85e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.46e-08  6.85e-08         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.85037e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74738e-38  7.44778e-39  2.32221e-40  2.14579e-39  5.60135e-41  8.65433e-42  3.94706e-48  7.43334e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.19746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436682, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4035.58      637.491      160.511      201.638      21.7442      2600.95      244.741      0.48646
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003587, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04758, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50962e-07  1.50962e-07  2.44818e-08
      low eigenvalue method done, cpu time[sec] = 0.047795, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-07  2.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-08  2.45e-08         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.44818e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.78541e-39  2.38417e-39  6.71498e-41  5.20861e-40  1.45519e-41   7.2813e-42  3.97696e-48  6.84903e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.12446, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.80933e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.434789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84222, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2421.35      382.494      96.3065      120.983      13.0465      1560.57      146.844     0.291876
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043664, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003595, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047602, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.93542e-08  9.93542e-08  1.40866e-08
      low eigenvalue method done, cpu time[sec] = 0.047816, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.94e-08  1.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.42e-09  1.41e-08         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.40866e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.02688e-39  1.29176e-39  3.58622e-41  2.59013e-40  7.45979e-42  6.02055e-42   4.0087e-48   6.7436e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         2.53307e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.43415, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82944, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1729.53       273.21      68.7903      86.4164      9.31896      1114.69      104.889     0.208483
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043606, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003607, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047567, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.49007e-08  7.49007e-08  9.52601e-09
      low eigenvalue method done, cpu time[sec] = 0.047783, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.49e-08  9.53e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.07e-09  9.53e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.52601e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.77263e-39    8.388e-40  2.32516e-41  1.60747e-40  4.72038e-42   5.0787e-42  4.04179e-48   6.7004e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10428, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          3.2568e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435271, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84095, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1345.19      212.497      53.5036      67.2127      7.24808      866.984      81.5802     0.162153
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043624, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003568, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047553, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.04249e-08  6.04249e-08  7.01189e-09
      low eigenvalue method done, cpu time[sec] = 0.047793, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.04e-08  7.01e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.68e-09  7.01e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.01189e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.06611e-39  5.98981e-40  1.66398e-41  1.11525e-40  3.32149e-42   4.3664e-42  4.07568e-48  6.71745e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97081, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436004, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83825, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1210.67      191.247      48.1532      60.4915      6.52327      780.286      73.4222     0.145938
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043622, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003599, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047573, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.51697e-08  5.51697e-08  6.14425e-09
      low eigenvalue method done, cpu time[sec] = 0.04779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.52e-08  6.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.18e-09  6.14e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.14425e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.81929e-39   5.1827e-40  1.44211e-41  9.54466e-41  2.85918e-42  4.07317e-42  4.09276e-48  6.75609e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11419, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1           5.428e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435389, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84526, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            807.115      127.498      32.1022      40.3276      4.34885      520.191      48.9481    0.0972921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003613, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047614, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.86717e-08  3.86717e-08  3.62274e-09
      low eigenvalue method done, cpu time[sec] = 0.047845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.87e-08  3.62e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-09  3.62e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.62274e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09133e-39  2.91298e-40   8.1833e-42  5.17227e-41  1.58334e-42  3.01306e-42  4.17687e-48  6.72857e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.12325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         7.23734e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436574, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.84224, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            605.337      95.6236      24.0766      30.2457      3.26164      390.143      36.7111    0.0729691
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047599, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.9911e-08   2.9911e-08  2.44325e-09
      low eigenvalue method done, cpu time[sec] = 0.047814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.99e-08  2.44e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.79e-09  2.44e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.44325e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.44036e-40   1.9011e-40  5.39074e-42  3.30508e-41   1.0267e-42  2.35535e-42  4.25453e-48  6.73671e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.12284, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         9.04667e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436929, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83388, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            484.269      76.4989      19.2613      24.1966      2.60931      312.114      29.3689    0.0583752
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043723, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003605, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047676, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.44442e-08  2.44442e-08  1.78074e-09
      low eigenvalue method done, cpu time[sec] = 0.047894, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.44e-08  1.78e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.27e-09  1.78e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.78074e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.46457e-40  1.35191e-40   3.8655e-42  2.31766e-41   7.2787e-43   1.9107e-42  4.32189e-48  6.69162e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.434956, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8295, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            403.558      63.7491      16.0511      20.1638      2.17442      260.095      24.4741     0.048646
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003597, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047596, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06952e-08  2.06952e-08  1.36577e-09
      low eigenvalue method done, cpu time[sec] = 0.047816, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  1.37e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-09  1.37e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36577e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.21551e-40  1.01689e-40  2.92896e-42  1.72587e-41  5.46706e-43  1.59189e-42  4.37717e-48  6.69984e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.10301, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.26653e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435943, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83472, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            345.907       54.642      13.7581      17.2833      1.86379      222.939      20.9778    0.0416966
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043618, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003609, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047581, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.79589e-08  1.79589e-08  1.08616e-09
      low eigenvalue method done, cpu time[sec] = 0.047818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-08  1.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-09  1.09e-09         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08616e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36789e-40  7.95906e-41  2.30736e-42  1.34058e-41  4.27659e-43  1.35334e-42  4.41993e-48  6.73112e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11164, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.44747e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.434809, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.83103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            302.668      47.8118      12.0383      15.1229      1.63082      195.071      18.3555    0.0364845
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047602, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5871e-08  1.58711e-08  8.87587e-10
      low eigenvalue method done, cpu time[sec] = 0.047817, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-08  8.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-09  8.88e-10         1
         *Z       ---       ---  3.82e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.87587e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.7625e-40  6.41728e-41  1.87116e-42  1.07444e-41  3.44794e-43  1.16895e-42  4.45057e-48   6.7528e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11094, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 450 K
      Energy reference = 29288 1/cm
      Energy step      = 75 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006919
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.425475
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.289594
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.293478
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.51504
         W1 Well: minimal relaxation eigenvalue = 0.0857335
         W1 Well: maximal relaxation eigenvalue = 0.987483
         W1 Well:       grid size = 453
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4688 1/cm
         B1 Barrier:        grid size = 391
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 388
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 452
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4612 1/cm
         B4 Barrier:        grid size = 473
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23213 1/cm => truncating
         B5 Barrier:        grid size = 700
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23213 1/cm
         B6 Barrier:        grid size = 371
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1461 1/cm
         B7 Barrier:        grid size = 328
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4687 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16762 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.91385, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 453
      MasterEquation::Barrier::truncate: real weight = 9.73524e+46
      MasterEquation::Barrier::truncate: effective weight = 3.32677e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 453
      MasterEquation::Barrier::truncate: real weight = 9.50838e+45
      MasterEquation::Barrier::truncate: effective weight = 1.85459e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4688  -4688 2.61e+09 6.41e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 9.65e+14
         B2    188 1.54e+14
         B3  -4612  3.9e+13
         B4  -4688 4.88e+13
         B5  -4688 5.28e+12
         B6   1462 6.29e+14
         B7   4688 5.99e+13
         B8  16762 1.26e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.72e-08  3.71e-08  9.15e-14  5.28e-16  5.53e-41  3.53e-05         2  5.41e+17
          R   5.8e+07         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1   2.7e+07     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  1.09e+13  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.89e+15  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  1.81e+40  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.84e+04  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6       0.5  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  1.85e-18  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.9e+18  4.08e+18  1.01e+13  5.81e+10  6.08e-15  3.88e+21   2.2e+26  5.95e+43
          R  5.27e-19         1      2.15  5.31e-06  3.06e-08  3.21e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.45e-19     0.465         1  2.47e-06  1.42e-08  1.49e-33       951   5.4e+07  1.46e+25
         P2  9.93e-14  1.88e+05  4.05e+05         1   0.00577  6.04e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.72e-11  3.26e+07  7.02e+07       173         1  1.05e-25  6.68e+10  3.79e+15  1.02e+33
         P4  1.65e+14  3.12e+32  6.71e+32  1.66e+27  9.56e+24         1  6.38e+35  3.62e+40  9.78e+57
         P5  2.58e-22  0.000489   0.00105   2.6e-09   1.5e-11  1.57e-36         1  5.68e+04  1.53e+22
         P6  4.54e-27  8.61e-09  1.85e-08  4.57e-14  2.64e-16  2.76e-41  1.76e-05         1   2.7e+17
         P7  1.68e-44  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.02e-58  6.52e-23   3.7e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.92851, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+08
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.419783, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.82777, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              12663      2020.58      511.171      640.579         69.3      8249.45      785.421      1.64911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041627, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003415, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045378, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.37448e-07  4.37448e-07  9.05653e-08
      low eigenvalue method done, cpu time[sec] = 0.045589, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.37e-07  9.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.22e-08  9.06e-08         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.05652e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.80692e-37  7.61717e-38  2.35587e-39  2.15154e-38  5.63925e-40  9.63387e-41   5.5797e-47  2.28091e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.05449, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421449, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.86696, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4221.01      673.527       170.39      213.526         23.1      2749.82      261.807     0.549703
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042893, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003401, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87802e-07  1.87802e-07  3.30041e-08
      low eigenvalue method done, cpu time[sec] = 0.046844, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-07   3.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-08   3.3e-08         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.30041e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.15021e-38  2.47865e-38  6.95699e-40  5.33175e-39  1.49693e-40  8.15334e-41  5.62185e-47  2.29055e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.09304, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.78231e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421231, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7597, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2532.61      404.116      102.234      128.116        13.86      1649.89      157.084     0.329822
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041536, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045279, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24529e-07  1.24529e-07  1.91782e-08
      low eigenvalue method done, cpu time[sec] = 0.04549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-07  1.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-08  1.92e-08         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91782e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.28464e-38  1.35437e-38  3.75421e-40  2.67774e-39  7.75395e-41  6.77927e-41  5.66656e-47  2.28788e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         2.49523e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1809      288.654      73.0244      91.5113          9.9      1178.49      112.203     0.235587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041499, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003413, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045248, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.42995e-08  9.42995e-08  1.30566e-08
      low eigenvalue method done, cpu time[sec] = 0.045465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.43e-08  1.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.86e-09  1.31e-08         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30566e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.96975e-38  8.84566e-39  2.45121e-40  1.67286e-39  4.94081e-41  5.74534e-41  5.71312e-47  2.29127e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98041, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.20816e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.420793, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1407      224.509      56.7967      71.1754          7.7      916.605       87.269     0.183234
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041552, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003409, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045309, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.63097e-08  7.63097e-08   9.6599e-09
      low eigenvalue method done, cpu time[sec] = 0.045524, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.63e-08  9.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.15e-09  9.66e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.6599e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22424e-38  6.34459e-39  1.76353e-40  1.16639e-39  3.49489e-41  4.95897e-41  5.76073e-47  2.29473e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97621, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.420989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75003, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1266.3      202.058      51.1171      64.0579         6.93      824.945      78.5421     0.164911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041525, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00343, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045294, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.97587e-08  6.97587e-08  8.48293e-09
      low eigenvalue method done, cpu time[sec] = 0.045524, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.98e-08  8.48e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.53e-09  8.48e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.48293e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.96274e-38  5.49995e-39  1.53181e-40  1.00031e-39   3.0151e-41  4.63406e-41  5.78468e-47  2.29177e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.83629, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         5.34693e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.422066, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.76275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            844.202      134.705       34.078      42.7053         4.62      549.963      52.3614     0.109941
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041551, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003417, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045304, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.91126e-08  4.91126e-08  5.04383e-09
      low eigenvalue method done, cpu time[sec] = 0.045522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.91e-08  5.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.57e-09  5.04e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.04383e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18725e-38  3.11376e-39  8.76806e-41  5.46427e-40  1.68396e-41  3.45303e-41  5.90251e-47   2.2944e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.9883, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         7.12924e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75767, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            633.152      101.029      25.5585       32.029        3.465      412.472       39.271    0.0824555
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041749, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003406, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.80919e-08  3.80919e-08  3.42209e-09
      low eigenvalue method done, cpu time[sec] = 0.045706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.81e-08  3.42e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-09  3.42e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.42209e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.14276e-39  2.04263e-39  5.81166e-41  3.51139e-40  1.09854e-41  2.71446e-41  6.01108e-47  2.28702e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98308, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         8.91155e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.423204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.74899, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            506.521      80.8233      20.4468      25.6232        2.772      329.978      31.4168    0.0659644
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041545, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003414, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045295, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.11907e-08  3.11907e-08  2.50575e-09
      low eigenvalue method done, cpu time[sec] = 0.045511, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.12e-08  2.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.88e-09  2.51e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.50575e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.00817e-39  1.45834e-39  4.18719e-41  2.47298e-40  7.82416e-42  2.21208e-41  6.10519e-47  2.29131e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.97504, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.422256, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75721, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            422.101      67.3527       17.039      21.3526         2.31      274.982      26.1807    0.0549703
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04153, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003423, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045295, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6446e-08   2.6446e-08  1.92908e-09
      low eigenvalue method done, cpu time[sec] = 0.045515, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.64e-08  1.93e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.44e-09  1.93e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.92908e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.65232e-39  1.10047e-39  3.18498e-41  1.84796e-40  5.89882e-42  1.85007e-41  6.18246e-47  2.29174e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98808, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.24762e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421259, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            361.801      57.7309      14.6049      18.3023         1.98      235.699      22.4406    0.0471174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041509, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003415, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2976e-08   2.2976e-08  1.53899e-09
      low eigenvalue method done, cpu time[sec] = 0.045485, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.3e-08  1.54e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-09  1.54e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53899e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.72863e-39   8.6364e-40  2.51717e-41  1.43958e-40  4.62881e-42  1.57804e-41  6.24239e-47  2.29567e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98781, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.42585e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421458, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.75286, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            316.576      50.5145      12.7793      16.0145       1.7325      206.236      19.6355    0.0412278
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041545, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045297, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03242e-08  2.03242e-08  1.26104e-09
      low eigenvalue method done, cpu time[sec] = 0.045507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-08  1.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-09  1.26e-09         1
         *Z       ---       ---  1.87e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26104e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.0667e-39  6.97944e-40  2.04697e-41  1.15665e-40  3.74194e-42    1.367e-41  6.28554e-47  2.29273e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.98095, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 460 K
      Energy reference = 29565 1/cm
      Energy step      = 77 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007031
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.481464
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.280802
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.268958
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.46815
         W1 Well: minimal relaxation eigenvalue = 0.0851078
         W1 Well: maximal relaxation eigenvalue = 0.986361
         W1 Well:       grid size = 446
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4777 1/cm
         B1 Barrier:        grid size = 384
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -3 1/cm
         B2 Barrier:        grid size = 382
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 150 1/cm
         B3 Barrier:        grid size = 444
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4623 1/cm
         B4 Barrier:        grid size = 465
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6240 1/cm
         B5 Barrier: nonpositive number of states at -23103 1/cm => truncating
         B5 Barrier:        grid size = 684
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23103 1/cm
         B6 Barrier:        grid size = 365
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1459 1/cm
         B7 Barrier:        grid size = 323
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16705 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.89058, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 446
      MasterEquation::Barrier::truncate: real weight = 2.84691e+46
      MasterEquation::Barrier::truncate: effective weight = 9.98802e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 446
      MasterEquation::Barrier::truncate: real weight = 2.19782e+45
      MasterEquation::Barrier::truncate: effective weight = 5.09632e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4777  -4777 2.53e+09 6.72e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -3 1.04e+15
         B2    151 1.68e+14
         B3  -4623 4.27e+13
         B4  -4777 5.33e+13
         B5  -4777 5.79e+12
         B6   1460 6.86e+14
         B7   4694 6.61e+13
         B8  16706 1.46e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.44e-08  3.05e-08  1.06e-13  6.83e-16  2.54e-40  2.68e-05      1.23  1.45e+17
          R  6.95e+07         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1  3.27e+07     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  9.46e+12  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  1.46e+15  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4  3.93e+39  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  3.73e+04  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6     0.814  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7   6.9e-18  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.02e+17  4.28e+17  1.48e+12  9.58e+09  3.56e-15  3.75e+20  1.72e+25  2.03e+42
          R  4.96e-18         1      2.12  7.35e-06  4.75e-08  1.77e-32  1.86e+03  8.54e+07  1.01e+25
         P1  2.34e-18     0.471         1  3.46e-06  2.24e-08  8.32e-33       877  4.02e+07  4.75e+24
         P2  6.75e-13  1.36e+05  2.89e+05         1   0.00647  2.41e-27  2.53e+08  1.16e+13  1.37e+30
         P3  1.04e-10  2.11e+07  4.47e+07       155         1  3.72e-25  3.92e+10   1.8e+15  2.12e+32
         P4  2.81e+14  5.66e+31   1.2e+32  4.16e+26  2.69e+24         1  1.05e+35  4.83e+39   5.7e+56
         P5  2.66e-21  0.000537   0.00114  3.95e-09  2.55e-11   9.5e-36         1  4.59e+04  5.41e+21
         P6   5.8e-26  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.07e-40  2.18e-05         1  1.18e+17
         P7  4.92e-43  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.75e-57  1.85e-22  8.48e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.90461, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+08
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408465, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.61844, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              13235       2133.1      542.163      677.783      73.5566      8713.75      839.291      1.85914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.123421, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003312, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.167545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.70322e-07  4.70322e-07  1.04354e-07
      low eigenvalue method done, cpu time[sec] = 0.168745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.7e-07  1.04e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.51e-08  1.04e-07         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.04354e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6862e-36  7.02897e-37  2.15874e-38  1.94976e-37  5.13053e-39  9.63438e-40  7.01493e-46   6.6514e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93392, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408835, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.6299, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4411.66      711.035      180.721      225.928      24.5189      2904.58      279.764     0.619712
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052088, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.096042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05544e-07  2.05544e-07  3.87568e-08
      low eigenvalue method done, cpu time[sec] = 0.097214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.06e-07  3.88e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-08  3.88e-08         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.87568e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.79557e-37   2.3243e-37  6.50627e-39   4.9295e-38  1.39059e-39   8.2067e-40  7.06766e-46  6.67415e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87234, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.75633e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408198, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.62434, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2647      426.621      108.433      135.557      14.7113      1742.75      167.858     0.371827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003307, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.092199, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.37271e-07  1.37271e-07   2.2738e-08
      low eigenvalue method done, cpu time[sec] = 0.093327, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-07  2.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-08  2.27e-08         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.2738e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.11062e-37  1.28062e-37  3.54668e-39  2.49973e-38  7.27636e-40  6.86243e-40  7.12355e-46   6.6699e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.84691, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         2.45887e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408483, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.63857, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1890.71      304.729      77.4519      96.8262      10.5081      1244.82      119.899     0.265591
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.044277, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003309, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088263, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04394e-07  1.04394e-07  1.55818e-08
      low eigenvalue method done, cpu time[sec] = 0.089392, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  1.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.75e-09  1.56e-08         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55818e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.86761e-37  8.41183e-38  2.33164e-39  1.57177e-38  4.66814e-40  5.84285e-40  7.18168e-46  6.67472e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87265, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          3.1614e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.406848, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.66053, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1470.55      237.012      60.2404      75.3093      8.17295      968.194      93.2546     0.206571
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039831, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003303, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069159, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.47289e-08  8.47289e-08   1.1586e-08
      low eigenvalue method done, cpu time[sec] = 0.070317, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.47e-08  1.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.89e-09  1.16e-08         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1586e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.15838e-37  6.05971e-38  1.68625e-39  1.10125e-38  3.31904e-40  5.06281e-40  7.24105e-46  6.70236e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87335, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.403872, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.68549, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1323.5       213.31      54.2163      67.7783      7.35566      871.375      83.9291     0.185914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003308, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06432, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.75467e-08  7.75468e-08  1.01959e-08
      low eigenvalue method done, cpu time[sec] = 0.065461, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.75e-08  1.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.21e-09  1.02e-08         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01959e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90861e-37  5.26267e-38  1.46791e-39  9.46382e-39   2.8696e-40   4.7393e-40  7.27089e-46  6.68625e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.89985, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1           5.269e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.410379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.47827, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            882.332      142.207      36.1442      45.1856      4.90377      580.917      55.9528     0.123942
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.201634, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003299, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.244735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.48265e-08  5.48265e-08  6.11241e-09
      low eigenvalue method done, cpu time[sec] = 0.245852, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.48e-08  6.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-09  6.11e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.11241e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.16397e-37  3.00081e-38  8.47416e-40  5.21057e-39  1.61616e-40  3.55688e-40  7.41749e-46  6.68882e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87786, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         7.02534e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.411065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.67571, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            661.749      106.655      27.1082      33.8892      3.67783      435.687      41.9646    0.0929568
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.040021, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003303, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043654, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.26375e-08  4.26375e-08  4.17155e-09
      low eigenvalue method done, cpu time[sec] = 0.043861, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.26e-08  4.17e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.93e-09  4.17e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.17155e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.02998e-38  1.97859e-38  5.65105e-40  3.36704e-39  1.06059e-40  2.81157e-40  7.55241e-46  6.69152e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87313, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         8.78167e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408117, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.51752, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            529.399      85.3242      21.6865      27.1113      2.94226       348.55      33.5717    0.0743655
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.154955, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.199058, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.4979e-08   3.4979e-08   3.0685e-09
      low eigenvalue method done, cpu time[sec] = 0.200183, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.5e-08  3.07e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.21e-09  3.07e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.0685e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.95194e-38  1.41819e-38  4.09065e-40  2.38149e-39  7.58859e-41   2.3015e-40  7.66939e-46   6.6872e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86294, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.407681, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.65745, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            441.166      71.1035      18.0721      22.5928      2.45189      290.458      27.9764    0.0619712
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.03984, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.97005e-08  2.97005e-08   2.3711e-09
      low eigenvalue method done, cpu time[sec] = 0.054733, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.97e-08  2.37e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-09  2.37e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.3711e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.62588e-38   1.0736e-38  3.12344e-40  1.78576e-39  5.74251e-41  1.93213e-40  7.76563e-46  6.68187e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85629, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.22943e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.406931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.67805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            378.142      60.9458      15.4904      19.3652      2.10162      248.964      23.9798    0.0531182
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039825, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043471, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.58327e-08  2.58327e-08  1.89754e-09
      low eigenvalue method done, cpu time[sec] = 0.043679, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-08   1.9e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-09   1.9e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89754e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    3.719e-38  8.44809e-39  2.47646e-40  1.39515e-39   4.5202e-41   1.6534e-40  7.84053e-46  6.68866e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86411, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.40507e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.407323, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.68728, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            330.874      53.3276      13.5541      16.9446      1.83891      217.844      20.9823    0.0464784
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003302, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.28722e-08  2.28722e-08  1.55902e-09
      low eigenvalue method done, cpu time[sec] = 0.043891, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.29e-08  1.56e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-09  1.56e-09         1
         *Z       ---       ---     1e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55902e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    3.067e-38  6.84293e-39  2.01942e-40  1.12372e-39  3.66391e-41  1.43638e-40  7.89482e-46  6.68476e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87533, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 470 K
      Energy reference = 29843 1/cm
      Energy step      = 78 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.009
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.482009
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.277897
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.261875
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.44692
         W1 Well: minimal relaxation eigenvalue = 0.0845169
         W1 Well: maximal relaxation eigenvalue = 0.988444
         W1 Well:       grid size = 445
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4866 1/cm
         B1 Barrier:        grid size = 383
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 380
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 202 1/cm
         B3 Barrier:        grid size = 442
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4633 1/cm
         B4 Barrier:        grid size = 462
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23119 1/cm => truncating
         B5 Barrier:        grid size = 679
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23119 1/cm
         B6 Barrier:        grid size = 364
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 323
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4649 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16739 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.85372, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 445
      MasterEquation::Barrier::truncate: real weight = 8.79602e+45
      MasterEquation::Barrier::truncate: effective weight = 3.12605e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 445
      MasterEquation::Barrier::truncate: real weight = 5.60531e+44
      MasterEquation::Barrier::truncate: effective weight = 1.47106e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4866  -4866 2.46e+09 7.04e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 1.12e+15
         B2    203 1.83e+14
         B3  -4633 4.67e+13
         B4  -4866 5.82e+13
         B5  -4866 6.34e+12
         B6   1452 7.47e+14
         B7   4649 7.28e+13
         B8  16739  1.7e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.23e-08  2.57e-08  1.23e-13  8.86e-16  1.11e-39  2.08e-05     0.781  4.17e+16
          R  8.16e+07         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  3.89e+07     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  8.13e+12  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3  1.13e+15  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4     9e+38   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5   4.8e+04  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6      1.28  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7   2.4e-17  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.36e+16  4.95e+16  2.36e+11   1.7e+09  2.14e-15  4.01e+19   1.5e+24  8.02e+40
          R  4.24e-17         1       2.1     1e-05  7.23e-08  9.06e-32   1.7e+03  6.37e+07   3.4e+24
         P1  2.02e-17     0.477         1  4.78e-06  3.45e-08  4.32e-32       811  3.04e+07  1.62e+24
         P2  4.23e-12  9.97e+04  2.09e+05         1   0.00721  9.04e-27   1.7e+08  6.35e+12  3.39e+29
         P3  5.87e-10  1.38e+07   2.9e+07       139         1  1.25e-24  2.35e+10  8.81e+14   4.7e+31
         P4  4.68e+14   1.1e+31  2.31e+31  1.11e+26  7.97e+23         1  1.88e+34  7.02e+38  3.75e+55
         P5  2.49e-20  0.000588   0.00123   5.9e-09  4.25e-11  5.33e-35         1  3.74e+04     2e+21
         P6  6.66e-25  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.42e-39  2.67e-05         1  5.34e+16
         P7  1.25e-41  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.67e-56     5e-22  1.87e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.86817, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+08
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.405141, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.65592, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13822.7      2250.13      574.553      716.572      78.0084      9196.18       895.93       2.0904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.116197, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003282, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.159903, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.04761e-07  5.04761e-07  1.19221e-07
      low eigenvalue method done, cpu time[sec] = 0.161052, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.05e-07  1.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.81e-08  1.19e-07         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19221e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.4294e-35  5.89474e-36  1.79826e-37  1.60717e-36   4.2451e-38  8.72314e-39  7.91869e-45  1.70179e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.95816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.407046, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64698, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4607.56      750.045      191.518      238.857      26.0028      3065.39      298.643     0.696799
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.070348, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24427e-07  2.24427e-07  4.50912e-08
      low eigenvalue method done, cpu time[sec] = 0.072285, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-07  4.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-08  4.51e-08         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.50912e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.86271e-36  1.97948e-36  5.52759e-38  4.14247e-37  1.17394e-38   7.4785e-39  7.97797e-45  1.68569e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72138, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.73134e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.40886, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2764.54      450.027      114.911      143.314      15.6017      1839.24      179.186     0.418079
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039571, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003251, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.062059, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50925e-07  1.50925e-07  2.67002e-08
      low eigenvalue method done, cpu time[sec] = 0.063218, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-07  2.67e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.41e-08  2.67e-08         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.67002e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.5787e-36  1.09942e-36  3.04288e-38  2.12036e-37  6.20324e-39  6.28836e-39  8.04074e-45  1.68702e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85482, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         2.42388e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406404, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64609, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1974.67      321.448       82.079      102.367      11.1441      1313.74       127.99     0.298628
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.03954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068528, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15256e-07  1.15256e-07  1.84136e-08
      low eigenvalue method done, cpu time[sec] = 0.069666, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-07  1.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  1.84e-08         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.84136e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.5122e-36  7.26158e-37  2.01381e-38  1.34164e-37   4.0061e-39  5.37836e-39  8.10596e-45  1.68904e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85905, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.11641e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.407287, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.66214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1535.85      250.015      63.8392      79.6191       8.6676       1021.8      99.5478     0.232266
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039549, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052662, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.38165e-08  9.38165e-08  1.37581e-08
      low eigenvalue method done, cpu time[sec] = 0.053814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.38e-08  1.38e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.69e-09  1.38e-08         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.37581e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89995e-36  5.25325e-37  1.46379e-38   9.4448e-38  2.86263e-39  4.67805e-39  8.17247e-45   1.6899e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72301, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406345, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.63256, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1382.27      225.013      57.4553      71.6572      7.80084      919.618       89.593      0.20904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.042714, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00326, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.085845, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.59635e-08  8.59635e-08  1.21323e-08
      low eigenvalue method done, cpu time[sec] = 0.086984, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.6e-08  1.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.95e-09  1.21e-08         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21323e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68352e-36  4.57048e-37  1.27699e-38  8.13283e-38  2.48023e-39  4.38654e-39  8.20588e-45  1.69099e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85965, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         5.19402e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406566, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.63979, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            921.512      150.009      38.3035      47.7715      5.20056      613.079      59.7287      0.13936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.073871, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.10298e-08  6.10298e-08  7.33181e-09
      low eigenvalue method done, cpu time[sec] = 0.074965, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.1e-08  7.33e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.61e-09  7.33e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.33181e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03489e-36  2.62438e-37  7.43366e-39  4.51246e-38  1.40836e-39  3.31522e-39  8.36971e-45  1.68979e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         6.92537e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.404994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.64889, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            691.134      112.507      28.7276      35.8286      3.90042      459.809      44.7965      0.10452
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039571, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003267, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.063292, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.75875e-08  4.75875e-08  5.03261e-09
      low eigenvalue method done, cpu time[sec] = 0.064415, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.76e-08  5.03e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.36e-09  5.03e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.03261e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.18036e-37  1.73906e-37   4.9868e-39  2.93193e-38  9.29628e-40  2.63467e-39  8.52029e-45  1.69096e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85333, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         8.65671e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406614, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.66856, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            552.907      90.0054      22.9821      28.6629      3.12034      367.847      35.8372    0.0836158
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039566, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003266, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05011, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.91134e-08  3.91134e-08  3.71845e-09
      low eigenvalue method done, cpu time[sec] = 0.051205, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.91e-08  3.72e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-09  3.72e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.71845e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.34592e-37  1.25134e-37  3.62653e-39  2.08251e-38  6.68162e-40  2.16615e-39  8.65083e-45  1.69085e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85951, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.405212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.68557, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            460.756      75.0045      19.1518      23.8857      2.60028      306.539      29.8643    0.0696799
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039775, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043356, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.32585e-08  3.32585e-08  2.88382e-09
      low eigenvalue method done, cpu time[sec] = 0.043562, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.33e-08  2.88e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.03e-09  2.88e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.88382e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.16998e-37  9.50275e-38  2.77949e-39  1.56692e-38  5.07475e-40   1.8252e-39  8.75836e-45  1.69135e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86684, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.21194e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.68143, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            394.934      64.2895      16.4158      20.4735      2.22881      262.748       25.598    0.0597256
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.044556, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89601e-08  2.89601e-08  2.31495e-09
      low eigenvalue method done, cpu time[sec] = 0.045663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.9e-08  2.31e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-09  2.31e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.31495e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36275e-37  7.49747e-38  2.21074e-39  1.22769e-38  4.00689e-40  1.56687e-39   8.8423e-45  1.69095e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.86768, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.38507e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.405857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.48952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            345.567      56.2533      14.3638      17.9143      1.95021      229.905      22.3983    0.0522599
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.18064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.22375, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.5665e-08  2.56649e-08  1.90699e-09
      low eigenvalue method done, cpu time[sec] = 0.224982, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-08  1.91e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.33e-09  1.91e-09         1
         *Z       ---       ---  5.56e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.90699e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.78052e-37  6.08673e-38  1.80765e-39  9.91271e-39  3.25645e-40  1.36501e-39  8.90351e-45   1.6903e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.85887, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 480 K
      Energy reference = 30122 1/cm
      Energy step      = 80 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006362
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.465048
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.269703
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.262909
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.39865
         W1 Well: minimal relaxation eigenvalue = 0.0839236
         W1 Well: maximal relaxation eigenvalue = 0.987337
         W1 Well:       grid size = 438
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4919 1/cm
         B1 Barrier:        grid size = 377
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 374
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 435
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4679 1/cm
         B4 Barrier:        grid size = 454
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23159 1/cm => truncating
         B5 Barrier:        grid size = 666
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23159 1/cm
         B6 Barrier:        grid size = 358
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1481 1/cm
         B7 Barrier:        grid size = 318
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16761 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.77562, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 438
      MasterEquation::Barrier::truncate: real weight = 2.86139e+45
      MasterEquation::Barrier::truncate: effective weight = 1.043e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 438
      MasterEquation::Barrier::truncate: real weight = 1.55968e+44
      MasterEquation::Barrier::truncate: effective weight = 4.54124e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4919  -4919 2.42e+09 7.37e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 1.21e+15
         B2    202 1.99e+14
         B3  -4679 5.11e+13
         B4  -4919 6.36e+13
         B5  -4919 6.94e+12
         B6   1482 8.14e+14
         B7   4682 8.02e+13
         B8  16762 1.97e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.34e-09  1.94e-08  1.26e-13  1.01e-15  4.06e-39  1.46e-05     0.449  1.12e+16
          R  1.07e+08         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1  5.17e+07     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  7.93e+12   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  9.91e+14  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  2.47e+38   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  6.87e+04  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6      2.23  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  8.92e-17  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.01e+15  6.25e+15  4.07e+10  3.26e+08  1.31e-15   4.7e+18  1.45e+23  3.62e+39
          R  3.32e-16         1      2.07  1.35e-05  1.08e-07  4.34e-31  1.56e+03   4.8e+07   1.2e+24
         P1   1.6e-16     0.483         1  6.52e-06  5.21e-08   2.1e-31       752  2.32e+07  5.79e+23
         P2  2.46e-11   7.4e+04  1.53e+05         1     0.008  3.22e-26  1.15e+08  3.56e+12  8.89e+28
         P3  3.07e-09  9.25e+06  1.92e+07       125         1  4.02e-24  1.44e+10  4.45e+14  1.11e+31
         P4  7.64e+14   2.3e+30  4.77e+30  3.11e+25  2.49e+23         1  3.59e+33  1.11e+38  2.76e+54
         P5  2.13e-19  0.000642   0.00133  8.67e-09  6.93e-11  2.79e-34         1  3.08e+04   7.7e+20
         P6   6.9e-24  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.04e-39  3.24e-05         1   2.5e+16
         P7  2.76e-40  8.33e-25  1.73e-24  1.12e-29     9e-32  3.62e-55   1.3e-21     4e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.78927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+08
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.393476, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.3548, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14426.3      2371.83      608.382      756.992      82.6617      9697.16       955.43      2.34439
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.31164, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003181, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.354153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.00383e-07  6.00383e-07  1.50398e-07
      low eigenvalue method done, cpu time[sec] = 0.355279, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     6e-07   1.5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.7e-08   1.5e-07         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.50398e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10754e-34   4.5197e-35  1.37037e-36  1.21258e-35  3.21451e-37  7.18849e-38  8.09502e-44  3.71018e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.81618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.34415, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4808.78       790.61      202.794      252.331      27.5539      3232.39      318.477     0.781463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.251112, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.293509, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.71507e-07  2.71507e-07  5.78973e-08
      low eigenvalue method done, cpu time[sec] = 0.294658, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.72e-07  5.79e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-08  5.79e-08         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.78973e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.62082e-35  1.54072e-35  4.29374e-37  3.18444e-36  9.06429e-38  6.20634e-38  8.15545e-44  3.72927e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74608, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.70727e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394149, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.21968, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2885.27      474.366      121.676      151.398      16.5323      1939.43      191.086     0.468878
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.374517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003198, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.416562, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.83844e-07  1.83844e-07   3.4594e-08
      low eigenvalue method done, cpu time[sec] = 0.417693, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-07  3.46e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-08  3.46e-08         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.4594e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.8457e-35  8.62471e-36  2.38639e-37  1.64493e-36   4.8357e-38  5.24834e-38   8.2194e-44  3.73216e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.73815, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         2.39018e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.395072, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.32723, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2060.91      338.833      86.9118      108.142      11.8088      1385.31       136.49     0.334913
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.269119, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.311267, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.4098e-07   1.4098e-07  2.40058e-08
      low eigenvalue method done, cpu time[sec] = 0.312703, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-07   2.4e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-08   2.4e-08         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.40058e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.00988e-35  5.72753e-36  1.58967e-37  1.04724e-36  3.14321e-38  4.50929e-38  8.28575e-44  3.73243e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.60831, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.07309e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1602.93      263.537      67.5981      84.1102      9.18463      1077.46      106.159     0.260488
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.228735, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.271411, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15088e-07  1.15088e-07  1.80217e-08
      low eigenvalue method done, cpu time[sec] = 0.272545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-07   1.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-08   1.8e-08         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.80217e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52719e-35  4.16072e-36  1.16124e-37  7.40669e-37   2.2571e-38    3.937e-38  8.35333e-44   3.7355e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74905, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394855, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1442.63      237.183      60.8382      75.6992      8.26617      969.716       95.543     0.234439
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.223394, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003168, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.265382, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05577e-07  1.05577e-07  1.59241e-08
      low eigenvalue method done, cpu time[sec] = 0.266513, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.59e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.72e-09  1.59e-08         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.59241e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35592e-35  3.62633e-36  1.01519e-37  6.39038e-37  1.95965e-38  3.69786e-38  8.38723e-44  3.73373e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74281, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         5.12181e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394341, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37317, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            961.756      158.122      40.5588      50.4661      5.51078      646.477      63.6953     0.156293
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.224946, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.267094, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.52698e-08  7.52698e-08  9.69922e-09
      low eigenvalue method done, cpu time[sec] = 0.26823, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.53e-08   9.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.89e-09   9.7e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.69922e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.40023e-36  2.09662e-36   5.9582e-38  3.57273e-37  1.12176e-38  2.81415e-38  8.55323e-44  3.73315e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74574, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         6.82909e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.39358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.39843, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            721.317      118.591      30.4191      37.8496      4.13309      484.858      47.7715     0.117219
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.199433, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.241533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.88495e-08  5.88495e-08  6.69534e-09
      low eigenvalue method done, cpu time[sec] = 0.242656, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.88e-08   6.7e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.37e-09   6.7e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.69534e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.86113e-36  1.39621e-36  4.02051e-38  2.33394e-37  7.44719e-39  2.24837e-38  8.70551e-44  3.73522e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         8.53636e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.393821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.38057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            577.053      94.8732      24.3353      30.2797      3.30647      387.886      38.2172    0.0937755
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.216721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003178, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.258923, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.84635e-08  4.84635e-08  4.96882e-09
      low eigenvalue method done, cpu time[sec] = 0.260038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.85e-08  4.97e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.41e-09  4.97e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.96882e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.38286e-36  1.00851e-36  2.93718e-38  1.66471e-37  5.37654e-39  1.85652e-38  8.83744e-44  3.73621e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74508, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.393252, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.3854, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            480.878       79.061      20.2794      25.2331      2.75539      323.239      31.8477    0.0781463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.213249, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.254969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.12697e-08  4.12697e-08  3.86742e-09
      low eigenvalue method done, cpu time[sec] = 0.256098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.13e-08  3.87e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.74e-09  3.87e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.86742e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.43103e-36  7.68266e-37  2.25955e-38  1.25682e-37  4.09839e-39     1.57e-38  8.94619e-44  3.73529e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.61641, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.19509e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.393411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37584, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            412.181      67.7666      17.3824      21.6283      2.36176      277.062       27.298    0.0669825
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.222367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.26404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.59782e-08  3.59781e-08  3.11395e-09
      low eigenvalue method done, cpu time[sec] = 0.26518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.6e-08  3.11e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-09  3.11e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.11395e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.77521e-36  6.07741e-37  1.80283e-38  9.87531e-38  3.24589e-39  1.35202e-38  9.03126e-44  3.73564e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74645, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.36582e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.28739, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            360.658      59.2957      15.2096      18.9248      2.06654      242.429      23.8857    0.0586097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.30673, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003168, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.348687, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19152e-08  3.19152e-08  2.57189e-09
      low eigenvalue method done, cpu time[sec] = 0.3498, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-08  2.57e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.88e-09  2.57e-09         1
         *Z       ---       ---  2.99e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57189e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.3007e-36  4.94505e-37  1.47811e-38  7.99316e-38  2.64492e-39  1.18109e-38  9.09355e-44  3.73524e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.74208, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 490 K
      Energy reference = 30399 1/cm
      Energy step      = 82 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007149
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.45757
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.261656
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.251585
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.35445
         W1 Well: minimal relaxation eigenvalue = 0.0833273
         W1 Well: maximal relaxation eigenvalue = 0.986311
         W1 Well:       grid size = 432
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5025 1/cm
         B1 Barrier:        grid size = 371
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -23 1/cm
         B2 Barrier:        grid size = 369
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 140 1/cm
         B3 Barrier:        grid size = 427
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4615 1/cm
         B4 Barrier:        grid size = 447
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6255 1/cm
         B5 Barrier: nonpositive number of states at -23147 1/cm => truncating
         B5 Barrier:        grid size = 653
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23147 1/cm
         B6 Barrier:        grid size = 353
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1452 1/cm
         B7 Barrier:        grid size = 314
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4650 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16705 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.70327, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 432
      MasterEquation::Barrier::truncate: real weight = 9.76935e+44
      MasterEquation::Barrier::truncate: effective weight = 3.65002e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 432
      MasterEquation::Barrier::truncate: real weight = 4.689e+43
      MasterEquation::Barrier::truncate: effective weight = 1.49109e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5025  -5025 2.34e+09 7.72e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -23  1.3e+15
         B2    141 2.17e+14
         B3  -4615 5.58e+13
         B4  -5025 6.93e+13
         B5  -5025 7.59e+12
         B6   1453 8.86e+14
         B7   4651 8.83e+13
         B8  16705 2.28e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.26e-09  1.69e-08  1.48e-13  1.31e-15  1.61e-38  1.18e-05     0.303  3.66e+15
          R  1.21e+08         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  5.91e+07     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  6.74e+12  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3  7.62e+14  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4   6.2e+37  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5  8.45e+04  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6       3.3  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7  2.74e-16  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.19e+14  8.58e+14  7.53e+09  6.66e+07  8.18e-16     6e+17  1.54e+22  1.85e+38
          R  2.39e-15         1      2.05   1.8e-05  1.59e-07  1.95e-30  1.43e+03  3.67e+07  4.43e+23
         P1  1.16e-15     0.488         1  8.77e-06  7.76e-08  9.53e-31       699  1.79e+07  2.16e+23
         P2  1.33e-10  5.56e+04  1.14e+05         1   0.00884  1.09e-25  7.97e+07  2.04e+12  2.46e+28
         P3   1.5e-08  6.29e+06  1.29e+07       113         1  1.23e-23  9.02e+09  2.31e+14  2.79e+30
         P4  1.22e+15  5.12e+29  1.05e+30  9.21e+24  8.14e+22         1  7.34e+32  1.88e+37  2.27e+53
         P5  1.67e-18  0.000698   0.00143  1.25e-08  1.11e-10  1.36e-33         1  2.56e+04  3.09e+20
         P6  6.51e-23  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.32e-38  3.91e-05         1  1.21e+16
         P7  5.39e-39  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.41e-54  3.24e-21  8.28e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.71761, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+08
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383879, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.11227, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15046.2      2498.28      643.696      799.088      87.5228      10217.1      1017.89      2.62332
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.504765, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003076, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.545817, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.20043e-07  6.20043e-07  1.63405e-07
      low eigenvalue method done, cpu time[sec] = 0.546926, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.2e-07  1.63e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.85e-08  1.63e-07         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63405e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.88573e-34  3.18491e-34  9.60304e-36  8.41696e-35  2.23915e-36  5.46107e-37  7.51088e-43  7.30851e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383635, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.08761, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5015.39      832.759      214.565      266.363      29.1743      3405.68      339.297      0.87444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.434846, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.475717, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.8491e-07   2.8491e-07  6.39901e-08
      low eigenvalue method done, cpu time[sec] = 0.477359, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.85e-07   6.4e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.65e-08   6.4e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.39901e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.34486e-34  1.10167e-34  3.06529e-36  2.25081e-35  6.43414e-37  4.73608e-37  7.56671e-43  7.27305e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.63528, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.68407e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.38399, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.09914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3009.23      499.656      128.739      159.818      17.5046      2043.41      203.578     0.524664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.439353, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003048, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.480704, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.94175e-07  1.94175e-07  3.85713e-08
      low eigenvalue method done, cpu time[sec] = 0.481818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.94e-07  3.86e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-08  3.86e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.85713e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.07769e-34   6.2144e-35  1.71958e-36  1.17303e-35  3.46463e-37  4.02354e-37  7.62575e-43  7.26879e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65122, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          2.3577e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.382211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9513, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2149.45      356.897      91.9566      114.155      12.5033      1459.58      145.413      0.37476
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.583872, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003031, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.625582, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.49487e-07  1.49487e-07  2.69277e-08
      low eigenvalue method done, cpu time[sec] = 0.627288, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-07  2.69e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-08  2.69e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.69277e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.47619e-34   4.1488e-35  1.15279e-36  7.51307e-36  2.26628e-37  3.47062e-37  7.68692e-43  7.26486e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64439, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.03132e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383681, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1323, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1671.8      277.586      71.5218      88.7875      9.72476      1135.23      113.099      0.29148
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.390226, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003047, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.431325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22368e-07  1.22368e-07   2.0309e-08
      low eigenvalue method done, cpu time[sec] = 0.432462, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-07  2.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-08  2.03e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.0309e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12681e-34  3.02615e-35  8.46206e-37  5.33797e-36  1.63522e-37  3.04042e-37  7.74914e-43  7.26686e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.63699, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.382728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.07331, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1504.62      249.828      64.3696      79.9088      8.75228      1021.71      101.789     0.262332
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.471519, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.512326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.1238e-07   1.1238e-07  1.79805e-08
      low eigenvalue method done, cpu time[sec] = 0.513879, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-07   1.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-08   1.8e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79805e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00238e-34  2.64205e-35  7.41296e-37  4.61439e-36  1.42261e-37  2.86009e-37  7.78033e-43  7.26878e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          5.0522e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384141, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.07987, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1003.08      166.552      42.9131      53.2725      5.83486      681.137      67.8594     0.174888
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.467933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003034, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.5088, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    8.044e-08    8.044e-08  1.10362e-08
      low eigenvalue method done, cpu time[sec] = 0.51, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.04e-08   1.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.32e-09   1.1e-08         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10362e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.25739e-35  1.53791e-35  4.38576e-37  2.59915e-36  8.20804e-38  2.19053e-37   7.9328e-43  7.26792e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.66332, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         6.73627e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.17182, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            752.308      124.914      32.1848      39.9544      4.37614      510.853      50.8945     0.131166
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.376231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003037, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.417183, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.30537e-08  6.30537e-08   7.6606e-09
      low eigenvalue method done, cpu time[sec] = 0.418343, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.31e-08  7.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.71e-09  7.66e-09         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.6606e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.39004e-35  1.02914e-35  2.97655e-37  1.70701e-36  5.48013e-38  1.75887e-37  8.07248e-43  7.26999e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6596, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         8.42034e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.18129, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            601.847      99.9311      25.7478      31.9635      3.50091      408.682      40.7156     0.104933
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.36141, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00304, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.402421, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.20216e-08  5.20216e-08  5.70979e-09
      low eigenvalue method done, cpu time[sec] = 0.40361, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.2e-08  5.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.7e-09  5.71e-09         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.70979e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.29693e-35  7.46185e-36  2.18431e-37  1.22258e-36  3.97385e-38  1.45828e-37   8.1935e-43  7.26879e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65668, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.38316, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.15814, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            501.539      83.2759      21.4565      26.6363      2.91743      340.568      33.9297     0.087444
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.385188, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003034, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.426346, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.43622e-08  4.43622e-08  4.45989e-09
      low eigenvalue method done, cpu time[sec] = 0.427847, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.44e-08  4.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     4e-09  4.46e-09         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.45989e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.59002e-35  5.70194e-36  1.68654e-37  9.26129e-37  3.04006e-38  1.23749e-37  8.29338e-43  7.26897e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65722, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.17885e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.12789, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             429.89      71.3794      18.3913      22.8311      2.50065      291.916      29.0826     0.074952
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.394338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003036, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.434966, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.87176e-08  3.87176e-08  3.60173e-09
      low eigenvalue method done, cpu time[sec] = 0.436118, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.87e-08   3.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.48e-09   3.6e-09         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.60173e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10119e-35  4.52231e-36  1.34982e-37  7.29754e-37  2.41499e-38  1.06888e-37  8.37174e-43  7.27081e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.63421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.34725e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.14366, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            376.154      62.4569      16.0924      19.9772      2.18807      255.426      25.4473     0.065583
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.374058, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003042, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.41525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.4377e-08   3.4377e-08  2.98245e-09
      low eigenvalue method done, cpu time[sec] = 0.416433, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-08  2.98e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.09e-09  2.98e-09         1
         *Z       ---       ---  1.77e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.98245e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7464e-35  3.68797e-36  1.10965e-37  5.92106e-37  1.97299e-38  9.36217e-38  8.42944e-43  7.26968e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.63123, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 500 K
      Energy reference = 30677 1/cm
      Energy step      = 83 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006886
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.457712
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.260583
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.253019
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.32892
         W1 Well: minimal relaxation eigenvalue = 0.0827723
         W1 Well: maximal relaxation eigenvalue = 0.988284
         W1 Well:       grid size = 431
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5095 1/cm
         B1 Barrier:        grid size = 370
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -33 1/cm
         B2 Barrier:        grid size = 368
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 132 1/cm
         B3 Barrier:        grid size = 426
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 445
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6258 1/cm
         B5 Barrier: nonpositive number of states at -23107 1/cm => truncating
         B5 Barrier:        grid size = 648
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23107 1/cm
         B6 Barrier:        grid size = 352
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1461 1/cm
         B7 Barrier:        grid size = 313
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16733 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.68124, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 431
      MasterEquation::Barrier::truncate: real weight = 3.49043e+44
      MasterEquation::Barrier::truncate: effective weight = 1.31999e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 431
      MasterEquation::Barrier::truncate: real weight = 1.5105e+43
      MasterEquation::Barrier::truncate: effective weight = 5.08076e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5095  -5095 2.28e+09 8.08e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -33 1.41e+15
         B2    133 2.36e+14
         B3  -4681  6.1e+13
         B4  -5095 7.55e+13
         B5  -5095  8.3e+12
         B6   1462 9.64e+14
         B7   4699 9.71e+13
         B8  16733 2.63e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.78e-09  1.37e-08   1.6e-13  1.56e-15   5.6e-38  8.96e-06     0.192  1.15e+15
          R  1.48e+08         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.28e+07     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2  6.24e+12  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3  6.41e+14  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.79e+37  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5  1.12e+05  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6      5.21  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7  8.68e-16  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   6.3e+13  1.28e+14  1.49e+09  1.45e+07   5.2e-16  8.33e+16  1.78e+21  1.07e+37
          R  1.59e-14         1      2.03  2.37e-05   2.3e-07  8.26e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.83e-15     0.493         1  1.17e-05  1.14e-07  4.08e-30       652   1.4e+07  8.38e+22
         P2  6.71e-10  4.23e+04  8.57e+04         1   0.00973  3.49e-25  5.59e+07   1.2e+12  7.18e+27
         P3   6.9e-08  4.34e+06  8.81e+06       103         1  3.59e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.92e+15  1.21e+29  2.45e+29  2.86e+24  2.79e+22         1   1.6e+32  3.42e+36  2.06e+52
         P5   1.2e-17  0.000756   0.00153  1.79e-08  1.74e-10  6.25e-33         1  2.14e+04  1.29e+20
         P6  5.61e-22  3.53e-08  7.17e-08  8.36e-13  8.14e-15  2.92e-37  4.67e-05         1  6.01e+15
         P7  9.35e-38  5.88e-24  1.19e-23  1.39e-28  1.35e-30  4.86e-53  7.78e-21  1.66e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.69495, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+08
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.384053, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.13005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15682.2      2629.63      680.539      842.907      92.5982      10756.3      1083.41      2.92973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.465403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003055, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.506552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.99813e-07  6.99813e-07  1.93507e-07
      low eigenvalue method done, cpu time[sec] = 0.5077, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     7e-07  1.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.57e-08  1.94e-07         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93507e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.18463e-33   2.0726e-33  6.21752e-35  5.39995e-34  1.44145e-35  3.80979e-36  6.36281e-42  1.25745e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7082, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+08
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.3838, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.17143, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5227.41      876.545      226.846      280.969      30.8661      3585.43      361.137     0.976578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.394129, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003035, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.435268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.26626e-07  3.26626e-07  7.70417e-08
      low eigenvalue method done, cpu time[sec] = 0.436413, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.27e-07   7.7e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-08   7.7e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.70417e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2345e-33  7.27149e-34  2.02068e-35  1.46957e-34  4.21831e-36  3.32312e-36   6.4098e-42  1.25647e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.53312, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.66168e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.381404, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.13489, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3136.45      525.927      136.108      168.581      18.5196      2151.26      216.682     0.585947
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.399015, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003037, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.439917, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2403e-07   2.2403e-07  4.68348e-08
      low eigenvalue method done, cpu time[sec] = 0.44105, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-07  4.68e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-08  4.68e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.68348e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39957e-33  4.13243e-34  1.14389e-35  7.72525e-35  2.29211e-36  2.83727e-36  6.45945e-42  1.25645e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64574, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.32635e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382362, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.13985, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2240.32      375.662      97.2198      120.415      13.2283      1536.61      154.773     0.418533
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.396734, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003041, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.437805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.73142e-07  1.73142e-07   3.2889e-08
      low eigenvalue method done, cpu time[sec] = 0.439344, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-07  3.29e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-08  3.29e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.2889e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00014e-33  2.77314e-34  7.71616e-36  4.97696e-35  1.50857e-36  2.45739e-36  6.51083e-42  1.25567e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64662, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.99103e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.381706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.13881, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1742.47      292.182      75.6154      93.6563      10.2887      1195.14      120.379     0.325526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.402873, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00305, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.443881, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.42121e-07  1.42121e-07  2.49168e-08
      low eigenvalue method done, cpu time[sec] = 0.445026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-07  2.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-08  2.49e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49168e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.66816e-34  2.03079e-34  5.69093e-36  3.55187e-35  1.09361e-36  2.16021e-36  6.56304e-42  1.25597e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6515, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.381734, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.12544, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1568.22      262.963      68.0539      84.2907      9.25982      1075.63      108.341     0.292973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.414344, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003055, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.45475, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30665e-07  1.30665e-07  2.21023e-08
      low eigenvalue method done, cpu time[sec] = 0.455334, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-07  2.21e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-08  2.21e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21023e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.8343e-34  1.77603e-34  4.99541e-36  3.07619e-35  9.53318e-37  2.03521e-36  6.58919e-42    1.256e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64707, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         4.98504e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382076, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1464, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1045.48      175.309      45.3692      56.1938      6.17321      717.087      72.2273     0.195316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.391666, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003059, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.432012, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.39026e-08  9.39026e-08  1.36682e-08
      low eigenvalue method done, cpu time[sec] = 0.432594, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.39e-08  1.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.5e-09  1.37e-08         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36682e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.29805e-34  1.04067e-34  2.97873e-36  1.74546e-35  5.54307e-37  1.56874e-36  6.71694e-42  1.25618e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64827, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         6.64672e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.381165, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.08768, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            784.112      131.482      34.0269      42.1453      4.62991      537.815      54.1705     0.146487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.443229, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003053, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.484329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.3798e-08   7.3798e-08  9.53899e-09
      low eigenvalue method done, cpu time[sec] = 0.485837, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.38e-08  9.54e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.65e-09  9.54e-09         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.53899e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.03162e-34  6.99732e-35  2.03307e-36  1.15236e-35  3.72147e-37  1.26585e-36  6.83391e-42  1.25616e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.63975, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1          8.3084e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.379836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.17553, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             627.29      105.185      27.2215      33.7163      3.70393      430.252      43.3364     0.117189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.361152, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003086, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.401748, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.10004e-08  6.10004e-08  7.13999e-09
      low eigenvalue method done, cpu time[sec] = 0.4023, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.1e-08  7.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.48e-09  7.14e-09         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.13999e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.28633e-34   5.0924e-35  1.49854e-36  8.28704e-36  2.71028e-37  1.05376e-36  6.93535e-42  1.25613e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64353, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382733, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.99089, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            522.741      87.6545      22.6846      28.0969      3.08661      358.543      36.1137    0.0976578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.538019, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003037, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.579337, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.2094e-08   5.2094e-08  5.59638e-09
      low eigenvalue method done, cpu time[sec] = 0.580436, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.21e-08   5.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.67e-09   5.6e-09         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.59638e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8023e-34  3.90321e-35  1.16123e-36  6.29843e-36  2.08075e-37  8.97277e-37  7.01927e-42   1.2562e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64034, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.16318e+10
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.15653, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            448.064      75.1324       19.444       24.083      2.64566      307.323      30.9546    0.0837067
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.376139, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003056, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.417352, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55181e-08  4.55181e-08  4.53282e-09
      low eigenvalue method done, cpu time[sec] = 0.418482, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.55e-08  4.53e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.07e-09  4.53e-09         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.53282e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46641e-34  3.10368e-35  9.32226e-37   4.9768e-36  1.65786e-37  7.77313e-37  7.08539e-42  1.25622e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64326, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.32934e+10
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382634, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.16666, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            392.056      65.7409      17.0135      21.0727      2.31495      268.908      27.0853    0.0732433
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.367138, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.408381, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.04536e-08  4.04536e-08  3.76297e-09
      low eigenvalue method done, cpu time[sec] = 0.409922, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.05e-08  3.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-09  3.76e-09         1
         *Z       ---       ---  1.03e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.76297e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.22188e-34   2.5367e-35  7.68383e-37  4.04779e-36  1.35793e-37  6.82616e-37  7.13442e-42  1.25651e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.64644, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 510 K
      Energy reference = 30956 1/cm
      Energy step      = 85 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007158
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.450181
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.254504
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.248618
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.29441
         W1 Well: minimal relaxation eigenvalue = 0.0822047
         W1 Well: maximal relaxation eigenvalue = 0.987271
         W1 Well:       grid size = 425
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5169 1/cm
         B1 Barrier:        grid size = 365
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -69 1/cm
         B2 Barrier:        grid size = 362
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 185 1/cm
         B3 Barrier:        grid size = 419
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 437
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6189 1/cm
         B5 Barrier: nonpositive number of states at -23105 1/cm => truncating
         B5 Barrier:        grid size = 636
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23105 1/cm
         B6 Barrier:        grid size = 347
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1460 1/cm
         B7 Barrier:        grid size = 309
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4690 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16760 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.62084, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 425
      MasterEquation::Barrier::truncate: real weight = 1.30151e+44
      MasterEquation::Barrier::truncate: effective weight = 5.04058e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 425
      MasterEquation::Barrier::truncate: real weight = 5.17712e+42
      MasterEquation::Barrier::truncate: effective weight = 1.84214e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5169  -5169 2.23e+09 8.46e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -69 1.51e+15
         B2    186 2.56e+14
         B3  -4660 6.66e+13
         B4  -5169 8.23e+13
         B5  -5169 9.06e+12
         B6   1461 1.05e+15
         B7   4691 1.07e+14
         B8  16761 3.02e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.56e-09  1.12e-08  1.71e-13  1.83e-15  1.84e-37   6.8e-06     0.123  3.77e+14
          R   1.8e+08         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  8.96e+07     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2  5.84e+12  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  5.47e+14  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4  5.44e+36  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5  1.47e+05  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6      8.16  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7  2.66e-15  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.02e+13  2.05e+13  3.14e+08  3.35e+06  3.37e-16  1.25e+16  2.25e+20   6.9e+35
          R  9.81e-14         1      2.01  3.08e-05  3.29e-07  3.31e-29  1.22e+03   2.2e+07  6.78e+22
         P1  4.89e-14     0.498         1  1.53e-05  1.64e-07  1.65e-29       609   1.1e+07  3.37e+22
         P2  3.19e-09  3.25e+04  6.52e+04         1    0.0107  1.07e-24  3.97e+07  7.16e+11   2.2e+27
         P3  2.99e-07  3.04e+06  6.11e+06      93.7         1  1.01e-22  3.72e+09  6.71e+13  2.06e+29
         P4  2.97e+15  3.02e+28  6.07e+28  9.31e+23  9.94e+21         1   3.7e+31  6.67e+35  2.05e+51
         P5  8.02e-17  0.000818   0.00164  2.52e-08  2.69e-10   2.7e-32         1   1.8e+04  5.54e+19
         P6  4.45e-21  4.54e-08   9.1e-08   1.4e-12  1.49e-14   1.5e-36  5.55e-05         1  3.07e+15
         P7  1.45e-36  1.48e-23  2.96e-23  4.54e-28  4.85e-30  4.88e-52  1.81e-20  3.25e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.63506, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+08
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372249, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16334.8      2765.98      718.955      888.496      97.8942      11315.3      1152.09      3.26581
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.680755, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002928, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.720535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.84215e-07  7.84216e-07  2.26585e-07
      low eigenvalue method done, cpu time[sec] = 0.721678, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.84e-07  2.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.33e-08  2.27e-07         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26585e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.16352e-32  1.25252e-32  3.73876e-34  3.21899e-33  8.62095e-35  2.46211e-35  4.96619e-41  1.94165e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65215, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+08
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.370995, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.89921, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5444.95      921.994      239.652      296.165      32.6314      3771.76      384.029       1.0886
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.577356, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002909, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617193, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71556e-07  3.71556e-07  9.16683e-08
      low eigenvalue method done, cpu time[sec] = 0.61829, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-07  9.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.42e-08  9.17e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.16683e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38473e-32  4.45487e-33  1.23652e-34  8.91048e-34  2.56793e-35   2.1593e-35  5.00273e-41  1.93973e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55253, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.64006e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.37204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.90542, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3266.97      553.196      143.791      177.699      19.5788      2263.06      230.417     0.653163
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.577834, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002914, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.617296, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56424e-07  2.56424e-07  5.61894e-08
      low eigenvalue method done, cpu time[sec] = 0.618427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.56e-07  5.62e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.35e-08  5.62e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.61894e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.74378e-33  2.55013e-33   7.0619e-35   4.7237e-34   1.4077e-35  1.85246e-35  5.04129e-41  1.93997e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.29609e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.37182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.90995, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2333.55       395.14      102.708      126.928      13.9849      1616.47      164.584     0.466545
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.571166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.61097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.98928e-07  1.98928e-07  3.96842e-08
      low eigenvalue method done, cpu time[sec] = 0.612079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.99e-07  3.97e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.81e-08  3.97e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.96842e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.28356e-33  1.71996e-33  4.79257e-35   3.0607e-34  9.32077e-36  1.61079e-35  5.08115e-41   1.9407e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55773, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.95211e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.370842, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.91955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1814.98      307.331      79.8838      98.7218      10.8771      1257.25       128.01     0.362868
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.558454, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.597713, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63722e-07  1.63722e-07  3.01973e-08
      low eigenvalue method done, cpu time[sec] = 0.598831, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-07  3.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-08  3.02e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.01973e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.83859e-33  1.26444e-33   3.5511e-35  2.19386e-34  6.78803e-36  1.42072e-35   5.1216e-41  1.94085e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55541, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372443, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1633.48      276.598      71.8955      88.8496      9.78942      1131.53      115.209     0.326581
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.557561, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002899, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.598365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50687e-07  1.50687e-07  2.68365e-08
      low eigenvalue method done, cpu time[sec] = 0.599527, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-07  2.68e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-08  2.68e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68364e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.3204e-33  1.10764e-33  3.12324e-35  1.90356e-34  5.92874e-36  1.34051e-35  5.14184e-41  1.94026e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58136, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         4.92019e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.356708, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.90579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1088.99      184.399      47.9303      59.2331      6.52628      754.353      76.8058     0.217721
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.584032, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.624061, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08718e-07  1.08718e-07   1.6718e-08
      low eigenvalue method done, cpu time[sec] = 0.625239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-07  1.67e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.79e-09  1.67e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.6718e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.73685e-33  6.53256e-34  1.87675e-35   1.0879e-34  3.47355e-36  1.03971e-35  5.24058e-41  1.94052e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55235, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         6.56025e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.371618, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.92657, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            816.742      138.299      35.9477      44.4248      4.89471      565.765      57.6043     0.163291
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.571842, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.612635, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.56607e-08  8.56607e-08  1.17296e-08
      low eigenvalue method done, cpu time[sec] = 0.61377, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.57e-08  1.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.69e-09  1.17e-08         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17296e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.94061e-33  4.41308e-34  1.28807e-35  7.21955e-35  2.34483e-36  8.43014e-36  5.33087e-41  1.94051e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.44551, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         8.20031e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.369822, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.9687, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            653.394      110.639      28.7582      35.5399      3.91577      452.612      46.0835     0.130633
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.529014, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002915, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.569245, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.09377e-08  7.09377e-08  8.81627e-09
      low eigenvalue method done, cpu time[sec] = 0.570354, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.09e-08  8.82e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.34e-09  8.82e-09         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.81627e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.46958e-33  3.22351e-34  9.53544e-36  5.21272e-35    1.715e-36  7.04544e-36  5.40917e-41  1.94083e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.373414, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75791, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            544.495      92.1994      23.9652      29.6165      3.26314      377.176      38.4029      0.10886
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738146, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002914, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.778352, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.06673e-08  6.06673e-08   6.9339e-09
      low eigenvalue method done, cpu time[sec] = 0.779856, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.07e-08  6.93e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.41e-09  6.93e-09         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.9339e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1624e-33   2.4782e-34  7.41547e-36  3.97488e-35  1.32125e-36  6.01925e-36  5.47402e-41  1.94099e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57486, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.14804e+10
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.370995, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.94567, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             466.71       79.028      20.5416      25.3856      2.79698      323.294      32.9168    0.0933089
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.552612, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.592746, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.30702e-08  5.30702e-08  5.63241e-09
      low eigenvalue method done, cpu time[sec] = 0.594248, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.31e-08  5.63e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-09  5.63e-09         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.63241e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.48485e-34  1.97559e-34  5.97104e-36  3.14952e-35  1.05584e-36  5.22961e-36  5.52524e-41  1.94107e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5741, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.31205e+10
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372176, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.94431, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            408.371      69.1495      17.9739      22.2124      2.44735      282.882      28.8022    0.0816453
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.55688, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002921, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.597055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.72103e-08  4.72103e-08  4.68753e-09
      low eigenvalue method done, cpu time[sec] = 0.598179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.72e-08  4.69e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.19e-09  4.69e-09         1
         *Z       ---       ---  6.06e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.68753e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.92291e-34  1.61825e-34  4.93445e-36  2.56773e-35   8.6703e-37  4.60426e-36  5.56341e-41  1.94109e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.58631, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 520 K
      Energy reference = 31233 1/cm
      Energy step      = 87 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008353
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.438218
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.247304
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.249642
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.27778
         W1 Well: minimal relaxation eigenvalue = 0.0816534
         W1 Well: maximal relaxation eigenvalue = 0.986298
         W1 Well:       grid size = 419
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5219 1/cm
         B1 Barrier:        grid size = 359
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = 0 1/cm
         B2 Barrier:        grid size = 357
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 412
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 430
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6177 1/cm
         B5 Barrier: nonpositive number of states at -23229 1/cm => truncating
         B5 Barrier:        grid size = 626
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23229 1/cm
         B6 Barrier:        grid size = 342
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 305
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4697 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16704 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.58938, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 419
      MasterEquation::Barrier::truncate: real weight = 5.05228e+43
      MasterEquation::Barrier::truncate: effective weight = 2.00273e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 419
      MasterEquation::Barrier::truncate: real weight = 1.87658e+42
      MasterEquation::Barrier::truncate: effective weight = 6.99101e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5219  -5219  2.2e+09 8.86e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1      0 1.63e+15
         B2    174 2.78e+14
         B3  -4611 7.26e+13
         B4  -5219 8.96e+13
         B5  -5219  9.9e+12
         B6   1479 1.14e+15
         B7   4698 1.17e+14
         B8  16704 3.48e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.32e-09  8.59e-09  1.71e-13     2e-15  5.42e-37   4.9e-06    0.0749  1.21e+14
          R  2.32e+08         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  1.16e+08     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2  5.84e+12  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3     5e+14  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4  1.85e+36  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  2.04e+05  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6      13.3  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  8.27e-15  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.77e+12  3.52e+12  7.01e+07  8.18e+05  2.22e-16  2.01e+15  3.07e+19  4.95e+34
          R  5.66e-13         1      1.99  3.97e-05  4.63e-07  1.25e-28  1.13e+03  1.73e+07   2.8e+22
         P1  2.84e-13     0.503         1  1.99e-05  2.33e-07  6.31e-29       571  8.72e+06  1.41e+22
         P2  1.43e-08  2.52e+04  5.01e+04         1    0.0117  3.16e-24  2.86e+07  4.37e+11  7.06e+26
         P3  1.22e-06  2.16e+06   4.3e+06      85.7         1  2.71e-22  2.45e+09  3.75e+13  6.05e+28
         P4  4.51e+15  7.97e+27  1.59e+28  3.16e+23  3.69e+21         1  9.05e+30  1.38e+35  2.23e+50
         P5  4.98e-16  0.000881   0.00175   3.5e-08  4.08e-10  1.11e-31         1  1.53e+04  2.47e+19
         P6  3.26e-20  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.23e-36  6.54e-05         1  1.61e+15
         P7  2.02e-35  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.48e-51  4.05e-20   6.2e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.60302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+08
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.361931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65671, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              17004       2907.5       758.99      935.905      103.417      11894.5      1224.02      3.63303
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848931, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002852, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.887873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.29245e-07  9.29246e-07  2.79926e-07
      low eigenvalue method done, cpu time[sec] = 0.888996, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.29e-07   2.8e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.66e-08   2.8e-07         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.79926e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79874e-31  7.05382e-32  2.09617e-33  1.78969e-32  4.80836e-34  1.47487e-34  3.57669e-40  2.70711e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+08
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.361875, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.68927, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5668.01      969.166      252.997      311.968      34.4725      3964.83      408.008      1.21101
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.757912, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002867, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.796658, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.46754e-07  4.46754e-07  1.15024e-07
      low eigenvalue method done, cpu time[sec] = 0.797771, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.47e-07  1.15e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.1e-08  1.15e-07         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.15024e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.99264e-32  2.54256e-32   7.0515e-34  5.03651e-33  1.45712e-34  1.30212e-34  3.60287e-40  2.69754e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48951, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.61917e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362635, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.67879, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3400.81        581.5      151.798      187.181      20.6835       2378.9      244.805     0.726606
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.765036, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002853, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.803737, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.10191e-07  3.10191e-07  7.10751e-08
      low eigenvalue method done, cpu time[sec] = 0.80487, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-07  7.11e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.83e-08  7.11e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.10751e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.08682e-32   1.4658e-32    4.062e-34  2.69202e-33  8.05668e-35  1.12292e-34  3.63047e-40  2.69731e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48976, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.26684e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.360464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.69466, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2429.15      415.357      108.427      133.701      14.7739      1699.21      174.861     0.519005
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.750447, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002871, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.78975, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.41537e-07  2.41537e-07  5.04778e-08
      low eigenvalue method done, cpu time[sec] = 0.790877, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.42e-07  5.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.19e-08  5.05e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.04778e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.67561e-32  9.93504e-33  2.77303e-34  1.75408e-33  5.36598e-35   9.8047e-35  3.65897e-40  2.69701e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48571, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.91451e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362199, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.7088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1889.34      323.055      84.3323      103.989      11.4908      1321.61      136.003      0.40367
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745256, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002842, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.783841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.99317e-07  1.99317e-07  3.85756e-08
      low eigenvalue method done, cpu time[sec] = 0.784949, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.99e-07  3.86e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-08  3.86e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.85756e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.84234e-32  7.33165e-33  2.06402e-34  1.26268e-33  3.92546e-35  8.67748e-35  3.68785e-40  2.69746e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.360481, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.70288, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1700.4       290.75       75.899      93.5905      10.3417      1189.45      122.402     0.363303
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.742532, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.782118, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.83645e-07  1.83645e-07   3.4345e-08
      low eigenvalue method done, cpu time[sec] = 0.783256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-07  3.43e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-08  3.43e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.4345e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.54252e-32  6.43295e-33  1.81883e-34  1.09758e-33  3.43508e-35  8.20002e-35  3.70229e-40  2.69746e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36721, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         4.85751e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.358278, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.70552, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1133.6      193.833      50.5994      62.3936       6.8945      792.965      81.6017     0.242202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745658, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00284, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.784908, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33016e-07  1.33016e-07  2.15496e-08
      low eigenvalue method done, cpu time[sec] = 0.786529, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-07  2.15e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-08  2.15e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15496e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62206e-32  3.81824e-33   1.1012e-34  6.31723e-34   2.0276e-35  6.39997e-35  3.77265e-40   2.6974e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49836, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         6.47668e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.360714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.55251, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            850.202      145.375      37.9495      46.7952      5.17087      594.724      61.2012     0.181652
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.89367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002838, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.933099, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05076e-07  1.05076e-07  1.51983e-08
      low eigenvalue method done, cpu time[sec] = 0.934708, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-07  1.52e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.39e-09  1.52e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51983e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.15609e-32  2.59138e-33  7.59921e-35  4.21361e-34  1.37611e-35  5.21427e-35  3.83695e-40  2.69751e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         8.09585e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.361614, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.70888, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            680.161        116.3      30.3596      37.4362       4.1367      475.779       48.961     0.145321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.734984, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00283, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.773912, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.71797e-08  8.71797e-08  1.14702e-08
      low eigenvalue method done, cpu time[sec] = 0.775034, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.72e-08  1.15e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.76e-09  1.15e-08         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14702e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.79027e-33  1.89973e-33  5.64967e-35  3.05443e-34  1.01072e-35  4.37492e-35  3.89272e-40  2.69769e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48771, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362561, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.71253, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            566.801      96.9166      25.2997      31.1968      3.44725      396.483      40.8008     0.121101
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.733786, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002842, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.772996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.46661e-08  7.46661e-08  9.05149e-09
      low eigenvalue method done, cpu time[sec] = 0.774132, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.47e-08  9.05e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.63e-09  9.05e-09         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.05149e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.97603e-33  1.46484e-33  4.40904e-35  2.33667e-34  7.81357e-36   3.7501e-35  3.93899e-40  2.69768e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49793, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.13342e+10
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.36309, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.72788, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             485.83      83.0714      21.6854      26.7401      2.95478      339.842      34.9721     0.103801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.720849, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002838, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.759245, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.53926e-08  6.53926e-08  7.37346e-09
      low eigenvalue method done, cpu time[sec] = 0.760351, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-08  7.37e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.79e-09  7.37e-09         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.37346e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.70832e-33   1.1707e-33  3.56077e-35  1.85655e-34  6.26219e-36   3.2675e-35  3.97566e-40  2.69787e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50226, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.29534e+10
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.361994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.72082, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            425.101      72.6874      18.9748      23.3976      2.58544      297.362      30.6006    0.0908258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.724444, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002844, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.763958, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82286e-08  5.82286e-08  6.15165e-09
      low eigenvalue method done, cpu time[sec] = 0.765122, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-08  6.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-09  6.15e-09         1
         *Z       ---       ---  3.55e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.15165e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.77998e-33  9.61035e-34   2.9502e-35  1.51719e-34  5.15536e-36  2.88406e-35  4.00314e-40  2.69802e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49698, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 530 K
      Energy reference = 31511 1/cm
      Energy step      = 88 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008257
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.439297
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.16631
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.240528
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.26811
         W1 Well: minimal relaxation eigenvalue = 0.081131
         W1 Well: maximal relaxation eigenvalue = 0.988171
         W1 Well:       grid size = 418
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5272 1/cm
         B1 Barrier:        grid size = 359
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 356
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 411
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4657 1/cm
         B4 Barrier:        grid size = 429
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6241 1/cm
         B5 Barrier: nonpositive number of states at -23137 1/cm => truncating
         B5 Barrier:        grid size = 621
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23136 1/cm
         B6 Barrier:        grid size = 341
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1503 1/cm
         B7 Barrier:        grid size = 305
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4671 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16727 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.48255, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 418
      MasterEquation::Barrier::truncate: real weight = 2.03707e+43
      MasterEquation::Barrier::truncate: effective weight = 8.16776e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 418
      MasterEquation::Barrier::truncate: real weight = 7.15693e+41
      MasterEquation::Barrier::truncate: effective weight = 2.7424e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5272  -5272 2.16e+09 9.27e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 1.75e+15
         B2    183 3.02e+14
         B3  -4657 7.92e+13
         B4  -5272 9.74e+13
         B5  -5272 1.08e+13
         B6   1504 1.24e+15
         B7   4672 1.28e+14
         B8  16727 3.99e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.45e-09  6.79e-09  1.74e-13  2.22e-15  1.56e-36  3.64e-06    0.0475  4.12e+13
          R   2.9e+08         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.47e+08     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  5.73e+12  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3  4.51e+14  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  6.41e+35  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  2.75e+05  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6      21.1  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7  2.42e-14  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.28e+11  6.46e+11  1.66e+07  2.11e+05  1.48e-16  3.46e+14  4.51e+18  3.92e+33
          R  3.05e-12         1      1.97  5.06e-05  6.43e-07  4.52e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.55e-12     0.507         1  2.57e-05  3.26e-07   2.3e-28       535  6.99e+06  6.07e+21
         P2  6.03e-08  1.98e+04  3.89e+04         1    0.0127  8.94e-24  2.08e+07  2.72e+11  2.36e+26
         P3  4.74e-06  1.55e+06  3.06e+06      78.7         1  7.03e-22  1.64e+09  2.14e+13  1.86e+28
         P4  6.74e+15  2.21e+27  4.36e+27  1.12e+23  1.42e+21         1  2.33e+30  3.04e+34  2.64e+49
         P5  2.89e-15  0.000948   0.00187   4.8e-08   6.1e-10  4.29e-31         1  1.31e+04  1.13e+19
         P6  2.22e-19  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.29e-35  7.66e-05         1  8.69e+14
         P7  2.55e-34  8.36e-23  1.65e-22  4.23e-27  5.38e-29  3.78e-50  8.82e-20  1.15e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.49683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+08
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.36029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.62711, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              17690      3054.26      800.692       985.18      109.175      12494.2      1299.33      4.03293
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.858258, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002823, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896515, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.08742e-06  1.08742e-06  3.40396e-07
      low eigenvalue method done, cpu time[sec] = 0.897743, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-06   3.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-07   3.4e-07         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.40396e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.56685e-31  3.71482e-31  1.09977e-32  9.31372e-32  2.51014e-33  8.28494e-34  2.39689e-39   3.3908e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.52432, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+08
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.359986, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5896.67      1018.09      266.897      328.393      36.3916      4164.74      433.108      1.34431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.770511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002822, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.809518, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.30201e-07  5.30201e-07  1.42001e-07
      low eigenvalue method done, cpu time[sec] = 0.810637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.3e-07  1.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.85e-08  1.42e-07         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.42001e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.31325e-31  1.35668e-31  3.76126e-33  2.66344e-32   7.7349e-34  7.34816e-34   2.4144e-39  3.39503e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46735, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.59896e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.26298, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.6277, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               3538      610.852      160.138      197.036      21.8349      2498.84      259.865     0.806586
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.794437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002812, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833559, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.7029e-07   3.7029e-07  8.84344e-08
      low eigenvalue method done, cpu time[sec] = 0.834786, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-07  8.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.36e-08  8.84e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.84344e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76616e-31  7.87576e-32  2.18491e-33  1.43506e-32  4.31274e-34  6.36449e-34  2.43286e-39  3.39309e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.23855e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.60084, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2527.14      436.323      114.385       140.74      15.5964      1784.89      185.618     0.576133
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.825186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002814, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.864307, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89379e-07  2.89379e-07   6.3148e-08
      low eigenvalue method done, cpu time[sec] = 0.865412, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.89e-07  6.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.62e-08  6.31e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3148e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.00942e-31  5.36398e-32   1.5002e-33  9.40193e-33  2.88893e-34  5.57737e-34  2.45188e-39  3.39429e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46633, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.87813e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360503, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63382, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1965.56      339.362      88.9658      109.464      12.1305      1388.25      144.369     0.448103
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002814, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.836339, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39412e-07  2.39412e-07  4.84603e-08
      low eigenvalue method done, cpu time[sec] = 0.837434, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-07  4.85e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-08  4.85e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.84603e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.56027e-31   3.9732e-32  1.12158e-33  6.79633e-33  2.12268e-34  4.95148e-34  2.47113e-39  3.39406e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.47155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360034, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64784, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               1769      305.426      80.0692       98.518      10.9175      1249.42      129.933     0.403293
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.783064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.821385, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.20818e-07  2.20818e-07  4.32225e-08
      low eigenvalue method done, cpu time[sec] = 0.821938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.21e-07  4.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.99e-08  4.32e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.32225e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39813e-31  3.49173e-32  9.90207e-34   5.9182e-33  1.86098e-34  4.68555e-34  2.48074e-39  3.39423e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46845, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         4.79689e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.359515, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63675, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1179.33      203.617      53.3795      65.6786      7.27831      832.947      86.6217     0.268862
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.788936, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002806, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.827305, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60557e-07  1.60557e-07  2.73103e-08
      low eigenvalue method done, cpu time[sec] = 0.827877, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-07  2.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-08  2.73e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.73103e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.9815e-32  2.08552e-32  6.03953e-34  3.42995e-33  1.10651e-34  3.67833e-34  2.52751e-39  3.39419e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46192, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         6.39585e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.35981, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65157, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            884.501      152.713      40.0346       49.259      5.45874       624.71      64.9663     0.201646
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784115, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002798, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.822265, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27154e-07  1.27154e-07  1.93594e-08
      low eigenvalue method done, cpu time[sec] = 0.822815, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  1.94e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-08  1.94e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93594e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.4336e-32  1.42186e-32  4.19009e-34  2.29923e-33  7.54946e-35  3.01049e-34  2.57015e-39  3.39448e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48112, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         7.99482e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            707.601       122.17      32.0277      39.4072      4.36699      499.768       51.973     0.161317
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.78519, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002795, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.823725, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05693e-07  1.05693e-07   1.4669e-08
      low eigenvalue method done, cpu time[sec] = 0.824275, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.37e-09  1.47e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4669e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.91113e-32  1.04609e-32  3.12822e-34  1.67322e-33  5.56783e-35  2.53532e-34  2.60711e-39  3.39459e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.47903, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.362454, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.66455, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            589.667      101.809      26.6897      32.8393      3.63916      416.474      43.3108     0.134431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77279, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002809, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.811241, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.06527e-08  9.06527e-08  1.16139e-08
      low eigenvalue method done, cpu time[sec] = 0.811781, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.07e-08  1.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.02e-09  1.16e-08         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16139e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91022e-32   8.0899e-33   2.4497e-34  1.28413e-33  4.31893e-35  2.18011e-34  2.63777e-39  3.39474e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48033, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.11927e+10
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360383, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65372, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            505.429      87.2646      22.8769       28.148      3.11928      356.977      37.1236     0.115227
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780136, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002794, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.819014, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.94861e-08  7.94861e-08  9.48728e-09
      low eigenvalue method done, cpu time[sec] = 0.820112, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.95e-08  9.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.01e-09  9.49e-09         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.48728e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.2085e-32  6.48153e-33  1.98419e-34  1.02304e-33  3.47136e-35  1.90478e-34   2.6621e-39  3.39504e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48212, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.27917e+10
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.362305, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65015, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             442.25      76.3566      20.0173      24.6295      2.72937      312.355      32.4831     0.100823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.785059, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002797, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.82422, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.08466e-08  7.08466e-08  7.93439e-09
      low eigenvalue method done, cpu time[sec] = 0.825841, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.08e-08  7.93e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.24e-09  7.93e-09         1
         *Z       ---       ---  2.14e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.93439e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.69316e-32   5.3322e-33  1.64812e-34  8.37992e-34  2.86492e-35  1.68535e-34  2.68038e-39  3.39507e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.47567, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 540 K
      Energy reference = 31790 1/cm
      Energy step      = 90 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007456
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.426516
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.240752
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.239193
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.21729
         W1 Well: minimal relaxation eigenvalue = 0.0805815
         W1 Well: maximal relaxation eigenvalue = 0.98725
         W1 Well:       grid size = 413
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5381 1/cm
         B1 Barrier:        grid size = 354
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -70 1/cm
         B2 Barrier:        grid size = 351
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 199 1/cm
         B3 Barrier:        grid size = 405
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 422
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23111 1/cm => truncating
         B5 Barrier:        grid size = 610
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23110 1/cm
         B6 Barrier:        grid size = 337
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1459 1/cm
         B7 Barrier:        grid size = 301
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16759 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.49665, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 413
      MasterEquation::Barrier::truncate: real weight = 8.51285e+42
      MasterEquation::Barrier::truncate: effective weight = 3.49086e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 413
      MasterEquation::Barrier::truncate: real weight = 2.85923e+41
      MasterEquation::Barrier::truncate: effective weight = 1.13584e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5381  -5381 2.08e+09  9.7e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -70 1.88e+15
         B2    200 3.28e+14
         B3  -4660 8.63e+13
         B4  -5381 1.06e+14
         B5  -5381 1.18e+13
         B6   1460 1.34e+15
         B7   4700 1.41e+14
         B8  16760 4.57e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.11e-09  6.07e-09  1.99e-13  2.75e-15  4.84e-36  3.06e-06    0.0343  1.64e+13
          R  3.22e+08         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1  1.65e+08     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2  5.03e+12  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  3.64e+14  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4  2.07e+35  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  3.27e+05   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6      29.2  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7   6.1e-14  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.46e+10  1.26e+11  4.14e+06  5.71e+04  1.01e-16  6.36e+13  7.13e+17  3.41e+32
          R  1.55e-11         1      1.95   6.4e-05  8.83e-07  1.56e-27       984   1.1e+07  5.28e+21
         P1  7.92e-12     0.512         1  3.27e-05  4.52e-07  7.96e-28       503  5.64e+06   2.7e+21
         P2  2.42e-07  1.56e+04  3.05e+04         1    0.0138  2.43e-23  1.54e+07  1.72e+11  8.25e+25
         P3  1.75e-05  1.13e+06  2.21e+06      72.5         1  1.76e-21  1.11e+09  1.25e+13  5.98e+27
         P4  9.94e+15  6.42e+26  1.26e+27  4.11e+22  5.67e+20         1  6.32e+29  7.08e+33  3.39e+48
         P5  1.57e-14   0.00102   0.00199  6.51e-08  8.98e-10  1.58e-30         1  1.12e+04  5.37e+18
         P6   1.4e-18  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.41e-34  8.92e-05         1  4.79e+14
         P7  2.93e-33  1.89e-22   3.7e-22  1.21e-26  1.67e-28  2.95e-49  1.86e-19  2.09e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.51008, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+08
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352427, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.46878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              18393      3206.45      844.107      1036.37      115.173      13114.9       1378.1      4.46792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.984541, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00277, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12012e-06  1.12012e-06  3.62251e-07
      low eigenvalue method done, cpu time[sec] = 1.02345, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-06  3.62e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-07  3.62e-07         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.62251e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.77889e-30  1.83784e-30   5.4224e-32  4.55655e-31  1.23175e-32   4.3714e-33  1.49014e-38  3.88449e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.46545, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+08
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352401, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49438, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6130.99      1068.82      281.369      345.457      38.3909      4371.64      459.365      1.48931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.89824, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.936777, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.53383e-07  5.53383e-07  1.53355e-07
      low eigenvalue method done, cpu time[sec] = 0.937896, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.53e-07  1.53e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-08  1.53e-07         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53355e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.18524e-30  6.79854e-31  1.88455e-32  1.32351e-31  3.85774e-33  3.89269e-33  1.50095e-38  3.88579e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41352, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.57941e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.353143, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.47426, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3678.59      641.291      168.821      207.274      23.0345      2622.99      275.619     0.893583
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.923142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002776, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.960785, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.88612e-07  3.88612e-07  9.62375e-08
      low eigenvalue method done, cpu time[sec] = 0.961915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.89e-07  9.62e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.51e-08  9.62e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.62375e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41191e-30  3.97356e-31  1.10373e-32  7.18704e-32  2.16861e-33  3.38484e-33  1.51233e-38  3.88725e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41808, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.21117e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.35393, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.48517, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2627.57      458.065      120.587      148.053      16.4532      1873.56      196.871     0.638274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.910194, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002776, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.947745, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.04734e-07  3.04734e-07  6.90849e-08
      low eigenvalue method done, cpu time[sec] = 0.948867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-07  6.91e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.74e-08  6.91e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.90849e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03099e-30  2.71914e-31  7.62125e-33  4.73393e-32  1.46083e-33   2.9762e-33  1.52404e-38  3.88799e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4189, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.84293e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.355219, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.43186, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2043.66      356.273      93.7897      115.152       12.797      1457.21      153.122     0.496435
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.960464, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.998144, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.5273e-07   2.5273e-07  5.32333e-08
      low eigenvalue method done, cpu time[sec] = 0.999249, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.53e-07  5.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-08  5.32e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.32333e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.03757e-31  2.02151e-31   5.7225e-33  3.43603e-32  1.07799e-33  2.64987e-33  1.53588e-38  3.88792e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.40867, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.351957, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49603, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1839.3      320.645      84.4107      103.637      11.5173      1311.49       137.81     0.446792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.894989, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.932396, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.33332e-07  2.33332e-07  4.75625e-08
      low eigenvalue method done, cpu time[sec] = 0.93349, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-07  4.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-08  4.76e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.75625e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.2147e-31  1.77932e-31  5.06152e-33  2.99728e-32  9.46813e-34  2.51083e-33   1.5418e-38  3.88784e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4046, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         4.73822e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352816, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49263, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1226.2      213.764      56.2738      69.0914      7.67818      874.328      91.8731     0.297861
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.900124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002795, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.9383, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70275e-07  1.70275e-07  3.02593e-08
      low eigenvalue method done, cpu time[sec] = 0.939764, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-07  3.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-08  3.03e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.02593e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.6661e-31  1.06931e-31  3.10956e-33  1.74896e-32  5.67005e-34  1.98199e-33  1.57053e-38  3.88798e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.40537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         6.31762e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.351518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.50748, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            919.648      160.323      42.2053      51.8185      5.75864      655.746      68.9048     0.223396
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.890663, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002773, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.928142, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35175e-07  1.35175e-07  2.15572e-08
      low eigenvalue method done, cpu time[sec] = 0.929265, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-07  2.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-08  2.16e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15572e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.35892e-31  7.32306e-32  2.16869e-33  1.17818e-32  3.88865e-34  1.62919e-33  1.59673e-38  3.88827e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41363, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         7.89703e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.350914, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49469, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            735.719      128.258      33.7643      41.4548      4.60691      524.597      55.1238     0.178717
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.905612, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.943191, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12559e-07  1.12559e-07  1.63986e-08
      low eigenvalue method done, cpu time[sec] = 0.94427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-07  1.64e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.92e-09  1.64e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63986e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.57403e-31  5.40673e-32  1.62578e-33    8.607e-33  2.87962e-34  1.37695e-33  1.61947e-38  3.88847e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352015, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.51156, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            613.099      106.882      28.1369      34.5457      3.83909      437.164      45.9365     0.148931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.880717, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.918325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.66742e-08  9.66742e-08  1.30254e-08
      low eigenvalue method done, cpu time[sec] = 0.919442, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.67e-08   1.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.5e-09   1.3e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30254e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    2.056e-31  4.19342e-32  1.27747e-33  6.62641e-33  2.24118e-34  1.18765e-33  1.63838e-38  3.88866e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.40721, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.10558e+10
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.351237, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.52203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            525.513       91.613      24.1173      29.6106      3.29065      374.712      39.3742     0.127655
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002756, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.908126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    8.486e-08    8.486e-08  1.06696e-08
      low eigenvalue method done, cpu time[sec] = 0.909224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.49e-08  1.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.44e-09  1.07e-08         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06696e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69164e-31    3.368e-32   1.0377e-33  5.29326e-33  1.80648e-34  1.04042e-33  1.65345e-38  3.88873e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.40871, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.26352e+10
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352568, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.51224, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            459.824      80.1613      21.1027      25.9093      2.87932      327.873      34.4524     0.111698
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.874409, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002785, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.912126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.57064e-08  7.57064e-08   8.9445e-09
      low eigenvalue method done, cpu time[sec] = 0.913255, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.57e-08  8.94e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.63e-09  8.94e-09         1
         *Z       ---       ---  1.39e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.9445e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42329e-31  2.77669e-32  8.64103e-34  4.34588e-33  1.49456e-34  9.22737e-34  1.66485e-38  3.88898e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.40172, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 550 K
      Energy reference = 32067 1/cm
      Energy step      = 92 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006665
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.423549
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.23469
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.231503
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.17891
         W1 Well: minimal relaxation eigenvalue = 0.0800727
         W1 Well: maximal relaxation eigenvalue = 0.986319
         W1 Well:       grid size = 407
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5376 1/cm
         B1 Barrier:        grid size = 349
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -40 1/cm
         B2 Barrier:        grid size = 347
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 142 1/cm
         B3 Barrier:        grid size = 399
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4640 1/cm
         B4 Barrier:        grid size = 416
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 600
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23132 1/cm
         B6 Barrier:        grid size = 333
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1430 1/cm
         B7 Barrier:        grid size = 298
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4650 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.43298, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 3.67994e+42
      MasterEquation::Barrier::truncate: effective weight = 1.54257e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 1.192e+41
      MasterEquation::Barrier::truncate: effective weight = 4.87708e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5376  -5376 2.09e+09 1.01e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -40 2.02e+15
         B2    143 3.55e+14
         B3  -4640  9.4e+13
         B4  -5376 1.15e+14
         B5  -5376 1.28e+13
         B6   1431 1.45e+15
         B7   4651 1.54e+14
         B8  16703 5.22e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.17e-09  4.21e-09  1.74e-13   2.6e-15  1.11e-35  1.99e-06    0.0193  5.21e+12
          R  4.61e+08         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  2.38e+08     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  5.74e+12  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  3.84e+14  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4     9e+34  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  5.01e+05   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6      51.8  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7  1.92e-13  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.35e+10  2.62e+10  1.08e+06  1.62e+04  6.92e-17  1.24e+13   1.2e+17  3.24e+31
          R   7.4e-11         1      1.94  8.03e-05   1.2e-06  5.12e-27       919   8.9e+06   2.4e+21
         P1  3.82e-11     0.516         1  4.14e-05  6.18e-07  2.64e-27       474  4.59e+06  1.24e+21
         P2  9.22e-07  1.25e+04  2.42e+04         1    0.0149  6.38e-23  1.15e+07  1.11e+11  2.99e+25
         P3  6.17e-05  8.34e+05  1.62e+06      66.9         1  4.27e-21  7.67e+08  7.42e+12     2e+27
         P4  1.44e+16  1.95e+26  3.79e+26  1.57e+22  2.34e+20         1  1.79e+29  1.74e+33  4.69e+47
         P5  8.05e-14   0.00109   0.00211  8.73e-08   1.3e-09  5.57e-30         1  9.68e+03  2.61e+18
         P6  8.31e-18  1.12e-07  2.18e-07  9.02e-12  1.35e-13  5.76e-34  0.000103         1   2.7e+14
         P7  3.08e-32  4.17e-22  8.08e-22  3.34e-26     5e-28  2.13e-48  3.83e-19  3.71e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.44697, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.34163, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.28179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19112.9      3364.13      889.283      1089.53      121.418        13757      1460.44      4.94111
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.11661, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002645, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.15325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48429e-06   1.4843e-06  4.97771e-07
      low eigenvalue method done, cpu time[sec] = 1.15464, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-06  4.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-07  4.98e-07         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.97771e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.24947e-29  8.57677e-30  2.52068e-31  2.10236e-30  5.69976e-32  2.16923e-32  8.70918e-38  4.07565e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39114, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.340057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.28442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6370.98      1121.38      296.428      363.176      40.4728      4585.67      486.813      1.64704
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06813, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002654, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10455, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.43169e-07  7.43169e-07  2.13728e-07
      low eigenvalue method done, cpu time[sec] = 1.10564, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.43e-07  2.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.75e-08  2.14e-07         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.13728e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04281e-29  3.21129e-30  8.89816e-32  6.19943e-31  1.81343e-32   1.9388e-32  8.77234e-38  4.07437e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33441, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.56046e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.340248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32847, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3822.59      672.827      177.857      217.906      24.2837       2751.4      292.088     0.988223
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0205, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002673, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05734, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.2485e-07   5.2485e-07   1.3512e-07
      low eigenvalue method done, cpu time[sec] = 1.05843, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.25e-07  1.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.73e-08  1.35e-07         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.3512e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.78668e-30  1.88918e-30  5.25305e-32  3.39217e-31  1.02755e-32   1.6923e-32  8.83873e-38  4.07301e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33167, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.18465e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343073, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.30063, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2730.42      480.591       127.04      155.647      17.3455      1965.29      208.634     0.705873
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002647, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07732, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.13027e-07  4.13027e-07  9.74971e-08
      low eigenvalue method done, cpu time[sec] = 1.07841, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.13e-07  9.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.7e-08  9.75e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.74971e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.98077e-30  1.29871e-30   3.6472e-32  2.24603e-31  6.95983e-33   1.4929e-32  8.90698e-38  4.07306e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32733, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.80883e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.31012, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2123.66      373.793      98.8092      121.059      13.4909      1528.56      162.271     0.549013
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02652, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002639, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06361, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.43414e-07  3.43414e-07  7.54256e-08
      low eigenvalue method done, cpu time[sec] = 1.06466, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.43e-07  7.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.07e-08  7.54e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.54255e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89823e-30  9.68937e-31  2.75013e-32  1.63677e-31  5.15744e-33  1.33298e-32  8.97587e-38  4.07317e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32913, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342284, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32132, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1911.29      336.413      88.9283      108.953      12.1418       1375.7      146.044     0.494111
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04006, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.07706, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17386e-07  3.17386e-07  6.75051e-08
      low eigenvalue method done, cpu time[sec] = 1.07814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.17e-07  6.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.83e-08  6.75e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.75051e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.50499e-30   8.5415e-31  2.43686e-32  1.43021e-31  4.53795e-33  1.26466e-32  9.01022e-38  4.07326e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.35327, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         4.68139e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.31927, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1274.2      224.276      59.2855      72.6352      8.09456      917.135      97.3626     0.329408
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02851, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002643, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06567, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.32505e-07  2.32505e-07  4.32351e-08
      low eigenvalue method done, cpu time[sec] = 1.06673, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-07  4.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-08  4.32e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.32351e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.28185e-30  5.16401e-31  1.50772e-32  8.40131e-32  2.73669e-33   1.0037e-32  9.17687e-38  4.07339e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34415, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         6.24185e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343139, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32156, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            955.647      168.207      44.4641      54.4764      6.07092      687.851       73.022     0.247056
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002639, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05515, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85054e-07  1.85054e-07   3.0952e-08
      low eigenvalue method done, cpu time[sec] = 1.05626, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-07   3.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-08   3.1e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.0952e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.65053e-30  3.55204e-31  1.05694e-32  5.68687e-32  1.88646e-33  8.28558e-33  9.32844e-38  4.07362e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32975, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         7.80231e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            764.518      134.565      35.5713      43.5811      4.85673      550.281      58.4176     0.197645
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01924, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002624, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.54385e-07  1.54385e-07  2.36359e-08
      low eigenvalue method done, cpu time[sec] = 1.05642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-07  2.36e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08  2.36e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.36359e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26966e-30  2.63159e-31   7.9556e-33  4.17021e-32  1.40255e-33  7.02743e-33  9.45979e-38  4.07383e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.2847, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.460219, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            637.098      112.138      29.6428      36.3176      4.04728      458.567      48.6813     0.164704
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.983435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02086, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32795e-07  1.32795e-07  1.88335e-08
      low eigenvalue method done, cpu time[sec] = 1.02201, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-07  1.88e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-08  1.88e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88335e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.01733e-30  2.04686e-31  6.27207e-33  3.22059e-32  1.09519e-33  6.07949e-33  9.56901e-38    4.074e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.09232e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341603, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.35606, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            546.084      96.1181      25.4081      31.1294       3.4691      393.058      41.7268     0.141175
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.995067, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002633, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03176, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16707e-07  1.16707e-07  1.54689e-08
      low eigenvalue method done, cpu time[sec] = 1.03288, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-07  1.55e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-08  1.55e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54689e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.39278e-31  1.64794e-31  5.10931e-33  2.57944e-32  8.85231e-34  5.33975e-33   9.6561e-38  4.07423e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3444, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.24837e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.344197, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.35407, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            477.824      84.1034      22.2321      27.2382      3.03546      343.925       36.511     0.123528
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.985878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002627, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02287, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04224e-07  1.04224e-07  1.29983e-08
      low eigenvalue method done, cpu time[sec] = 1.02395, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07   1.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.1e-09   1.3e-08         1
         *Z       ---       ---  8.11e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29983e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.07786e-31  1.36148e-31  4.26506e-33  2.12263e-32  7.34161e-34  4.74671e-33  9.72212e-38  4.07434e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.30251, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 560 K
      Energy reference = 32345 1/cm
      Energy step      = 93 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007575
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.393684
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.221538
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.235925
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.47785
         W1 Well: minimal relaxation eigenvalue = 0.079553
         W1 Well: maximal relaxation eigenvalue = 0.988151
         W1 Well:       grid size = 407
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5505 1/cm
         B1 Barrier:        grid size = 348
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 346
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 398
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4669 1/cm
         B4 Barrier:        grid size = 415
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6249 1/cm
         B5 Barrier: nonpositive number of states at -23269 1/cm => truncating
         B5 Barrier:        grid size = 598
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23268 1/cm
         B6 Barrier:        grid size = 332
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1469 1/cm
         B7 Barrier:        grid size = 298
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4631 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16721 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.69424, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 1.64251e+42
      MasterEquation::Barrier::truncate: effective weight = 6.95995e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 5.16858e+40
      MasterEquation::Barrier::truncate: effective weight = 2.15412e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5505  -5505    2e+09 1.06e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 2.17e+15
         B2    168 3.85e+14
         B3  -4669 1.02e+14
         B4  -5505 1.25e+14
         B5  -5505  1.4e+13
         B6   1470 1.57e+15
         B7   4631 1.69e+14
         B8  16721 5.96e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.09e-09  4.02e-09  2.09e-13  3.36e-15  3.37e-35   1.8e-06    0.0151  2.34e+12
          R  4.79e+08         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  2.49e+08      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2   4.8e+12     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  2.97e+14  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  2.96e+34  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  5.56e+05   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6      66.2  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7  4.26e-13  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.99e+09  5.75e+09  2.98e+05  4.81e+03  4.83e-17  2.57e+12  2.16e+16  3.35e+30
          R  3.35e-10         1      1.92  9.98e-05  1.61e-06  1.61e-26       861  7.23e+06  1.12e+21
         P1  1.74e-10      0.52         1  5.19e-05  8.36e-07  8.39e-27       447  3.76e+06  5.83e+20
         P2  3.35e-06     1e+04  1.93e+04         1    0.0161  1.62e-22  8.62e+06  7.25e+10  1.12e+25
         P3  0.000208  6.21e+05   1.2e+06        62         1     1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  2.07e+16  6.19e+25  1.19e+26  6.18e+21  9.97e+19         1  5.33e+28  4.48e+32  6.95e+46
         P5  3.89e-13   0.00116   0.00224  1.16e-07  1.87e-09  1.88e-29         1  8.41e+03   1.3e+18
         P6  4.62e-17  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.23e-33  0.000119         1  1.55e+14
         P7  2.98e-31  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.44e-47  7.67e-19  6.44e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.70776, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343004, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.30213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19850.2       3527.5      936.268       1144.7      127.919      14420.9      1546.46      5.45562
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06916, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002679, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08001, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.45567e-06  1.45567e-06  5.01372e-07
      low eigenvalue method done, cpu time[sec] = 1.08114, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.46e-06  5.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-07  5.01e-07         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.01372e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00059e-28  3.77999e-29  1.10767e-30  9.17118e-30  2.49361e-31  1.00907e-31  4.76099e-37  3.92174e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36244, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36095, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6616.74      1175.83      312.089      381.567      42.6395      4806.97      515.487      1.81854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002661, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06454, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.37683e-07  7.37683e-07  2.18275e-07
      low eigenvalue method done, cpu time[sec] = 1.06569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.38e-07  2.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.65e-08  2.18e-07         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18275e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.70069e-29  1.43252e-29  3.97009e-31  2.74455e-30  8.05641e-32  9.07628e-32  4.79535e-37  3.92396e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37593, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1          1.5421e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341361, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32091, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3970.04      705.501      187.254       228.94      25.5837      2884.18      309.292      1.09112
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05201, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0621, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.23634e-07  5.23634e-07  1.38993e-07
      low eigenvalue method done, cpu time[sec] = 1.06357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.24e-07  1.39e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.69e-08  1.39e-07         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38993e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.08081e-29  8.48188e-30  2.36203e-31  1.51295e-30  4.60063e-32  7.96045e-32  4.83142e-37  3.92368e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33357, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.15894e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342038, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33622, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2835.75      503.929      133.753      163.529      18.2741      2060.13      220.923     0.779374
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002666, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04611, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.13381e-07  4.13381e-07  1.00797e-07
      low eigenvalue method done, cpu time[sec] = 1.04723, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.13e-07  1.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-08  1.01e-07         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.00797e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27216e-29  5.85718e-30  1.64878e-31  1.00689e-30  3.13279e-32  7.04898e-32  4.86846e-37  3.92353e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3423, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.77579e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.344597, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33662, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2205.58      391.945       104.03      127.189      14.2132      1602.32      171.829     0.606179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04238, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.44493e-07  3.44493e-07  7.82813e-08
      low eigenvalue method done, cpu time[sec] = 1.04348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-07  7.83e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.06e-08  7.83e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.82813e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.78509e-29  4.38522e-30  1.24838e-31   7.3664e-31  2.33103e-32  6.31353e-32   4.9058e-37  3.92371e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33956, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33056, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1985.02       352.75      93.6268       114.47      12.7919      1442.09      154.646     0.545562
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03355, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002678, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.1868e-07   3.1868e-07  7.01772e-08
      low eigenvalue method done, cpu time[sec] = 1.04486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-07  7.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-08  7.02e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.01771e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.60763e-29   3.8715e-30  1.10813e-31  6.44746e-31  2.05463e-32  5.99819e-32   4.9244e-37  3.92349e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         4.62631e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32726, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1323.35      235.167      62.4179      76.3133       8.5279      961.393      103.097     0.363708
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03227, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002666, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04246, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.3426e-07   2.3426e-07  4.52411e-08
      low eigenvalue method done, cpu time[sec] = 1.04393, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.34e-07  4.52e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.06e-08  4.52e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.52411e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05337e-29  2.35449e-30  6.90372e-32   3.8122e-31  1.24761e-32   4.7876e-32  5.01457e-37  3.92376e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32413, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         6.16841e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343924, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            992.511      176.375      46.8134       57.235      6.39593      721.045      77.3231     0.272781
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03636, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04646, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8688e-07   1.8688e-07  3.25429e-08
      low eigenvalue method done, cpu time[sec] = 1.04754, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.87e-07  3.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.64e-08  3.25e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25429e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.65525e-30  1.62652e-30  4.86409e-32  2.59275e-31  8.64303e-33  3.96945e-32  5.09651e-37  3.92391e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.21232, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         7.71052e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            794.009        141.1      37.4507       45.788      5.11674      576.836      61.8585     0.218225
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03756, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002657, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0477, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56174e-07  1.56174e-07  2.49445e-08
      low eigenvalue method done, cpu time[sec] = 1.04881, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.56e-07  2.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08  2.49e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49445e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.91068e-30  1.20914e-30  3.67574e-32  1.90836e-31  6.45119e-33  3.37871e-32  5.16755e-37  3.92408e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34451, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.345444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.14818, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            661.674      117.583      31.2089      38.1567      4.26395      480.697      51.5487     0.181854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.21393, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002635, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.224, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34511e-07  1.34512e-07  1.99381e-08
      low eigenvalue method done, cpu time[sec] = 1.22512, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-07  1.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.17e-08  1.99e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.99381e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.75055e-30  9.43119e-31  2.90739e-32  1.47832e-31  5.05375e-33  2.93177e-32  5.22671e-37  3.92427e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3263, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.07947e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341748, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.34378, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            567.149      100.786      26.7505      32.7057      3.65482      412.026      44.1846     0.155875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02391, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.18344e-07  1.18344e-07  1.64196e-08
      low eigenvalue method done, cpu time[sec] = 1.03515, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-07  1.64e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-08  1.64e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.64196e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.92938e-30  7.61128e-31    2.375e-32   1.1871e-31  4.09615e-33  2.58178e-32  5.27403e-37  3.92448e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3352, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.23368e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.345468, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.3639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            496.256      88.1876      23.4067      28.6175      3.19796      360.523      38.6616      0.13639
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002662, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03939, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0578e-07   1.0578e-07  1.38289e-08
      low eigenvalue method done, cpu time[sec] = 1.04049, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.38e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.18e-09  1.38e-08         1
         *Z       ---       ---  5.62e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38289e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.32131e-30  6.30126e-31  1.98737e-32  9.79071e-32  3.40524e-33  2.30035e-32  5.31007e-37  3.92466e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.35826, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 570 K
      Energy reference = 32624 1/cm
      Energy step      = 95 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008087
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.415302
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.227507
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.23255
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.1479
         W1 Well: minimal relaxation eigenvalue = 0.0790417
         W1 Well: maximal relaxation eigenvalue = 0.987273
         W1 Well:       grid size = 402
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5566 1/cm
         B1 Barrier:        grid size = 344
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 342
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 133 1/cm
         B3 Barrier:        grid size = 392
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4616 1/cm
         B4 Barrier:        grid size = 409
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6231 1/cm
         B5 Barrier: nonpositive number of states at -23237 1/cm => truncating
         B5 Barrier:        grid size = 588
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23237 1/cm
         B6 Barrier:        grid size = 328
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1463 1/cm
         B7 Barrier:        grid size = 294
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.38901, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 402
      MasterEquation::Barrier::truncate: real weight = 7.5568e+41
      MasterEquation::Barrier::truncate: effective weight = 3.27097e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 402
      MasterEquation::Barrier::truncate: real weight = 2.32415e+40
      MasterEquation::Barrier::truncate: effective weight = 9.94024e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5566  -5566 1.96e+09 1.11e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 2.33e+15
         B2    134 4.17e+14
         B3  -4616 1.11e+14
         B4  -5566 1.36e+14
         B5  -5566 1.52e+13
         B6   1464 1.71e+15
         B7   4694 1.85e+14
         B8  16759 6.79e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.71e-09  3.27e-09   2.1e-13  3.66e-15  8.36e-35  1.38e-06    0.0101  9.22e+11
          R  5.85e+08         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  3.06e+08     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2  4.75e+12  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3  2.74e+14  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4   1.2e+34  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  7.25e+05   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6      98.8  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  1.09e-12  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.97e+08  1.33e+09  8.58e+04  1.49e+03  3.41e-17  5.63e+11  4.13e+15  3.76e+29
          R  1.44e-09         1      1.91  0.000123  2.14e-06  4.89e-26       807  5.92e+06  5.39e+20
         P1  7.51e-10     0.523         1  6.45e-05  1.12e-06  2.56e-26       423   3.1e+06  2.82e+20
         P2  1.17e-05  8.12e+03  1.55e+04         1    0.0174  3.97e-22  6.56e+06  4.81e+10  4.38e+24
         P3  0.000671  4.68e+05  8.93e+05      57.6         1  2.29e-20  3.78e+08  2.77e+12  2.52e+26
         P4  2.93e+16  2.05e+25  3.91e+25  2.52e+21  4.37e+19         1  1.65e+28  1.21e+32   1.1e+46
         P5  1.78e-12   0.00124   0.00237  1.53e-07  2.65e-09  6.06e-29         1  7.34e+03  6.68e+17
         P6  2.42e-16  1.69e-07  3.23e-07  2.08e-11  3.61e-13  8.25e-33  0.000136         1   9.1e+13
         P7  2.66e-30  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.07e-47   1.5e-18   1.1e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.40296, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+08
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334353, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.0981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20604.8      3696.62      985.111      1201.94       134.68        15107      1636.28      6.01382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.24621, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002582, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28245, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65927e-06  1.65927e-06  5.87969e-07
      low eigenvalue method done, cpu time[sec] = 1.28357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-06  5.88e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-07  5.88e-07         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.87969e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.22069e-28   1.5805e-28  4.61803e-30  3.79688e-29  1.03523e-30  4.46649e-31  2.44678e-36  3.49004e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.27386, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+08
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.309716, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09724, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6868.28      1232.21       328.37      400.646      44.8935      5035.66      545.425      2.00461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1964, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002557, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.51017e-07  8.51017e-07  2.59427e-07
      low eigenvalue method done, cpu time[sec] = 1.23303, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.51e-07  2.59e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.65e-08  2.59e-07         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.59427e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0086e-28  6.05989e-29  1.67981e-30  1.15259e-29  3.39482e-31  4.03402e-31  2.46429e-36   3.4901e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.23051, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          1.5243e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335096, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.09806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4120.97      739.325      197.022      240.388      26.9361       3021.4      327.255      1.20276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19706, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002556, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.07189e-07  6.07189e-07  1.66363e-07
      low eigenvalue method done, cpu time[sec] = 1.23396, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.07e-07  1.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.41e-08  1.66e-07         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.66362e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.32547e-28  3.61057e-29  1.00702e-30  6.39997e-30  1.95335e-31  3.55166e-31  2.48266e-36  3.49004e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25833, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.13402e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334099, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.12107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2943.55      528.089       140.73      171.706      19.2401      2158.14      233.754     0.859117
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17596, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00256, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21149, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.80894e-07  4.80894e-07  1.21237e-07
      low eigenvalue method done, cpu time[sec] = 1.21261, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.81e-07  1.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.27e-08  1.21e-07         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21237e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.82254e-29  2.50429e-29  7.06625e-31  4.28056e-30  1.33709e-31  3.15515e-31   2.5015e-36   3.4898e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26332, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.74374e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.336978, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.12812, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2289.43      410.736      109.457      133.549      14.9645      1678.55      181.808     0.668202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002559, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.01691e-07  4.01691e-07  9.45129e-08
      low eigenvalue method done, cpu time[sec] = 1.20737, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.02e-07  9.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.55e-08  9.45e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.45128e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.7457e-29  1.88135e-29  5.37189e-31  3.14369e-30  9.98903e-32  2.83376e-31  2.52048e-36  3.48981e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.27046, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.336637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.13572, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2060.48      369.662      98.5111      120.194       13.468       1510.7      163.628     0.601382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1633, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19906, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71948e-07  3.71948e-07  8.48657e-08
      low eigenvalue method done, cpu time[sec] = 1.20016, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-07  8.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.28e-08  8.49e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.48657e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9868e-29  1.66339e-29  4.77657e-31  2.75603e-30  8.81965e-32  2.69556e-31  2.52993e-36  3.48975e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26647, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         4.57289e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.332673, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.16631, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1373.66      246.442      65.6741      80.1293       8.9787      1007.13      109.085     0.400921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13879, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002565, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.17505, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7439e-07   2.7439e-07  5.50615e-08
      low eigenvalue method done, cpu time[sec] = 1.17616, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-07  5.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.41e-08  5.51e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.50615e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.60686e-29  1.01748e-29  2.99609e-31  1.64005e-30  5.39165e-32  2.16276e-31  2.57571e-36  3.49001e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26569, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         6.09719e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334039, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.11664, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1030.24      184.831      49.2555      60.0969      6.73402       755.35      81.8138     0.300691
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17747, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002555, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.21313, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19418e-07  2.19418e-07  3.97927e-08
      low eigenvalue method done, cpu time[sec] = 1.21425, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-07  3.98e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-08  3.98e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.97927e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36347e-29  7.05882e-30  2.12139e-31  1.12064e-30  3.75349e-32  1.80051e-31  2.61734e-36  3.49018e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26032, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         7.62149e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.336953, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.13053, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            824.193      147.865      39.4044      48.0776      5.38722       604.28       65.451     0.240553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.16382, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002562, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19959, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.83691e-07  1.83691e-07  3.06144e-08
      low eigenvalue method done, cpu time[sec] = 1.20103, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.84e-07  3.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-08  3.06e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.06144e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.60644e-29  5.26508e-30  1.60938e-31  8.27863e-31  2.81245e-32  1.53773e-31  2.65349e-36  3.49034e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26417, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.3357, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.1238, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            686.828      123.221       32.837      40.0646      4.48935      503.566      54.5425     0.200461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58433e-07  1.58433e-07  2.45449e-08
      low eigenvalue method done, cpu time[sec] = 1.20749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-07  2.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.37e-08  2.45e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.45449e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10119e-29  4.11809e-30  1.27707e-31  6.43246e-31  2.21025e-32  1.33816e-31  2.68367e-36  3.49051e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26121, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.06701e+10
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334698, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.15517, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            588.709      105.618       28.146      34.3411      3.84801      431.628      46.7507     0.171823
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14921, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002564, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.18507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39548e-07  1.39548e-07  2.02661e-08
      low eigenvalue method done, cpu time[sec] = 1.1862, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-07  2.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-08  2.03e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.02661e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74246e-29  3.33128e-30  1.04608e-31  5.17859e-31  1.79631e-32  1.18137e-31  2.70792e-36  3.49063e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.21944e+10
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.33545, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.13959, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            515.121      92.4156      24.6278      30.0485      3.36701      377.675      40.9069     0.150346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15263, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002551, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.18807, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24853e-07  1.24853e-07  1.71073e-08
      low eigenvalue method done, cpu time[sec] = 1.18916, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-07  1.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-08  1.71e-08         1
         *Z       ---       ---  3.63e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.71073e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.47612e-29  2.76358e-30  8.77439e-32  4.28063e-31  1.49684e-32  1.05493e-31  2.72652e-36  3.49083e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25713, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 580 K
      Energy reference = 32901 1/cm
      Energy step      = 97 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00789
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.407589
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.223061
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.227382
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.10164
         W1 Well: minimal relaxation eigenvalue = 0.0785442
         W1 Well: maximal relaxation eigenvalue = 0.986427
         W1 Well:       grid size = 397
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5608 1/cm
         B1 Barrier:        grid size = 340
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -79 1/cm
         B2 Barrier:        grid size = 337
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 211 1/cm
         B3 Barrier:        grid size = 387
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4638 1/cm
         B4 Barrier:        grid size = 403
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 578
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 324
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1472 1/cm
         B7 Barrier:        grid size = 291
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16701 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.32316, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 3.57803e+41
      MasterEquation::Barrier::truncate: effective weight = 1.58136e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 1.08104e+40
      MasterEquation::Barrier::truncate: effective weight = 4.73577e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5608  -5608 1.94e+09 1.16e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -79  2.5e+15
         B2    212 4.52e+14
         B3  -4638 1.21e+14
         B4  -5608 1.47e+14
         B5  -5608 1.65e+13
         B6   1473 1.85e+15
         B7   4674 2.02e+14
         B8  16702 7.72e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.35e-09  2.55e-09  2.03e-13  3.79e-15  1.92e-34  1.02e-06   0.00657  3.58e+11
          R  7.43e+08         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1  3.92e+08     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  4.93e+12  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3  2.64e+14  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  5.22e+33  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  9.79e+05   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6       152  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7   2.8e-12  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.71e+08  3.24e+08  2.58e+04       481  2.43e-17   1.3e+11  8.34e+14  4.54e+28
          R  5.86e-09         1       1.9  0.000151  2.81e-06  1.43e-25       759  4.88e+06  2.66e+20
         P1  3.09e-09     0.527         1  7.95e-05  1.48e-06  7.51e-26       400  2.57e+06   1.4e+20
         P2  3.88e-05  6.63e+03  1.26e+04         1    0.0187  9.45e-22  5.03e+06  3.24e+10  1.76e+24
         P3   0.00208  3.55e+05  6.74e+05      53.6         1  5.06e-20   2.7e+08  1.74e+12  9.45e+25
         P4  4.11e+16  7.02e+24  1.33e+25  1.06e+21  1.97e+19         1  5.32e+27  3.43e+31  1.86e+45
         P5  7.72e-12   0.00132    0.0025  1.99e-07  3.71e-09  1.88e-28         1  6.43e+03   3.5e+17
         P6   1.2e-15  2.05e-07  3.89e-07  3.09e-11  5.76e-13  2.92e-32  0.000155         1  5.44e+13
         P7   2.2e-29  3.76e-21  7.14e-21  5.68e-25  1.06e-26  5.36e-46  2.86e-18  1.84e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.33656, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.327452, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95757, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              21377      3871.68      1035.86       1261.3      141.711      15815.7      1729.99      6.61761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.34811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002521, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3833, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.96588e-06  1.96588e-06  7.16323e-07
      low eigenvalue method done, cpu time[sec] = 1.3844, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-06  7.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-07  7.16e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.16323e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69231e-27  6.27966e-28  1.83073e-29  1.49491e-28  4.08706e-30  1.87392e-30  1.19131e-35  2.87706e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24703, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326126, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96304, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7125.65      1290.56      345.287      420.432      47.2371      5271.89      576.662      2.20587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29288, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002484, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32748, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02024e-06  1.02024e-06  3.20237e-07
      low eigenvalue method done, cpu time[sec] = 1.32861, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06   3.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.14e-08   3.2e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.20236e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.15557e-28   2.4358e-28  6.75622e-30  4.60195e-29  1.35995e-30  1.70029e-30  1.19981e-35  2.87705e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19298, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.50702e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324812, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.94351, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4275.39      774.336      207.172      252.259      28.3422      3163.13      345.997      1.32352
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30002, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002479, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.31628e-07  7.31628e-07  2.06774e-07
      low eigenvalue method done, cpu time[sec] = 1.33563, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.32e-07  2.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.51e-08  2.07e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.06774e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.41793e-28  1.46029e-28  4.08036e-30  2.57353e-29  7.88331e-31  1.50297e-30   1.2087e-35  2.87683e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.17815, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.10983e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325452, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.94821, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3053.85      553.097       147.98      180.185      20.2445      2259.38      247.141     0.945373
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32976, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.81312e-07  5.81312e-07   1.5141e-07
      low eigenvalue method done, cpu time[sec] = 1.33091, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.81e-07  1.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.14e-08  1.51e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5141e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.03385e-28  1.01726e-28  2.87791e-30  1.72973e-29   5.4239e-31  1.33957e-30  1.21781e-35  2.87699e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18232, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.71263e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323698, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96894, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2375.22      430.187      115.096      140.144      15.7457       1757.3      192.221      0.73529
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28096, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002483, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31599, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.86701e-07  4.86701e-07  1.18474e-07
      low eigenvalue method done, cpu time[sec] = 1.31707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.87e-07  1.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.29e-08  1.18e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.18474e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.19252e-28  7.66797e-29  2.19651e-30  1.27512e-29  4.06802e-31  1.20646e-30  1.22698e-35  2.87708e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18494, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325615, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98916, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2137.7      387.168      103.586       126.13      14.1711      1581.57      172.999     0.661761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25682, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002499, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29174, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.51093e-07  4.51093e-07   1.0655e-07
      low eigenvalue method done, cpu time[sec] = 1.29287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.51e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.97e-08  1.07e-07         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0655e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.8842e-28   6.7894e-29  1.95639e-30  1.11967e-29  3.59783e-31  1.14904e-30  1.23154e-35  2.87709e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18513, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         4.52106e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324303, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1425.13      258.112      69.0574      84.0863      9.44741      1054.38      115.332     0.441174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28483, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002499, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.33964e-07  3.33964e-07  6.95648e-08
      low eigenvalue method done, cpu time[sec] = 1.32167, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.34e-07  6.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.92e-08  6.96e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.95648e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91349e-28  4.17679e-29  1.23532e-30  6.70507e-30  2.21401e-31  9.26721e-31  1.25362e-35  2.87726e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18511, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         6.02808e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.32612, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97532, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1068.85      193.584      51.7931      63.0648      7.08556      790.784      86.4993     0.330881
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002489, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30953, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    2.677e-07    2.677e-07  5.05052e-08
      low eigenvalue method done, cpu time[sec] = 1.31063, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.68e-07  5.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.33e-08  5.05e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.05052e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40336e-28  2.90981e-29  8.78929e-31  4.60261e-30  1.54876e-31  7.74627e-31  1.27367e-35  2.87734e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19118, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1          7.5351e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.328592, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96758, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            855.078      154.867      41.4345      50.4518      5.66845      632.627      69.1994     0.264704
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2736, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30852, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24514e-07  2.24514e-07  3.89972e-08
      low eigenvalue method done, cpu time[sec] = 1.30962, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.25e-07   3.9e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-08   3.9e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.89972e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09139e-28  2.17757e-29   6.6935e-31  3.41244e-30  1.16488e-31  6.63776e-31  1.29109e-35  2.87748e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.33425, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97939, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            712.565      129.056      34.5287      42.0432      4.72371      527.189      57.6662     0.220587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26592, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002487, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30095, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.93916e-07  1.93916e-07  3.13597e-08
      low eigenvalue method done, cpu time[sec] = 1.30205, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.94e-07  3.14e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-08  3.14e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.13597e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.82436e-29  1.70786e-29  5.32826e-31  2.65936e-30  9.18335e-32  5.79265e-31  1.30564e-35  2.87762e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.05491e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326578, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.99001, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             610.77      110.619       29.596       36.037      4.04889      451.876      49.4282     0.189075
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29933, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70999e-07  1.70999e-07  2.59591e-08
      low eigenvalue method done, cpu time[sec] = 1.30094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-07   2.6e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-08   2.6e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.59591e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.33631e-29  1.38477e-29  4.37632e-31  2.14641e-30   7.4834e-32  5.12654e-31  1.31736e-35  2.87775e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.20562e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326919, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98033, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            534.424       96.792      25.8965      31.5324      3.54278      395.392      43.2496      0.16544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26561, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30052, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5314e-07   1.5314e-07  2.19619e-08
      low eigenvalue method done, cpu time[sec] = 1.30162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.53e-07   2.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.32e-08   2.2e-08         1
         *Z       ---       ---  2.33e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.19619e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.22865e-29  1.15112e-29  3.67943e-31  1.77813e-30  6.25035e-32   4.5879e-31  1.32639e-35  2.87787e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19036, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 590 K
      Energy reference = 33179 1/cm
      Energy step      = 98 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008523
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.409036
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.221717
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.223295
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.09621
         W1 Well: minimal relaxation eigenvalue = 0.0780485
         W1 Well: maximal relaxation eigenvalue = 0.988185
         W1 Well:       grid size = 397
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5727 1/cm
         B1 Barrier:        grid size = 339
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 337
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 152 1/cm
         B3 Barrier:        grid size = 386
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4649 1/cm
         B4 Barrier:        grid size = 402
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23171 1/cm => truncating
         B5 Barrier:        grid size = 575
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23171 1/cm
         B6 Barrier:        grid size = 324
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1427 1/cm
         B7 Barrier:        grid size = 291
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4660 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16715 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.31768, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 1.74094e+41
      MasterEquation::Barrier::truncate: effective weight = 7.77366e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 5.18927e+39
      MasterEquation::Barrier::truncate: effective weight = 2.30318e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5727  -5727 1.86e+09 1.21e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 2.67e+15
         B2    153 4.89e+14
         B3  -4649 1.31e+14
         B4  -5727  1.6e+14
         B5  -5727  1.8e+13
         B6   1428    2e+15
         B7   4661 2.21e+14
         B8  16715 8.77e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.27e-09  2.39e-09  2.33e-13  4.66e-15  5.09e-34  9.08e-07   0.00515   1.7e+11
          R  7.88e+08         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1  4.18e+08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  4.29e+12  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3  2.15e+14  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  1.97e+33   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5   1.1e+06    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6       194  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7  5.87e-12  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.39e+07  8.28e+07  8.06e+03       161  1.76e-17  3.14e+10  1.78e+14  5.89e+27
          R  2.28e-08         1      1.89  0.000184  3.67e-06  4.01e-25       715  4.05e+06  1.34e+20
         P1  1.21e-08      0.53         1  9.73e-05  1.95e-06  2.12e-25       379  2.15e+06  7.12e+19
         P2  0.000124  5.45e+03  1.03e+04         1      0.02  2.18e-21  3.89e+06  2.21e+10  7.31e+23
         P3   0.00621  2.73e+05  5.14e+05        50         1  1.09e-19  1.95e+08   1.1e+12  3.66e+25
         P4  5.69e+16   2.5e+24  4.71e+24  4.58e+20  9.15e+18         1  1.78e+27  1.01e+31  3.35e+44
         P5  3.19e-11    0.0014   0.00264  2.57e-07  5.13e-09  5.61e-28         1  5.67e+03  1.88e+17
         P6  5.62e-15  2.47e-07  4.65e-07  4.53e-11  9.05e-13  9.89e-32  0.000176         1  3.31e+13
         P7   1.7e-28  7.45e-21  1.41e-20  1.37e-24  2.73e-26  2.99e-45  5.33e-18  3.02e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.33108, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326824, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95058, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22166.7      4052.82      1088.57      1322.82      149.018      16547.4      1827.71      7.26947
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35461, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002699, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.38987, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97435e-06  1.97436e-06  7.35256e-07
      low eigenvalue method done, cpu time[sec] = 1.391, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-06  7.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-07  7.35e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.35256e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.46649e-27  2.37946e-27  6.91913e-29  5.61255e-28  1.53856e-29  7.53749e-30  5.49749e-35  2.20734e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.24341, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.32558, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.94649, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7388.92      1350.94      362.857       440.94      49.6726      5515.78      609.236      2.42316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29887, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002493, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33427, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0358e-06   1.0358e-06  3.32888e-07
      low eigenvalue method done, cpu time[sec] = 1.33551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-06  3.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.22e-08  3.33e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.32887e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15455e-27  9.33193e-28  2.58954e-29  1.75136e-28  5.19237e-30  6.85068e-30  5.53656e-35  2.20773e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1818, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.49024e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.94382, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4433.35      810.563      217.714      264.564      29.8036      3309.47      365.541      1.45389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30641, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002479, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34131, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.46256e-07  7.46256e-07  2.16377e-07
      low eigenvalue method done, cpu time[sec] = 1.34243, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.46e-07  2.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.59e-08  2.16e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.16377e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10926e-27  5.62798e-28  1.57524e-29  9.86192e-29  3.03167e-30  6.07177e-30  5.57744e-35  2.20778e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.08634e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323961, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95327, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3166.68      578.974       155.51      188.974      21.2883      2363.91      261.101       1.0385
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30108, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.94687e-07  5.94687e-07  1.59179e-07
      low eigenvalue method done, cpu time[sec] = 1.33685, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.95e-07  1.59e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-08  1.59e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.59179e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57757e-27  3.93699e-28  1.11659e-29   6.6601e-29  2.09627e-30  5.42524e-30  5.61925e-35   2.2078e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19125, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.68243e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.322136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9481, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2462.97      450.313      120.952       146.98      16.5575      1838.59      203.079     0.807719
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30343, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33823, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.98965e-07  4.98965e-07  1.25002e-07
      low eigenvalue method done, cpu time[sec] = 1.33933, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.99e-07  1.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.37e-08  1.25e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25002e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25295e-27  2.97736e-28    8.555e-30  4.92775e-29  1.57829e-30   4.8972e-30  5.66126e-35  2.20794e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18541, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95472, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2216.67      405.282      108.857      132.282      14.9018      1654.74      182.771     0.726947
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29312, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002501, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32767, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.62868e-07  4.62868e-07  1.12594e-07
      low eigenvalue method done, cpu time[sec] = 1.32879, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.63e-07  1.13e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.05e-08  1.13e-07         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12594e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13366e-27  2.63991e-28  7.63231e-30  4.33379e-29  1.39815e-30  4.66902e-30  5.68215e-35  2.20796e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         4.47072e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323459, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96534, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1477.78      270.188      72.5713       88.188      9.93453      1103.16      121.847     0.484631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3208, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.43808e-07  3.43808e-07  7.39605e-08
      low eigenvalue method done, cpu time[sec] = 1.32193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-07   7.4e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-08   7.4e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.39605e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.5663e-28  1.63308e-28  4.85063e-30  2.61129e-29  8.65953e-31  3.78263e-30   5.7831e-35  2.20804e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19006, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         5.96096e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.32512, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96242, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1108.34      202.641      54.4285       66.141       7.4509      827.368      91.3853     0.363474
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32354, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76205e-07  2.76205e-07   5.3937e-08
      low eigenvalue method done, cpu time[sec] = 1.32467, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.76e-07  5.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.39e-08  5.39e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.3937e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.57361e-28  1.14235e-28  3.46761e-30  1.80055e-29  6.08616e-31  3.17334e-30  5.87466e-35  2.20813e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19304, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         7.45121e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.327366, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             886.67      162.113      43.5428      52.9128      5.96072      661.894      73.1083     0.290779
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29014, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002504, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.3203e-07   2.3203e-07  4.17945e-08
      low eigenvalue method done, cpu time[sec] = 1.32611, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-07  4.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-08  4.18e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.17945e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.34975e-28   8.5765e-29  2.65068e-30  1.33968e-29  4.59468e-31  2.72752e-30  5.95415e-35  2.20824e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20322, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326653, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97176, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            738.892      135.094      36.2857       44.094      4.96726      551.578      60.9236     0.242316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27782, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31315, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0067e-07   2.0067e-07  3.37078e-08
      low eigenvalue method done, cpu time[sec] = 1.31428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.01e-07  3.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-08  3.37e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.37078e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.52713e-28   6.7445e-29  2.11658e-30  1.04709e-29  3.63335e-31   2.3865e-30  6.02066e-35  2.20834e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19462, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.04317e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97374, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            633.336      115.795       31.102      37.7949      4.25765      472.782      52.2202     0.207699
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27973, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00251, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31473, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77145e-07  1.77145e-07  2.79728e-08
      low eigenvalue method done, cpu time[sec] = 1.31584, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-07   2.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.52e-08   2.8e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.79728e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.93961e-28   5.4811e-29  1.74304e-30  8.47223e-30  2.96854e-31  2.11694e-30   6.0743e-35  2.20844e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19167, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.19219e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323742, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.99259, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            554.169       101.32      27.2143      33.0705      3.72545      413.684      45.6927     0.181737
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26177, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002523, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29651, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58786e-07  1.58787e-07  2.37171e-08
      low eigenvalue method done, cpu time[sec] = 1.29762, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.59e-07  2.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08  2.37e-08         1
         *Z       ---       ---  1.66e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.37171e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.50116e-28  4.56536e-29  1.46886e-30  7.03381e-30  2.48507e-31  1.89841e-30  6.11574e-35  2.20853e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18838, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 600 K
      Energy reference = 33457 1/cm
      Energy step      = 100 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006092
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.40245
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.218136
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.203874
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.07137
         W1 Well: minimal relaxation eigenvalue = 0.0775733
         W1 Well: maximal relaxation eigenvalue = 0.987344
         W1 Well:       grid size = 392
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5743 1/cm
         B1 Barrier:        grid size = 335
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 333
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier:        grid size = 381
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 397
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6243 1/cm
         B5 Barrier: nonpositive number of states at -23143 1/cm => truncating
         B5 Barrier:        grid size = 566
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23143 1/cm
         B6 Barrier:        grid size = 320
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1456 1/cm
         B7 Barrier:        grid size = 288
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4657 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.25831, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 392
      MasterEquation::Barrier::truncate: real weight = 8.69284e+40
      MasterEquation::Barrier::truncate: effective weight = 3.96075e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 392
      MasterEquation::Barrier::truncate: real weight = 2.56552e+39
      MasterEquation::Barrier::truncate: effective weight = 1.16361e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5743  -5743 1.85e+09 1.27e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 2.87e+15
         B2    157 5.29e+14
         B3  -4643 1.43e+14
         B4  -5743 1.73e+14
         B5  -5743 1.95e+13
         B6   1457 2.16e+15
         B7   4658 2.41e+14
         B8  16757 9.95e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.57e-10  1.79e-09  2.12e-13  4.54e-15  1.04e-33  6.46e-07   0.00324  6.64e+10
          R  1.04e+09         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  5.57e+08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2  4.71e+12  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3   2.2e+14  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4   9.6e+32  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  1.55e+06   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6       309  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  1.51e-11  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.18e+07  2.21e+07  2.62e+03      55.9  1.28e-17  7.96e+09  3.99e+13  8.18e+26
          R  8.48e-08         1      1.87  0.000222  4.74e-06  1.09e-24       674  3.38e+06  6.94e+19
         P1  4.52e-08     0.533         1  0.000118  2.53e-06  5.81e-25       360   1.8e+06   3.7e+19
         P2  0.000382  4.51e+03  8.45e+03         1    0.0214  4.91e-21  3.04e+06  1.52e+10  3.13e+23
         P3    0.0179  2.11e+05  3.96e+05      46.8         1   2.3e-19  1.42e+08  7.14e+11  1.46e+25
         P4  7.79e+16  9.19e+23  1.72e+24  2.04e+20  4.35e+18         1   6.2e+26  3.11e+30  6.37e+43
         P5  1.26e-10   0.00148   0.00278  3.29e-07  7.03e-09  1.61e-27         1  5.02e+03  1.03e+17
         P6  2.51e-14  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.22e-31  0.000199         1  2.05e+13
         P7  1.22e-27  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.57e-44  9.72e-18  4.88e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.27223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+08
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.318667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.76733, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22974.3      4240.12      1143.29      1386.57      156.608      17302.4      1929.55      7.97283
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.49073, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002439, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.44599e-06    2.446e-06  9.35132e-07
      low eigenvalue method done, cpu time[sec] = 1.52653, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-06  9.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-07  9.35e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.35131e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.36084e-26  8.61201e-27  2.49944e-28  2.01437e-27  5.53638e-29  2.86275e-29  2.40807e-34  1.58266e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.1757, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+08
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.308626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.77045, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7658.09      1413.37      381.096      462.189      52.2027      5767.48      643.183      2.65761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.42476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002438, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.45895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29764e-06  1.29764e-06  4.28666e-07
      low eigenvalue method done, cpu time[sec] = 1.46004, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-06  4.29e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-07  4.29e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.28666e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.16547e-26  3.41475e-27  9.48348e-29  6.36968e-28  1.89445e-29  2.61664e-29  2.42511e-34  1.58262e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09419, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.47394e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.305524, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.76037, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4594.85      848.024      228.657      277.313      31.3216      3460.49       385.91      1.59457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.43448, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46877, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.39471e-07  9.39471e-07  2.80455e-07
      low eigenvalue method done, cpu time[sec] = 1.46993, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.39e-07   2.8e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.29e-08   2.8e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.80455e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.8423e-27  2.07156e-27  5.80973e-29  3.61114e-28  1.11396e-29  2.32917e-29  2.44291e-34  1.58273e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.08891, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.06352e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.30383, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.76421, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3282.04      605.731      163.327      198.081      22.3726      2471.78       275.65      1.13898
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.43022, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002443, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46348, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.50989e-07  7.50989e-07  2.07261e-07
      low eigenvalue method done, cpu time[sec] = 1.46401, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.51e-07  2.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.59e-08  2.07e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.07261e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.89159e-27  1.45515e-27  4.13835e-29  2.45017e-28  7.74029e-30  2.08825e-29  2.46109e-34  1.58272e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09057, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.65309e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.307435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.78184, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2552.7      471.124      127.032      154.063      17.4009      1922.49      214.394      0.88587
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.42855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46267, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.31538e-07  6.31538e-07  1.63337e-07
      low eigenvalue method done, cpu time[sec] = 1.46379, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.32e-07  1.63e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.52e-08  1.63e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63337e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.69547e-27  1.10401e-27   3.1827e-29  1.81941e-28  5.84967e-30  1.89032e-29  2.47934e-34  1.58276e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.310713, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.78738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2297.43      424.012      114.329      138.657      15.6608      1730.24      192.955     0.797283
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41073, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002443, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.86398e-07  5.86398e-07  1.47347e-07
      low eigenvalue method done, cpu time[sec] = 1.44588, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.86e-07  1.47e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.12e-08  1.47e-07         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47347e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.25474e-27  9.80242e-28  2.84402e-29  1.60258e-28  5.19037e-30   1.8045e-29   2.4884e-34  1.58277e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11146, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         4.42182e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.316451, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1531.62      282.675      76.2191      92.4378      10.4405       1153.5      128.637     0.531522
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40438, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002437, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.4378, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.37094e-07  4.37094e-07  9.73696e-08
      low eigenvalue method done, cpu time[sec] = 1.43837, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.37e-07  9.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.79e-08  9.74e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.73696e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.85644e-27  6.09725e-28  1.81904e-29   9.7149e-29  3.23514e-30  1.46947e-29  2.53218e-34  1.58284e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11016, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         5.89576e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.319874, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.80493, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1148.71      212.006      57.1644      69.3284       7.8304      865.122      96.4775     0.398642
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.39254, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002423, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.42634, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.51988e-07  3.51988e-07  7.13211e-08
      low eigenvalue method done, cpu time[sec] = 1.42743, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.52e-07  7.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.04e-08  7.13e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.13211e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.11327e-27  4.28229e-28  1.30646e-29  6.72837e-29  2.28431e-30  1.23768e-29  2.57186e-34  1.58292e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03146, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1          7.3697e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.318187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79208, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            918.971      169.605      45.7315      55.4627      6.26432      692.097       77.182     0.318913
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41129, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002451, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96223e-07  2.96223e-07  5.54578e-08
      low eigenvalue method done, cpu time[sec] = 1.44661, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.96e-07  5.55e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-08  5.55e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.54578e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.65489e-27  3.22533e-28  1.00236e-29   5.0237e-29  1.73084e-30  1.06726e-29  2.60631e-34  1.58299e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11847, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.305226, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.78756, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            765.809      141.337      38.1096      46.2189      5.22027      576.748      64.3183     0.265761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40769, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002449, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56551e-07  2.56551e-07  4.48566e-08
      low eigenvalue method done, cpu time[sec] = 1.4427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-07  4.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.2e-08  4.49e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.48566e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34575e-27   2.5431e-28  8.02841e-30  3.93784e-29  1.37285e-30  9.36398e-30  2.63518e-34  1.58306e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10282, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.03176e+10
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.320083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79146, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            656.408      121.146      32.6653      39.6162      4.47452      494.355        55.13     0.227795
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40445, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002466, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.43852, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.26739e-07  2.26739e-07  3.73166e-08
      low eigenvalue method done, cpu time[sec] = 1.4396, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.27e-07  3.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-08  3.73e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.73166e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12431e-27   2.0714e-28  6.62877e-30  3.19404e-29  1.12456e-30  8.32622e-30  2.65852e-34  1.58313e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11604, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.17915e+10
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.319977, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.80818, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            574.357      106.003      28.5822      34.6642       3.9152      432.561      48.2388     0.199321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002448, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.4359, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03441e-07  2.03441e-07  3.17076e-08
      low eigenvalue method done, cpu time[sec] = 1.43698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-07  3.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-08  3.17e-08         1
         *Z       ---       ---  1.07e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.17076e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.58651e-28  1.72873e-28  5.59878e-30  2.65744e-29  9.43533e-31  7.48256e-30  2.67662e-34   1.5832e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.12927, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 610 K
      Energy reference = 33735 1/cm
      Energy step      = 102 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007349
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.392141
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.214259
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.222941
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.01789
         W1 Well: minimal relaxation eigenvalue = 0.0770799
         W1 Well: maximal relaxation eigenvalue = 0.986585
         W1 Well:       grid size = 388
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5841 1/cm
         B1 Barrier:        grid size = 331
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -27 1/cm
         B2 Barrier:        grid size = 329
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 376
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4617 1/cm
         B4 Barrier:        grid size = 392
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6249 1/cm
         B5 Barrier: nonpositive number of states at -23181 1/cm => truncating
         B5 Barrier:        grid size = 558
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23181 1/cm
         B6 Barrier:        grid size = 316
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16700 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.20513, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 4.44855e+40
      MasterEquation::Barrier::truncate: effective weight = 2.06744e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 1.30391e+39
      MasterEquation::Barrier::truncate: effective weight = 6.04066e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5841  -5841 1.79e+09 1.33e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -27 3.07e+15
         B2    177 5.72e+14
         B3  -4617 1.55e+14
         B4  -5841 1.87e+14
         B5  -5841 2.12e+13
         B6   1503 2.33e+15
         B7   4665 2.63e+14
         B8  16701 1.13e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.59e-10   1.6e-09  2.29e-13  5.21e-15  2.46e-33  5.47e-07   0.00244  3.14e+10
          R  1.16e+09         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1  6.25e+08     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2  4.37e+12  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3  1.92e+14  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  4.07e+32  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5  1.83e+06   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6       410  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  3.18e-11  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.31e+06  6.17e+06       883      20.1  9.48e-18  2.11e+09  9.41e+12  1.21e+26
          R  3.02e-07         1      1.86  0.000266  6.07e-06  2.86e-24       637  2.84e+06  3.66e+19
         P1  1.62e-07     0.536         1  0.000143  3.26e-06  1.54e-24       342  1.52e+06  1.97e+19
         P2   0.00113  3.75e+03  6.99e+03         1    0.0228  1.07e-20  2.39e+06  1.07e+10  1.37e+23
         P3    0.0497  1.65e+05  3.07e+05      43.9         1  4.71e-19  1.05e+08  4.68e+11  6.03e+24
         P4  1.06e+17  3.49e+23  6.51e+23  9.31e+19  2.12e+18         1  2.23e+26  9.92e+29  1.28e+43
         P5  4.74e-10   0.00157   0.00293  4.18e-07  9.53e-09  4.49e-27         1  4.46e+03  5.75e+16
         P6  1.06e-13  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.01e-30  0.000224         1  1.29e+13
         P7  8.24e-27  2.73e-20  5.09e-20  7.28e-24  1.66e-25  7.81e-44  1.74e-17  7.75e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.21874, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.311801, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.57272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23799.7      4433.74      1200.06      1452.59      164.489      18081.3      2035.63      8.73165
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62051, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002466, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.65414, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56235e-06  2.56235e-06  9.99664e-07
      low eigenvalue method done, cpu time[sec] = 1.65522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.56e-06     1e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-07     1e-06         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.99663e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.25224e-26  2.98431e-26   8.6478e-28  6.92581e-27  1.90839e-28  1.04893e-28  1.00346e-33  1.06278e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.08291, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299164, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60555, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7933.25      1477.91      400.021      484.196      54.8297       6027.1      678.542      2.91055
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57848, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.37344e-06  1.37344e-06  4.63839e-07
      low eigenvalue method done, cpu time[sec] = 1.57953, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-06  4.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-07  4.64e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.63838e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.1214e-26  1.19616e-26  3.32539e-28  2.21856e-27  6.61887e-29  9.60845e-29  1.01051e-33  1.06297e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02829, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1          1.4581e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.297463, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60996, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4759.95      886.747      240.013      290.518      32.8978      3616.26      407.125      1.74633
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.98836e-07  9.98837e-07  3.05408e-07
      low eigenvalue method done, cpu time[sec] = 1.57216, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.99e-07  3.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.76e-08  3.05e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.05408e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79044e-26  7.29864e-27  2.05129e-28  1.26612e-27  3.91895e-29  8.57658e-29  1.01787e-33  1.06298e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02775, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.04133e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299409, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60785, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3399.96      633.391      171.438      207.513      23.4984      2583.04      290.804      1.24738
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53151, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5652, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.00742e-07  8.00742e-07  2.26709e-07
      low eigenvalue method done, cpu time[sec] = 1.56628, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.01e-07  2.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.99e-08  2.27e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26709e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10546e-26  5.14778e-27  1.46817e-28  8.63016e-28  2.73612e-29  7.70887e-29  1.02538e-33  1.06303e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02184, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.62457e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2644.42      492.637       133.34      161.399      18.2766      2009.03      226.181     0.970183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52679, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56037, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.7479e-07   6.7479e-07  1.79281e-07
      low eigenvalue method done, cpu time[sec] = 1.56147, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.75e-07  1.79e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.86e-08  1.79e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79281e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68369e-26  3.91798e-27  1.13331e-28  6.43114e-28  2.07545e-29  6.99381e-29  1.03291e-33  1.06304e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.01591, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.30045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2379.97      443.374      120.006      145.259      16.4489      1808.13      203.563     0.873165
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57506, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    6.271e-07    6.271e-07   1.6197e-07
      low eigenvalue method done, cpu time[sec] = 1.57614, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.27e-07  1.62e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.44e-08  1.62e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.6197e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52786e-26  3.48346e-27  1.01432e-28  5.67324e-28  1.84443e-29   6.6831e-29  1.03665e-33  1.06305e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.033, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         4.37429e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.186105, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6223, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1586.65      295.582      80.0042      96.8392      10.9659      1205.42      135.708      0.58211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51586, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002348, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.68954e-07  4.68954e-07  1.07662e-07
      low eigenvalue method done, cpu time[sec] = 1.54938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.69e-07  1.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.04e-08  1.08e-07         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07662e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03165e-26  2.17847e-27  6.52818e-29  3.45966e-28   1.1568e-29  5.46628e-29   1.0547e-33  1.06309e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91198, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         5.83238e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.30308, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63217, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1189.99      221.687      60.0032      72.6294      8.22445      904.066      101.781     0.436582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5216, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55452, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.78483e-07  3.78483e-07  7.91998e-08
      low eigenvalue method done, cpu time[sec] = 1.55502, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.78e-07  7.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.25e-08  7.92e-08         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.91998e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.66472e-27  1.53608e-27  4.71012e-29  2.40654e-28  8.20527e-30  4.62029e-29  1.07105e-33  1.06314e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04326, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         7.29048e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301679, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             951.99      177.349      48.0025      58.1035      6.57956      723.253      81.4251     0.349266
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51758, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002376, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55035, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.1905e-07   3.1905e-07  6.17945e-08
      low eigenvalue method done, cpu time[sec] = 1.55086, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-07  6.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.73e-08  6.18e-08         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.17945e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.02241e-27  1.16059e-27  3.62686e-29    1.803e-28  6.23959e-30  3.99586e-29  1.08526e-33  1.06319e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02863, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299565, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            793.325      147.791      40.0021      48.4196      5.48297       602.71      67.8542     0.291055
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54557, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.76685e-07  2.76685e-07  5.01236e-08
      low eigenvalue method done, cpu time[sec] = 1.54608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.77e-07  5.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-08  5.01e-08         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.01236e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.91105e-27  9.17489e-28  2.91364e-29  1.41731e-28  4.96384e-30   3.5148e-29  1.09719e-33  1.06324e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03488, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.02067e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.302325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63654, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            679.993      126.678      34.2875      41.5025      4.69968      516.609      58.1608     0.249476
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50716, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54026, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.44798e-07  2.44798e-07  4.17993e-08
      low eigenvalue method done, cpu time[sec] = 1.54079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-07  4.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-08  4.18e-08         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.17993e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.11276e-27  7.48979e-28  2.41186e-29  1.15239e-28  4.07642e-30  3.13223e-29  1.10687e-33  1.06329e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.16648e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301689, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6231, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            594.994      110.843      30.0016      36.3147      4.11222      452.033      50.8907     0.218291
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54683, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.19846e-07  2.19846e-07  3.55916e-08
      low eigenvalue method done, cpu time[sec] = 1.54736, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.2e-07  3.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-08  3.56e-08         1
         *Z       ---       ---  7.57e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.55916e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.51409e-27  6.26294e-28  2.04166e-29   9.6081e-29  3.42781e-30  2.82045e-29  1.11441e-33  1.06333e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02024, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 620 K
      Energy reference = 34013 1/cm
      Energy step      = 103 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007603
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.387028
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.204496
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.215904
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.01428
         W1 Well: minimal relaxation eigenvalue = 0.0766059
         W1 Well: maximal relaxation eigenvalue = 0.988279
         W1 Well:       grid size = 388
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5950 1/cm
         B1 Barrier:        grid size = 331
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -79 1/cm
         B2 Barrier:        grid size = 329
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 125 1/cm
         B3 Barrier:        grid size = 375
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 391
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6260 1/cm
         B5 Barrier: nonpositive number of states at -23255 1/cm => truncating
         B5 Barrier:        grid size = 556
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23255 1/cm
         B6 Barrier:        grid size = 316
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4657 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16709 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.18089, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 2.33041e+40
      MasterEquation::Barrier::truncate: effective weight = 1.09366e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 6.80147e+38
      MasterEquation::Barrier::truncate: effective weight = 3.18501e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5950  -5950 1.73e+09 1.39e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -79 3.29e+15
         B2    126 6.18e+14
         B3  -4611 1.68e+14
         B4  -5950 2.03e+14
         B5  -5950  2.3e+13
         B6   1465 2.52e+15
         B7   4658 2.86e+14
         B8  16709 1.27e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.98e-10  1.48e-09  2.54e-13  6.16e-15  5.82e-33  4.81e-07   0.00191  1.58e+10
          R  1.25e+09         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  6.76e+08     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2  3.94e+12  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3  1.62e+14   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  1.72e+32  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  2.08e+06   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6       523  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  6.35e-11  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.68e+05   1.8e+06       308      7.47  7.06e-18  5.84e+08  2.32e+12  1.91e+25
          R  1.03e-06         1      1.85  0.000318  7.72e-06  7.29e-24       603   2.4e+06  1.97e+19
         P1  5.57e-07     0.539         1  0.000172  4.16e-06  3.93e-24       325  1.29e+06  1.07e+19
         P2   0.00325  3.14e+03  5.83e+03         1    0.0243  2.29e-20   1.9e+06  7.54e+09  6.21e+22
         P3     0.134   1.3e+05   2.4e+05      41.2         1  9.45e-19  7.81e+07  3.11e+11  2.56e+24
         P4  1.42e+17  1.37e+23  2.54e+23  4.36e+19  1.06e+18         1  8.27e+25  3.29e+29  2.71e+42
         P5  1.71e-09   0.00166   0.00307  5.28e-07  1.28e-08  1.21e-26         1  3.98e+03  3.27e+16
         P6  4.31e-13  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.04e-30  0.000252         1  8.24e+12
         P7  5.23e-26  5.06e-20  9.39e-20  1.61e-23  3.91e-25  3.69e-43  3.05e-17  1.21e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.1947, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.312447, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61212, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24643.2      4633.84      1258.95      1520.94      172.668      18884.4      2146.05      9.54945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58941, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0024, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62199, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62282e-06  2.62283e-06  1.04192e-06
      low eigenvalue method done, cpu time[sec] = 1.62251, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.62e-06  1.04e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.34e-07  1.04e-06         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.04192e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76835e-25  9.93527e-26  2.87225e-27  2.28642e-26  6.31582e-28  3.65297e-28  3.99692e-33  6.71197e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.09048, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60292, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8214.4      1544.61      419.651      506.979      57.5561       6294.8      715.351      3.18315
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54239, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57572, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41953e-06  1.41953e-06  4.89046e-07
      low eigenvalue method done, cpu time[sec] = 1.57684, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.42e-06  4.89e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-07  4.89e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.89045e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39804e-25  4.02218e-26  1.11882e-27  7.41588e-27  2.21914e-28  3.36387e-28   4.0249e-33  6.71296e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02313, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.44268e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.296936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63912, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4928.64      926.768       251.79      304.187      34.5336      3776.88       429.21      1.90989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5416, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57512, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03676e-06  1.03676e-06   3.2398e-07
      low eigenvalue method done, cpu time[sec] = 1.57621, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-06  3.24e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.04e-08  3.24e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.2398e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.52218e-26  2.46769e-26  6.94777e-28  4.25939e-27  1.32274e-28  3.01466e-28  4.05407e-33  6.71284e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05995, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.01976e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298222, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.676, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3520.46      661.977       179.85      217.277      24.6669      2697.77      306.579      1.36421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52002, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55408, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.33418e-07  8.33418e-07  2.41531e-07
      low eigenvalue method done, cpu time[sec] = 1.55517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.33e-07  2.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.23e-08  2.42e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.41531e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.21495e-26  1.74725e-26  4.99587e-28  2.91622e-27  9.27796e-29  2.71826e-28  4.08378e-33  6.71308e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.07781, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.59683e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.300301, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62412, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2738.13      514.871      139.884      168.993      19.1854      2098.27       238.45      1.06105
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52214, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55587, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.03733e-07  7.03733e-07  1.91641e-07
      low eigenvalue method done, cpu time[sec] = 1.55698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.04e-07  1.92e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.08e-08  1.92e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91641e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.78851e-26  1.33387e-26  3.87029e-28  2.18062e-27  7.06294e-29  2.47261e-28  4.11355e-33  6.71317e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0291, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.29877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.59954, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2464.32      463.384      125.895      152.094      17.2668      1888.44      214.605     0.954945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57547, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.5454e-07   6.5454e-07  1.73384e-07
      low eigenvalue method done, cpu time[sec] = 1.57719, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.55e-07  1.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.64e-08  1.73e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.73384e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.26016e-26  1.18749e-26  3.46924e-28  1.92646e-27   6.2864e-29  2.36553e-28  4.12832e-33  6.71325e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02217, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         4.32805e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298785, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63713, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1642.88      308.923      83.9301      101.396      11.5112      1258.96       143.07      0.63663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50848, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002355, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.91002e-07  4.91002e-07  1.15905e-07
      low eigenvalue method done, cpu time[sec] = 1.54369, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.91e-07  1.16e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.21e-08  1.16e-07         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.15905e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.57165e-26    7.465e-27  2.24642e-28  1.18162e-27  3.96666e-29   1.9442e-28   4.1995e-33  6.71354e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02766, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         5.77074e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.300077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62303, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1232.16      231.692      62.9476      76.0468      8.63341       944.22      107.303     0.477472
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.97125e-07  3.97125e-07  8.56216e-08
      low eigenvalue method done, cpu time[sec] = 1.54993, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.97e-07  8.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-08  8.56e-08         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.56216e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66453e-26  5.28397e-27  1.62805e-28  8.25427e-28   2.8261e-29  1.64948e-28  4.26395e-33  6.71385e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02202, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         7.21342e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62435, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            985.728      185.354      50.3581      60.8374      6.90673      755.376      85.8421     0.381978
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51011, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002355, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.35304e-07  3.35304e-07  6.70274e-08
      low eigenvalue method done, cpu time[sec] = 1.54473, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.35e-07   6.7e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-08   6.7e-08         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.70274e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.10047e-26  4.00452e-27  1.25806e-28  6.20498e-28  2.15664e-29  1.43094e-28  4.31996e-33  6.71413e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.01954, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301947, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62491, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             821.44      154.461      41.9651      50.6979      5.75561       629.48      71.5351     0.318315
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002351, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54966, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.91152e-07  2.91152e-07  5.45185e-08
      low eigenvalue method done, cpu time[sec] = 1.55079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.91e-07  5.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.47e-08  5.45e-08         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.45185e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71752e-26  3.17378e-27  1.01363e-28   4.8912e-28  1.72069e-29  1.26196e-28  4.36704e-33  6.71445e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02589, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.00988e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.300777, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63302, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            704.091      132.395        35.97      43.4553      4.93338      539.554      61.3158     0.272841
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50701, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54063, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.57869e-07  2.57869e-07  4.55717e-08
      low eigenvalue method done, cpu time[sec] = 1.54174, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-07  4.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-08  4.56e-08         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55717e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.44169e-26  2.59651e-27  8.41169e-29  3.98639e-28   1.4166e-29  1.12716e-28   4.4053e-33  6.71473e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03199, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.15415e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.304325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63369, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             616.08      115.846      31.4738      38.0234       4.3167       472.11      53.6513     0.238736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50541, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002338, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.31791e-07  2.31791e-07   3.8884e-08
      low eigenvalue method done, cpu time[sec] = 1.53912, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-07  3.89e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.95e-08  3.89e-08         1
         *Z       ---       ---  5.52e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.8884e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.23434e-26  2.17532e-27  7.13617e-29  3.33057e-28  1.19379e-29  1.01701e-28  4.43523e-33  6.71505e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0292, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 630 K
      Energy reference = 34291 1/cm
      Energy step      = 105 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008392
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.37645
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.199148
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.205285
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.988772
         W1 Well: minimal relaxation eigenvalue = 0.0761651
         W1 Well: maximal relaxation eigenvalue = 0.987466
         W1 Well:       grid size = 383
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5924 1/cm
         B1 Barrier:        grid size = 327
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 325
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 371
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4664 1/cm
         B4 Barrier:        grid size = 386
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6238 1/cm
         B5 Barrier: nonpositive number of states at -23249 1/cm => truncating
         B5 Barrier:        grid size = 548
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23248 1/cm
         B6 Barrier:        grid size = 313
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1426 1/cm
         B7 Barrier:        grid size = 282
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16756 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.12872, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 383
      MasterEquation::Barrier::truncate: real weight = 1.24828e+40
      MasterEquation::Barrier::truncate: effective weight = 5.97197e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 383
      MasterEquation::Barrier::truncate: real weight = 3.63565e+38
      MasterEquation::Barrier::truncate: effective weight = 1.73632e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5924  -5924 1.74e+09 1.45e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 3.52e+15
         B2    166 6.67e+14
         B3  -4664 1.82e+14
         B4  -5924 2.19e+14
         B5  -5924  2.5e+13
         B6   1427 2.72e+15
         B7   4682 3.12e+14
         B8  16756 1.44e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.62e-10  1.04e-09  2.12e-13  5.47e-15  1.01e-32  3.21e-07   0.00114   6.1e+09
          R  1.78e+09         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  9.65e+08     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2  4.71e+12  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3  1.83e+14  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4  9.87e+31  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5  3.12e+06   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6       875  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  1.64e-10  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.94e+05  5.43e+05       111      2.87  5.31e-18  1.68e+08  5.99e+11   3.2e+24
          R   3.4e-06         1      1.84  0.000378  9.73e-06   1.8e-23       572  2.03e+06  1.09e+19
         P1  1.84e-06     0.542         1  0.000205  5.28e-06  9.78e-24       310   1.1e+06  5.89e+18
         P2   0.00899  2.65e+03  4.88e+03         1    0.0258  4.78e-20  1.51e+06  5.39e+09  2.88e+22
         P3     0.349  1.03e+05   1.9e+05      38.8         1  1.85e-18  5.87e+07  2.09e+11  1.12e+24
         P4  1.88e+17  5.54e+22  1.02e+23  2.09e+19   5.4e+17         1  3.17e+25  1.13e+29  6.02e+41
         P5  5.94e-09   0.00175   0.00323  6.61e-07   1.7e-08  3.16e-26         1  3.56e+03   1.9e+16
         P6  1.67e-12  4.91e-07  9.07e-07  1.86e-10  4.78e-12  8.86e-30  0.000281         1  5.34e+12
         P7  3.13e-25  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.66e-42  5.26e-17  1.87e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.14193, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+08
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.303752, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.52124, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25504.8      4840.51         1320      1591.66      181.153      19712.1      2260.94      10.4289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64577, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002309, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.67829, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48245e-06  3.48245e-06  1.41892e-06
      low eigenvalue method done, cpu time[sec] = 1.67939, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.48e-06  1.42e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.12e-07  1.42e-06         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.41892e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.92522e-25  3.17583e-25  9.17155e-27   7.2568e-26  2.00953e-27  1.23135e-27  1.52071e-32  3.99755e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.03904, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+08
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.49524, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8501.59       1613.5      440.001      530.555      60.3844      6570.69      753.647      3.47631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002281, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64849, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.90472e-06  1.90473e-06  6.73758e-07
      low eigenvalue method done, cpu time[sec] = 1.6496, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.9e-06  6.74e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-07  6.74e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.73757e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.55739e-25  1.29917e-25  3.61856e-27  2.38307e-26  7.15252e-28  1.13617e-27  1.53129e-32  3.99754e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97736, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.42769e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.295145, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51074, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5100.96      968.102      264.001      318.333      36.2307      3942.41      452.188      2.08578
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59728, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62953, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39765e-06  1.39765e-06  4.49073e-07
      low eigenvalue method done, cpu time[sec] = 1.6306, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-06  4.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-07  4.49e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.49073e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.12242e-25  8.01514e-26  2.26195e-27  1.37747e-26  4.29163e-28  1.02092e-27   1.5423e-32  3.99765e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97118, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.99876e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.49716, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3643.54      691.501      188.572      227.381       25.879      2816.01      322.992      1.48985
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.61628, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64887, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12692e-06  1.12692e-06  3.36217e-07
      low eigenvalue method done, cpu time[sec] = 1.65026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-06  3.36e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.78e-08  3.36e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.36217e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.37569e-25   5.6974e-26  1.63395e-27  9.47258e-27  3.02409e-28  9.22772e-28   1.5535e-32  3.99771e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97643, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.56984e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.296212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51114, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2833.86      537.834      146.667      176.852      20.1281      2190.23      251.216      1.15877
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59686, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   9.5368e-07  9.53681e-07  2.67652e-07
      low eigenvalue method done, cpu time[sec] = 1.63046, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.54e-07  2.68e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.24e-08  2.68e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.67652e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91216e-25  4.36277e-26  1.27032e-27   7.1073e-27  2.31029e-28  8.41185e-28  1.56471e-32  3.99777e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.296665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.50375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2550.48      484.051          132      159.166      18.1153      1971.21      226.094      1.04289
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.61001, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002277, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64248, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.87831e-07  8.87831e-07  2.42498e-07
      low eigenvalue method done, cpu time[sec] = 1.64361, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.88e-07  2.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.66e-08  2.42e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42498e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74003e-25  3.88908e-26  1.14041e-27  6.28805e-27   2.0594e-28  8.05545e-28  1.57027e-32  3.99782e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.98413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         4.28306e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294462, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.49831, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1700.32      322.701      88.0002      106.111      12.0769      1314.14      150.729     0.695261
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.61254, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.68324e-07  6.68324e-07   1.6302e-07
      low eigenvalue method done, cpu time[sec] = 1.64611, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.68e-07  1.63e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-08  1.63e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.6302e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    1.188e-25  2.45756e-26  7.42883e-28  3.87905e-27  1.30726e-28  6.64869e-28  1.59705e-32  3.99798e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97239, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         5.71075e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.295132, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.53455, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1275.24      242.025      66.0002      79.5832      9.05766      985.603      113.047     0.521446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59963, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002287, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.4184e-07   5.4184e-07  1.20925e-07
      low eigenvalue method done, cpu time[sec] = 1.63376, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.42e-07  1.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.62e-08  1.21e-07         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20925e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.89877e-26  1.74622e-26  5.40761e-28  2.72113e-27  9.35469e-29  5.65991e-28   1.6213e-32  3.99817e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         7.13844e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.5195, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1020.19       193.62      52.8001      63.6665      7.24613      788.483      90.4376     0.417157
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59074, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62279, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.5832e-07   4.5832e-07  9.49751e-08
      low eigenvalue method done, cpu time[sec] = 1.62388, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-07   9.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.89e-08   9.5e-08         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.49751e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.03762e-26  1.32743e-26  4.19327e-28  2.05237e-27  7.16353e-29  4.92393e-28   1.6424e-32  3.99834e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96408, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.292329, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51398, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            850.159       161.35      44.0001      53.0555      6.03844      657.069      75.3647     0.347631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6016, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002275, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63423, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.98544e-07  3.98544e-07  7.74613e-08
      low eigenvalue method done, cpu time[sec] = 1.63544, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.99e-07  7.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-08  7.75e-08         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.74613e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0     5.77e-26  1.05472e-26  3.38834e-28  1.62228e-27  5.73197e-29  4.35303e-28  1.66016e-32  3.99852e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.98185, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         9.99382e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.296052, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.5318, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            728.708        138.3      37.7144      45.4761      5.17581      563.202      64.5983     0.297969
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58667, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002277, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61911, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.53406e-07  3.53406e-07  6.49007e-08
      low eigenvalue method done, cpu time[sec] = 1.6202, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-07  6.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.98e-08  6.49e-08         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49007e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.85449e-26  8.64751e-27  2.81881e-28  1.32529e-27   4.7306e-29  3.89637e-28  1.67465e-32   3.9987e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97369, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.14215e+10
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.2922, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.52599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             637.62      121.013      33.0001      39.7916      4.52883      492.802      56.5235     0.260723
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002291, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61376, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.17987e-07  3.17987e-07  5.54894e-08
      low eigenvalue method done, cpu time[sec] = 1.6152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.18e-07  5.55e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-08  5.55e-08         1
         *Z       ---       ---  3.54e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.54894e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.16467e-26  7.25852e-27  2.39655e-28  1.10953e-27  3.99514e-29  3.52232e-28  1.68603e-32  3.99887e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96408, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 640 K
      Energy reference = 34569 1/cm
      Energy step      = 107 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007296
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.372722
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.202821
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.202423
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.964167
         W1 Well: minimal relaxation eigenvalue = 0.0756684
         W1 Well: maximal relaxation eigenvalue = 0.986803
         W1 Well:       grid size = 380
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6091 1/cm
         B1 Barrier:        grid size = 324
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -99 1/cm
         B2 Barrier:        grid size = 322
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 114 1/cm
         B3 Barrier:        grid size = 367
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4700 1/cm
         B4 Barrier:        grid size = 381
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23211 1/cm => truncating
         B5 Barrier:        grid size = 540
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23211 1/cm
         B6 Barrier:        grid size = 310
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1398 1/cm
         B7 Barrier:        grid size = 279
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.09952, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 380
      MasterEquation::Barrier::truncate: real weight = 6.82974e+39
      MasterEquation::Barrier::truncate: effective weight = 3.32968e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 380
      MasterEquation::Barrier::truncate: real weight = 1.98877e+38
      MasterEquation::Barrier::truncate: effective weight = 9.68505e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6091  -6091 1.65e+09 1.51e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -99 3.76e+15
         B2    115 7.21e+14
         B3  -4700 1.97e+14
         B4  -6091 2.37e+14
         B5  -6091 2.71e+13
         B6   1399 2.93e+15
         B7   4716 3.39e+14
         B8  16700 1.62e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.79e-10  1.06e-09  2.58e-13  7.05e-15  2.51e-32  3.14e-07     0.001  3.52e+09
          R  1.73e+09         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  9.42e+08     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2  3.88e+12  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3  1.42e+14  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4  3.98e+31  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5  3.19e+06   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6       996  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  2.84e-10  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.29e+04   1.7e+05      41.4      1.13  4.03e-18  5.04e+07  1.61e+11  5.65e+23
          R  1.08e-05         1      1.84  0.000446  1.22e-05  4.34e-23       543  1.74e+06  6.09e+18
         P1  5.87e-06     0.545         1  0.000243  6.64e-06  2.36e-23       296  9.45e+05  3.32e+18
         P2    0.0241  2.24e+03  4.12e+03         1    0.0273  9.73e-20  1.22e+06  3.89e+09  1.36e+22
         P3     0.884  8.21e+04  1.51e+05      36.6         1  3.56e-18  4.45e+07  1.42e+11  4.99e+23
         P4  2.48e+17  2.31e+22  4.23e+22  1.03e+19  2.81e+17         1  1.25e+25     4e+28   1.4e+41
         P5  1.98e-08   0.00184   0.00338  8.22e-07  2.25e-08  7.99e-26         1   3.2e+03  1.12e+16
         P6   6.2e-12  5.76e-07  1.06e-06  2.57e-10  7.02e-12   2.5e-29  0.000313         1  3.51e+12
         P7  1.77e-24  1.64e-19  3.02e-19  7.33e-23     2e-24  7.13e-42  8.91e-17  2.85e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.11334, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+08
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.300314, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.33556, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26384.6      5053.93      1383.27      1664.83      189.952      20564.7      2380.41      11.3726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.80222, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83427, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.20176e-06  3.20176e-06  1.32116e-06
      low eigenvalue method done, cpu time[sec] = 1.83536, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-06  1.32e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.84e-07  1.32e-06         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32116e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.77281e-24  9.79315e-25  2.82288e-26  2.22086e-25  6.16446e-27  3.98511e-27  5.56808e-32  2.25012e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+08
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.289966, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35539, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8794.88      1684.64       461.09      554.942      63.3173      6854.91      793.471      3.79087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75635, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.76651e-06  1.76651e-06   6.3426e-07
      low eigenvalue method done, cpu time[sec] = 1.75745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-06  6.34e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-07  6.34e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3426e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.43091e-24  4.04471e-25  1.12752e-26  7.38002e-26  2.22141e-27  3.68771e-27  5.60679e-32  2.25017e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92409, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.41309e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.287544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36109, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5276.93      1010.79      276.654      332.965      37.9904      4112.95      476.082      2.27452
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7208, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002256, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30125e-06  1.30125e-06  4.25226e-07
      low eigenvalue method done, cpu time[sec] = 1.75391, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-06  4.25e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-07  4.25e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.25226e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.85954e-25  2.50854e-25  7.09327e-27  4.29205e-26  1.34143e-27  3.32336e-27  5.64702e-32  2.25016e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92612, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.97832e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.286733, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3769.23       721.99       197.61      237.832       27.136      2937.82      340.059      1.62466
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71481, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002258, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74689, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05182e-06  1.05182e-06  3.19674e-07
      low eigenvalue method done, cpu time[sec] = 1.74807, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-06   3.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.05e-08   3.2e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.19674e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.53174e-25  1.78983e-25  5.14675e-27  2.96416e-26  9.49448e-28  3.01147e-27   5.6879e-32  2.25022e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91833, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.54356e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.285857, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.3837, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2931.63      561.548      153.697      184.981      21.1058      2284.97       264.49      1.26362
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69421, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7258, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.9176e-07   8.9176e-07  2.55298e-07
      low eigenvalue method done, cpu time[sec] = 1.72688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.92e-07  2.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.64e-08  2.55e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.55298e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.0812e-25  1.37457e-25  4.01515e-27  2.23137e-26  7.27843e-28  2.75125e-27  5.72874e-32  2.25026e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92434, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.289597, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37464, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2638.46      505.393      138.327      166.483      18.9952      2056.47      238.041      1.13726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74071, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.30818e-07  8.30818e-07  2.31622e-07
      low eigenvalue method done, cpu time[sec] = 1.74215, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.31e-07  2.32e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.1e-08  2.32e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.31622e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.54124e-25  1.22687e-25  3.60987e-27  1.97695e-26  6.49758e-28  2.63732e-27  5.74897e-32  2.25029e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93169, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         4.23927e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.287798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.389, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1758.98      336.929      92.2181      110.988      12.6635      1370.98      158.694     0.758173
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69812, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72999, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.2721e-07   6.2721e-07  1.56561e-07
      low eigenvalue method done, cpu time[sec] = 1.73107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.27e-07  1.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.33e-08  1.57e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5656e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.80354e-25  7.79182e-26   2.3653e-27  1.22639e-26  4.14862e-28  2.18598e-27  5.84628e-32  2.25039e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93184, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         5.65236e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.289583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39109, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1319.23      252.697      69.1636      83.2413       9.4976      1028.24      119.021      0.56863
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.09517e-07  5.09517e-07  1.16601e-07
      low eigenvalue method done, cpu time[sec] = 1.72634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.1e-07  1.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.31e-08  1.17e-07         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16601e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.86034e-25  5.55711e-26  1.72916e-27   8.6384e-27  2.98145e-28  1.86716e-27  5.93417e-32  2.25049e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93207, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         7.06544e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.288368, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38277, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1055.39      202.157      55.3308      66.5931      7.59808      822.589      95.2165     0.454904
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70196, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002239, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.31626e-07  4.31626e-07  9.18725e-08
      low eigenvalue method done, cpu time[sec] = 1.73482, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.32e-07  9.19e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.64e-08  9.19e-08         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.18725e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26924e-25   4.2369e-26  1.34543e-27  6.53655e-27  2.29086e-28  1.62891e-27  6.01057e-32  2.25059e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9302, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.289899, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38463, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            879.488      168.464       46.109      55.4942      6.33173      685.491      79.3471     0.379087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69437, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.7578e-07   3.7578e-07  7.51304e-08
      low eigenvalue method done, cpu time[sec] = 1.72767, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-07  7.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.16e-08  7.51e-08         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.51304e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86538e-25  3.37477e-26  1.09025e-27   5.1807e-27  1.83823e-28  1.44352e-27  6.07488e-32  2.25069e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         9.89162e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.288729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38492, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            753.847      144.398       39.522      47.5665       5.4272      587.564      68.0118     0.324931
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70145, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002253, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73389, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.3355e-07   3.3355e-07  6.30914e-08
      low eigenvalue method done, cpu time[sec] = 1.73498, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.34e-07  6.31e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.79e-08  6.31e-08         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.30914e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57294e-25  2.77278e-26  9.09195e-28  4.24204e-27  1.52075e-28  1.29481e-27  6.12735e-32  2.25079e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93314, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.13047e+10
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.28847, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39813, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            659.616      126.348      34.5818      41.6207       4.7488      514.118      59.5103     0.284315
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71766, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.00372e-07  3.00372e-07  5.40502e-08
      low eigenvalue method done, cpu time[sec] = 1.71873, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     3e-07  5.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.51e-08  5.41e-08         1
         *Z       ---       ---  2.77e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.40502e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.35208e-25  2.33172e-26  7.74638e-28   3.5586e-27  1.28703e-28   1.1727e-27  6.16865e-32  2.25089e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93091, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 650 K
      Energy reference = 34847 1/cm
      Energy step      = 108 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006546
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.370954
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.199061
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.201388
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.951363
         W1 Well: minimal relaxation eigenvalue = 0.0752497
         W1 Well: maximal relaxation eigenvalue = 0.98837
         W1 Well:       grid size = 379
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6085 1/cm
         B1 Barrier:        grid size = 323
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -37 1/cm
         B2 Barrier:        grid size = 321
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 178 1/cm
         B3 Barrier:        grid size = 366
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 380
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23149 1/cm => truncating
         B5 Barrier:        grid size = 537
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23149 1/cm
         B6 Barrier:        grid size = 309
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1474 1/cm
         B7 Barrier:        grid size = 279
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4714 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.08114, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 379
      MasterEquation::Barrier::truncate: real weight = 3.81307e+39
      MasterEquation::Barrier::truncate: effective weight = 1.87635e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 379
      MasterEquation::Barrier::truncate: real weight = 1.1119e+38
      MasterEquation::Barrier::truncate: effective weight = 5.46671e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6085  -6085 1.65e+09 1.58e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -37 4.02e+15
         B2    179 7.78e+14
         B3  -4681 2.14e+14
         B4  -6085 2.57e+14
         B5  -6085 2.93e+13
         B6   1475 3.16e+15
         B7   4715 3.69e+14
         B8  16703 1.83e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.33e-10  7.92e-10  2.27e-13  6.57e-15   4.4e-32  2.24e-07  0.000644  1.51e+09
          R  2.31e+09         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1  1.26e+09     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2  4.41e+12  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3  1.52e+14   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  2.27e+31  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  4.47e+06   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6  1.55e+03  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7  6.64e-10  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.04e+04  5.55e+04      15.9      0.46  3.08e-18  1.57e+07  4.51e+10  1.05e+23
          R  3.29e-05         1      1.83  0.000524  1.52e-05  1.02e-22       516  1.49e+06  3.47e+18
         P1   1.8e-05     0.547         1  0.000287  8.29e-06  5.56e-23       282  8.14e+05   1.9e+18
         P2    0.0629  1.91e+03  3.49e+03         1    0.0289  1.94e-19  9.85e+05  2.84e+09  6.63e+21
         P3      2.17   6.6e+04  1.21e+05      34.6         1   6.7e-18   3.4e+07  9.81e+10  2.29e+23
         P4  3.24e+17  9.85e+21   1.8e+22  5.16e+18  1.49e+17         1  5.08e+24  1.46e+28  3.42e+40
         P5  6.39e-08   0.00194   0.00354  1.02e-06  2.94e-08  1.97e-25         1  2.88e+03  6.73e+15
         P6  2.22e-11  6.73e-07  1.23e-06  3.52e-10  1.02e-11  6.83e-29  0.000347         1  2.34e+12
         P7  9.49e-24  2.88e-19  5.26e-19  1.51e-22  4.36e-24  2.92e-41  1.49e-16  4.28e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.09559, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+08
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.298189, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36585, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27282.8      5274.24      1448.81      1740.48      199.072      21442.8      2504.58       12.384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80554, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.04397e-06  4.04398e-06  1.70615e-06
      low eigenvalue method done, cpu time[sec] = 1.80662, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.04e-06  1.71e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.59e-07  1.71e-06         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70614e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.30693e-24  2.90879e-24  8.37978e-26  6.55445e-25   1.8237e-26  1.23748e-26  1.95299e-31  1.20076e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99702, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+08
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.288441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9094.27      1758.08      482.936      580.159      66.3573      7147.59       834.86      4.12801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72085, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.25314e-06  2.25314e-06  8.28134e-07
      low eigenvalue method done, cpu time[sec] = 1.75414, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.25e-06  8.28e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-07  8.28e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.28133e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.33171e-24  1.21344e-24  3.38808e-26  2.20396e-25   6.6532e-27  1.15056e-26   1.9665e-31  1.20077e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9146, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.39887e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.286225, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35654, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5456.56      1054.85      289.762      348.096      39.8144      4288.55      500.916      2.47681
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72192, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7537, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.66702e-06  1.66703e-06  5.58423e-07
      low eigenvalue method done, cpu time[sec] = 1.75482, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.67e-06  5.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-07  5.58e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.58423e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.00143e-24  7.56602e-25   2.1449e-26  1.28958e-25  4.04311e-27  1.04063e-26  1.98052e-31  1.20079e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91627, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.95842e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.283746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.34901, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3897.54      753.462      206.973       248.64      28.4388      3063.25      357.797      1.76915
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7295, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.76155, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.35132e-06  1.35132e-06  4.21511e-07
      low eigenvalue method done, cpu time[sec] = 1.76266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-06  4.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-07  4.22e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.21511e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.30183e-24  5.41861e-25  1.56312e-26  8.94366e-26  2.87424e-27  9.45663e-27  1.99476e-31  1.20081e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91367, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.51796e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.28289, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35842, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3031.42      586.026      160.979      193.386      22.1191      2382.53      278.287        1.376
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71842, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75017, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14809e-06  1.14809e-06  3.37688e-07
      low eigenvalue method done, cpu time[sec] = 1.75126, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-06  3.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.83e-08  3.38e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.37688e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86422e-24  4.17364e-25  1.22358e-26  6.75459e-26  2.21086e-27  8.66006e-27  2.00896e-31  1.20083e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91418, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.283791, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.3648, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2728.28      527.424      144.881      174.048      19.9072      2144.28      250.458       1.2384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07057e-06  1.07057e-06  3.06785e-07
      low eigenvalue method done, cpu time[sec] = 1.74445, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-06  3.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.15e-08  3.07e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.06785e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70093e-24  3.72987e-25  1.10166e-26  5.99278e-26  1.97654e-27  8.31021e-27  2.01599e-31  1.20084e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91422, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         4.19661e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.283699, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37052, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1818.85      351.616      96.5873      116.032      13.2715      1429.52      166.972     0.825602
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73856, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.10888e-07  8.10888e-07  2.08479e-07
      low eigenvalue method done, cpu time[sec] = 1.73965, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.11e-07  2.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-08  2.08e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.08479e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.17365e-24  2.38069e-25  7.25997e-27  3.73813e-26  1.26925e-27  6.91841e-27  2.04978e-31  1.20089e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91321, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         5.59548e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37224, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1364.14      263.712      72.4404      87.0239      9.95359      1072.14      125.229     0.619202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70977, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002233, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74232, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.60241e-07  6.60241e-07  1.55883e-07
      low eigenvalue method done, cpu time[sec] = 1.74344, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.6e-07  1.56e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.58e-08  1.56e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55883e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.86035e-25  1.70418e-25  5.32983e-27  2.64369e-26  9.16007e-28  5.92962e-27  2.08029e-31  1.20095e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92004, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         6.99435e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285166, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37402, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1091.31      210.969      57.9524      69.6191      7.96287      857.711      100.183     0.495361
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002232, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73612, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.60282e-07  5.60282e-07   1.2321e-07
      low eigenvalue method done, cpu time[sec] = 1.7372, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.6e-07  1.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.71e-08  1.23e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2321e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.05102e-25  1.30314e-25  4.16095e-27  2.00685e-26  7.06188e-28  5.18762e-27  2.10681e-31    1.201e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9206, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.286005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37827, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            909.427      175.808      48.2936      58.0159      6.63573      714.759       83.486     0.412801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69908, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73128, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.8847e-07   4.8847e-07  1.01021e-07
      low eigenvalue method done, cpu time[sec] = 1.73236, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.88e-07  1.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.1e-08  1.01e-07         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01021e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.81105e-25  1.04052e-25  3.38115e-27  1.59481e-26  5.68231e-28  4.60824e-27  2.12917e-31  1.20105e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92053, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         9.79209e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.287613, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.36645, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            779.509      150.692      41.3945      49.7279      5.68777       612.65      71.5594      0.35383
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71071, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.34076e-07  4.34076e-07  8.50231e-08
      low eigenvalue method done, cpu time[sec] = 1.74375, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.34e-07   8.5e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.63e-08   8.5e-08         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.50231e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.91083e-25  8.56704e-26  2.82637e-27  1.30883e-26  4.71209e-28  4.14219e-27  2.14746e-31  1.20111e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1          1.1191e+10
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.287247, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.37155, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             682.07      131.856      36.2202       43.512       4.9768      536.069      62.6145     0.309601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73877, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.91283e-07  3.91283e-07  7.29819e-08
      low eigenvalue method done, cpu time[sec] = 1.74021, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.91e-07   7.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-08   7.3e-08         1
         *Z       ---       ---  1.86e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.29819e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.22945e-25  7.21751e-26   2.4131e-27  1.10014e-26  3.99619e-28  3.75857e-27   2.1619e-31  1.20116e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9188, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 660 K
      Energy reference = 35125 1/cm
      Energy step      = 110 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006523
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.366903
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.191867
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.20073
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.940947
         W1 Well: minimal relaxation eigenvalue = 0.0747695
         W1 Well: maximal relaxation eigenvalue = 0.987717
         W1 Well:       grid size = 376
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6235 1/cm
         B1 Barrier:        grid size = 320
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -75 1/cm
         B2 Barrier:        grid size = 318
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 144 1/cm
         B3 Barrier:        grid size = 362
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4695 1/cm
         B4 Barrier:        grid size = 376
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6235 1/cm
         B5 Barrier: nonpositive number of states at -23175 1/cm => truncating
         B5 Barrier:        grid size = 530
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23175 1/cm
         B6 Barrier:        grid size = 306
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 277
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4655 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16755 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.05672, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 376
      MasterEquation::Barrier::truncate: real weight = 6.34626e+37
      MasterEquation::Barrier::truncate: effective weight = 3.17892e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6235  -6235 1.57e+09 1.65e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -75  4.3e+15
         B2    145 8.39e+14
         B3  -4695 2.31e+14
         B4  -6235 2.77e+14
         B5  -6235 3.18e+13
         B6   1465 3.41e+15
         B7   4655 4.01e+14
         B8  16755 2.05e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.32e-10  7.86e-10  2.64e-13  8.08e-15     1e-31  2.12e-07  0.000553   8.7e+08
          R  2.32e+09         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  1.27e+09      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2  3.78e+12  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3  1.24e+14  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4     1e+31  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5  4.72e+06   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6  1.81e+03  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  1.15e-09  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.03e+04  1.87e+04      6.28     0.192  2.38e-18  5.04e+06  1.31e+10  2.07e+22
          R  9.74e-05         1      1.82  0.000612  1.87e-05  2.32e-22       491  1.28e+06  2.02e+18
         P1  5.35e-05      0.55         1  0.000336  1.03e-05  1.27e-22       270  7.03e+05  1.11e+18
         P2     0.159  1.63e+03  2.97e+03         1    0.0306  3.78e-19  8.02e+05  2.09e+09  3.29e+21
         P3       5.2  5.34e+04  9.72e+04      32.7         1  1.24e-17  2.62e+07  6.84e+10  1.08e+23
         P4  4.21e+17  4.32e+21  7.86e+21  2.64e+18  8.08e+16         1  2.12e+24  5.53e+27   8.7e+39
         P5  1.98e-07   0.00204   0.00371  1.25e-06  3.81e-08  4.72e-25         1  2.61e+03  4.11e+15
         P6  7.61e-11  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.81e-28  0.000383         1  1.57e+12
         P7  4.83e-23  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.15e-40  2.44e-16  6.35e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.46716, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+08
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.297182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.23952, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28199.5      5501.55      1516.67      1818.67      208.521      22346.6      2633.57      13.4678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86378, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002239, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89539, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.84725e-06  3.84726e-06  1.64266e-06
      low eigenvalue method done, cpu time[sec] = 1.89679, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.85e-06  1.64e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.38e-07  1.64e-06         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.64266e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.40591e-23  8.36364e-24  2.40591e-25  1.87157e-24  5.21935e-26  3.72129e-26  6.57913e-31  6.08952e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94914, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+08
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.285879, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.24641, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9399.82      1833.85      505.557      606.225       69.507      7448.85      877.855      4.48927
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.79717, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002194, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82863, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.16145e-06  2.16145e-06  8.05726e-07
      low eigenvalue method done, cpu time[sec] = 1.82971, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-06  8.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-07  8.06e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.05726e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.2673e-23   3.5214e-24  9.84246e-26  6.36501e-25  1.92677e-26  3.47135e-26  6.62424e-31  6.08957e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87763, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.38501e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.286696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.27783, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5639.89      1100.31      303.334      363.735      41.7042      4469.31      526.713      2.69356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78164, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002186, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60518e-06  1.60518e-06  5.46356e-07
      low eigenvalue method done, cpu time[sec] = 1.81398, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-06  5.46e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-07  5.46e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.46356e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.82885e-24   2.2068e-24  6.26916e-26  3.74624e-25  1.17808e-26  3.14909e-26    6.671e-31  6.08965e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.89485, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.93902e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.285497, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26789, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4028.5      785.936      216.667      259.811      29.7887      3192.37      376.224      1.92397
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002181, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81857, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30435e-06  1.30435e-06  4.14026e-07
      low eigenvalue method done, cpu time[sec] = 1.81964, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-06  4.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-07  4.14e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.14026e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.79693e-24  1.58615e-24  4.58823e-26  2.60879e-25  8.41074e-27  2.86896e-26  6.71842e-31  6.08977e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.89166, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.49302e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.286269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.25184, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3133.27      611.283      168.519      202.075       23.169      2482.95      292.618      1.49642
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.79481, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002174, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82596, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11018e-06  1.11018e-06  3.32708e-07
      low eigenvalue method done, cpu time[sec] = 1.82705, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-06  3.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.43e-08  3.33e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.32708e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.52123e-24  1.22517e-24  3.60343e-26  1.97651e-25  6.49093e-27  2.63299e-26  6.76571e-31  6.08986e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88474, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.289297, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2819.95      550.155      151.667      181.867      20.8521      2234.66      263.357      1.34678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7964, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00218, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82969, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03599e-06  1.03599e-06  3.02659e-07
      low eigenvalue method done, cpu time[sec] = 1.83078, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-06  3.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.79e-08  3.03e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.02659e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.0441e-24  1.09623e-24    3.249e-26  1.75598e-25  5.81118e-27  2.52909e-26  6.78913e-31  6.08993e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8997, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         4.15504e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.287854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.25343, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1879.96       366.77      101.111      121.245      13.9014      1489.77      175.571     0.897855
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002183, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82542, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.86924e-07  7.86924e-07  2.06753e-07
      low eigenvalue method done, cpu time[sec] = 1.82649, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.87e-07  2.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.63e-08  2.07e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.06753e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.49835e-24   7.0309e-25  2.15312e-26  1.10123e-25  3.75266e-27  2.11421e-26   6.9016e-31   6.0902e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88427, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         5.54005e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.287941, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26069, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1409.97      275.078      75.8335      90.9337       10.426      1117.33      131.678     0.673391
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.79018, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002184, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.41992e-07  6.41992e-07   1.5519e-07
      low eigenvalue method done, cpu time[sec] = 1.82265, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.42e-07  1.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.38e-08  1.55e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5519e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.65106e-24  5.05105e-25  1.58723e-26  7.81903e-26  2.71944e-27  1.81796e-26  7.00322e-31  6.09046e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88643, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         6.92507e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.287707, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26416, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1127.98      220.062      60.6668      72.7469      8.34083      893.862      105.343     0.538713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78395, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002183, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81528, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.4561e-07   5.4561e-07   1.2304e-07
      low eigenvalue method done, cpu time[sec] = 1.81636, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.46e-07  1.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.56e-08  1.23e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2304e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.11609e-24  3.87348e-25  1.24321e-26  5.95417e-26   2.1034e-27  1.59478e-26  7.09174e-31  6.09073e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88269, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.286734, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.285, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            939.982      183.385      50.5557      60.6225       6.9507      744.885      87.7855     0.448927
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76405, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002176, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79538, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.76247e-07  4.76248e-07   1.0114e-07
      low eigenvalue method done, cpu time[sec] = 1.79651, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.76e-07  1.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-08  1.01e-07         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0114e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74836e-24  3.10024e-25  1.01298e-26  4.74403e-26   1.6971e-27  1.41995e-26  7.16655e-31    6.091e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.88251, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         9.69509e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.288935, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.27588, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            805.699      157.187      43.3334      51.9621      5.95774      638.473      75.2447     0.384795
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81743, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.23634e-07  4.23634e-07  8.53109e-08
      low eigenvalue method done, cpu time[sec] = 1.81851, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.24e-07  8.53e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.52e-08  8.53e-08         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.53109e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.48072e-24   2.5578e-25  8.48749e-27  3.90202e-26  1.41062e-27  1.27894e-26  7.22797e-31  6.09126e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90371, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.10801e+10
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.288683, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.29395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            704.987      137.539      37.9168      45.4668      5.21302      558.664      65.8391     0.336696
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76659, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002185, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79785, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.82193e-07  3.82193e-07  7.33701e-08
      low eigenvalue method done, cpu time[sec] = 1.79897, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.82e-07  7.34e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.17e-08  7.34e-08         1
         *Z       ---       ---  1.46e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.33701e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.27769e-24  2.15876e-25  7.26129e-27  3.28627e-26  1.19875e-27   1.1626e-26  7.27676e-31  6.09154e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90018, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 670 K
      Energy reference = 35403 1/cm
      Energy step      = 112 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00639
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.36635
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.190027
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.197102
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.914735
         W1 Well: minimal relaxation eigenvalue = 0.0743363
         W1 Well: maximal relaxation eigenvalue = 0.987016
         W1 Well:       grid size = 372
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6261 1/cm
         B1 Barrier:        grid size = 317
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -101 1/cm
         B2 Barrier:        grid size = 315
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 122 1/cm
         B3 Barrier:        grid size = 358
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4693 1/cm
         B4 Barrier:        grid size = 372
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23173 1/cm => truncating
         B5 Barrier:        grid size = 523
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23173 1/cm
         B6 Barrier:        grid size = 303
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1466 1/cm
         B7 Barrier:        grid size = 274
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4714 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16698 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.02098, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 372
      MasterEquation::Barrier::truncate: real weight = 3.69382e+37
      MasterEquation::Barrier::truncate: effective weight = 1.88418e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6261  -6261 1.56e+09 1.72e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -101 4.59e+15
         B2    123 9.04e+14
         B3  -4693  2.5e+14
         B4  -6261 2.99e+14
         B5  -6261 3.44e+13
         B6   1467 3.67e+15
         B7   4715 4.36e+14
         B8  16699 2.31e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.43e-10  6.21e-10  2.44e-13  7.87e-15  1.77e-31   1.6e-07  0.000379  4.07e+08
          R  2.92e+09         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1  1.61e+09     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2   4.1e+12   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3  1.27e+14  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  5.66e+30  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5  6.24e+06   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  2.64e+03  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7  2.45e-09  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.59e+03   6.5e+03      2.55    0.0824  1.85e-18  1.68e+06  3.97e+09  4.26e+21
          R  0.000279         1      1.81  0.000712   2.3e-05  5.15e-22       468  1.11e+06  1.19e+18
         P1  0.000154     0.552         1  0.000393  1.27e-05  2.84e-22       258  6.11e+05  6.56e+17
         P2     0.392   1.4e+03  2.54e+03         1    0.0323  7.24e-19  6.57e+05  1.55e+09  1.67e+21
         P3      12.1  4.35e+04  7.89e+04        31         1  2.24e-17  2.04e+07  4.82e+10  5.18e+22
         P4  5.41e+17  1.94e+21  3.52e+21  1.38e+18  4.46e+16         1  9.07e+23  2.15e+27  2.31e+39
         P5  5.96e-07   0.00214   0.00388  1.52e-06  4.91e-08   1.1e-24         1  2.37e+03  2.54e+15
         P6  2.52e-10  9.04e-07  1.64e-06  6.44e-10  2.08e-11  4.66e-28  0.000423         1  1.07e+12
         P7  2.35e-22  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.34e-40  3.93e-16  9.31e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.03382, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.286818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.10625, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29134.6      5736.01      1586.91      1899.47      218.307      23276.5      2767.48      14.6286
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9602, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99088, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.56397e-06  4.56398e-06  1.98504e-06
      low eigenvalue method done, cpu time[sec] = 1.99197, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-06  1.99e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.01e-07  1.99e-06         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98504e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.74418e-23  2.32755e-23  6.68676e-25  5.17362e-24  1.44605e-25   1.0827e-25  2.14507e-30  2.94029e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.89463, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279424, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9711.55         1912       528.97      633.156       72.769      7758.84      922.495      4.87622
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91971, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.58693e-06  2.58693e-06  9.83696e-07
      low eigenvalue method done, cpu time[sec] = 1.92079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.59e-06  9.84e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-07  9.84e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.83695e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.58757e-23  9.88897e-24  2.76718e-25  1.77916e-24  5.40052e-26  1.01296e-25  2.15977e-30  2.94035e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.37151e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276341, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13636, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5826.93       1147.2      317.382      379.894      43.6614       4655.3      553.497      2.92573
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88344, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002147, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.92891e-06  1.92891e-06  6.70689e-07
      low eigenvalue method done, cpu time[sec] = 1.91512, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.93e-06  6.71e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-07  6.71e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.70688e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.51262e-23  6.22807e-24  1.77313e-25  1.05321e-24  3.32191e-26  9.21532e-26  2.17497e-30   2.9404e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82687, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.92011e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277278, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11856, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4162.09       819.43      226.701      271.353      31.1867      3325.22      395.355      2.08981
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002146, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57155e-06  1.57155e-06  5.10201e-07
      low eigenvalue method done, cpu time[sec] = 1.93106, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-06   5.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-07   5.1e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.10201e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.94161e-23  4.49228e-24  1.30313e-25  7.36385e-25  2.38157e-26  8.41586e-26  2.19037e-30  2.94046e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82981, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.46871e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.278512, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13626, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3237.18      637.335      176.323      211.052      24.2563      2586.28      307.498      1.62541
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88015, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34022e-06  1.34022e-06  4.11224e-07
      low eigenvalue method done, cpu time[sec] = 1.9118, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-06  4.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-07  4.11e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.11224e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.58181e-23  3.47952e-24  1.02675e-25  5.59652e-25  1.84393e-26  7.73978e-26   2.2057e-30   2.9405e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83494, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11902, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2913.46      573.601      158.691      189.947      21.8307      2327.65      276.748      1.46286
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002146, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.25167e-06  1.25167e-06  3.74565e-07
      low eigenvalue method done, cpu time[sec] = 1.93075, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-06  3.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07  3.75e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.74565e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.44694e-23  3.11704e-24  9.27041e-26   4.9787e-25  1.65312e-26  7.44137e-26  2.21328e-30  2.94053e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82553, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         4.11452e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276684, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11646, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1942.31      382.401      105.794      126.631      14.5538      1551.77      184.499     0.975243
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.90537, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.93677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.53714e-07  9.53714e-07  2.57186e-07
      low eigenvalue method done, cpu time[sec] = 1.93818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.54e-07  2.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.01e-08  2.57e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57186e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00857e-23  2.00871e-24  6.17739e-26  3.13886e-25  1.07341e-26  6.24558e-26  2.24966e-30  2.94066e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         5.48602e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275669, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13345, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1456.73      286.801      79.3455      94.9734      10.9153      1163.83      138.374     0.731432
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91201, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.79749e-07  7.79749e-07  1.93777e-07
      low eigenvalue method done, cpu time[sec] = 1.91314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-07  1.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.52e-08  1.94e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93777e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.67138e-24  1.44817e-24  4.57229e-26  2.23735e-25  7.81025e-27  5.38745e-26  2.28246e-30  2.94079e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82796, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         6.85753e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277149, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13453, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1165.39      229.441      63.4764      75.9787      8.73228      931.061      110.699     0.585146
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88371, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91427, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.6378e-07   6.6378e-07  1.54097e-07
      low eigenvalue method done, cpu time[sec] = 1.91537, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.64e-07  1.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.53e-08  1.54e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54097e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.1415e-24  1.11369e-24  3.59282e-26    1.709e-25  6.06045e-27  4.73852e-26  2.31101e-30  2.94092e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8341, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276753, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            971.155        191.2       52.897      63.3156       7.2769      775.884      92.2495     0.487622
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87484, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.80164e-07  5.80164e-07  1.26988e-07
      low eigenvalue method done, cpu time[sec] = 1.90656, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.8e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.82e-08  1.27e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26988e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.0868e-24  8.93467e-25  2.93532e-26  1.36516e-25  4.90289e-27   4.2286e-26  2.33514e-30  2.94105e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83594, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         9.60054e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16104, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            832.418      163.886      45.3403      54.2705      6.23734      665.043       79.071     0.417961
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86834, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89902, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.16639e-07  5.16639e-07  1.07344e-07
      low eigenvalue method done, cpu time[sec] = 1.90041, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.17e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.28e-08  1.07e-07         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07344e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.31723e-24   7.3863e-25  2.46509e-26  1.12533e-25   4.0846e-27  3.81623e-26  2.35496e-30  2.94118e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84558, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1          1.0972e+10
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.278716, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            728.366        143.4      39.6728      47.4867      5.45767      581.913      69.1871     0.365716
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8717, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90198, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.66538e-07  4.66538e-07  9.24942e-08
      low eigenvalue method done, cpu time[sec] = 1.90312, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.67e-07  9.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.85e-08  9.25e-08         1
         *Z       ---       ---  1.03e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.24942e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.73221e-24    6.245e-25  2.11321e-26  9.49573e-26  3.47807e-27  3.47521e-26  2.37073e-30  2.94131e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8463, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 680 K
      Energy reference = 35682 1/cm
      Energy step      = 113 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006913
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.363285
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.189175
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.192089
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.919678
         W1 Well: minimal relaxation eigenvalue = 0.073901
         W1 Well: maximal relaxation eigenvalue = 0.988596
         W1 Well:       grid size = 372
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6353 1/cm
         B1 Barrier:        grid size = 316
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -25 1/cm
         B2 Barrier:        grid size = 314
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 200 1/cm
         B3 Barrier:        grid size = 357
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4658 1/cm
         B4 Barrier:        grid size = 371
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6240 1/cm
         B5 Barrier: nonpositive number of states at -23191 1/cm => truncating
         B5 Barrier:        grid size = 521
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23190 1/cm
         B6 Barrier:        grid size = 303
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 275
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4607 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16698 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.0185, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 372
      MasterEquation::Barrier::truncate: real weight = 2.19497e+37
      MasterEquation::Barrier::truncate: effective weight = 1.12978e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6353  -6353 1.51e+09  1.8e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -25  4.9e+15
         B2    201 9.74e+14
         B3  -4658 2.71e+14
         B4  -6240 3.23e+14
         B5  -6353 3.72e+13
         B6   1444 3.95e+15
         B7   4608 4.74e+14
         B8  16699 2.59e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.11e-10  5.61e-10  2.56e-13  8.71e-15  3.49e-31  1.39e-07  0.000299  2.22e+08
          R  3.21e+09         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1  1.78e+09     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2   3.9e+12  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3  1.15e+14  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  2.87e+30  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  7.21e+06   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  3.35e+03  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7  4.51e-09   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.29e+03  2.33e+03      1.07    0.0362  1.45e-18  5.76e+05  1.24e+09   9.2e+20
          R  0.000774         1       1.8  0.000825   2.8e-05  1.12e-21       446   9.6e+05  7.12e+17
         P1  0.000429     0.554         1  0.000457  1.55e-05  6.21e-22       247  5.32e+05  3.95e+17
         P2     0.939  1.21e+03  2.19e+03         1     0.034  1.36e-18  5.41e+05  1.16e+09  8.64e+20
         P3      27.6  3.57e+04  6.44e+04      29.4         1     4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  6.91e+17  8.92e+20  1.61e+21  7.36e+17   2.5e+16         1  3.98e+23  8.57e+26  6.36e+38
         P5  1.74e-06   0.00224   0.00405  1.85e-06  6.28e-08  2.51e-24         1  2.15e+03   1.6e+15
         P6  8.06e-10  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.17e-27  0.000464         1  7.42e+11
         P7  1.09e-21   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.57e-39  6.26e-16  1.35e-12         1
   MasterEquation::set:  done, cpu time[sec] = 2.03141, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.288204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.11904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30090.9      5978.47      1659.79      1983.15      228.467      24235.7      2906.87      15.8743
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95714, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002157, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.79698e-06  4.79699e-06  2.11561e-06
      low eigenvalue method done, cpu time[sec] = 1.98894, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-06  2.12e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.19e-07  2.12e-06         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11561e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.83199e-22  6.27413e-23  1.80131e-24  1.38626e-23  3.88339e-25   3.0528e-25  6.73875e-30  1.35525e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90351, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279608, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12316, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10030.3      1992.82      553.264      661.051      76.1557      8078.55      968.957      5.29145
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.90361, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002136, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.93409, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7416e-06   2.7416e-06  1.05901e-06
      low eigenvalue method done, cpu time[sec] = 1.93542, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-06  1.06e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-07  1.06e-06         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05901e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.83925e-23  2.68993e-23  7.53879e-25  4.81947e-24  1.46689e-25  2.86375e-25  6.78468e-30   1.3553e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84597, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.35833e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.280038, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13065, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6018.18      1195.69      331.958      396.631      45.6934      4847.13      581.374      3.17487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89572, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002157, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92624, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05194e-06  2.05194e-06  7.25908e-07
      low eigenvalue method done, cpu time[sec] = 1.92735, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-06  7.26e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-07  7.26e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.25908e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.92678e-23  1.70246e-23  4.85899e-25  2.86916e-24  9.07619e-26  2.61211e-25  6.83215e-30  1.35532e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83889, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.90167e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276961, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4298.7      854.067      237.113      283.308      32.6382      3462.24      415.267      2.26776
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92788, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.6759e-06   1.6759e-06  5.54287e-07
      low eigenvalue method done, cpu time[sec] = 1.92898, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.68e-06  5.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-07  5.54e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.54287e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.37219e-23  1.23227e-23  3.58562e-25  2.01396e-24  6.53366e-26  2.39092e-25  6.88015e-30  1.35534e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83426, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           2.445e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.27758, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13143, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3343.43      664.275      184.421       220.35      25.3852      2692.85      322.986      1.76382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89053, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002169, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9212, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.43181e-06  1.43181e-06  4.48068e-07
      low eigenvalue method done, cpu time[sec] = 1.92233, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-06  4.48e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-07  4.48e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.48067e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.38919e-23  9.57064e-24   2.8341e-25  1.53529e-24  5.07475e-26  2.20318e-25  6.92791e-30  1.35536e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83068, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13256, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3009.09      597.847      165.979      198.315      22.8467      2423.57      290.687      1.58743
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33823e-06  1.33823e-06  4.08638e-07
      low eigenvalue method done, cpu time[sec] = 1.92034, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-06  4.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-07  4.09e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.08638e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.01987e-23  8.58369e-24  2.56235e-25  1.36759e-24   4.5558e-26  2.12013e-25  6.95151e-30  1.35537e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83045, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           4.075e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276955, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13238, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2006.06      398.565      110.653       132.21      15.2311      1615.71      193.791      1.05829
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89025, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02263e-06  1.02263e-06   2.8199e-07
      low eigenvalue method done, cpu time[sec] = 1.92239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06  2.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.55e-08  2.82e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.8199e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.81574e-23  5.55756e-24  1.71664e-25  8.66682e-25  2.97417e-26  1.78622e-25  7.06464e-30  1.35543e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83054, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         5.43333e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277296, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14537, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1504.55      298.924      82.9896      99.1577      11.4234      1211.78      145.343     0.793717
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8746, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00216, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.37787e-07  8.37787e-07  2.13254e-07
      low eigenvalue method done, cpu time[sec] = 1.90634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.38e-07  2.13e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.97e-08  2.13e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.13254e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.1495e-23  4.02065e-24  1.27564e-25  6.20121e-25  2.17263e-26  1.54548e-25  7.16663e-30  1.35549e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83084, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         6.79166e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.13074, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1203.64      239.139      66.3917      79.3262      9.13869      969.426      116.275     0.634974
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89545, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.14287e-07  7.14288e-07  1.70087e-07
      low eigenvalue method done, cpu time[sec] = 1.92707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.14e-07   1.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-08   1.7e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70087e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72582e-23  3.10059e-24  1.00554e-25  4.75118e-25   1.6912e-26  1.36277e-25  7.25542e-30  1.35555e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83464, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277363, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15145, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1003.03      199.282      55.3264      66.1051      7.61557      807.855      96.8957     0.529145
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87126, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00216, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9019, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.25083e-07  6.25083e-07   1.4051e-07
      low eigenvalue method done, cpu time[sec] = 1.90296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.25e-07  1.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.16e-08  1.41e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4051e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.4329e-23  2.49325e-24  8.23685e-26  3.80483e-25  1.37177e-26  1.21877e-25  7.33057e-30  1.35561e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         9.50833e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15359, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             859.74      170.813      47.4226      56.6616      6.52763      692.447      83.0534     0.453553
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87014, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9008, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.57215e-07  5.57215e-07  1.19026e-07
      low eigenvalue method done, cpu time[sec] = 1.90189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.57e-07  1.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.59e-08  1.19e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19026e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21865e-23  2.06528e-24  6.93292e-26  3.14319e-25  1.14539e-26  1.10203e-25  7.39244e-30  1.35567e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.08667e+10
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279752, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            752.273      149.462      41.4948      49.5789      5.71168      605.891      72.6717     0.396858
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8748, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.03622e-07  5.03622e-07   1.0275e-07
      low eigenvalue method done, cpu time[sec] = 1.90645, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.04e-07  1.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-08  1.03e-07         1
         *Z       ---       ---  7.79e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0275e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.05543e-23  1.74921e-24    5.955e-26   2.6573e-25  9.77238e-27  1.00527e-25  7.44183e-30  1.35573e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.83431, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 690 K
      Energy reference = 35960 1/cm
      Energy step      = 115 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006405
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.352717
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.185487
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.195711
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.890515
         W1 Well: minimal relaxation eigenvalue = 0.0734857
         W1 Well: maximal relaxation eigenvalue = 0.987897
         W1 Well:       grid size = 368
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6359 1/cm
         B1 Barrier:        grid size = 313
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -35 1/cm
         B2 Barrier:        grid size = 311
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 194 1/cm
         B3 Barrier:        grid size = 353
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4635 1/cm
         B4 Barrier:        grid size = 367
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6245 1/cm
         B5 Barrier: nonpositive number of states at -23265 1/cm => truncating
         B5 Barrier:        grid size = 515
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23264 1/cm
         B6 Barrier:        grid size = 300
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1460 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4679 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16755 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.97935, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 368
      MasterEquation::Barrier::truncate: real weight = 1.32472e+37
      MasterEquation::Barrier::truncate: effective weight = 6.93964e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6359  -6359 1.51e+09 1.88e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -35 5.23e+15
         B2    195 1.05e+15
         B3  -4635 2.92e+14
         B4  -6245 3.49e+14
         B5  -6359 4.03e+13
         B6   1461 4.25e+15
         B7   4680 5.14e+14
         B8  16755  2.9e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.4e-10  4.32e-10  2.29e-13  8.17e-15  5.72e-31  1.02e-07  0.000201  1.04e+08
          R  4.16e+09         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1  2.31e+09     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2  4.38e+12  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3  1.22e+14  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  1.75e+30   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5  9.77e+06   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  4.97e+03  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7   9.6e-09  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       479       862     0.456    0.0163  1.14e-18  2.04e+05  4.01e+08  2.08e+20
          R   0.00209         1       1.8  0.000951   3.4e-05  2.38e-21       426  8.37e+05  4.33e+17
         P1   0.00116     0.556         1  0.000529  1.89e-05  1.32e-21       237  4.65e+05  2.41e+17
         P2      2.19  1.05e+03  1.89e+03         1    0.0357  2.51e-18  4.48e+05   8.8e+08  4.56e+20
         P3      61.4  2.94e+04  5.29e+04        28         1  7.01e-17  1.25e+07  2.46e+10  1.28e+22
         P4  8.76e+17   4.2e+20  7.55e+20  3.99e+17  1.43e+16         1  1.79e+23  3.51e+26  1.82e+38
         P5   4.9e-06   0.00235   0.00422  2.23e-06  7.98e-08  5.59e-24         1  1.96e+03  1.02e+15
         P6  2.49e-09  1.19e-06  2.15e-06  1.14e-09  4.06e-11  2.85e-27  0.000509         1  5.18e+11
         P7  4.81e-21  2.31e-18  4.15e-18  2.19e-21  7.84e-23   5.5e-39  9.83e-16  1.93e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.99351, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+08
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.28111, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01793, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31063.5      6227.71      1734.96      2069.32      238.952      25219.1      3051.04      17.2001
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02622, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002104, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.84409e-06   5.8441e-06  2.62551e-06
      low eigenvalue method done, cpu time[sec] = 2.05785, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.84e-06  2.63e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.11e-07  2.63e-06         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.6255e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.83057e-22  1.64213e-22   4.7113e-24  3.60682e-23  1.01262e-24  8.33472e-25  2.04282e-29   5.9749e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84389, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+08
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.271957, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.03651, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10354.5       2075.9       578.32      689.774      79.6508      8406.38      1017.01      5.73336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94968, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97997, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.36885e-06  3.36886e-06  1.32726e-06
      low eigenvalue method done, cpu time[sec] = 1.98145, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.37e-06  1.33e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-07  1.33e-06         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32726e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.61891e-22  7.10297e-23  1.99364e-24  1.26743e-23  3.86788e-25  7.84281e-25  2.05661e-29  5.97512e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78044, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.34548e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272127, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01506, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6212.71      1245.54      346.992      413.865      47.7905      5043.83      610.207      3.44002
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97051, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002075, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.00085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.53137e-06  2.53137e-06   9.1456e-07
      low eigenvalue method done, cpu time[sec] = 2.00193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.53e-06  9.15e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-07  9.15e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.14559e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.85306e-22   4.5172e-23  1.29236e-24  7.58729e-24  2.40705e-25  7.17385e-25  2.07085e-29  5.97519e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78005, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.88367e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.274429, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01887, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4437.65      889.673      247.851      295.618      34.1361      3602.73      435.862      2.45715
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.00688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07283e-06  2.07283e-06  7.00915e-07
      low eigenvalue method done, cpu time[sec] = 2.00797, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-06  7.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-07  7.01e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.00915e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.44233e-22  3.28081e-23  9.57507e-25  5.34644e-24  1.73974e-25  6.58193e-25  2.08523e-29   5.9753e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79019, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.42186e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272703, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.02325, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3451.5      691.968      192.773      229.925      26.5503      2802.13      339.004      1.91112
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96635, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002062, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99678, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.77435e-06  1.77435e-06  5.68227e-07
      low eigenvalue method done, cpu time[sec] = 1.99784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.77e-06  5.68e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.5e-07  5.68e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.68227e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18172e-22  2.55493e-23  7.59175e-25  4.08795e-24  1.35549e-25  6.07741e-25  2.09954e-29   5.9754e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78572, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.273531, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01259, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3106.35      622.771      173.496      206.932      23.8952      2521.91      305.104      1.72001
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.00089, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.65973e-06  1.65973e-06  5.18864e-07
      low eigenvalue method done, cpu time[sec] = 2.00233, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.66e-06  5.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-07  5.19e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.18864e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08359e-22  2.29411e-23  6.87296e-25  3.64611e-24  1.21851e-25  5.85368e-25  2.10661e-29  5.97547e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77827, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         4.03644e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.273297, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.03263, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2070.9      415.181      115.664      137.955      15.9302      1681.28      203.402      1.14667
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.9511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98143, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27222e-06  1.27222e-06  3.59818e-07
      low eigenvalue method done, cpu time[sec] = 1.9825, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-06   3.6e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07   3.6e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.59817e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.62658e-23  1.49219e-23  4.62892e-25  2.32245e-24  7.99702e-26  4.95081e-25  2.14049e-29  5.97572e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77925, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         5.38192e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272733, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.02877, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1553.18      311.385       86.748      103.466      11.9476      1260.96      152.552     0.860004
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96138, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04451e-06  1.04451e-06  2.73101e-07
      low eigenvalue method done, cpu time[sec] = 1.99274, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-06  2.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.68e-08  2.73e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.73101e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.8428e-23  1.08323e-23   3.4532e-25  1.66799e-24  5.86465e-26  4.29663e-25  2.17106e-29  5.97598e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79053, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1          6.7274e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.274688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04083, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1242.54      249.108      69.3984      82.7729      9.55809      1008.77      122.041     0.688003
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95104, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002077, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98158, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.92013e-07  8.92013e-07  2.18453e-07
      low eigenvalue method done, cpu time[sec] = 1.98266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.92e-07  2.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.38e-08  2.18e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18453e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.70453e-23  8.37635e-24  2.73049e-25  1.28178e-24   4.5793e-26  3.79827e-25  2.19773e-29  5.97624e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.27386, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05101, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1035.45       207.59       57.832      68.9774      7.96508      840.638      101.701     0.573336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94034, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.81652e-07  7.81652e-07  1.80903e-07
      low eigenvalue method done, cpu time[sec] = 1.97182, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.82e-07  1.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.45e-08  1.81e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.80902e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.91532e-23  6.75098e-24  2.24245e-25  1.02903e-24  3.72399e-26  3.40431e-25  2.22036e-29   5.9765e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79252, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         9.41836e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.273626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05247, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            887.529      177.935      49.5703      59.1235      6.82721      720.547      87.1725     0.491431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002066, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97441, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.97558e-07  6.97558e-07  1.53561e-07
      low eigenvalue method done, cpu time[sec] = 1.97549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.98e-07  1.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.74e-08  1.54e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53561e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.3367e-23  5.60313e-24  1.89165e-25  8.51897e-25  3.11633e-26  3.08407e-25  2.23906e-29  5.97676e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79638, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.07638e+10
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272829, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05473, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            776.588      155.693       43.374      51.7331      5.97381      630.478      76.2759     0.430002
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93915, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96925, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.31065e-07  6.31065e-07  1.32805e-07
      low eigenvalue method done, cpu time[sec] = 1.97033, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.31e-07  1.33e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.18e-08  1.33e-07         1
         *Z       ---       ---  5.49e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32805e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    2.895e-23   4.7538e-24  1.62798e-25   7.2155e-25  2.66399e-26  2.81806e-25  2.25408e-29  5.97702e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79755, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 700 K
      Energy reference = 36238 1/cm
      Energy step      = 117 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007852
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.352358
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.183079
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.189695
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.871986
         W1 Well: minimal relaxation eigenvalue = 0.073041
         W1 Well: maximal relaxation eigenvalue = 0.987293
         W1 Well:       grid size = 365
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6467 1/cm
         B1 Barrier:        grid size = 310
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 308
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 350
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4711 1/cm
         B4 Barrier:        grid size = 363
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23315 1/cm => truncating
         B5 Barrier:        grid size = 509
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23314 1/cm
         B6 Barrier:        grid size = 297
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1489 1/cm
         B7 Barrier:        grid size = 270
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4648 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.9513, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 365
      MasterEquation::Barrier::truncate: real weight = 8.13069e+36
      MasterEquation::Barrier::truncate: effective weight = 4.33371e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6467  -6467 1.45e+09 1.96e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 5.58e+15
         B2    202 1.13e+15
         B3  -4711 3.16e+14
         B4  -6232 3.76e+14
         B5  -6467 4.35e+13
         B6   1490 4.57e+15
         B7   4648 5.58e+14
         B8  16700 3.24e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.22e-10  3.98e-10  2.43e-13  9.11e-15   1.1e-30  9.05e-08  0.000163  5.94e+07
          R   4.5e+09         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1  2.51e+09     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2  4.12e+12       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3   1.1e+14  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4  9.08e+29  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5   1.1e+07   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  6.15e+03  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  1.68e-08  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       183       328       0.2    0.0075  9.06e-19  7.45e+04  1.34e+08  4.89e+19
          R   0.00547         1      1.79   0.00109   4.1e-05  4.95e-21       407  7.32e+05  2.67e+17
         P1   0.00305     0.558         1  0.000609  2.29e-05  2.76e-21       227  4.08e+05  1.49e+17
         P2      5.01       916  1.64e+03         1    0.0375  4.54e-18  3.73e+05  6.71e+08  2.45e+20
         P3       133  2.44e+04  4.37e+04      26.6         1  1.21e-16  9.94e+06  1.79e+10  6.53e+21
         P4   1.1e+18  2.02e+20  3.62e+20   2.2e+17  8.27e+15         1  8.22e+22  1.48e+26   5.4e+37
         P5  1.34e-05   0.00246    0.0044  2.68e-06  1.01e-07  1.22e-23         1   1.8e+03  6.56e+14
         P6  7.47e-09  1.37e-06  2.45e-06  1.49e-09   5.6e-11  6.77e-27  0.000556         1  3.65e+11
         P7  2.04e-20  3.74e-18   6.7e-18  4.08e-21  1.53e-22  1.85e-38  1.52e-15  2.74e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.96538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+08
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.277121, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.92705, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32054.9      6484.53      1812.67      2158.26      249.799      26229.9       3200.5      18.6132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.09466, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.12433, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.99155e-06  5.99157e-06  2.72354e-06
      low eigenvalue method done, cpu time[sec] = 2.12539, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.99e-06  2.72e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.2e-07  2.72e-06         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.72353e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.23792e-21  4.17868e-22  1.19792e-23  9.12467e-23  2.56727e-24  2.21869e-24  6.00894e-29   2.5235e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82038, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+08
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.275018, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.93813, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10685      2161.51      604.224       719.42      83.2663       8743.3      1066.83      6.20441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0623, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48047e-06  3.48047e-06  1.39003e-06
      low eigenvalue method done, cpu time[sec] = 2.0634, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.48e-06  1.39e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.97e-07  1.39e-06         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39003e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.77303e-22  1.82296e-22  5.12388e-24  3.23984e-23  9.91285e-25  2.09056e-24   6.0493e-29  2.52353e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.33294e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.270032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.94156, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6410.99      1296.91      362.535      431.652      49.9598      5245.98        640.1      3.72265
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.03467, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62448e-06  2.62449e-06  9.62706e-07
      low eigenvalue method done, cpu time[sec] = 2.06534, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.62e-06  9.63e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-07  9.63e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.62705e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.8161e-22  1.16476e-22  3.34017e-24  1.95001e-23  6.20376e-25  1.91618e-24  6.09089e-29  2.52357e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75807, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.86611e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.272698, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.96453, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4579.28      926.362      258.953      308.323      35.6855      3747.13      457.215      2.65903
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01194, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04155, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15407e-06  2.15407e-06  7.40469e-07
      low eigenvalue method done, cpu time[sec] = 2.04265, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.15e-06   7.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.81e-07   7.4e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.40468e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.76172e-22  8.48774e-23  2.48441e-24  1.37928e-23  4.50152e-25  1.76148e-24  6.13287e-29  2.52361e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.39928e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.26913, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.95449, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3561.66      720.504      201.408      239.807      27.7554      2914.43      355.611      2.06814
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01998, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002011, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04962, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.84709e-06  1.84709e-06  6.01978e-07
      low eigenvalue method done, cpu time[sec] = 2.05069, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-06  6.02e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-07  6.02e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.01977e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.09044e-22  6.62711e-23   1.9758e-24  1.05771e-23  3.51798e-25   1.6293e-24  6.17457e-29  2.52366e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75753, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.271252, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.96499, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3205.49      648.453      181.267      215.826      24.9799      2622.99       320.05      1.86132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00721, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002015, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72901e-06  1.72902e-06  5.50345e-07
      low eigenvalue method done, cpu time[sec] = 2.03794, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-06   5.5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-07   5.5e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.50345e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83715e-22  5.95727e-23  1.79106e-24  9.44576e-24  3.16659e-25  1.57058e-24  6.19517e-29  2.52368e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76244, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         3.99881e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.276061, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.96014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               2137      432.302      120.845      143.884      16.6533      1748.66      213.367      1.24088
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01098, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32901e-06  1.32901e-06  3.83484e-07
      low eigenvalue method done, cpu time[sec] = 2.04159, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-06  3.83e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-07  3.83e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.83484e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.00626e-22  3.89233e-23  1.21252e-24  6.04672e-24  2.08901e-25  1.33296e-24  6.29383e-29  2.52379e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         5.33174e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.267649, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.96838, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1602.75      324.227      90.6337      107.913      12.4899       1311.5      160.025     0.930661
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00779, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002037, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03737, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09326e-06  1.09326e-06  2.92101e-07
      low eigenvalue method done, cpu time[sec] = 2.03847, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-06  2.92e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.03e-08  2.92e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.92101e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54238e-22  2.83504e-23  9.08004e-25  4.35876e-24  1.53785e-25   1.1601e-24  6.38282e-29   2.5239e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75579, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         6.66468e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.271766, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9773, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1282.2      259.381      72.5069      86.3303      9.99195       1049.2       128.02     0.744529
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.0017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03126, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.35032e-07  9.35033e-07  2.34314e-07
      low eigenvalue method done, cpu time[sec] = 2.03235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.35e-07  2.34e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.69e-08  2.34e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.34314e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.24536e-22  2.19814e-23  7.20154e-25  3.35935e-24  1.20446e-25  1.02798e-24   6.4605e-29  2.52401e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76603, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.267262, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.97187, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1068.5      216.151      60.4224       71.942      8.32663       874.33      106.683     0.620441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0321, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.20333e-07  8.20333e-07  1.94498e-07
      low eigenvalue method done, cpu time[sec] = 2.03315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.2e-07  1.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.73e-08  1.94e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.94498e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03886e-22  1.77557e-23  5.92935e-25   2.7035e-24  9.81975e-26  9.23251e-25   6.5265e-29  2.52412e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75631, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         9.33055e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.266367, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.96705, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            915.855      185.272      51.7907      61.6645      7.13711      749.426      91.4429     0.531806
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00487, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002041, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0347, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.32811e-07  7.32812e-07  1.65439e-07
      low eigenvalue method done, cpu time[sec] = 2.03579, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.33e-07  1.65e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.99e-08  1.65e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65439e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.8711e-23  1.47651e-23  5.01267e-25  2.24281e-24  8.23532e-26  8.37919e-25  6.58117e-29  2.52422e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75558, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.06635e+10
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.268039, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            801.373      162.113      45.3168      53.9565      6.24497      655.748      80.0126     0.465331
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98753, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.01695, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.63525e-07  6.63526e-07  1.43332e-07
      low eigenvalue method done, cpu time[sec] = 2.01805, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.64e-07  1.43e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.41e-08  1.43e-07         1
         *Z       ---       ---  4.27e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43332e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.71031e-23  1.25482e-23  4.32222e-25  1.90313e-24  7.05337e-26   7.6689e-25  6.62521e-29  2.52433e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75826, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 800 K
      Energy reference = 39018 1/cm
      Energy step      = 133 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -84.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00739
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.325121
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.169616
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.175075
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.76066
         W1 Well: minimal relaxation eigenvalue = 0.0690413
         W1 Well: maximal relaxation eigenvalue = 0.989752
         W1 Well:       grid size = 347
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7132 1/cm
         B1 Barrier:        grid size = 294
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -84 1/cm
         B2 Barrier:        grid size = 292
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 328
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4606 1/cm
         B4 Barrier:        grid size = 340
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23359 1/cm => truncating
         B5 Barrier:        grid size = 469
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23359 1/cm
         B6 Barrier:        grid size = 283
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1379 1/cm
         B7 Barrier:        grid size = 258
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4703 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16674 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.78312, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 347
      MasterEquation::Barrier::truncate: real weight = 1.33608e+35
      MasterEquation::Barrier::truncate: effective weight = 8.09647e+31
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7132  -7132 1.16e+09 2.98e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -84 1.04e+16
         B2    183 2.31e+15
         B3  -4606 6.66e+14
         B4  -6202  7.8e+14
         B5  -7132 9.23e+13
         B6   1380 9.21e+15
         B7   4704 1.22e+15
         B8  16674 9.38e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.83e-11  1.02e-10  2.09e-13   1.2e-14   1.6e-28  1.59e-08  1.33e-05  2.43e+05
          R  1.72e+10         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1  9.81e+09     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2  4.79e+12       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  8.34e+13  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  6.25e+27  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5  6.27e+07   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6   7.5e+04  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  4.12e-06   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1    0.0453    0.0791  0.000162   9.3e-06  1.24e-19      12.4  1.03e+04  1.88e+14
          R      22.1         1      1.75   0.00358  0.000206  2.74e-18       273  2.29e+05  4.16e+15
         P1      12.6     0.572         1   0.00205  0.000118  1.57e-18       156  1.31e+05  2.38e+15
         P2  6.17e+03       279       488         1    0.0574  7.66e-16  7.63e+04  6.38e+07  1.16e+18
         P3  1.07e+05  4.86e+03   8.5e+03      17.4         1  1.33e-14  1.33e+06  1.11e+09  2.02e+19
         P4  8.05e+18  3.64e+17  6.37e+17  1.31e+15  7.49e+13         1  9.96e+19  8.33e+22  1.52e+33
         P5    0.0809   0.00366    0.0064  1.31e-05  7.52e-07     1e-20         1       837  1.52e+13
         P6  9.66e-05  4.37e-06  7.64e-06  1.57e-08  8.99e-10   1.2e-23    0.0012         1  1.82e+10
         P7  5.31e-15   2.4e-16   4.2e-16  8.61e-19  4.94e-20  6.59e-34  6.57e-14  5.49e-11         1
   MasterEquation::set:  done, cpu time[sec] = 1.79783, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+08
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.46658, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            43019.8      9501.88      2742.35      3212.52      379.969      37920.1      5013.94      38.6402
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87909, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168711, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07564, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.38738e-05  1.38739e-05  7.08686e-06
      low eigenvalue method done, cpu time[sec] = 2.09066, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-05  7.09e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.17e-06  7.09e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.08681e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.96791e-18  1.25199e-18  3.58512e-20  2.60756e-19  7.48435e-21  9.73659e-21  6.48933e-25  6.19309e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.27809, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+08
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.250246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47291, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14339.9      3167.29      914.115      1070.84      126.656        12640      1671.31      12.8801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8822, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07815, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.63776e-06   8.6378e-06  3.93609e-06
      low eigenvalue method done, cpu time[sec] = 2.09235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.64e-06  3.94e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.12e-07  3.94e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.93607e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.35266e-18  5.89789e-19  1.68743e-20  1.01577e-19  3.18318e-21   9.3861e-21  6.53082e-25  6.19319e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.28185, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          1.2221e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.25085, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47093, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8603.95      1900.38      548.469      642.503      75.9939      7584.03      1002.79      7.72804
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87949, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.166505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0741, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.7296e-06  6.72962e-06  2.85226e-06
      low eigenvalue method done, cpu time[sec] = 2.08862, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.73e-06  2.85e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.5e-07  2.85e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.85225e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.7475e-18  3.93043e-19  1.15638e-20   6.4176e-20  2.09508e-21  8.79587e-21  6.57293e-25  6.19328e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.27735, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         1.71094e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.250372, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.4776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6145.68      1357.41      391.764      458.931      54.2813      5417.16      716.277      5.52003
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07074, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.64485e-06  5.64486e-06  2.26507e-06
      low eigenvalue method done, cpu time[sec] = 2.08545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.64e-06  2.27e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.58e-07  2.27e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.26506e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40784e-18  2.95137e-19  8.90719e-21  4.69609e-20  1.57471e-21  8.24151e-21  6.61492e-25  6.19338e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.27984, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         2.19978e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47869, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4779.97      1055.76      304.705      356.946      42.2188      4213.35      557.104      4.29336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88285, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168206, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07955, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.92022e-06  4.92023e-06  1.88802e-06
      low eigenvalue method done, cpu time[sec] = 2.09602, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.92e-06  1.89e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-07  1.89e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88801e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18504e-18  2.35937e-19  7.27893e-21   3.6976e-20   1.2648e-21  7.75047e-21  6.65627e-25  6.19349e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.29702, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251901, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49093, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4301.98      950.188      274.235      321.252      37.9969      3792.01      501.394      3.86402
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.63749e-06   4.6375e-06  1.74475e-06
      low eigenvalue method done, cpu time[sec] = 2.09889, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.64e-06  1.74e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.74e-07  1.74e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.74474e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09936e-18  2.14259e-19  6.67582e-21  3.33976e-20  1.15192e-21  7.52763e-21  6.67658e-25  6.19354e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.3165, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         3.66629e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.25233, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.4784, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2867.98      633.458      182.823      214.168      25.3313      2528.01      334.262      2.57601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88412, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168994, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08122, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.6605e-06  3.66051e-06  1.26908e-06
      low eigenvalue method done, cpu time[sec] = 2.09694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.66e-06  1.27e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.93e-07  1.27e-06         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26908e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.10647e-19  1.45817e-19  4.73417e-21  2.23655e-20  7.96247e-22  6.59721e-21  6.77323e-25   6.1938e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.29852, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         4.88839e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.253733, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47508, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2150.99      475.094      137.117      160.626      18.9985      1896.01      250.697      1.93201
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88937, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167508, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.06844e-06  3.06844e-06  9.98003e-07
      low eigenvalue method done, cpu time[sec] = 2.10134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.07e-06  9.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.44e-07  9.98e-07         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.98002e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.42961e-19  1.09488e-19  3.66911e-21  1.66689e-20  6.06757e-22  5.89097e-21  6.86008e-25  6.19405e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.30151, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         6.11049e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.25266, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47983, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1720.79      380.075      109.694      128.501      15.1988      1516.81      200.557      1.54561
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88426, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167706, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0803, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.66281e-06  2.66281e-06  8.21282e-07
      low eigenvalue method done, cpu time[sec] = 2.09637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-06  8.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-07  8.21e-07         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.21281e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.32297e-19  8.69889e-20  2.99098e-21  1.31935e-20  4.88496e-22  5.33344e-21   6.9362e-25  6.19431e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.30363, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252061, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49844, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1433.99      316.729      91.4115      107.084      12.6656         1264      167.131      1.28801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88111, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167719, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07675, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.36395e-06  2.36395e-06  6.96449e-07
      low eigenvalue method done, cpu time[sec] = 2.09231, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.36e-06  6.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-07  6.96e-07         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.96448e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.53437e-19   7.1718e-20  2.51967e-21  1.08563e-20  4.07531e-22  4.87966e-21  7.00163e-25  6.19457e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31521, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         8.55469e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251354, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.48882, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1229.14      271.482      78.3527      91.7861      10.8563      1083.43      143.255      1.10401
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88703, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13281e-06  2.13281e-06  6.03398e-07
      low eigenvalue method done, cpu time[sec] = 2.09893, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.13e-06  6.03e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-07  6.03e-07         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.03398e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.94258e-19  6.06994e-20  2.17252e-21  9.18004e-21  3.48604e-22  4.50155e-21  7.05685e-25  6.19483e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31069, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         9.77678e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49301, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1075.49      237.547      68.5586      80.3129      9.49923      948.004      125.348     0.966005
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88559, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.166902, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.94771e-06  1.94771e-06    5.313e-07
      low eigenvalue method done, cpu time[sec] = 2.09627, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.95e-06  5.31e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-07  5.31e-07         1
         *Z       ---       ---  3.56e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.313e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.48158e-19  5.23922e-20  1.90599e-21  7.92143e-21  3.03804e-22  4.18061e-21  7.10256e-25  6.19508e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31661, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 900 K
      Energy reference = 41798 1/cm
      Energy step      = 150 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -82.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007333
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.304582
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.155147
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.158185
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.674633
         W1 Well: minimal relaxation eigenvalue = 0.0653879
         W1 Well: maximal relaxation eigenvalue = 0.99069
         W1 Well:       grid size = 331
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7852 1/cm
         B1 Barrier:        grid size = 279
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 278
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 97 1/cm
         B3 Barrier:        grid size = 310
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4702 1/cm
         B4 Barrier:        grid size = 320
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23602 1/cm => truncating
         B5 Barrier:        grid size = 436
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23602 1/cm
         B6 Barrier:        grid size = 269
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1447 1/cm
         B7 Barrier:        grid size = 248
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4597 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16747 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.64085, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 331
      MasterEquation::Barrier::truncate: real weight = 6.29584e+33
      MasterEquation::Barrier::truncate: effective weight = 4.30289e+30
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7852  -7852 9.04e+08 4.47e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 1.88e+16
         B2     98 4.53e+15
         B3  -4702 1.35e+15
         B4  -6202 1.55e+15
         B5  -7852 1.87e+14
         B6   1448 1.78e+16
         B7   4598 2.53e+15
         B8  16748 2.47e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.9e-11  3.29e-11  1.71e-13  1.37e-14   7.1e-27  3.75e-09  1.74e-06  3.12e+03
          R  5.25e+10         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  3.04e+10     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2  5.85e+12       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3  7.32e+13  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  1.41e+26  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5  2.67e+08   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6  5.76e+05   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7  0.000321  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.13e-05  0.000123   6.4e-07  5.11e-08  2.66e-20     0.014      6.49  1.17e+10
          R   1.4e+04         1      1.73   0.00898  0.000718  3.73e-16       197  9.11e+04  1.64e+14
         P1  8.13e+03     0.579         1    0.0052  0.000416  2.16e-16       114  5.28e+04  9.48e+13
         P2  1.56e+06       111       192         1    0.0799  4.15e-14  2.19e+04  1.01e+07  1.82e+16
         P3  1.96e+07  1.39e+03  2.41e+03      12.5         1  5.19e-13  2.74e+05  1.27e+08  2.28e+17
         P4  3.77e+19  2.68e+15  4.63e+15  2.41e+13  1.93e+12         1  5.29e+17  2.45e+20  4.39e+29
         P5      71.2   0.00508   0.00877  4.56e-05  3.64e-06  1.89e-18         1       463  8.31e+11
         P6     0.154   1.1e-05  1.89e-05  9.86e-08  7.87e-09  4.09e-21   0.00216         1   1.8e+09
         P7  8.58e-11  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.28e-30   1.2e-12  5.57e-10         1
   MasterEquation::set:  done, cpu time[sec] = 1.65492, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+08
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.22938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10374, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            55846.3      13418.8      3991.02      4608.14      555.706      52730.2      7496.11      73.1473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65372, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151718, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83119, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.66427e-05  2.66431e-05  1.47948e-05
      low eigenvalue method done, cpu time[sec] = 1.84486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-05  1.48e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-06  1.48e-05         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47945e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.66454e-15  1.97158e-15  5.86371e-16  1.68746e-17  1.17987e-16  3.44664e-18  6.29156e-18  8.57382e-22  9.38941e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.60468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+08
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.227954, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.06673, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18615.4      4472.92      1330.34      1536.05      185.235      17576.7       2498.7      24.3824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151086, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82835, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.75266e-05  1.75268e-05  8.79776e-06
      low eigenvalue method done, cpu time[sec] = 1.84189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.75e-05   8.8e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-06   8.8e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79769e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.55431e-15  1.24691e-15  2.94243e-16  8.58913e-18  4.95934e-17  1.58691e-18  6.16913e-18  8.62554e-22  9.38957e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.56299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.13212e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.22908, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.06034, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11169.3      2683.75      798.204      921.628      111.141        10546      1499.22      14.6295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64996, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151402, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82779, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40263e-05  1.40264e-05  6.61402e-06
      low eigenvalue method done, cpu time[sec] = 1.84151, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-05  6.61e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-06  6.61e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.61398e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22125e-15  9.59436e-16  2.03033e-16  6.13263e-18  3.26147e-17   1.0888e-18  5.88014e-18  8.67724e-22  9.38972e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.55577, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.58497e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.227977, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.08472, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7978.04      1916.96      570.146      658.306      79.3866      7532.89      1070.87      10.4496
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64483, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.19814e-05  1.19815e-05  5.39113e-06
      low eigenvalue method done, cpu time[sec] = 1.83455, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.2e-05  5.39e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.38e-07  5.39e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.3911e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.99201e-16  7.92651e-16  1.56304e-16  4.86171e-18  2.45479e-17   8.4256e-19  5.59166e-18  8.72827e-22  9.38987e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.57362, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.03782e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.227213, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.06891, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6205.14      1490.97      443.447      512.015      61.7451      5858.91      832.901      8.12747
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64775, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150973, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05891e-05  1.05891e-05  4.58651e-06
      low eigenvalue method done, cpu time[sec] = 1.83866, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-05  4.59e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.25e-07  4.59e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.58649e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.88178e-16  6.80549e-16   1.2743e-16   4.0631e-18  1.97581e-17  6.92277e-19  5.32707e-18  8.77817e-22  9.39002e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.55861, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.228138, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.08498, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5584.63      1341.88      399.102      460.814      55.5706      5273.02      749.611      7.31473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150681, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82994, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00394e-05  1.00394e-05  4.27601e-06
      low eigenvalue method done, cpu time[sec] = 1.84439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-05  4.28e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.8e-07  4.28e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.27599e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16  6.36772e-16  1.16709e-16  3.76256e-18  1.80155e-17  6.36671e-19  5.20458e-18  8.80259e-22  9.39009e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         3.39637e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229299, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.06999, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3723.08      894.584      266.068      307.209      37.0471      3515.35      499.741      4.87648
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65775, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150436, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83496, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.10804e-06  8.10806e-06  3.22203e-06
      low eigenvalue method done, cpu time[sec] = 1.84951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.11e-06  3.22e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.25e-07  3.22e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.22202e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.55112e-16  4.85944e-16  8.21871e-17  2.77279e-18  1.25281e-17  4.57531e-19  4.67846e-18  8.91838e-22  9.39046e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.5782, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         4.52849e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.230107, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.08172, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2792.31      670.938      199.551      230.407      27.7853      2636.51      374.806      3.65736
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.149892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83194, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.90975e-06  6.90977e-06  2.60147e-06
      low eigenvalue method done, cpu time[sec] = 1.84685, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.91e-06   2.6e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.29e-07   2.6e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.60146e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  3.95462e-16  6.33118e-17  2.21124e-18  9.60247e-18  3.58854e-19  4.26392e-18  9.02242e-22  9.39083e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         5.66062e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229755, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.08196, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2233.85       536.75      159.641      184.326      22.2282      2109.21      299.845      2.92589
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65097, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.07426e-06  6.07428e-06  2.18665e-06
      low eigenvalue method done, cpu time[sec] = 1.84187, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.07e-06  2.19e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.63e-07  2.19e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18665e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  3.34245e-16  5.13506e-17  1.84427e-18  7.77294e-18  2.95663e-19  3.92739e-18  9.11421e-22   9.3912e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.230022, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.0757, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1861.54      447.292      133.034      153.605      18.5235      1757.67       249.87      2.43824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66055, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151378, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83743, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.44997e-06  5.44998e-06  1.88756e-06
      low eigenvalue method done, cpu time[sec] = 1.85197, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.45e-06  1.89e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.14e-07  1.89e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88756e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.89723e-16  4.30772e-17  1.58371e-18  6.51732e-18  2.51476e-19  3.64724e-18  9.19407e-22  9.39157e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         7.92486e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.22907, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.09522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1595.61      383.393      114.029      131.661      15.8773      1506.58      214.175      2.08992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65841, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83508, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.96142e-06  4.96143e-06  1.66069e-06
      low eigenvalue method done, cpu time[sec] = 1.84967, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-06  1.66e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-07  1.66e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.66069e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16   2.5573e-16  3.70104e-17  1.38827e-18  5.60105e-18  2.18731e-19  3.40931e-18  9.26265e-22  9.39194e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.60167, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         9.05698e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10426, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1396.16      335.469      99.7755      115.203      13.8927      1318.25      187.403      1.82868
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65228, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151221, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.56624e-06  4.56624e-06   1.4822e-06
      low eigenvalue method done, cpu time[sec] = 1.84379, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.57e-06  1.48e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-07  1.48e-06         1
         *Z       ---       ---   5.2e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4822e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.28847e-16  3.23714e-17   1.2358e-18  4.90257e-18  1.93441e-19  3.20399e-18  9.32082e-22  9.39232e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.6056, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1000 K
      Energy reference = 44578 1/cm
      Energy step      = 167 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -81.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007171
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.287866
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.142671
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.144203
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.617619
         W1 Well: minimal relaxation eigenvalue = 0.0620532
         W1 Well: maximal relaxation eigenvalue = 0.992116
         W1 Well:       grid size = 318
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -8527 1/cm
         B1 Barrier:        grid size = 267
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -10 1/cm
         B2 Barrier:        grid size = 266
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier:        grid size = 295
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4686 1/cm
         B4 Barrier:        grid size = 304
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6189 1/cm
         B5 Barrier: nonpositive number of states at -23391 1/cm => truncating
         B5 Barrier:        grid size = 407
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23390 1/cm
         B6 Barrier:        grid size = 258
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 239
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16688 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.54064, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 318
      MasterEquation::Barrier::truncate: real weight = 6.09148e+32
      MasterEquation::Barrier::truncate: effective weight = 4.63505e+29
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -8527  -8527 7.12e+08 6.61e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -10 3.27e+16
         B2    157  8.5e+15
         B3  -4686 2.62e+15
         B4  -6189 2.98e+15
         B5  -8527 3.66e+14
         B6   1493  3.3e+16
         B7   4665 5.02e+15
         B8  16689 5.99e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.57e-12  1.13e-11  1.22e-13  1.28e-14  1.24e-25  9.81e-10  2.83e-07      80.6
          R  1.52e+11         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  8.85e+10     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2  8.17e+12      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3  7.83e+13       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4  8.05e+24  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5  1.02e+09    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6  3.54e+06  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7    0.0124  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.11e-07  7.07e-07  7.66e-09  7.99e-10  7.77e-21  6.14e-05    0.0177  5.04e+06
          R  2.43e+06         1      1.72    0.0186   0.00194  1.89e-14       149   4.3e+04  1.23e+13
         P1  1.41e+06     0.582         1    0.0108   0.00113   1.1e-14      86.9   2.5e+04  7.13e+12
         P2   1.3e+08      53.7      92.3         1     0.104  1.01e-12  8.01e+03  2.31e+06  6.58e+14
         P3  1.25e+09       515       885      9.59         1  9.73e-12  7.69e+04  2.22e+07  6.31e+15
         P4  1.29e+20  5.29e+13  9.09e+13  9.86e+11  1.03e+11         1   7.9e+15  2.28e+18  6.49e+26
         P5  1.63e+04    0.0067    0.0115  0.000125   1.3e-05  1.27e-16         1       288  8.21e+10
         P6      56.5  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.39e-19   0.00347         1  2.85e+08
         P7  1.98e-07  8.15e-14   1.4e-13  1.52e-15  1.58e-16  1.54e-27  1.22e-11  3.51e-09         1
   MasterEquation::set:  done, cpu time[sec] = 1.55444, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+08
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212342, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.74995, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70189.5      18251.9      5620.83      6406.43       786.15      70721.4      10777.2      128.539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47911, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139237, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64294, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.96268e-05  4.96283e-05  2.95355e-05
      low eigenvalue method done, cpu time[sec] = 1.65575, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-05  2.95e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.9e-06  2.95e-05         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.95346e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.59046e-13  2.65703e-13  7.50008e-14  2.17663e-15  1.46981e-14  4.36268e-16  1.06559e-15  2.60837e-19  2.02525e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.01171, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+08
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211235, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76122, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23396.5      6083.98      1873.61      2135.48       262.05      23573.8       3592.4      42.8462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48119, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.137213, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64252, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.41679e-05  3.41686e-05  1.85795e-05
      low eigenvalue method done, cpu time[sec] = 1.65539, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.42e-05  1.86e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-06  1.86e-05         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.85791e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.2593e-13   1.7717e-13  3.96743e-14  1.18269e-15  6.58432e-15  2.14672e-16  1.05757e-15  2.62328e-19  2.02528e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.01992, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1          1.0573e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.210922, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.74472, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14037.9      3650.39      1124.17      1281.29       157.23      14144.3      2155.44      25.7077
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47351, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137138, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63393, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7974e-05  2.79744e-05  1.43994e-05
      low eigenvalue method done, cpu time[sec] = 1.64765, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.8e-05  1.44e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-06  1.44e-05         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43992e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.75082e-13  1.40349e-13  2.81882e-14  8.73911e-16  4.47866e-15   1.5252e-16  1.02104e-15  2.63796e-19  2.02531e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.99772, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.48022e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76745, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10027.1      2607.42      802.975      915.205      112.307      10103.1       1539.6      18.3626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47862, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138335, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64139, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.42722e-05  2.42725e-05  1.19937e-05
      low eigenvalue method done, cpu time[sec] = 1.65525, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.43e-05   1.2e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-06   1.2e-05         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19935e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.45772e-13   1.1839e-13  2.21606e-14  7.09693e-16  3.45196e-15  1.20954e-16  9.82112e-16   2.6523e-19  2.02534e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02958, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.90315e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.75966, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7798.83      2027.99      624.536      711.826      87.3499      7857.94      1197.47      14.2821
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47508, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137683, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.17106e-05  2.17108e-05  1.03785e-05
      low eigenvalue method done, cpu time[sec] = 1.65051, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.17e-05  1.04e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.64e-06  1.04e-05         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03784e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.26232e-13  1.03329e-13  1.83689e-14  6.04367e-16  2.83046e-15  1.01297e-16  9.45164e-16  2.66623e-19  2.02537e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.01822, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212076, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.75969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7018.95      1825.19      562.083      640.643       78.615      7072.14      1077.72      12.8539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48221, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.136667, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64291, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06891e-05  2.06893e-05  9.74725e-06
      low eigenvalue method done, cpu time[sec] = 1.65623, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-05  9.75e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-06  9.75e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.74715e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.18461e-13  9.73719e-14  1.69448e-14  5.64205e-16  2.60152e-15  9.39292e-17  9.27739e-16  2.67303e-19  2.02539e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02263, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         3.17191e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211759, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76369, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4679.3       1216.8      374.722      427.096        52.41      4714.76       718.48      8.56924
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47619, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.13815, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6387, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70483e-05  1.70484e-05  7.56425e-06
      low eigenvalue method done, cpu time[sec] = 1.65192, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-05  7.56e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-06  7.56e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.5642e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.19265e-14   7.6463e-14   1.2283e-14  4.29425e-16   1.8678e-15  6.97496e-17  8.50916e-16  2.70514e-19  2.02547e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.01908, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         4.22921e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.2114, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76722, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3509.47      912.597      281.041      320.322      39.3075      3536.07       538.86      6.42693
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47977, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137627, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64144, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.47431e-05  1.47432e-05  6.24365e-06
      low eigenvalue method done, cpu time[sec] = 1.65472, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-05  6.24e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-06  6.24e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.24361e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.59393e-14  6.35768e-14  9.67037e-15  3.50784e-16  1.46607e-15   5.6057e-17   7.8834e-16  2.73397e-19  2.02554e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.0279, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         5.28652e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76659, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2807.58      730.078      224.833      256.257       31.446      2828.86      431.088      5.14154
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138175, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63965, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3111e-05  1.31111e-05  5.34224e-06
      low eigenvalue method done, cpu time[sec] = 1.65292, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-05  5.34e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.66e-07  5.34e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.34221e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   6.4948e-14  5.46754e-14  7.98265e-15  2.98266e-16  1.20962e-15  4.70984e-17  7.36283e-16  2.75954e-19  2.02562e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02737, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211323, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.7804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2339.65      608.398      187.361      213.548       26.205      2357.38       359.24      4.28462
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.481, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.139315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.18763e-05  1.18764e-05  4.68104e-06
      low eigenvalue method done, cpu time[sec] = 1.75137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.19e-05  4.68e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.72e-07  4.68e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.68102e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.69544e-14  4.80903e-14  6.79661e-15  2.60305e-16   1.0306e-15  4.07222e-17  6.92088e-16  2.78199e-19  2.02569e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.13606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         7.40112e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.210767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78392, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2005.41      521.484      160.595      183.041      22.4614      2020.61       307.92      3.67253
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47673, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63942, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09001e-05  1.09001e-05  4.17211e-06
      low eigenvalue method done, cpu time[sec] = 1.65237, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-05  4.17e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.97e-07  4.17e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.1721e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.07372e-14  4.29889e-14  5.91498e-15  2.31393e-16  8.98048e-16  3.59251e-17  6.53931e-16  2.80154e-19  2.02577e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.03718, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         8.45843e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211394, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77855, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1754.74      456.299      140.521      160.161      19.6537      1768.04       269.43      3.21346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47547, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137316, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.01033e-05  1.01033e-05  3.76657e-06
      low eigenvalue method done, cpu time[sec] = 1.65006, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-05  3.77e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.37e-07  3.77e-06         1
         *Z       ---       ---  1.06e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.76655e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.57412e-14   3.8903e-14  5.23274e-15  2.08535e-16  7.95708e-16  3.21707e-17   6.2053e-16  2.81841e-19  2.02584e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.0317, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1100 K
      Energy reference = 47358 1/cm
      Energy step      = 183 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -79.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006794
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.275303
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.135012
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.144004
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.571261
         W1 Well: minimal relaxation eigenvalue = 0.0589801
         W1 Well: maximal relaxation eigenvalue = 0.995414
         W1 Well:       grid size = 309
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -9188 1/cm
         B1 Barrier:        grid size = 259
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 258
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 144 1/cm
         B3 Barrier:        grid size = 284
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4614 1/cm
         B4 Barrier:        grid size = 293
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6260 1/cm
         B5 Barrier: nonpositive number of states at -23463 1/cm => truncating
         B5 Barrier:        grid size = 387
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23463 1/cm
         B6 Barrier:        grid size = 251
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1425 1/cm
         B7 Barrier:        grid size = 234
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4535 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16614 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.46856, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 309
      MasterEquation::Barrier::truncate: real weight = 9.85019e+31
      MasterEquation::Barrier::truncate: effective weight = 8.21317e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -9188  -9188 5.61e+08 9.65e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 5.49e+16
         B2    145 1.54e+16
         B3  -4614 4.92e+15
         B4  -6260 5.55e+15
         B5  -9188 6.92e+14
         B6   1426 5.87e+16
         B7   4536 9.56e+15
         B8  16614 1.36e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.46e-12  4.23e-12  8.28e-14  1.07e-14  1.15e-24  2.89e-10  5.65e-08      3.61
          R  4.07e+11         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  2.37e+11     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2  1.21e+13      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3  9.31e+13       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  8.69e+23  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5  3.46e+09    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  1.77e+07  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7     0.277  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.11e-09  1.05e-08  2.06e-10  2.67e-11  2.86e-21  7.19e-07  0.000141  8.97e+03
          R  1.64e+08         1      1.72    0.0337   0.00438  4.69e-13       118   2.3e+04  1.47e+12
         P1  9.51e+07     0.581         1    0.0196   0.00254  2.72e-13      68.3  1.34e+04  8.53e+11
         P2  4.85e+09      29.6        51         1      0.13  1.39e-11  3.49e+03  6.82e+05  4.35e+13
         P3  3.74e+10       229       393      7.71         1  1.07e-10  2.69e+04  5.26e+06  3.36e+14
         P4  3.49e+20  2.13e+12  3.67e+12   7.2e+10  9.34e+09         1  2.51e+14  4.91e+16  3.13e+24
         P5  1.39e+06    0.0085    0.0146  0.000287  3.72e-05  3.98e-15         1       196  1.25e+10
         P6  7.11e+03  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.04e-17   0.00511         1  6.38e+07
         P7  0.000111  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.19e-25  8.01e-11  1.57e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.48268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200858, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59206, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            85826.1      24033.7       7696.5      8670.44      1080.87      91802.8      14941.8      212.457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36303, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130721, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.517, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.74811e-05   8.7486e-05  5.52861e-05
      low eigenvalue method done, cpu time[sec] = 1.52923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.75e-05  5.53e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.69e-06  5.53e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.52831e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.85276e-11  1.38763e-11  3.73542e-12  1.09641e-13    7.174e-13  2.16111e-14  6.80375e-14   2.7195e-17  1.05797e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.69254, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199836, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58962, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28608.7      8011.24       2565.5      2890.15      360.291      30600.9      4980.61      70.8189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36259, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127693, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51311, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.25965e-05  6.25988e-05  3.64581e-05
      low eigenvalue method done, cpu time[sec] = 1.5259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.26e-05  3.65e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.69e-06  3.65e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.64568e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22182e-11  9.66979e-12  2.06707e-12  6.29719e-14  3.39307e-13  1.12542e-14  6.81549e-14  2.73418e-17  1.05798e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68616, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         9.93901e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199393, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57271, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17165.2      4806.75       1539.3      1734.09      216.175      18360.6      2988.37      42.4914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3638, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.22637e-05  5.22652e-05  2.89882e-05
      low eigenvalue method done, cpu time[sec] = 1.52688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.23e-05   2.9e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.87e-06   2.9e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.89874e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   9.7149e-12  7.84918e-12  1.50581e-12  4.79057e-14  2.37541e-13  8.23746e-15  6.64689e-14  2.74842e-17    1.058e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.66964, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.39146e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199329, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57947, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12260.9      3433.39       1099.5      1238.63      154.411      13114.7      2134.55       30.351
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35867, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128552, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51046, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.59675e-05  4.59686e-05  2.45893e-05
      low eigenvalue method done, cpu time[sec] = 1.52262, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.6e-05  2.46e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.38e-06  2.46e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.45887e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.24074e-12  6.73789e-12  1.20526e-12  3.97074e-14  1.86842e-13  6.67055e-15  6.45191e-14  2.76221e-17  1.05801e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67086, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.78902e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200043, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.5906, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9536.23      2670.41      855.167      963.383      120.097      10200.3       1660.2      23.6063
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36364, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127927, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51449, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.15495e-05  4.15504e-05  2.15854e-05
      low eigenvalue method done, cpu time[sec] = 1.52693, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.16e-05  2.16e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.04e-06  2.16e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.1585e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.23399e-12  5.96254e-12  1.01334e-12  3.43584e-14  1.55654e-13  5.67826e-15  6.25984e-14  2.77555e-17  1.05803e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68751, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.198693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57895, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8582.61      2403.37       769.65      867.044      108.087      9180.28      1494.18      21.2457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51516, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.97725e-05  3.97733e-05  2.03986e-05
      low eigenvalue method done, cpu time[sec] = 1.52788, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.98e-05  2.04e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.9e-06  2.04e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.03982e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.83631e-12  5.65253e-12  9.40556e-13  3.22963e-14  1.44046e-13  5.30231e-15  6.16751e-14  2.78204e-17  1.05803e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          2.9817e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.57668, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5721.74      1602.25        513.1       578.03      72.0583      6120.18      996.123      14.1638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37102, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129763, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52392, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.33594e-05    3.336e-05  1.62296e-05
      low eigenvalue method done, cpu time[sec] = 1.53707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.34e-05  1.62e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.41e-06  1.62e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.62293e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.43909e-12  4.54716e-12  6.98946e-13  2.52651e-14  1.06287e-13  4.04915e-15  5.74982e-14  2.81262e-17  1.05807e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68778, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         3.97561e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.201095, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59753, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4291.3      1201.69      384.825      433.522      54.0437      4590.14      747.092      10.6228
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36886, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.92264e-05  2.92268e-05  1.36492e-05
      low eigenvalue method done, cpu time[sec] = 1.53442, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.92e-05  1.36e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.1e-06  1.36e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.3649e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.57434e-12  3.85019e-12  5.60684e-13  2.10648e-14  8.51466e-14  3.32282e-15  5.39873e-14  2.84011e-17  1.05811e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70731, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         4.96951e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58128, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3433.04      961.349       307.86      346.818       43.235      3672.11      597.674      8.49827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35971, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128228, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5113, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62607e-05   2.6261e-05  1.18564e-05
      low eigenvalue method done, cpu time[sec] = 1.52357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.63e-05  1.19e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-06  1.19e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.18562e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.97349e-12  3.36019e-12  4.69903e-13  1.82079e-14  7.14144e-14  2.83893e-15  5.10003e-14  2.86462e-17  1.05815e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.67489, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199584, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2860.87      801.124       256.55      289.015      36.0291      3060.09      498.061      7.08189
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3597, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51307, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39925e-05  2.39927e-05  1.05221e-05
      low eigenvalue method done, cpu time[sec] = 1.52555, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.4e-05  1.05e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-06  1.05e-05         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0522e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.52629e-12  2.99242e-12  4.05242e-13  1.61116e-14  6.16895e-14  2.48935e-15  4.84193e-14  2.88633e-17  1.05818e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68236, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         6.95731e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58204, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2452.17      686.678        219.9      247.727      30.8821      2622.94       426.91      6.07019
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36967, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21825e-05  2.21827e-05  9.48219e-06
      low eigenvalue method done, cpu time[sec] = 1.53522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-05  9.48e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-06  9.48e-06         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.4821e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.17779e-12  2.70397e-12  3.56617e-13  1.44941e-14  5.43996e-14  2.22296e-15  4.61578e-14  2.90547e-17  1.05822e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.69044, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         7.95121e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.20046, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.593, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2145.65      600.843      192.413      216.761      27.0219      2295.07      373.546      5.31142
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129055, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.06933e-05  2.06935e-05  8.64449e-06
      low eigenvalue method done, cpu time[sec] = 1.53281, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-05  8.64e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-06  8.64e-06         1
         *Z       ---       ---  2.84e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.64442e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.89713e-12  2.47044e-12  3.18605e-13  1.32008e-14    4.871e-14  2.01211e-15   4.4153e-14  2.92225e-17  1.05826e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.6997, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1200 K
      Energy reference = 50138 1/cm
      Energy step      = 200 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -77.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006523
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.26533
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.128774
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.130255
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.538229
         W1 Well: minimal relaxation eigenvalue = 0.0559929
         W1 Well: maximal relaxation eigenvalue = 0.997961
         W1 Well:       grid size = 301
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10062 1/cm
         B1 Barrier:        grid size = 251
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -62 1/cm
         B2 Barrier:        grid size = 250
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 137 1/cm
         B3 Barrier:        grid size = 274
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 282
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23662 1/cm => truncating
         B5 Barrier:        grid size = 369
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23662 1/cm
         B6 Barrier:        grid size = 244
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1338 1/cm
         B7 Barrier:        grid size = 228
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4537 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16738 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.40059, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 301
      MasterEquation::Barrier::truncate: real weight = 2.32674e+31
      MasterEquation::Barrier::truncate: effective weight = 2.12028e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10062 -10062 4.05e+08 1.39e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -62 8.95e+16
         B2    138 2.69e+16
         B3  -4662 8.98e+15
         B4  -6261    1e+16
         B5 -10062 1.27e+15
         B6   1339 1.01e+17
         B7   4538 1.75e+16
         B8  16738 2.91e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.17e-12  2.02e-12  6.44e-14     1e-14  7.93e-24  1.11e-10  1.58e-08     0.292
          R  8.56e+11         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  4.95e+11     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2  1.55e+13      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3  9.97e+13       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  1.26e+23  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  8.97e+09    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  6.33e+07   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7      3.43  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.85e-10  3.19e-10  1.02e-11  1.59e-12  1.25e-21  1.76e-08  2.49e-06      46.1
          R  5.42e+09         1      1.73    0.0551   0.00858  6.79e-12      95.4  1.35e+04   2.5e+11
         P1  3.13e+09     0.578         1    0.0319   0.00496  3.92e-12      55.1  7.81e+03  1.44e+11
         P2  9.82e+10      18.1      31.4         1     0.156  1.23e-10  1.73e+03  2.45e+05  4.53e+12
         P3  6.31e+11       116       202      6.42         1  7.91e-10  1.11e+04  1.57e+06  2.91e+13
         P4  7.98e+20  1.47e+11  2.55e+11  8.12e+09  1.26e+09         1  1.41e+13  1.99e+15  3.68e+22
         P5  5.68e+07    0.0105    0.0181  0.000578     9e-05  7.12e-14         1       142  2.62e+09
         P6  4.01e+05   7.4e-05  0.000128  4.08e-06  6.35e-07  5.03e-16   0.00706         1  1.85e+07
         P7    0.0217  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.72e-23  3.82e-10  5.41e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.41432, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190017, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.4211, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             102531      30783.7      10284.5      11464.1      1449.75       115907      20015.5      333.638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27172, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121832, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0001243  0.000124311  8.17169e-05
      low eigenvalue method done, cpu time[sec] = 1.42706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000124  8.17e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.11e-06  8.17e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.17103e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.71258e-10  3.56589e-10  9.19515e-11  2.73458e-12  1.73873e-11  5.31038e-13  2.09078e-12  1.27128e-15  1.90818e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.39018, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.188715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41049, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34176.9      10261.2      3428.16      3821.36      483.251      38635.7      6671.84      111.213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26746, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.122332, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41195, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.18484e-05  9.18536e-05  5.60922e-05
      low eigenvalue method done, cpu time[sec] = 1.42398, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.19e-05  5.61e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.6e-06  5.61e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.60891e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.2349e-10  2.57935e-10  5.29036e-11  1.64725e-12  8.61722e-12  2.90389e-13  2.11013e-12  1.27778e-15   1.9082e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.37323, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          9.3935e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190701, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.40712, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20506.1      6156.73       2056.9      2292.82       289.95      23181.4      4003.11      66.7276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2672, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120804, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40964, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.79688e-05  7.79723e-05  4.55826e-05
      low eigenvalue method done, cpu time[sec] = 1.42161, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.8e-05  4.56e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.54e-06  4.56e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.55805e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.62882e-10  2.13749e-10  3.93804e-11  1.28486e-12  6.18448e-12  2.18072e-13  2.07475e-12  1.28398e-15  1.90823e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.37169, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.31509e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.189196, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.42085, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14647.2      4397.67      1469.21      1637.73      207.107      16558.1      2859.36      47.6625
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26952, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120524, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41222, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.93725e-05  6.93752e-05  3.92712e-05
      low eigenvalue method done, cpu time[sec] = 1.42424, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.94e-05  3.93e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.89e-06  3.93e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92697e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.26485e-10  1.86236e-10  3.20138e-11  1.08383e-12  4.95052e-12    1.798e-13   2.0288e-12  1.28995e-15  1.90825e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.3848, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.69083e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.189916, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.40916, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11392.3      3420.41      1142.72      1273.79      161.084      12878.6      2223.95      37.0709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26668, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120804, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40975, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.32697e-05  6.32719e-05  3.48985e-05
      low eigenvalue method done, cpu time[sec] = 1.42239, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.33e-05  3.49e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.44e-06  3.49e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.48973e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.01268e-10  1.66756e-10  2.72489e-11  9.50769e-13   4.1811e-12  1.55219e-13  1.98146e-12  1.29569e-15  1.90828e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.3759, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190297, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.40995, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10253.1      3078.37      1028.45      1146.41      144.975      11590.7      2001.55      33.3638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26937, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121914, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41367, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.07969e-05  6.07989e-05  3.31549e-05
      low eigenvalue method done, cpu time[sec] = 1.42639, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.08e-05  3.32e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.25e-06  3.32e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.31538e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.91212e-10  1.58895e-10   2.5427e-11  8.98995e-13  3.89223e-12  1.45821e-13  1.95822e-12  1.29848e-15  1.90829e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         2.81805e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.191011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41842, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6835.37      2052.24      685.632      764.272      96.6502      7727.13      1334.37      22.2425
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121229, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41205, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.17778e-05  5.17792e-05  2.69471e-05
      low eigenvalue method done, cpu time[sec] = 1.42468, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.18e-05  2.69e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.59e-06  2.69e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.69464e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.55412e-10  1.30484e-10  1.93065e-11  7.20051e-13  2.94066e-12  1.14078e-13   1.8502e-12   1.3116e-15  1.90836e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38827, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          3.7574e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190089, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41491, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5126.53      1539.18      514.224      573.204      72.4876      5795.35      1000.78      16.6819
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26921, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120862, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41208, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.58768e-05  4.58779e-05   2.3029e-05
      low eigenvalue method done, cpu time[sec] = 1.42466, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.59e-05   2.3e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.16e-06   2.3e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.30284e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.32815e-10  1.12216e-10  1.57412e-11  6.10996e-13  2.39772e-12   9.5314e-14  1.75652e-12  1.32339e-15  1.90842e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38449, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         4.69675e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190408, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.43086, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4101.22      1231.35      411.379      458.563      57.9901      4636.28      800.621      13.3455
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27247, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121386, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41571, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.15935e-05  4.15943e-05  2.02652e-05
      low eigenvalue method done, cpu time[sec] = 1.42889, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.16e-05  2.03e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-06  2.03e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.02648e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.16876e-10   9.9177e-11  1.33675e-11  5.35657e-13  2.03979e-12  8.26201e-14   1.6751e-12  1.33396e-15  1.90848e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.40728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190085, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3417.69      1026.12      342.816      382.136      48.3251      3863.57      667.184      11.1213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121683, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.82867e-05  3.82874e-05  1.81824e-05
      low eigenvalue method done, cpu time[sec] = 1.42952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.83e-05  1.82e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.61e-06  1.82e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81821e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.04864e-10  8.92685e-11  1.16571e-11  4.79656e-13   1.7832e-12  7.33319e-14  1.60357e-12   1.3434e-15  1.90855e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38921, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         6.57545e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190787, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.42201, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2929.45      879.533      293.842      327.545      41.4215      3311.63      571.872      9.53251
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27202, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121639, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.56268e-05  3.56274e-05  1.65418e-05
      low eigenvalue method done, cpu time[sec] = 1.42857, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.56e-05  1.65e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.42e-06  1.65e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65416e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.54024e-11  8.14142e-11  1.03581e-11  4.35969e-13  1.58882e-12  6.61762e-14  1.54004e-12  1.35179e-15  1.90861e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.39449, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          7.5148e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.19037, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.44031, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2563.26      769.592      257.112      286.602      36.2438      2897.67      500.388      8.34095
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120923, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.4127, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.34233e-05  3.34238e-05  1.52078e-05
      low eigenvalue method done, cpu time[sec] = 1.42541, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.34e-05  1.52e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-06  1.52e-05         1
         *Z       ---       ---  1.01e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52076e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.77087e-11  7.49958e-11  9.33368e-12  4.00697e-13   1.4357e-12  6.04579e-14  1.48308e-12  1.35925e-15  1.90868e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.41044, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1300 K
      Energy reference = 52918 1/cm
      Energy step      = 217 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -75.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006628
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.255697
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.122044
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.130229
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.502433
         W1 Well: minimal relaxation eigenvalue = 0.0533241
         W1 Well: maximal relaxation eigenvalue = 1.00056
         W1 Well:       grid size = 293
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10663 1/cm
         B1 Barrier:        grid size = 244
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -29 1/cm
         B2 Barrier:        grid size = 243
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 266
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4803 1/cm
         B4 Barrier:        grid size = 273
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6323 1/cm
         B5 Barrier: nonpositive number of states at -23249 1/cm => truncating
         B5 Barrier:        grid size = 351
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23249 1/cm
         B6 Barrier:        grid size = 237
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1489 1/cm
         B7 Barrier:        grid size = 223
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4527 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16679 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.34456, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 293
      MasterEquation::Barrier::truncate: real weight = 7.32288e+30
      MasterEquation::Barrier::truncate: effective weight = 7.24031e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10663 -10663 3.23e+08 1.99e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -29 1.42e+17
         B2    188 4.56e+16
         B3  -4803 1.59e+16
         B4  -6323 1.76e+16
         B5 -10663 2.25e+15
         B6   1490 1.69e+17
         B7   4528 3.08e+16
         B8  16679 5.94e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.63e-13  8.08e-13  3.86e-14  7.02e-15  3.02e-23  3.67e-11  3.95e-09    0.0257
          R  2.16e+12         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  1.24e+12     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  2.59e+13        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3  1.42e+14        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4  3.32e+22  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  2.72e+10    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  2.53e+08  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7      38.9   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.64e-12  1.68e-11  8.03e-13  1.46e-13  6.27e-22  7.64e-10  8.22e-08     0.535
          R  1.04e+11         1      1.74    0.0833    0.0152  6.51e-11      79.2  8.53e+03  5.55e+10
         P1  5.95e+10     0.574         1    0.0478   0.00869  3.73e-11      45.4  4.89e+03  3.18e+10
         P2  1.25e+12        12      20.9         1     0.182  7.81e-10       951  1.02e+05  6.66e+11
         P3  6.85e+12        66       115       5.5         1  4.29e-09  5.23e+03  5.63e+05  3.66e+12
         P4  1.59e+21  1.54e+10  2.68e+10  1.28e+09  2.33e+08         1  1.22e+12  1.31e+14  8.53e+20
         P5  1.31e+09    0.0126     0.022   0.00105  0.000191  8.21e-13         1       108  7.01e+08
         P6  1.22e+07  0.000117  0.000204  9.77e-06  1.78e-06  7.63e-15   0.00929         1  6.51e+06
         P7      1.87   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.17e-21  1.43e-09  1.54e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.35843, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180651, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.25338, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             120069      38501.4        13452      14851.3      1902.83       142899      26035.4      501.717
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18093, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114613, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3168, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000211119   0.00021115  0.000146397
      low eigenvalue method done, cpu time[sec] = 1.32875, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000211  0.000146         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-05  0.000146         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000146376
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.95875e-09  5.31327e-09  1.31614e-09  3.97335e-11   2.4589e-10  7.61013e-12  3.67341e-11  3.20725e-14  1.51908e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0946, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.179945, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.25522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40023.2      12833.8         4484      4950.44      634.275      47632.9      8678.46      167.239
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1794, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3148, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000160623   0.00016064  0.000104039
      low eigenvalue method done, cpu time[sec] = 1.32638, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000161  0.000104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-05  0.000104         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000104028
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.94553e-09  3.96855e-09  7.83808e-10  2.49531e-11  1.26983e-10  4.34427e-12  3.72544e-11  3.22279e-14   1.5191e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.0962, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         8.91816e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.179273, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26232, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24013.9      7700.28       2690.4      2970.26      380.565      28579.7      5207.08      100.343
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17713, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114414, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000138439  0.000138451  8.61572e-05
      low eigenvalue method done, cpu time[sec] = 1.32477, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000138  8.61e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.6e-06  8.61e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.61498e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.09558e-09  3.34795e-09  5.94668e-10  1.98927e-11  9.31472e-11   3.3367e-12  3.68543e-11  3.23743e-14  1.51912e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.09991, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.24854e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.179068, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26643, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17152.8       5500.2      1921.71      2121.62      271.832      20414.1      3719.34      71.6739
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17817, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114699, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3142, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000124493  0.000124502  7.52342e-05
      low eigenvalue method done, cpu time[sec] = 1.32615, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000125  7.52e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.57e-06  7.52e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.52286e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.57638e-09  2.95471e-09  4.90083e-10  1.70392e-11  7.57191e-11  2.79487e-12  3.62462e-11   3.2514e-14  1.51914e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.10523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.60527e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.179995, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26528, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13341.1      4277.93      1494.67      1650.15      211.425      15877.6      2892.82      55.7464
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18182, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114403, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31767, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000114485  0.000114492  6.75705e-05
      low eigenvalue method done, cpu time[sec] = 1.33004, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000114  6.76e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.83e-06  6.76e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.75659e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.2121e-09  2.67271e-09  4.21677e-10  1.51268e-11  6.47256e-11  2.44264e-12  3.55876e-11  3.26479e-14  1.51916e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11247, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180894, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26702, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12006.9      3850.14       1345.2      1485.13      190.283      14289.9      2603.54      50.1717
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1783, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.115409, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31495, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000110402  0.000110409  6.44899e-05
      low eigenvalue method done, cpu time[sec] = 1.32715, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00011  6.45e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.53e-06  6.45e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.44858e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.06567e-09  2.55798e-09  3.95334e-10  1.43768e-11  6.05672e-11  2.30692e-12  3.52569e-11  3.27127e-14  1.51916e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11182, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         2.67545e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.1803, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.25475, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8004.63      2566.76        896.8      990.088      126.855      9526.57      1735.69      33.4478
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1814, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.114167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31657, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.53638e-05  9.53689e-05  5.33934e-05
      low eigenvalue method done, cpu time[sec] = 1.32868, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.54e-05  5.34e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.44e-06  5.34e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.33905e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.5382e-09   2.1384e-09  3.05912e-10   1.1754e-11  4.67194e-11  1.84327e-12   3.3677e-11  3.30174e-14  1.51921e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.10035, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         3.56726e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180574, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.2537, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6003.47      1925.07        672.6      742.566      95.1413      7144.93      1301.77      25.0859
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114562, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31518, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.53859e-05  8.53899e-05  4.62695e-05
      low eigenvalue method done, cpu time[sec] = 1.32731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.54e-05  4.63e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.73e-06  4.63e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.62673e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.19956e-09  1.86398e-09  2.53012e-10  1.01278e-11  3.86884e-11  1.56451e-12  3.22646e-11  3.32916e-14  1.51926e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.09874, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         4.45908e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.181325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26562, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4802.78      1540.06       538.08      594.053       76.113      5715.94      1041.42      20.0687
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1804, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113784, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.80653e-05  7.80686e-05   4.1178e-05
      low eigenvalue method done, cpu time[sec] = 1.32749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.81e-05  4.12e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.2e-06  4.12e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.11763e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.95753e-09  1.66552e-09  2.17364e-10  8.98918e-12  3.33262e-11  1.37342e-12  3.10119e-11  3.35383e-14  1.51931e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11045, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26807, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4002.32      1283.38        448.4      495.044      63.4275      4763.29      867.846      16.7239
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113143, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31759, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.23643e-05   7.2367e-05  3.72991e-05
      low eigenvalue method done, cpu time[sec] = 1.33022, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.24e-05  3.73e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.8e-06  3.73e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.72977e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.77314e-09  1.51307e-09  1.91419e-10  8.13331e-12  2.94411e-11  1.23204e-12  2.98942e-11  3.37599e-14  1.51936e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11591, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         6.24271e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3430.56      1100.04      384.343      424.324      54.3664      4082.82      743.868      14.3348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31781, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.77444e-05  6.77467e-05  3.42153e-05
      low eigenvalue method done, cpu time[sec] = 1.3299, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.77e-05  3.42e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.48e-06  3.42e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.42141e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.62655e-09   1.3911e-09  1.71544e-10  7.45921e-12  2.64711e-11  1.12209e-12  2.88892e-11  3.39589e-14   1.5194e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.12465, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         7.13453e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.18032, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26081, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3001.74      962.535        336.3      371.283      47.5706      3572.47      650.885      12.5429
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18057, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11405, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31523, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.38924e-05  6.38944e-05  3.16873e-05
      low eigenvalue method done, cpu time[sec] = 1.32731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.39e-05  3.17e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.21e-06  3.17e-05         1
         *Z       ---       ---  3.72e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.16863e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.50637e-09  1.29062e-09   1.5575e-10  6.91034e-12  2.41127e-11   1.0335e-12  2.79784e-11  3.41373e-14  1.51945e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.10421, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1400 K
      Energy reference = 55699 1/cm
      Energy step      = 233 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -73.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006449
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.247563
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.118621
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.125853
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.48418
         W1 Well: minimal relaxation eigenvalue = 0.0507375
         W1 Well: maximal relaxation eigenvalue = 1.00507
         W1 Well:       grid size = 288
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -11404 1/cm
         B1 Barrier:        grid size = 240
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -220 1/cm
         B2 Barrier:        grid size = 239
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 12 1/cm
         B3 Barrier:        grid size = 259
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4648 1/cm
         B4 Barrier:        grid size = 266
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6279 1/cm
         B5 Barrier: nonpositive number of states at -23521 1/cm => truncating
         B5 Barrier:        grid size = 340
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23521 1/cm
         B6 Barrier:        grid size = 233
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1410 1/cm
         B7 Barrier:        grid size = 219
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4672 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16555 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.30885, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 288
      MasterEquation::Barrier::truncate: real weight = 2.88039e+30
      MasterEquation::Barrier::truncate: effective weight = 3.05789e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -11404 -11404 2.42e+08 2.81e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -220  2.2e+17
         B2     13 7.52e+16
         B3  -4648 2.75e+16
         B4  -6279 3.01e+16
         B5 -11404 3.91e+15
         B6   1411 2.75e+17
         B7   4672 5.27e+16
         B8  16556 1.16e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.15e-13  3.78e-13  2.54e-14  5.29e-15  9.68e-23  1.44e-11  1.22e-09   0.00327
          R  4.66e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  2.65e+12     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  3.93e+13      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  1.89e+14      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4  1.03e+22  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5  6.95e+10    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  8.17e+08  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7       306  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.73e-13  1.36e-12  9.16e-14   1.9e-14  3.48e-22  5.18e-11  4.41e-09    0.0118
          R  1.29e+12         1      1.76     0.119    0.0246  4.51e-10      67.1   5.7e+03  1.53e+10
         P1  7.35e+11     0.568         1    0.0673     0.014  2.56e-10      38.1  3.24e+03  8.66e+09
         P2  1.09e+13      8.44      14.8         1     0.208  3.81e-09       566  4.81e+04  1.29e+11
         P3  5.25e+13      40.6      71.4      4.81         1  1.83e-08  2.72e+03  2.31e+05  6.19e+11
         P4  2.87e+21  2.22e+09   3.9e+09  2.63e+08  5.46e+07         1  1.49e+11  1.26e+13  3.38e+19
         P5  1.93e+10    0.0149    0.0262   0.00177  0.000367  6.72e-12         1        85  2.27e+08
         P6  2.27e+08  0.000175  0.000309  2.08e-05  4.32e-06  7.91e-14    0.0118         1  2.67e+06
         P7      84.9  6.56e-11  1.15e-10  7.77e-12  1.62e-12  2.96e-20   4.4e-09  3.74e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.32259, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173768, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14822, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             138216      47171.4      17267.6      18896.8      2450.36       172596      33020.5      727.088
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13027, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11097, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26246, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000315452  0.000315524  0.000227974
      low eigenvalue method done, cpu time[sec] = 1.27333, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000316  0.000228         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.19e-05  0.000228         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000227922
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.72167e-08  5.17111e-08   1.2364e-08  3.78682e-10  2.28481e-09  7.16152e-11  4.15568e-10  4.98628e-13  6.36346e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.91654, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173547, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14117, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              46072      15723.8      5755.86      6298.94      816.787      57531.9      11006.8      242.363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13173, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111249, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000246068  0.000246109  0.000166937
      low eigenvalue method done, cpu time[sec] = 1.27428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000246  0.000167         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-05  0.000167         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000166909
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.92235e-08  3.97084e-08  7.58485e-09   2.4668e-10  1.22347e-09  4.24613e-11  4.23087e-10  5.00929e-13  6.36353e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.90902, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         8.49955e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.172821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14302, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27643.2      9434.28      3453.52      3779.36      490.072      34519.1       6604.1      145.418
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13289, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110796, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000214888  0.000214918  0.000140525
      low eigenvalue method done, cpu time[sec] = 1.2757, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000215  0.000141         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-05  0.000141         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000140506
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.14367e-08  3.40208e-08  5.85071e-09  2.00445e-10   9.1489e-10  3.32654e-11  4.20628e-10  5.03064e-13  6.36361e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.91183, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.18994e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.17342, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19745.1      6738.77       2466.8      2699.55      350.051      24656.5      4717.21       103.87
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13205, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000195034  0.000195059  0.000124153
      low eigenvalue method done, cpu time[sec] = 1.27411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000195  0.000124         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-05  0.000124         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000124138
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.66097e-08  3.03615e-08  4.87967e-09  1.74007e-10  7.53858e-10  2.82527e-11  4.15646e-10  5.05088e-13  6.36368e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.9164, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.52992e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174095, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15357.3      5241.26      1918.62      2099.65      272.262      19177.3      3668.94      80.7875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.109913, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000180654  0.000180674   0.00011254
      low eigenvalue method done, cpu time[sec] = 1.27007, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000181  0.000113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-05  0.000113         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000112528
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.31857e-08  2.77078e-08  4.23851e-09    1.561e-10  6.51272e-10  2.49604e-11  4.09872e-10  5.07019e-13  6.36376e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14973, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13821.6      4717.14      1726.76      1889.68      245.036      17259.6      3302.05      72.7088
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12976, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110786, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26071, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000174753  0.000174772   0.00010784
      low eigenvalue method done, cpu time[sec] = 1.27203, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000175  0.000108         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-05  0.000108         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000107828
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.17998e-08  2.66205e-08   3.9901e-09  1.49029e-10  6.12218e-10  2.36833e-11  4.06892e-10  5.07953e-13   6.3638e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.91844, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         2.54986e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173385, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14911, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9214.39      3144.76      1151.17      1259.79      163.357      11506.4      2201.37      48.4725
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13198, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110514, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000152833  0.000152846  9.07349e-05
      low eigenvalue method done, cpu time[sec] = 1.27438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000153  9.07e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     1e-05  9.07e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.07267e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.67563e-08  2.26024e-08  3.13932e-09  1.24052e-10  4.80951e-10  1.92778e-11  3.92201e-10  5.12332e-13  6.36398e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.9199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         3.39982e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174339, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6910.79      2358.57      863.379      944.841      122.518      8629.78      1651.02      36.3544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13396, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110201, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00013811  0.000138121    7.959e-05
      low eigenvalue method done, cpu time[sec] = 1.2753, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000138  7.96e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.96e-06  7.96e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.95837e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.34701e-08  1.99349e-08  2.62931e-09  1.08333e-10  4.03749e-10  1.65902e-11  3.78633e-10  5.16276e-13  6.36417e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92717, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         4.24977e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174161, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15873, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5528.63      1886.86      690.703      755.873      98.0144      6903.83      1320.82      29.0835
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13157, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2622, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000127207  0.000127216  7.15328e-05
      low eigenvalue method done, cpu time[sec] = 1.27318, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000127  7.15e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.21e-06  7.15e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.15276e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.10943e-08  1.79835e-08  2.28203e-09  9.71971e-11  3.51633e-10  1.47266e-11  3.66347e-10  5.19834e-13  6.36436e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92996, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.17434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16207, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4607.2      1572.38      575.586      629.894      81.6787      5753.19      1100.68      24.2363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13336, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26368, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000118651  0.000118659  6.53361e-05
      low eigenvalue method done, cpu time[sec] = 1.27465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000119  6.53e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.62e-06  6.53e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.53318e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.92671e-08  1.64701e-08  2.02708e-09  8.87457e-11  3.13526e-10  1.33348e-11   3.5522e-10  5.23049e-13  6.36455e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93493, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.94968e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.17509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16235, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3949.02      1347.75      493.359      539.909      70.0103      4931.31      943.442      20.7739
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13564, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110417, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000111672  0.000111679  6.03695e-05
      low eigenvalue method done, cpu time[sec] = 1.2779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000112  6.04e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.14e-06  6.04e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.03658e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.78026e-08  1.52494e-08  1.83031e-09  8.20336e-11  2.84164e-10  1.22434e-11  3.45091e-10  5.25954e-13  6.36474e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93982, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         6.79964e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173956, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16344, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3455.4      1179.28       431.69       472.42       61.259      4314.89      825.512      18.1772
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13313, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110501, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26418, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00010582  0.000105826  5.62689e-05
      low eigenvalue method done, cpu time[sec] = 1.27517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000106  5.63e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.74e-06  5.63e-05         1
         *Z       ---       ---  1.63e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.62657e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.65934e-08  1.42367e-08  1.67292e-09  7.65283e-11  2.60686e-10  1.13575e-11  3.35819e-10  5.28579e-13  6.36492e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93478, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1500 K
      Energy reference = 58479 1/cm
      Energy step      = 250 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -72 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00624
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.21565
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.113337
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.127251
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.462079
         W1 Well: minimal relaxation eigenvalue = 0.0483596
         W1 Well: maximal relaxation eigenvalue = 1.00856
         W1 Well:       grid size = 282
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12020 1/cm
         B1 Barrier:        grid size = 234
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -21 1/cm
         B2 Barrier:        grid size = 234
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -21 1/cm
         B3 Barrier:        grid size = 253
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4770 1/cm
         B4 Barrier:        grid size = 259
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6270 1/cm
         B5 Barrier: nonpositive number of states at -23271 1/cm => truncating
         B5 Barrier:        grid size = 327
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23271 1/cm
         B6 Barrier:        grid size = 228
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 216
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4479 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16729 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.2466, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 282
      MasterEquation::Barrier::truncate: real weight = 1.34773e+30
      MasterEquation::Barrier::truncate: effective weight = 1.53518e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12020 -12020  1.9e+08 3.94e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -21 3.35e+17
         B2    -21 1.21e+17
         B3  -4770 4.65e+16
         B4  -6270 5.05e+16
         B5 -12020 6.62e+15
         B6   1479 4.37e+17
         B7   4480 8.75e+16
         B8  16729 2.18e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.48e-14  1.69e-13  1.52e-14  3.55e-15  2.29e-22  5.47e-12  3.79e-10   0.00047
          R  1.06e+13         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  5.93e+12     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  6.57e+13      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  2.81e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  4.38e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5  1.83e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6  2.64e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7  2.13e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.73e-14  1.55e-13   1.4e-14  3.27e-15  2.11e-22  5.04e-12  3.49e-10  0.000433
          R  1.15e+13         1      1.78     0.161    0.0375  2.41e-09      57.7     4e+03  4.96e+09
         P1  6.44e+12     0.562         1    0.0903    0.0211  1.36e-09      32.4  2.25e+03  2.79e+09
         P2  7.13e+13      6.23      11.1         1     0.233   1.5e-08       359  2.49e+04  3.09e+10
         P3  3.05e+14      26.7      47.5      4.28         1  6.43e-08  1.54e+03  1.07e+05  1.32e+11
         P4  4.75e+21  4.15e+08  7.38e+08  6.66e+07  1.55e+07         1  2.39e+10  1.66e+12  2.06e+18
         P5  1.98e+11    0.0173    0.0308   0.00278   0.00065  4.18e-11         1      69.3   8.6e+07
         P6  2.87e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.04e-13    0.0144         1  1.24e+06
         P7  2.31e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  4.86e-19  1.16e-08  8.06e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.2603, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06163, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             156740      56755.6      21795.7      23660.4      3102.08       204751      40964.9      1020.36
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105468, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19967, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000493305  0.000493489  0.000374226
      low eigenvalue method done, cpu time[sec] = 1.21094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000493  0.000374         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.36e-05  0.000374         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000374086
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.62447e-07  3.58173e-07  8.28353e-08   2.5766e-09  1.51715e-08  4.81481e-10  3.30762e-09  5.26322e-12  1.59556e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.74728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.02553, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            52246.6      18918.5      7265.23       7886.8      1034.03      68250.2        13655       340.12
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.106219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1961, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000393646  0.000393756  0.000281379
      low eigenvalue method done, cpu time[sec] = 1.20687, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000394  0.000281         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.62e-05  0.000281         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0002813
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.47745e-07  2.81812e-07  5.21938e-08  1.73418e-09  8.39296e-09  2.95366e-10   3.3783e-09  5.28632e-12  1.59558e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.70653, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         8.12751e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167511, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              31348      11351.1      4359.14      4732.08      620.415      40950.1      8192.98      204.072
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07098, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19628, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000347924  0.000348008  0.000240308
      low eigenvalue method done, cpu time[sec] = 1.20707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000348   0.00024         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.29e-05   0.00024         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000240251
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.96999e-07  2.44756e-07  4.08634e-08  1.43331e-09  6.38532e-09  2.35537e-10  3.37252e-09  5.30747e-12   1.5956e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.72579, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.13785e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166895, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22391.4      8107.94      3113.67      3380.06      443.154      29250.1      5852.13      145.766
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.106521, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19872, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000318469  0.000318537  0.000214515
      low eigenvalue method done, cpu time[sec] = 1.21049, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000319  0.000214         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-05  0.000214         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000214469
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.65128e-07  2.20586e-07  3.44479e-08  1.25916e-09  5.32569e-09  2.02539e-10   3.3457e-09   5.3274e-12  1.59562e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.71865, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.46295e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03933, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17415.5      6306.18      2421.74      2628.93      344.675      22750.1      4551.65      113.373
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07252, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19791, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00029695  0.000297008  0.000196042
      low eigenvalue method done, cpu time[sec] = 1.20918, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000297  0.000196         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-05  0.000196         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000196003
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1    2.423e-07   2.0288e-07  3.01763e-08  1.14011e-09  4.64482e-09  1.80671e-10  3.31122e-09  5.34635e-12  1.59563e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.7256, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167483, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0402, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              15674      5675.56      2179.57      2366.04      310.208      20475.1      4096.49      102.036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105385, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19828, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000288072  0.000288127  0.000188518
      low eigenvalue method done, cpu time[sec] = 1.20941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000288  0.000188         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-05  0.000188         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000188483
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.33004e-07   1.9558e-07  2.85124e-08  1.09282e-09  4.38417e-09   1.7214e-10  3.29276e-09   5.3555e-12  1.59564e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.72894, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         2.43825e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167126, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04027, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10449.3      3783.71      1453.05      1577.36      206.805        13650      2730.99      68.0241
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07658, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10582, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20254, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000254832  0.000254873   0.00016089
      low eigenvalue method done, cpu time[sec] = 1.2138, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000255  0.000161         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-05  0.000161         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000160864
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.98862e-07   1.6835e-07   2.2769e-08  9.24286e-10  3.50087e-09  1.42455e-10  3.19817e-09  5.39834e-12  1.59569e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1           3.251e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.03296, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7836.99      2837.78      1089.78      1183.02      155.104      10237.5      2048.24      51.0181
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07553, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105111, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20012, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000232255  0.000232288  0.000142652
      low eigenvalue method done, cpu time[sec] = 1.21185, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000232  0.000143         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-05  0.000143         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000142632
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.76322e-07  1.50031e-07  1.92855e-08  8.16829e-10  2.97497e-09  1.24114e-10  3.10753e-09  5.43696e-12  1.59573e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.72385, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         4.06375e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04785, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6269.6      2270.22      871.827      946.416      124.083      8190.02       1638.6      40.8145
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0708, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105971, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19632, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000215389  0.000215417  0.000129332
      low eigenvalue method done, cpu time[sec] = 1.20759, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000215  0.000129         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-05  0.000129         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000129315
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.5986e-07  1.36492e-07  1.68918e-08   7.3992e-10  2.61652e-09  1.11267e-10  3.02364e-09  5.47192e-12  1.59578e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0449, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5224.66      1891.85      726.523       788.68      103.403      6825.02       1365.5       34.012
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07062, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00020206  0.000202084  0.000119001
      low eigenvalue method done, cpu time[sec] = 1.2071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000202  0.000119         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-05  0.000119         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000118987
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.47092e-07  1.25902e-07   1.5121e-08  6.81049e-10   2.3523e-09  1.01592e-10  2.94646e-09  5.50365e-12  1.59582e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.7306, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         5.68926e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167601, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05158, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4478.28      1621.59      622.734      676.011      88.6307      5850.01      1170.43      29.1532
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07378, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19754, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000191122  0.000191143  0.000110661
      low eigenvalue method done, cpu time[sec] = 1.2087, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000191  0.000111         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-05  0.000111         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000110649
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.36785e-07    1.173e-07  1.37452e-08   6.3395e-10   2.1473e-09  9.39505e-11  2.87537e-09   5.5325e-12  1.59586e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73868, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         6.50201e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.1671, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3918.5      1418.89      544.892       591.51      77.5519      5118.76      1024.12       25.509
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0763, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.104774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20058, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000181902  0.000181921  0.000103732
      low eigenvalue method done, cpu time[sec] = 1.21185, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000182  0.000104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-05  0.000104         1
         *Z       ---       ---  7.58e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000103721
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.28221e-07  1.10117e-07  1.26384e-08  5.95068e-10  1.98238e-09  8.77087e-11  2.80963e-09  5.55877e-12  1.59591e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73948, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1600 K
      Energy reference = 61260 1/cm
      Energy step      = 267 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -70 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006522
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.231572
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.109355
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.110557
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.441554
         W1 Well: minimal relaxation eigenvalue = 0.0460732
         W1 Well: maximal relaxation eigenvalue = 1.01269
         W1 Well:       grid size = 277
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12699 1/cm
         B1 Barrier:        grid size = 230
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -151 1/cm
         B2 Barrier:        grid size = 229
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 115 1/cm
         B3 Barrier:        grid size = 247
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4690 1/cm
         B4 Barrier:        grid size = 253
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6291 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 316
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23112 1/cm
         B6 Barrier:        grid size = 224
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 212
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4655 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16670 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.21988, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 277
      MasterEquation::Barrier::truncate: real weight = 7.25027e+29
      MasterEquation::Barrier::truncate: effective weight = 8.82024e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12699 -12699 1.44e+08 5.46e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -151 4.98e+17
         B2    116 1.91e+17
         B3  -4690 7.69e+16
         B4  -6291 8.29e+16
         B5 -12699  1.1e+16
         B6   1452 6.79e+17
         B7   4655 1.42e+17
         B8  16671 3.95e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.5e-14   8.1e-14  9.42e-15  2.43e-15   4.7e-22  2.26e-12  1.31e-10  8.33e-05
          R  2.22e+13         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  1.23e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  1.06e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  4.11e+14      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  2.13e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  4.42e+11    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6  7.64e+09  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7   1.2e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.3e-14  2.35e-14  2.73e-15  7.06e-16  1.36e-22  6.56e-13  3.79e-11  2.41e-05
          R  7.67e+13         1       1.8     0.209    0.0541  1.04e-08      50.3  2.91e+03  1.85e+09
         P1  4.26e+13     0.555         1     0.116      0.03   5.8e-09      27.9  1.62e+03  1.03e+09
         P2  3.66e+14      4.78       8.6         1     0.259  4.99e-08       240  1.39e+04  8.84e+09
         P3  1.42e+15      18.5      33.3      3.87         1  1.93e-07       930  5.38e+04  3.42e+10
         P4  7.34e+21  9.57e+07  1.72e+08     2e+07  5.18e+06         1  4.81e+09  2.78e+11  1.77e+17
         P5  1.52e+12    0.0199    0.0358   0.00416   0.00108  2.08e-10         1      57.8  3.68e+07
         P6  2.64e+10  0.000344  0.000619  7.19e-05  1.86e-05  3.59e-12    0.0173         1  6.36e+05
         P7  4.14e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  5.65e-18  2.72e-08  1.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.23358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.16138, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.94951, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             175440      67210.5      27080.6      29203.5      3868.01       239110      49851.6      1392.55
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.102841, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1409, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000727182  0.000727601  0.000576367
      low eigenvalue method done, cpu time[sec] = 1.15149, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000728  0.000576         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.84e-05  0.000576         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000576035
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  2.41814e-06  1.88503e-06  4.21363e-07  1.33622e-08  7.68574e-08  2.46898e-09  1.98173e-08  4.06074e-11  2.63752e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.5611, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161628, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.95107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              58480      22403.5      9026.86      9734.52      1289.34      79703.3      16617.2      464.183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101453, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000592248  0.000592511  0.000443763
      low eigenvalue method done, cpu time[sec] = 1.14978, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000593  0.000444         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.85e-05  0.000444         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000443566
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.86205e-06  1.51532e-06  2.72339e-07  9.25989e-09  4.37805e-08   1.5617e-09  2.02858e-08  4.07777e-11  2.63754e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.56092, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         7.79424e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.160967, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96025, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              35088      13442.1      5416.11      5840.71      773.602        47822      9970.33       278.51
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01847, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10156, elapsed time[sec] = 1
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13901, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000529144  0.000529347  0.000383903
      low eigenvalue method done, cpu time[sec] = 1.14957, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000529  0.000384         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-05  0.000384         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000383756
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.61097e-06  1.33201e-06  2.16173e-07  7.77037e-09  3.38282e-08  1.26533e-09   2.0317e-08  4.09317e-11  2.63757e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.56977, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.09119e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25062.8       9601.5      3868.65      4171.94      552.573      34158.6      7121.66      198.936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0172, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000488052   0.00048822  0.000345863
      low eigenvalue method done, cpu time[sec] = 1.14815, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000488  0.000346         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.1e-05  0.000346         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000345743
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999   1.4514e-06  1.21095e-06  1.84033e-07  6.89911e-09  2.85238e-08  1.10021e-09  2.02199e-08  4.10758e-11   2.6376e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.56999, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.40296e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161326, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19493.3      7467.84      3008.95      3244.84      429.779      26567.8      5539.07      154.728
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01751, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101351, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13829, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000457796  0.000457942   0.00031838
      low eigenvalue method done, cpu time[sec] = 1.1488, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000458  0.000318         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-05  0.000318         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000318278
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999   1.3361e-06  1.12147e-06  1.62466e-07  6.29869e-09  2.50898e-08   9.8993e-10  2.00717e-08  4.12123e-11  2.63763e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.56888, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.160094, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.9656, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              17544      6721.05      2708.06      2920.35      386.801        23911      4985.16      139.255
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02003, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13977, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000445254  0.000445391  0.000307125
      low eigenvalue method done, cpu time[sec] = 1.15053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000445  0.000307         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.8e-05  0.000307         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000307031
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.28889e-06  1.08436e-06  1.54024e-07  6.05893e-09  2.37688e-08  9.46689e-10  1.99882e-08  4.12781e-11  2.63764e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57401, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         2.33827e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.160936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              11696       4480.7      1805.37       1946.9      257.867      15940.7      3323.44      92.8366
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01876, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100715, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000397953  0.000398058  0.000265456
      low eigenvalue method done, cpu time[sec] = 1.15012, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000398  0.000265         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.48e-05  0.000265         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000265386
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.11406e-06  9.44803e-07  1.24672e-07  5.19783e-09    1.926e-08  7.95106e-10   1.9539e-08  4.15857e-11  2.63771e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57617, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          3.1177e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161366, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97301, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               8772      3360.53      1354.03      1460.18        193.4      11955.5      2492.58      69.6274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02115, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101403, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14207, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000365495  0.000365582  0.000237624
      low eigenvalue method done, cpu time[sec] = 1.1533, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000366  0.000238         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.26e-05  0.000238         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000237568
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  9.97288e-07  8.49792e-07  1.06681e-07  4.64246e-09  1.65467e-08  7.00399e-10  1.90896e-08  4.18631e-11  2.63778e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         3.89712e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161918, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97415, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7017.6      2688.42      1083.22      1168.14       154.72       9564.4      1994.07      55.7019
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01936, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100982, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13963, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000341059  0.000341133  0.000217112
      low eigenvalue method done, cpu time[sec] = 1.1509, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000341  0.000217         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-05  0.000217         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000217065
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  9.11217e-07  7.78919e-07  9.42148e-08  4.24137e-09  1.46816e-08  6.33478e-10  1.86637e-08  4.21148e-11  2.63785e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.5889, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96866, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               5848      2240.35      902.686      973.452      128.934      7970.33      1661.72      46.4183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02453, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101249, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14501, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000321621  0.000321686  0.000201083
      low eigenvalue method done, cpu time[sec] = 1.15651, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000322  0.000201         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-05  0.000201         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000201043
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.43959e-07  7.23069e-07  8.49293e-08  3.93202e-09   1.3297e-08  5.82706e-10  1.82655e-08  4.23441e-11  2.63791e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58841, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         5.45597e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161667, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96643, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5012.57       1920.3      773.731      834.387      110.515      6831.71      1424.33      39.7871
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02314, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14349, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000305584  0.000305641   0.00018806
      low eigenvalue method done, cpu time[sec] = 1.15469, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000306  0.000188         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.85e-05  0.000188         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000188025
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.89311e-07  6.77404e-07  7.76727e-08  3.68292e-09  1.22162e-08  5.42349e-10   1.7894e-08  4.25536e-11  2.63798e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58414, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          6.2354e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162179, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97446, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               4386      1680.26      677.014      730.089      96.7002      5977.75      1246.29      34.8137
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02029, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14058, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.000292  0.000292052  0.000177179
      low eigenvalue method done, cpu time[sec] = 1.15189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000292  0.000177         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-05  0.000177         1
         *Z       ---       ---  3.88e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000177148
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999   7.4365e-07  6.39059e-07  7.18039e-08   3.4761e-09   1.1342e-08    5.092e-10   1.7547e-08  4.27455e-11  2.63805e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58808, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1700 K
      Energy reference = 64039 1/cm
      Energy step      = 283 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -67.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006365
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.229083
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.106424
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.116482
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.432154
         W1 Well: minimal relaxation eigenvalue = 0.0438296
         W1 Well: maximal relaxation eigenvalue = 1.01883
         W1 Well:       grid size = 274
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -13503 1/cm
         B1 Barrier:        grid size = 227
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -201 1/cm
         B2 Barrier:        grid size = 226
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 80 1/cm
         B3 Barrier:        grid size = 243
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4729 1/cm
         B4 Barrier:        grid size = 249
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6427 1/cm
         B5 Barrier: nonpositive number of states at -23125 1/cm => truncating
         B5 Barrier:        grid size = 308
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23125 1/cm
         B6 Barrier:        grid size = 221
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1495 1/cm
         B7 Barrier:        grid size = 210
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4608 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16495 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.2093, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 274
      MasterEquation::Barrier::truncate: real weight = 4.36639e+29
      MasterEquation::Barrier::truncate: effective weight = 5.6302e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -13503 -13503 1.03e+08 7.51e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -201 7.29e+17
         B2     81 2.95e+17
         B3  -4729 1.24e+17
         B4  -6427 1.34e+17
         B5 -13503 1.79e+16
         B6   1496 1.03e+18
         B7   4609 2.24e+17
         B8  16496 6.96e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.33e-14  4.25e-14  6.15e-15  1.74e-15  8.87e-22  1.03e-12   5.1e-11   1.8e-05
          R  4.29e+13         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1  2.35e+13     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  1.63e+14      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  5.74e+14      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  1.13e+21  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5  9.67e+11    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6  1.96e+10  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7  5.55e+04  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.45e-15  4.47e-15  6.47e-16  1.83e-16  9.33e-23  1.09e-13  5.36e-12  1.89e-06
          R  4.08e+14         1      1.82     0.264    0.0747  3.81e-08      44.4  2.19e+03  7.73e+08
         P1  2.24e+14     0.549         1     0.145     0.041  2.09e-08      24.3   1.2e+03  4.24e+08
         P2  1.55e+15      3.79      6.91         1     0.283  1.44e-07       168  8.28e+03  2.93e+09
         P3  5.46e+15      13.4      24.4      3.53         1   5.1e-07       594  2.93e+04  1.03e+10
         P4  1.07e+22  2.63e+07  4.79e+07  6.94e+06  1.96e+06         1  1.17e+09  5.74e+10  2.03e+16
         P5   9.2e+12    0.0225    0.0411   0.00595   0.00168  8.58e-10         1      49.3  1.74e+07
         P6  1.87e+11  0.000457  0.000834  0.000121  3.42e-05  1.74e-11    0.0203         1  3.54e+05
         P7  5.28e+05  1.29e-09  2.36e-09  3.41e-10  9.66e-11  4.92e-17  5.74e-08  2.83e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.2227, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.88663, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             194129      78480.6      33164.1      35584.6      4757.82       275395      59647.3      1854.57
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.991521, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10927, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00100523   0.00100606  0.000825601
      low eigenvalue method done, cpu time[sec] = 1.11982, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00101  0.000825         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.48e-05  0.000825         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00082492
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99999  1.01151e-05  7.92647e-06  1.72111e-06  5.55189e-08  3.12264e-07  1.01509e-08  9.40445e-08  2.42061e-10  3.09469e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.45715, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.157554, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8919, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64709.6      26160.2      11054.7      11861.5      1585.94      91798.3      19882.4      618.191
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.988443, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101106, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000833417  0.000833958  0.000649044
      low eigenvalue method done, cpu time[sec] = 1.61949, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000834  0.000649         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.25e-05  0.000649         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000648623
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999992  7.95341e-06  6.49419e-06  1.13701e-06  3.94972e-08  1.82634e-07   6.6007e-09  9.64501e-08  2.43033e-10  3.09472e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.96226, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         7.49365e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.157588, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90482, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38825.8      15696.1      6632.82      7116.92      951.565        55079      11929.5      370.915
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.988755, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099071, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10647, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000751729  0.000752156   0.00056793
      low eigenvalue method done, cpu time[sec] = 1.11722, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000752  0.000568         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.67e-05  0.000568         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000567607
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999993  6.95999e-06  5.76991e-06  9.13477e-07  3.35968e-08  1.43098e-07  5.42505e-09   9.6862e-08    2.439e-10  3.09475e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.47516, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.04911e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.157775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.9126, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27732.7      11211.5      4737.73      5083.51      679.689      39342.1      8521.05      264.939
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.991752, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09871, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000698037  0.000698397  0.000515844
      low eigenvalue method done, cpu time[sec] = 1.11975, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000698  0.000516         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.3e-05  0.000516         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000515578
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994    6.322e-06  5.28621e-06   7.8443e-07  3.01141e-08  1.21848e-07  4.76434e-09   9.6659e-08  2.44707e-10  3.09478e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.34886e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158202, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21569.9      8720.07       3684.9      3953.84      528.647      30599.4      6627.48      206.064
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.989094, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000658234  0.000658549  0.000477922
      low eigenvalue method done, cpu time[sec] = 1.1175, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000659  0.000478         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.03e-05  0.000478         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000477694
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  5.85747e-06  4.92576e-06  6.97271e-07  2.76972e-08  1.08001e-07  4.32013e-09  9.61938e-08  2.45469e-10  3.09481e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.47885, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.157848, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91041, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19412.9      7848.06      3316.41      3558.46      475.782      27539.5      5964.73      185.457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.991471, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10866, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000641664   0.00064196  0.000462317
      low eigenvalue method done, cpu time[sec] = 1.11942, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000642  0.000462         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.91e-05  0.000462         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000462103
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994   5.6663e-06  4.77552e-06   6.6301e-07  2.67277e-08  1.02653e-07  4.14519e-09  9.59089e-08  2.45835e-10  3.09483e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48004, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.24809e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158639, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90461, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12941.9      5232.04      2210.94      2372.31      317.188      18359.7      3976.49      123.638
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.992136, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11068, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000578771  0.000579005  0.000404121
      low eigenvalue method done, cpu time[sec] = 1.12148, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000579  0.000404         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.49e-05  0.000404         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000403958
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  4.95332e-06  4.20617e-06  5.43158e-07  2.32219e-08  8.42823e-08  3.52791e-09  9.42649e-08  2.47548e-10   3.0949e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.4795, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.99746e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158436, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91335, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9706.44      3924.03       1658.2      1779.23      237.891      13769.7      2982.37      92.7286
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.993231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09957, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11139, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000535225   0.00053542  0.000364844
      low eigenvalue method done, cpu time[sec] = 1.12257, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000535  0.000365         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.2e-05  0.000365         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00036471
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  4.47207e-06   3.8144e-06   4.6902e-07   2.0938e-08  7.31233e-08  3.13849e-09   9.2529e-08  2.49092e-10  3.09498e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48949, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         3.74682e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.157681, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91307, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7765.15      3139.22      1326.56      1423.38      190.313      11015.8      2385.89      74.1829
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.995187, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098608, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000502211   0.00050238   0.00033566
      low eigenvalue method done, cpu time[sec] = 1.12315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000502  0.000336         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.98e-05  0.000336         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000335547
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  4.11448e-06  3.51974e-06  4.17283e-07  1.92753e-08  6.53957e-08  2.86118e-09  9.08374e-08  2.50497e-10  3.09505e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48779, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91743, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6470.96      2616.02      1105.47      1186.15      158.594      9179.83      1988.24      61.8191
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.987786, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099191, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10625, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000475801  0.000475949  0.000312703
      low eigenvalue method done, cpu time[sec] = 1.11701, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000476  0.000313         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.81e-05  0.000313         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000312605
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.83316e-06  3.28596e-06  3.78515e-07  1.79844e-08  5.96236e-08  2.64943e-09  8.92268e-08  2.51781e-10  3.09513e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.24555e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.159663, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90847, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5546.54       2242.3      947.545       1016.7      135.938      7868.43      1704.21      52.9878
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.993165, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11077, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000453903  0.000454037  0.000293944
      low eigenvalue method done, cpu time[sec] = 1.12152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000454  0.000294         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.67e-05  0.000294         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000293858
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.60327e-06   3.0937e-06  3.48061e-07  1.69389e-08  5.50935e-08  2.48018e-09  8.77043e-08   2.5296e-10   3.0952e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.99492e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158093, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90753, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4853.22      1962.01      829.102      889.615      118.946      6884.87      1491.18      46.3643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.993066, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.098515, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000435277  0.000435398  0.000278191
      low eigenvalue method done, cpu time[sec] = 1.12123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000435  0.000278         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-05  0.000278         1
         *Z       ---       ---  2.19e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000278113
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.41022e-06  2.93143e-06  3.23319e-07  1.60665e-08  5.14118e-08  2.34046e-09  8.62676e-08  2.54045e-10  3.09528e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.47943, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1800 K
      Energy reference = 66819 1/cm
      Energy step      = 300 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -65.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006182
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.221015
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.104464
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.113427
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.416997
         W1 Well: minimal relaxation eigenvalue = 0.0417774
         W1 Well: maximal relaxation eigenvalue = 1.02413
         W1 Well:       grid size = 270
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -14181 1/cm
         B1 Barrier:        grid size = 223
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 223
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -81 1/cm
         B3 Barrier:        grid size = 239
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4881 1/cm
         B4 Barrier:        grid size = 244
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6381 1/cm
         B5 Barrier: nonpositive number of states at -23181 1/cm => truncating
         B5 Barrier:        grid size = 300
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23181 1/cm
         B6 Barrier:        grid size = 218
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1418 1/cm
         B7 Barrier:        grid size = 208
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4418 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16718 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.17959, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 270
      MasterEquation::Barrier::truncate: real weight = 2.88388e+29
      MasterEquation::Barrier::truncate: effective weight = 3.94197e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -14181 -14181 7.68e+07 1.02e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 1.05e+18
         B2    -81 4.46e+17
         B3  -4881 1.98e+17
         B4  -6381 2.11e+17
         B5 -14181 2.85e+16
         B6   1419 1.55e+18
         B7   4419 3.47e+17
         B8  16719 1.19e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.16e-14  2.14e-14  3.76e-15  1.15e-15  1.39e-21  4.57e-13  1.96e-11  4.11e-06
          R  8.64e+13         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  4.68e+13     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  2.66e+14      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3  8.68e+14      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  7.19e+20  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  2.19e+12    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6  5.11e+10  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7  2.43e+05  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.57e-16  1.03e-15  1.81e-16  5.54e-17  6.69e-23   2.2e-14  9.42e-13  1.98e-07
          R  1.79e+15         1      1.85     0.324    0.0995   1.2e-07      39.5  1.69e+03  3.55e+08
         P1  9.71e+14     0.542         1     0.176    0.0539   6.5e-08      21.4       915  1.92e+08
         P2  5.53e+15      3.08      5.69         1     0.307   3.7e-07       122  5.21e+03  1.09e+09
         P3   1.8e+16      10.1      18.6      3.26         1  1.21e-06       397   1.7e+04  3.57e+09
         P4  1.49e+22  8.33e+06  1.54e+07   2.7e+06  8.29e+05         1  3.29e+08  1.41e+10  2.96e+15
         P5  4.54e+13    0.0253    0.0468   0.00821   0.00252  3.04e-09         1      42.8  8.98e+06
         P6  1.06e+12  0.000592   0.00109  0.000192  5.89e-05  7.11e-11    0.0234         1   2.1e+05
         P7  5.06e+06  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.38e-16  1.11e-07  4.76e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.19339, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.154629, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             212640      90502.7      40130.7      42859.4      5780.89       313319      70306.5      2417.13
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.949019, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.097245, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06509, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0014426   0.00144439   0.00123887
      low eigenvalue method done, cpu time[sec] = 1.07525, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00144   0.00124         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.12e-05   0.00124     0.999
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00123734
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999965   3.5134e-05  2.76477e-05  5.85961e-06  1.91708e-07  1.05455e-06  3.46933e-08  3.68026e-07  1.16476e-09  2.73047e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.34924, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.154075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84203, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70880.1      30167.6      13376.9      14286.5      1926.96       104440      23435.5      805.709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.950086, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0012154   0.00121661  0.000991965
      low eigenvalue method done, cpu time[sec] = 1.07438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00122  0.000991         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.49e-05  0.000991         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000990982
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999972  2.81388e-05  2.30401e-05  3.94161e-06  1.39694e-07  6.31986e-07  2.31418e-08  3.77857e-07  1.16925e-09   2.7305e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         7.22087e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153166, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83891, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              42528      18100.5      8026.15      8571.87      1156.18      62663.7      14061.3      483.426
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.94895, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096244, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06347, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0011059   0.00110687  0.000876867
      low eigenvalue method done, cpu time[sec] = 1.07384, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00111  0.000876         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.73e-05  0.000876         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000876099
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999975  2.48767e-05  2.06677e-05  3.20036e-06  1.20302e-07  5.01558e-07  1.92706e-08   3.8026e-07   1.1732e-09  2.73052e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35008, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.01092e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153157, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84318, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30377.2        12929      5732.96      6122.77      825.842      44759.8      10043.8      345.304
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.952773, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095021, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06599, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00103332   0.00103415  0.000802287
      low eigenvalue method done, cpu time[sec] = 1.07617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00103  0.000802         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.23e-05  0.000802         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000801644
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999977  2.27626e-05  1.90669e-05  2.76949e-06  1.08763e-07  4.30929e-07  1.70784e-08  3.80281e-07  1.17686e-09  2.73055e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35586, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.29976e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153437, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83912, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23626.7      10055.9      4458.97      4762.15      642.321      34813.2      7811.83       268.57
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.949411, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095653, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06311, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000979193  0.000979926  0.000747617
      low eigenvalue method done, cpu time[sec] = 1.07371, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00098  0.000747         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.86e-05  0.000747         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000747058
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999979  2.12126e-05  1.78652e-05  2.47693e-06  1.00707e-07  3.84645e-07  1.55958e-08  3.79236e-07   1.1803e-09  2.73057e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.3512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.152385, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83694, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              21264      9050.27      4013.07      4285.94      578.089      31331.9      7030.65      241.713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.951533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095912, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06564, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000956569  0.000957263  0.000725021
      low eigenvalue method done, cpu time[sec] = 1.07624, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000957  0.000724         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.71e-05  0.000724         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000724496
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999979   2.0572e-05   1.7362e-05  2.36152e-06  9.74616e-08  3.66698e-07  1.50097e-08  3.78489e-07  1.18196e-09  2.73059e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.34861, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.16626e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.1535, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83778, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14176      6033.52      2675.38      2857.29      385.393      20887.9       4687.1      161.142
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.95271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096869, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0678, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000870197  0.000870755  0.000640209
      low eigenvalue method done, cpu time[sec] = 1.07821, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000871   0.00064         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.13e-05   0.00064         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000639799
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999982   1.8167e-05  1.54417e-05  1.95568e-06  8.56564e-08  3.04719e-07  1.29296e-08  3.73703e-07  1.18968e-09  2.73065e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35212, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.88835e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.152962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8391, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10632      4525.14      2006.54      2142.97      289.045      15665.9      3515.32      120.856
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.951004, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06562, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000809895  0.000810366  0.000582431
      low eigenvalue method done, cpu time[sec] = 1.07601, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00081  0.000582         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.73e-05  0.000582         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000582092
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999983  1.65284e-05  1.41074e-05  1.70267e-06  7.78961e-08  2.66755e-07  1.16059e-08  3.68283e-07  1.19664e-09  2.73071e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35184, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         3.61043e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.152769, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8446, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8505.61      3620.11      1605.23      1714.37      231.236      12532.7      2812.26      96.6851
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.950431, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096066, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06516, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000763881  0.000764293  0.000539188
      low eigenvalue method done, cpu time[sec] = 1.07565, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000764  0.000539         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.43e-05  0.000539         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000538898
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999985  1.53019e-05  1.30963e-05    1.525e-06  7.22063e-08   2.4029e-07  1.06568e-08  3.62826e-07  1.20298e-09  2.73077e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35708, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153286, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84722, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7088.01      3016.76      1337.69      1428.65      192.696        10444      2343.55      80.5709
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.947607, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06105, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000726873   0.00072724  0.000504966
      low eigenvalue method done, cpu time[sec] = 1.07195, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000727  0.000505         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.19e-05  0.000505         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000504712
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.43312e-05  1.22891e-05  1.39117e-06  6.77624e-08  2.20413e-07  9.92789e-09  3.57525e-07   1.2088e-09  2.73084e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.05461e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6075.43      2585.79      1146.59      1224.55      165.168      8951.96      2008.76      69.0608
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.952583, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06717, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000696049  0.000696381  0.000476857
      low eigenvalue method done, cpu time[sec] = 1.07736, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000696  0.000477         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.99e-05  0.000477         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00047663
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.35339e-05  1.16218e-05  1.28556e-06  6.41447e-08  2.04738e-07  9.34234e-09  3.52441e-07  1.21416e-09   2.7309e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.77669e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.15339, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84568, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
               5316      2262.57      1003.27      1071.48      144.522      7832.96      1757.66      60.4282
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.949106, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096558, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06394, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000669725  0.000670029  0.000453145
      low eigenvalue method done, cpu time[sec] = 1.07472, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00067  0.000453         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-05  0.000453         1
         *Z       ---       ---  1.26e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00045294
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999987  1.28612e-05   1.1056e-05  1.19941e-06   6.1112e-08  1.91943e-07  8.85682e-09   3.4759e-07  1.21911e-09  2.73096e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35992, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1900 K
      Energy reference = 69599 1/cm
      Energy step      = 317 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -63.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00619
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.217891
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.101963
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.111088
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.404734
         W1 Well: minimal relaxation eigenvalue = 0.0397149
         W1 Well: maximal relaxation eigenvalue = 1.03095
         W1 Well:       grid size = 267
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15039 1/cm
         B1 Barrier:        grid size = 220
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -141 1/cm
         B2 Barrier:        grid size = 219
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 235
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4895 1/cm
         B4 Barrier:        grid size = 240
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6481 1/cm
         B5 Barrier: nonpositive number of states at -23599 1/cm => truncating
         B5 Barrier:        grid size = 294
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23598 1/cm
         B6 Barrier:        grid size = 215
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1444 1/cm
         B7 Barrier:        grid size = 205
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4614 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16660 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.16386, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 267
      MasterEquation::Barrier::truncate: real weight = 2.05555e+29
      MasterEquation::Barrier::truncate: effective weight = 2.96895e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15039 -15039 5.24e+07 1.39e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -141 1.49e+18
         B2    177 6.65e+17
         B3  -4895  3.1e+17
         B4  -6481 3.29e+17
         B5 -15039 4.48e+16
         B6   1445 2.27e+18
         B7   4615 5.27e+17
         B8  16661 1.99e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.26e-15  1.17e-14  2.44e-15  8.04e-16   2.1e-21  2.22e-13  8.35e-12   1.1e-06
          R   1.6e+14         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  8.54e+13     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2   4.1e+14      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  1.24e+15      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4  4.77e+20  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  4.51e+12    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6   1.2e+11  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7  9.06e+05  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.49e-16  2.79e-16   5.8e-17  1.91e-17  4.99e-23  5.28e-15  1.99e-13  2.63e-08
          R  6.71e+15         1      1.87      0.39     0.128  3.35e-07      35.5  1.33e+03  1.76e+08
         P1  3.59e+15     0.534         1     0.208    0.0687  1.79e-07        19       713  9.43e+07
         P2  1.72e+16      2.57       4.8         1      0.33   8.6e-07        91  3.42e+03  4.52e+08
         P3  5.23e+16      7.79      14.6      3.03         1  2.61e-06       276  1.04e+04  1.37e+09
         P4     2e+22  2.98e+06  5.58e+06  1.16e+06  3.83e+05         1  1.06e+08  3.98e+09  5.26e+14
         P5  1.89e+14    0.0282    0.0527     0.011   0.00362  9.45e-09         1      37.6  4.97e+06
         P6  5.03e+12  0.000749    0.0014  0.000292  9.62e-05  2.51e-10    0.0266         1  1.32e+05
         P7  3.81e+07  5.67e-09  1.06e-08  2.21e-09  7.28e-10   1.9e-15  2.01e-07  7.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.17714, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.151513, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7898, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             230829       103209      48036.8        51081      6946.24       352593      81773.9      3090.51
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.923508, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094883, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0019407   0.00194405   0.00172459
      low eigenvalue method done, cpu time[sec] = 1.04698, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00194   0.00172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000119   0.00172     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00172162
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999896  0.000104478  8.25732e-05  1.70406e-05  5.68279e-07  3.06013e-06  1.01858e-07  1.22443e-06  4.68229e-09  1.89551e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.26832, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.149526, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            76942.9      34402.9      16012.3        17027      2315.41       117531        27258      1030.17
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.922899, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093434, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03477, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00165913   0.00166146   0.00140444
      low eigenvalue method done, cpu time[sec] = 1.04477, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00166    0.0014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.91e-05    0.0014     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00140247
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999915  8.51099e-05  6.98707e-05  1.16781e-05   4.2314e-07   1.8747e-06  6.95278e-08  1.25836e-06  4.69967e-09  1.89552e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.25718, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         6.97198e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.148929, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79468, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            46165.7      20641.7      9607.36      10216.2      1389.25      70518.5      16354.8      618.102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.926041, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.093515, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03745, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00152158   0.00152349   0.00125303
      low eigenvalue method done, cpu time[sec] = 1.0478, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00152   0.00125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.97e-05   0.00125     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00125146
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999924   7.5946e-05  6.32195e-05  9.57906e-06   3.6848e-07  1.50518e-06  5.85878e-08  1.26861e-06  4.71479e-09  1.89554e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.26866, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         9.76077e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150168, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32975.5      14744.1       6862.4      7297.29       992.32      50370.4        11682      441.502
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.924004, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093404, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03528, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00142971   0.00143136   0.00115408
      low eigenvalue method done, cpu time[sec] = 1.04559, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00143   0.00115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.35e-05   0.00115     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00115275
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99993  6.99555e-05  5.86891e-05  8.35009e-06  3.35737e-07  1.30381e-06  5.23528e-08  1.27101e-06  4.72871e-09  1.89555e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.26424, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         1.25496e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.149963, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80397, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25647.6      11467.6      5337.42      5675.67      771.805        39177      9085.98       343.39
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.921154, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093398, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00136079   0.00136226   0.00108108
      low eigenvalue method done, cpu time[sec] = 1.04269, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00136   0.00108         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.89e-05   0.00108     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00107992
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999934  6.55357e-05  5.52644e-05  7.51111e-06  3.12751e-07  1.17119e-06  4.81147e-08  1.26976e-06  4.74177e-09  1.89557e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150339, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79389, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23082.9      10320.9      4803.68       5108.1      694.624      35259.3      8177.39      309.051
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.923041, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03565, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00133188   0.00133328   0.00105079
      low eigenvalue method done, cpu time[sec] = 1.0458, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00133   0.00105         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   7.7e-05   0.00105     0.999
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00104969
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999936  6.37014e-05  5.38243e-05  7.17903e-06  3.03461e-07   1.1196e-06  4.64337e-08  1.26834e-06  4.74803e-09  1.89558e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.26724, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.09159e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.148971, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.78734, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15388.6      6880.58      3202.45       3405.4      463.083      23506.2      5451.59      206.034
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.92296, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093534, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0345, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00122093   0.00122207  0.000936419
      low eigenvalue method done, cpu time[sec] = 1.0448, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00122  0.000936         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.97e-05  0.000936         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000935543
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999943  5.67743e-05  4.82936e-05  6.00541e-06  2.69482e-07  9.40572e-07  4.04377e-08  1.25723e-06  4.77721e-09  1.89562e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.25933, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.78879e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.149223, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80303, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11541.4      5160.43      2401.84      2554.05      347.312      17629.6      4088.69      154.526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.919016, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03021, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00114287   0.00114385  0.000857834
      low eigenvalue method done, cpu time[sec] = 1.04064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00114  0.000857         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.47e-05  0.000857         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000857099
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999948  5.20138e-05  4.44163e-05  5.26832e-06  2.46968e-07  8.30113e-07  3.65932e-08  1.24326e-06  4.80351e-09  1.89566e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27077, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         3.48599e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.149695, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79953, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9233.15      4128.35      1921.47      2043.24       277.85      14103.7      3270.95       123.62
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.923424, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092986, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03412, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00108296   0.00108383  0.000798626
      low eigenvalue method done, cpu time[sec] = 1.04485, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00108  0.000798         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.08e-05  0.000798         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000797988
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999952  4.84266e-05  4.14578e-05  4.74771e-06  2.30356e-07  7.52663e-07    3.382e-08  1.22859e-06  4.82751e-09   1.8957e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27354, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.151175, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80341, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7694.29      3440.29      1601.23       1702.7      231.541      11753.1       2725.8      103.017
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.924466, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03538, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00103455   0.00103532  0.000751511
      low eigenvalue method done, cpu time[sec] = 1.04605, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00104  0.000751         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.78e-05  0.000751         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000750947
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999954  4.55719e-05  3.90827e-05  4.35366e-06  2.17313e-07  6.94207e-07  3.16793e-08  1.21399e-06  4.84957e-09  1.89574e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28135, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.88039e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6595.11      2948.82      1372.48      1459.46      198.464      10074.1       2336.4      88.3003
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.926588, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0384, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000994052  0.000994761   0.00071263
      low eigenvalue method done, cpu time[sec] = 1.04929, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000995  0.000712         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.52e-05  0.000712         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000712122
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999957  4.32158e-05  3.71097e-05  4.04141e-06  2.06646e-07  6.47912e-07  2.99519e-08  1.19975e-06  4.86995e-09  1.89578e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28042, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         5.57758e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150881, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80147, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5770.72      2580.22      1200.92      1277.03      173.656      8814.81      2044.35      77.2628
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.922281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03394, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000959344  0.000959996  0.000679695
      low eigenvalue method done, cpu time[sec] = 1.04466, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00096  0.000679         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.3e-05  0.000679         1
         *Z       ---       ---   7.8e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000679233
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999959  4.12198e-05  3.54298e-05  3.78577e-06  1.97666e-07  6.09983e-07   2.8514e-08  1.18599e-06  4.88885e-09  1.89582e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27701, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2000 K
      Energy reference = 72380 1/cm
      Energy step      = 333 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -61.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006316
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.190591
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.09913
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.115806
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.395541
         W1 Well: minimal relaxation eigenvalue = 0.0380154
         W1 Well: maximal relaxation eigenvalue = 1.03779
         W1 Well:       grid size = 264
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15531 1/cm
         B1 Barrier:        grid size = 218
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -213 1/cm
         B2 Barrier:        grid size = 217
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 118 1/cm
         B3 Barrier:        grid size = 232
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4875 1/cm
         B4 Barrier:        grid size = 236
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6207 1/cm
         B5 Barrier: nonpositive number of states at -23191 1/cm => truncating
         B5 Barrier:        grid size = 287
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23190 1/cm
         B6 Barrier:        grid size = 213
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 204
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4448 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16769 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.12549, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 264
      MasterEquation::Barrier::truncate: real weight = 1.56224e+29
      MasterEquation::Barrier::truncate: effective weight = 2.37032e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15531 -15531  4.2e+07 1.86e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -213 2.08e+18
         B2    119 9.75e+17
         B3  -4875 4.77e+17
         B4  -6207 5.05e+17
         B5 -15531 6.92e+16
         B6   1452 3.29e+18
         B7   4449 7.87e+17
         B8  16770 3.25e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.06e-15   5.8e-15  1.41e-15  4.95e-16  2.58e-21  9.82e-14  3.29e-12  2.87e-07
          R  3.27e+14         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1  1.72e+14     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  7.11e+14      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3  2.02e+15      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4  3.87e+20  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  1.02e+13    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6  3.04e+11  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  3.49e+06  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.56e-17  8.65e-17   2.1e-17  7.37e-18  3.85e-23  1.46e-15  4.91e-14  4.28e-09
          R  2.19e+16         1       1.9      0.46     0.162  8.45e-07      32.1  1.08e+03  9.38e+07
         P1  1.16e+16     0.527         1     0.242    0.0853  4.45e-07      16.9       568  4.95e+07
         P2  4.77e+16      2.18      4.13         1     0.352  1.84e-06      69.8  2.34e+03  2.04e+08
         P3  1.36e+17      6.19      11.7      2.84         1  5.22e-06       199  6.66e+03   5.8e+08
         P4   2.6e+22  1.18e+06  2.24e+06  5.44e+05  1.91e+05         1   3.8e+07  1.27e+09  1.11e+14
         P5  6.83e+14    0.0312    0.0591    0.0143   0.00504  2.63e-08         1      33.5  2.92e+06
         P6  2.04e+13  0.000929   0.00176  0.000427   0.00015  7.85e-10    0.0298         1  8.71e+04
         P7  2.34e+08  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.01e-15  3.42e-07  1.15e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.13886, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.148026, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7282, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             248574       116531      56938.6      60302.6      8262.92       392945      93990.4      3884.73
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.892689, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00283618   0.00284377   0.00267428
      low eigenvalue method done, cpu time[sec] = 1.01402, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00284   0.00267         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000174   0.00267     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00266715
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999729  0.000271474  0.000215556  4.32233e-05  1.47377e-06  7.75956e-06  2.61535e-07   3.5505e-06  1.61567e-08  1.07367e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.16512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146629, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.73657, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            82857.9      38843.5      18979.5      20100.9      2754.31       130982      31330.1      1294.91
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.892195, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090391, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0024597   0.00246515   0.00221222
      low eigenvalue method done, cpu time[sec] = 1.01011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00247   0.00221         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000147   0.00221     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00220734
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999775  0.000224673  0.000184947  3.01769e-05  1.11991e-06  4.85514e-06  1.82498e-07  3.65066e-06  1.62141e-08  1.07368e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.16503, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          6.7438e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146993, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74578, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            49714.8      23306.1      11387.7      12060.5      1652.58        78589      18798.1      776.946
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.892048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00161, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00227325   0.00227778   0.00199065
      low eigenvalue method done, cpu time[sec] = 1.01156, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00228   0.00199         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000134   0.00199     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00198669
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999798  0.000202215  0.000168667  2.49979e-05  9.85452e-07  3.94154e-06  1.55517e-07  3.68534e-06  1.62636e-08  1.07369e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.17957, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         9.44132e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146804, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74502, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35510.5      16647.2      8134.09      8614.66      1180.42        56135      13427.2      554.962
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.89112, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00214773   0.00215169   0.00184467
      low eigenvalue method done, cpu time[sec] = 1.01107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00215   0.00184         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000125   0.00184     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00184127
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999813  0.000187413   0.00015748  2.19434e-05  9.04404e-07  3.44071e-06  1.40049e-07  3.69775e-06  1.63089e-08   1.0737e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.17373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.21388e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146547, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74054, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27619.3      12947.8      6326.52      6700.29      918.103      43660.5      10443.4      431.637
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.894234, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090869, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00255, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00205303    0.0020566   0.00173634
      low eigenvalue method done, cpu time[sec] = 1.01256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00206   0.00173         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000119   0.00173     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00173333
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999824  0.000176426  0.000148968  1.98471e-05  8.47228e-07  3.10936e-06  1.29486e-07   3.6995e-06  1.63513e-08  1.07371e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1716, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147454, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74289, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24857.4      11653.1      5693.86      6030.26      826.292      39294.5      9399.04      388.473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.893958, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090988, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00253, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00201317   0.00201658   0.00169122
      low eigenvalue method done, cpu time[sec] = 1.01255, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00202   0.00169         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000116   0.00169     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00168837
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999828   0.00017185  0.000145374  1.90147e-05  8.24045e-07  2.98008e-06  1.25283e-07  3.69798e-06  1.63716e-08  1.07371e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1758, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.02314e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75451, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16571.6      7768.71      3795.91      4020.17      550.862      26196.3      6266.03      258.982
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.893281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091216, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00208, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00185935   0.00186218    0.0015199
      low eigenvalue method done, cpu time[sec] = 1.01238, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00186   0.00152         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000106   0.00152     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00151759
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999846  0.000154467  0.000131492  1.60584e-05  7.38833e-07  2.52941e-06  1.10223e-07  3.67769e-06  1.64662e-08  1.07373e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18633, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.69752e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147313, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74601, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12428.7      5826.53      2846.93      3015.13      413.146      19647.2      4699.52      194.237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.896956, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091777, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00175032   0.00175277   0.00140124
      low eigenvalue method done, cpu time[sec] = 1.01664, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00175    0.0014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.85e-05    0.0014     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00139928
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999858  0.000142425  0.000121678  1.41886e-05   6.8196e-07  2.24947e-06    1.005e-07  3.64751e-06  1.65515e-08  1.07375e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          3.3719e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147394, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74904, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9942.95      4661.22      2277.55       2412.1      330.517      15717.8      3759.62      155.389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.897123, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09056, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00514, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00166615   0.00166833    0.0013113
      low eigenvalue method done, cpu time[sec] = 1.01518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00167   0.00131         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.31e-05   0.00131     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00130958
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999867  0.000133295  0.000114142  1.28608e-05  6.39752e-07  2.05212e-06  9.34465e-08  3.61396e-06  1.66294e-08  1.07377e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18418, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.14709, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.73859, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8285.79      3884.35      1897.95      2010.09      275.431      13098.2      3133.01      129.491
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.895748, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090716, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00436, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00159779   0.00159977   0.00123935
      low eigenvalue method done, cpu time[sec] = 1.01433, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0016   0.00124         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.87e-05   0.00124     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00123782
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999874  0.000125991  0.000108061  1.18511e-05  6.06447e-07   1.9025e-06  8.79761e-08  3.57954e-06  1.67012e-08   1.0738e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.17324, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.72066e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.146823, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74465, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7102.11      3329.45      1626.82      1722.93      236.084        11227      2685.44      110.992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.896569, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09084, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00492, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00154039   0.00154221   0.00117973
      low eigenvalue method done, cpu time[sec] = 1.01493, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00154   0.00118         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.5e-05   0.00118     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00117834
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99988  0.000119936  0.000102986   1.1048e-05  5.79094e-07  1.78353e-06  8.35441e-08   3.5453e-06  1.67678e-08  1.07382e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1803, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         5.39504e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147225, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74089, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6214.34      2913.27      1423.47      1507.57      206.573      9823.62      2349.76      97.1183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.895972, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090274, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00381, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00149102    0.0014927   0.00112902
      low eigenvalue method done, cpu time[sec] = 1.0138, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00149   0.00113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.19e-05   0.00113     0.999
         *Z       ---       ---  4.74e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00112775
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999885  0.000114788   9.8648e-05  1.03881e-05  5.55982e-07  1.68572e-06  7.98413e-08  3.51175e-06  1.68298e-08  1.07384e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.17534, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2100 K
      Energy reference = 75160 1/cm
      Energy step      = 350 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -59.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00623
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.210151
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.098132
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.107471
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.384087
         W1 Well: minimal relaxation eigenvalue = 0.0363114
         W1 Well: maximal relaxation eigenvalue = 1.04529
         W1 Well:       grid size = 261
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -16190 1/cm
         B1 Barrier:        grid size = 215
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -90 1/cm
         B2 Barrier:        grid size = 215
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -90 1/cm
         B3 Barrier:        grid size = 228
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4640 1/cm
         B4 Barrier:        grid size = 233
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6390 1/cm
         B5 Barrier: nonpositive number of states at -23890 1/cm => truncating
         B5 Barrier:        grid size = 283
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23890 1/cm
         B6 Barrier:        grid size = 211
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1309 1/cm
         B7 Barrier:        grid size = 202
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4459 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16709 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.12288, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 261
      MasterEquation::Barrier::truncate: real weight = 1.25127e+29
      MasterEquation::Barrier::truncate: effective weight = 1.99542e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -16190 -16190 3.09e+07 2.48e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -90 2.87e+18
         B2    -90 1.41e+18
         B3  -4640 7.23e+17
         B4  -6390 7.63e+17
         B5 -16190 1.05e+17
         B6   1310 4.69e+18
         B7   4460 1.16e+18
         B8  16710  5.2e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.61e-15  3.09e-15  8.58e-16   3.2e-16  3.13e-21  4.71e-14  1.42e-12   8.5e-08
          R  6.21e+14         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  3.23e+14     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2  1.17e+15      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3  3.12e+15      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  3.19e+20  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5  2.12e+13    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6  7.04e+11   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7  1.18e+07  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.57e-17  3.02e-17  8.37e-18  3.12e-18  3.06e-23  4.59e-16  1.38e-14  8.29e-10
          R  6.37e+16         1      1.92     0.533     0.199  1.95e-06      29.2       882  5.28e+07
         P1  3.32e+16     0.521         1     0.278     0.104  1.01e-06      15.2       459  2.75e+07
         P2   1.2e+17      1.88       3.6         1     0.373  3.65e-06      54.8  1.65e+03  9.91e+07
         P3   3.2e+17      5.03      9.66      2.68         1  9.79e-06       147  4.43e+03  2.65e+08
         P4  3.27e+22  5.13e+05  9.87e+05  2.74e+05  1.02e+05         1   1.5e+07  4.53e+08  2.71e+13
         P5  2.18e+15    0.0342    0.0657    0.0182   0.00681  6.66e-08         1      30.2  1.81e+06
         P6  7.22e+13   0.00113   0.00218  0.000604  0.000225  2.21e-09    0.0331         1  5.99e+04
         P7  1.21e+09  1.89e-08  3.64e-08  1.01e-08  3.77e-09  3.69e-14  5.53e-07  1.67e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.1364, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144303, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68091, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             265764       130389      66881.8      70566.1       9738.4       434084       106882      4808.38
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.866286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.973525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00391167   0.00392686   0.00387919
      low eigenvalue method done, cpu time[sec] = 0.983315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00393   0.00386         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000237   0.00386     0.998
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0038642
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999368  0.000631975  0.000503257  9.90486e-05  3.42403e-06   1.7633e-05  6.01826e-07  9.15748e-06  4.89659e-08  5.11015e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143471, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6954, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            88588.1      43462.8      22293.9        23522      3246.13       144695      35627.2      1602.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868455, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08881, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.974329, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00343487   0.00344606   0.00325336
      low eigenvalue method done, cpu time[sec] = 0.984571, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00345   0.00324         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000203   0.00324     0.998
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00324281
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99947   0.00053035   0.00043736  7.01015e-05  2.65204e-06  1.12564e-05  4.28783e-07  9.41979e-06  4.91342e-08  5.11019e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.08855, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         6.53369e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69593, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53152.9      26077.7      13376.4      14113.2      1947.68      86816.7      21376.3      961.676
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868339, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088487, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.973957, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00319599   0.00320542   0.00294978
      low eigenvalue method done, cpu time[sec] = 0.983751, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00321   0.00294         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000186   0.00294     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0029411
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999519  0.000481006  0.000401737  5.85339e-05  2.35603e-06   9.2325e-06  3.69196e-07  9.52036e-06  4.92773e-08  5.11022e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0877, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         9.14716e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.142792, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71202, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            37966.3      18626.9      9554.55      10080.9       1391.2        62012      15268.8      686.911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.864385, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088422, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.96992, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00303411   0.00304246    0.0027484
      low eigenvalue method done, cpu time[sec] = 0.979903, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00304   0.00274         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000175   0.00274     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00274087
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999552  0.000448259  0.000377047  5.16814e-05   2.1766e-06  8.11699e-06  3.34852e-07  9.56459e-06  4.94076e-08  5.11026e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.101, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.17606e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143157, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69988, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29529.4      14487.6      7431.31      7840.68      1082.04      48231.5      11875.7      534.264
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.868762, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087959, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.974229, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0029114   0.00291897    0.0025982
      low eigenvalue method done, cpu time[sec] = 0.984154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00292   0.00259         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000166   0.00259     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00259147
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999576  0.000423824  0.000358149  4.69624e-05  2.04946e-06  7.37594e-06  3.11302e-07  9.58118e-06  4.95293e-08   5.1103e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09268, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.1439, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69192, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26576.4      13038.9      6688.18      7056.61       973.84      43408.4      10688.2      480.838
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.86518, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089759, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972398, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00285958   0.00286684   0.00253543
      low eigenvalue method done, cpu time[sec] = 0.982071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00287   0.00253         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000163   0.00253     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00252902
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999586  0.000413612   0.00035014  4.50841e-05  1.99776e-06  7.08603e-06  3.01906e-07  9.58311e-06  4.95875e-08  5.11032e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.08355, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.96011e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143658, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70007, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17717.6      8692.57      4458.79      4704.41      649.226      28938.9      7125.44      320.559
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.866216, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088383, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.971896, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00265871   0.00266482   0.00229594
      low eigenvalue method done, cpu time[sec] = 0.981618, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00266   0.00229         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000149   0.00229     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00229068
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999625  0.000374633  0.000319031  3.83904e-05   1.8069e-06   6.0714e-06    2.681e-07  9.55788e-06   4.9858e-08  5.11042e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09057, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         2.61347e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143755, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70099, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13288.2      6519.43      3344.09      3528.31       486.92      21704.2      5344.08      240.419
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.870434, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.976259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00251541   0.00252076   0.00212891
      low eigenvalue method done, cpu time[sec] = 0.986688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00252   0.00212         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00014   0.00212     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00212439
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999653  0.000347436   0.00029687  3.41343e-05  1.67868e-06  5.43736e-06  2.46139e-07  9.50368e-06  5.01017e-08  5.11051e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09883, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.26684e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70317, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10630.6      5215.54      2675.27      2822.64      389.536      17363.3      4275.27      192.335
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.870574, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088469, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.976611, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0024042   0.00240902   0.00200159
      low eigenvalue method done, cpu time[sec] = 0.986976, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00241     0.002         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000133     0.002     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0019976
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999673  0.000326699  0.000279752  3.10987e-05  1.58303e-06  4.98825e-06  2.30131e-07  9.43796e-06  5.03246e-08  5.11061e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70578, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8858.81      4346.28      2229.39       2352.2      324.613      14469.5      3562.72      160.279
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869607, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089021, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.976268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00231352   0.00231791    0.0018993
      low eigenvalue method done, cpu time[sec] = 0.986588, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00232    0.0019         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000127    0.0019     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0018957
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99969  0.000310035   0.00026587  2.87822e-05  1.50722e-06  4.64637e-06  2.17662e-07  9.36765e-06  5.05304e-08  5.11071e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10386, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         4.57358e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144404, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70343, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7593.27      3725.39      1910.91      2016.17       278.24      12402.4      3053.76      137.382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.863218, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088857, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.969171, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00223709   0.00224115   0.00181418
      low eigenvalue method done, cpu time[sec] = 0.978837, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00224   0.00181         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000122   0.00181     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0018109
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999704  0.000296165  0.000254239  2.69334e-05  1.44472e-06  4.37359e-06  2.07524e-07  9.29592e-06  5.07215e-08   5.1108e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09182, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         5.22695e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70704, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6644.11      3259.71      1672.05      1764.15       243.46      10852.1      2672.04      120.209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.866625, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089002, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972732, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00217113   0.00217492   0.00174156
      low eigenvalue method done, cpu time[sec] = 0.982487, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00217   0.00174         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000118   0.00174     0.999
         *Z       ---       ---  3.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00173853
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999716   0.00028433  0.000244262  2.54103e-05  1.39173e-06  4.14863e-06  1.99027e-07  9.22437e-06  5.08999e-08   5.1109e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10067, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2200 K
      Energy reference = 77940 1/cm
      Energy step      = 367 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -57 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006046
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.207235
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.09486
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.105512
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.37837
         W1 Well: minimal relaxation eigenvalue = 0.0345446
         W1 Well: maximal relaxation eigenvalue = 1.05541
         W1 Well:       grid size = 259
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17113 1/cm
         B1 Barrier:        grid size = 213
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -230 1/cm
         B2 Barrier:        grid size = 212
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 136 1/cm
         B3 Barrier:        grid size = 225
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4634 1/cm
         B4 Barrier:        grid size = 230
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6469 1/cm
         B5 Barrier: nonpositive number of states at -23719 1/cm => truncating
         B5 Barrier:        grid size = 277
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23718 1/cm
         B6 Barrier:        grid size = 209
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1237 1/cm
         B7 Barrier:        grid size = 200
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4540 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16651 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.10964, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 259
      MasterEquation::Barrier::truncate: real weight = 1.04826e+29
      MasterEquation::Barrier::truncate: effective weight = 1.75287e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17113 -17113 1.98e+07 3.29e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -230 3.92e+18
         B2    137 2.01e+18
         B3  -4634 1.08e+18
         B4  -6469 1.14e+18
         B5 -17113 1.58e+17
         B6   1238 6.61e+18
         B7   4541 1.67e+18
         B8  16652 8.16e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.15e-16  1.78e-15  5.58e-16   2.2e-16  3.81e-21  2.45e-14  6.72e-13  2.86e-08
          R  1.09e+15         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1  5.62e+14     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  1.79e+15      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  4.55e+15      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  2.63e+20   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5  4.08e+13    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  1.49e+12   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  3.49e+07   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.97e-18  1.16e-17  3.65e-18  1.44e-18  2.49e-23   1.6e-16  4.39e-15  1.87e-10
          R  1.67e+17         1      1.95      0.61      0.24  4.16e-06      26.8       735  3.13e+07
         P1   8.6e+16     0.514         1     0.313     0.123  2.14e-06      13.8       377  1.61e+07
         P2  2.74e+17      1.64      3.19         1     0.394  6.82e-06      43.9   1.2e+03  5.13e+07
         P3  6.97e+17      4.16       8.1      2.54         1  1.73e-05       112  3.06e+03   1.3e+08
         P4  4.02e+22   2.4e+05  4.68e+05  1.47e+05  5.77e+04         1  6.44e+06  1.77e+08  7.52e+12
         P5  6.25e+15    0.0373    0.0727    0.0228   0.00897  1.55e-07         1      27.4  1.17e+06
         P6  2.28e+14   0.00136   0.00265   0.00083  0.000327  5.66e-09    0.0365         1  4.26e+04
         P7  5.35e+09   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.33e-13  8.56e-07  2.35e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.12292, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6367, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             282319       144713      77916.5      81918.2      11380.8       475761       120380      5869.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.849013, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088436, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.954328, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00511059   0.00513749   0.00525627
      low eigenvalue method done, cpu time[sec] = 0.964116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00514   0.00523         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000302   0.00523     0.997
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00522879
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998661   0.00133858    0.0010697  0.000205572  7.26127e-06  3.66187e-05  1.26506e-06  2.13764e-05  1.32722e-07  2.09342e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.00433, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.142223, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65822, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            94106.4      48237.6      25972.2      27306.1       3793.6       158587      40126.6      1956.66
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.849262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08713, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.953491, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.004537   0.00455728   0.00446404
      low eigenvalue method done, cpu time[sec] = 0.963219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00456   0.00444         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000261   0.00444     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0044442
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998862   0.00113772  0.000940146  0.000147647  5.71876e-06   2.3788e-05  9.17919e-07  2.19963e-05  1.33164e-07  2.09344e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02505, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         6.33945e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141322, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66696, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            56463.8      28942.6      15583.3      16383.6      2276.16      95152.3        24076         1174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.84678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087282, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.951014, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00424694   0.00426427   0.00407581
      low eigenvalue method done, cpu time[sec] = 0.961506, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00426   0.00406         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00024   0.00406     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00405927
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998961   0.00103918  0.000869173  0.000124296  5.12414e-06  1.96911e-05  7.97749e-07  2.22529e-05  1.33536e-07  2.09345e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03416, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         8.87523e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141513, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67219, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40331.3      20673.3      11130.9      11702.6      1625.83      67965.9      17197.1      838.571
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846011, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086923, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.949893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00404924   0.00406471   0.00381662
      low eigenvalue method done, cpu time[sec] = 0.959665, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00406    0.0038         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000227    0.0038     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00380211
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999027  0.000973347  0.000819606  0.000110388  4.76217e-06  1.74238e-05  7.28212e-07  2.23805e-05  1.33874e-07  2.09347e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03654, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1          1.1411e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31368.8      16079.2      8657.39      9102.03      1264.53      52862.4      13375.5      652.222
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.847891, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087503, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.952596, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00389871   0.00391285   0.00362236
      low eigenvalue method done, cpu time[sec] = 0.962465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00391   0.00361         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000217   0.00361     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00360929
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999076  0.000923985  0.000781457  0.000100771  4.50479e-06  1.59126e-05  6.80373e-07  2.24434e-05  1.34188e-07  2.09348e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03866, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28231.9      14471.3      7791.65      8191.82      1138.08      47576.1        12038      586.999
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.850166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955883, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00383497   0.00384856   0.00354094
      low eigenvalue method done, cpu time[sec] = 0.965661, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00385   0.00353         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000212   0.00353     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00352845
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999097  0.000903289  0.000765234  9.69337e-05  4.39988e-06  1.53201e-05  6.61246e-07  2.24598e-05  1.34337e-07  2.09349e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03769, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.90183e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141345, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66718, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18821.3      9647.53      5194.43      5461.22       758.72      31717.4      8025.32      391.333
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.850532, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087485, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955212, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00358684   0.00359843   0.00322883
      low eigenvalue method done, cpu time[sec] = 0.965513, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0036   0.00322         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000196   0.00322     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00321844
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999176  0.000823926    0.0007019  8.32057e-05  4.01114e-06  1.32395e-05   5.9219e-07  2.24561e-05  1.35033e-07  2.09352e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03674, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         2.53578e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67524, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14116      7235.64      3895.83      4095.91       569.04      23788.1      6018.99        293.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848864, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087737, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.954159, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00340876   0.00341902   0.00300972
      low eigenvalue method done, cpu time[sec] = 0.964683, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00342     0.003         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000184     0.003     0.998
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00300069
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999232  0.000768182  0.000656462  7.44284e-05  3.74853e-06  1.19327e-05  5.47095e-07  2.23784e-05  1.35659e-07  2.09356e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04582, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.16972e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141257, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67078, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11292.8      5788.52      3116.66      3276.73      455.232      19030.5      4815.19        234.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.852105, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.957438, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00326993   0.00327923   0.00284185
      low eigenvalue method done, cpu time[sec] = 0.967723, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00328   0.00283         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000175   0.00283     0.999
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0028338
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999275  0.000725457  0.000621174  6.81409e-05  3.55172e-06  1.10032e-05  5.14083e-07  2.22683e-05  1.36231e-07   2.0936e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04324, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141548, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9410.64      4823.76      2597.22      2730.61       379.36      15858.7      4012.66      195.666
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.851321, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955506, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00315628   0.00316483   0.00270641
      low eigenvalue method done, cpu time[sec] = 0.965805, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00316    0.0027         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000168    0.0027     0.999
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0026991
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999309  0.000690975  0.000592429  6.33253e-05  3.39513e-06  1.02932e-05  4.88279e-07   2.2143e-05  1.36761e-07  2.09364e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04601, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         4.43761e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.142492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6682, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8066.26      4134.65      2226.19      2340.52      325.166      13593.2      3439.42      167.714
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.848764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.95298, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00306018   0.00306813    0.0025933
      low eigenvalue method done, cpu time[sec] = 0.963288, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00307   0.00259         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000162   0.00259     0.999
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00258659
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999338  0.000662172  0.000568254    5.947e-05   3.2656e-06  9.72497e-06  4.67229e-07  2.20106e-05  1.37253e-07  2.09367e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03798, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         5.07156e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.1421, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.66796, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7057.98      3617.82      1947.91      2047.96       284.52        11894      3009.49       146.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.849763, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087284, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.954061, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00297702   0.00298446   0.00249648
      low eigenvalue method done, cpu time[sec] = 0.964404, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00298   0.00249         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000157   0.00249     0.999
         *Z       ---       ---   2.1e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00249026
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999362  0.000637512  0.000547447  5.62848e-05  3.15544e-06  9.25505e-06  4.49536e-07  2.18755e-05  1.37713e-07  2.09371e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.03903, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2300 K
      Energy reference = 80720 1/cm
      Energy step      = 383 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -54.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005937
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.20369
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.094045
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.100205
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.370559
         W1 Well: minimal relaxation eigenvalue = 0.0331121
         W1 Well: maximal relaxation eigenvalue = 1.06557
         W1 Well:       grid size = 257
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17710 1/cm
         B1 Barrier:        grid size = 211
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -93 1/cm
         B2 Barrier:        grid size = 211
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -93 1/cm
         B3 Barrier:        grid size = 223
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4688 1/cm
         B4 Barrier:        grid size = 227
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6221 1/cm
         B5 Barrier: nonpositive number of states at -23839 1/cm => truncating
         B5 Barrier:        grid size = 273
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23838 1/cm
         B6 Barrier:        grid size = 207
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1439 1/cm
         B7 Barrier:        grid size = 199
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4502 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.08787, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 257
      MasterEquation::Barrier::truncate: real weight = 9.12336e+28
      MasterEquation::Barrier::truncate: effective weight = 1.59209e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17710 -17710 1.47e+07 4.32e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -93  5.3e+18
         B2    -93 2.83e+18
         B3  -4688  1.6e+18
         B4  -6221 1.68e+18
         B5 -17710 2.34e+17
         B6   1440  9.2e+18
         B7   4503 2.39e+18
         B8  16759 1.26e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.91e-16  9.69e-16  3.39e-16   1.4e-16  4.09e-21  1.21e-14  3.05e-13  9.52e-09
          R  2.04e+15         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  1.03e+15     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  2.95e+15      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  7.13e+15       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4  2.45e+20   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5  8.25e+13    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6  3.28e+12   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  1.05e+08  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.48e-18   4.9e-18  1.71e-18  7.08e-19  2.07e-23  6.13e-17  1.54e-15  4.81e-11
          R  4.03e+17         1      1.97      0.69     0.285  8.32e-06      24.7       620  1.94e+07
         P1  2.04e+17     0.507         1      0.35     0.145  4.22e-06      12.5       314  9.82e+06
         P2  5.84e+17      1.45      2.86         1     0.414  1.21e-05      35.8       899  2.81e+07
         P3  1.41e+18       3.5      6.91      2.42         1  2.92e-05      86.5  2.17e+03  6.79e+07
         P4  4.84e+22   1.2e+05  2.37e+05  8.29e+04  3.43e+04         1  2.97e+06  7.45e+07  2.33e+12
         P5  1.63e+16    0.0405    0.0799     0.028    0.0116  3.37e-07         1      25.1  7.85e+05
         P6   6.5e+14   0.00161   0.00318   0.00111   0.00046  1.34e-08    0.0398         1  3.12e+04
         P7  2.08e+10  5.16e-08  1.02e-07  3.56e-08  1.47e-08   4.3e-13  1.27e-06   3.2e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.102, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62044, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             298171       159432      90087.4      94400.1      13197.5       517737       134412      7077.07
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.833445, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086466, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.936874, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00695056   0.00700331   0.00757698
      low eigenvalue method done, cpu time[sec] = 0.946751, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.007   0.00752         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000411   0.00752     0.996
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00752001
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997402     0.002598   0.00208383  0.000390871  1.41185e-05  6.95811e-05  2.43637e-06  4.57796e-05  3.26407e-07  7.52955e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.96562, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139427, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62309, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            99390.3      53143.9      30029.1      31466.7      4399.16       172579        44804      2359.02
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.831124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086568, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.934602, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00623886   0.00627956   0.00651297
      low eigenvalue method done, cpu time[sec] = 0.94456, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00628   0.00647         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000359   0.00647     0.997
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00647082
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997764   0.00223553   0.00185112  0.000285038  1.13045e-05  4.60133e-05  1.80065e-06  4.70885e-05  3.27458e-07   7.5296e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.96661, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         6.15924e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.138605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63118, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            59634.2      31886.3      18017.5        18880      2639.49       103547      26882.4      1415.41
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.832707, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085826, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.93543, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00587449   0.00590971   0.00598525
      low eigenvalue method done, cpu time[sec] = 0.945107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00591   0.00595         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000333   0.00595     0.997
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00594964
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997945   0.00205547   0.00172175  0.000241835   1.0213e-05  3.84378e-05  1.57924e-06  4.76599e-05  3.28332e-07  7.52965e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.97293, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         8.62294e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139182, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63649, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            42595.8        22776      12869.6      13485.7      1885.35      73962.5      19201.7      1011.01
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.830389, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085815, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.932924, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00562457   0.00565628   0.00563069
      low eigenvalue method done, cpu time[sec] = 0.942906, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00566    0.0056         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000315    0.0056     0.997
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00559917
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998066   0.00193439   0.00163069   0.00021596   9.5456e-06  3.42271e-05  1.45058e-06  4.79663e-05  3.29121e-07   7.5297e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.97692, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.10866e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.13961, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64729, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            33130.1      17714.6      10009.7      10488.9      1466.39      57526.4      14934.7      786.342
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.827487, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086574, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.931077, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0054334   0.00546258   0.00536373
      low eigenvalue method done, cpu time[sec] = 0.941045, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00546   0.00534         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000302   0.00534     0.997
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00533512
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998157   0.00184316   0.00156024  0.000198001  9.06937e-06  3.14112e-05  1.36178e-06  4.81381e-05  3.29853e-07  7.52975e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98714, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.138742, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63559, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29817.1      15943.2      9008.74      9440.01      1319.75      51773.7      13441.2      707.707
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.829737, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086634, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.933097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00535222   0.00538037   0.00525151
      low eigenvalue method done, cpu time[sec] = 0.942973, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00538   0.00522         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000296   0.00522     0.997
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00522408
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998195    0.0018048   0.00153018  0.000190816  8.87481e-06  3.03047e-05   1.3262e-06  4.81919e-05  3.30202e-07  7.52978e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.97453, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.84777e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139418, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.636, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19878.1      10628.8      6005.83      6293.34      879.831      34515.8      8960.81      471.805
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.831524, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085558, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.934049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00503491    0.0050592   0.00481949
      low eigenvalue method done, cpu time[sec] = 0.943882, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00506    0.0048         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000275    0.0048     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00479637
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998343   0.00165704   0.00141224  0.000165027  8.15126e-06  2.64065e-05   1.1973e-06  4.82769e-05  3.31819e-07   7.5299e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.97754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          2.4637e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139633, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64774, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14908.5      7971.58      4504.37         4720      659.873      25886.9      6720.61      353.854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.834525, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.937788, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00480582   0.00482754   0.00451435
      low eigenvalue method done, cpu time[sec] = 0.947903, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00483   0.00449         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00026   0.00449     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00449406
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998447    0.0015526   0.00132706  0.000148454  7.65984e-06  2.39459e-05  1.11271e-06  4.81968e-05  3.33273e-07  7.53003e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9956, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.07962e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139659, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11926.8      6377.27       3603.5         3776      527.899      20709.5      5376.49      283.083
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.832668, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085876, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.935317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00462641   0.00464624   0.00427947
      low eigenvalue method done, cpu time[sec] = 0.94571, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00465   0.00426         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000248   0.00426     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00426123
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998528   0.00147216   0.00126057  0.000136536  7.28996e-06  2.21889e-05  1.05053e-06  4.80398e-05  3.34604e-07  7.53015e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99176, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139417, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65029, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9939.03      5314.39      3002.91      3146.67      439.916      17257.9       4480.4      235.902
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.837249, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085542, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.939659, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00447901   0.00449735   0.00408921
      low eigenvalue method done, cpu time[sec] = 0.949725, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0045   0.00407         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000238   0.00407     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00407256
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998593   0.00140698   0.00120618  0.000127377   6.9946e-06  2.08422e-05  1.00176e-06  4.78433e-05  3.35836e-07  7.53028e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99966, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         4.31147e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140697, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64567, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8519.17      4555.19      2573.93      2697.14       377.07      14792.5      3840.35      202.202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.834619, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085971, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.93739, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00435396   0.00437109    0.0039298
      low eigenvalue method done, cpu time[sec] = 0.947559, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00437   0.00391         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00023   0.00391     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00391442
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998648   0.00135234   0.00116027  0.000120024  6.74948e-06  1.97613e-05  9.61859e-07  4.76258e-05  3.36984e-07   7.5304e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99341, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          4.9274e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65092, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7454.27      3985.79      2252.18         2360      329.937      12943.4       3360.3      176.927
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.83185, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08597, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.935105, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00424544   0.00426156   0.00379295
      low eigenvalue method done, cpu time[sec] = 0.94525, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00426   0.00378         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000223   0.00378     0.998
         *Z       ---       ---  1.43e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00377861
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998695   0.00130543   0.00112064  0.000113934  6.54044e-06  1.88651e-05  9.28228e-07  4.73974e-05   3.3806e-07  7.53053e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9966, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2400 K
      Energy reference = 83500 1/cm
      Energy step      = 400 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -52.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005447
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.198467
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.092462
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.097494
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.365222
         W1 Well: minimal relaxation eigenvalue = 0.0316754
         W1 Well: maximal relaxation eigenvalue = 1.07765
         W1 Well:       grid size = 255
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -18500 1/cm
         B1 Barrier:        grid size = 209
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -100 1/cm
         B2 Barrier:        grid size = 209
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -100 1/cm
         B3 Barrier:        grid size = 221
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4900 1/cm
         B4 Barrier:        grid size = 225
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6500 1/cm
         B5 Barrier: nonpositive number of states at -23700 1/cm => truncating
         B5 Barrier:        grid size = 268
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23700 1/cm
         B6 Barrier:        grid size = 205
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1499 1/cm
         B7 Barrier:        grid size = 197
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0715, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 255
      MasterEquation::Barrier::truncate: real weight = 8.20324e+28
      MasterEquation::Barrier::truncate: effective weight = 1.49507e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -18500 -18500 9.79e+06 5.65e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -100 7.08e+18
         B2   -100 3.94e+18
         B3  -4900 2.34e+18
         B4  -6500 2.44e+18
         B5 -18500 3.43e+17
         B6   1500 1.27e+19
         B7   4700 3.36e+18
         B8  16700 1.91e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.77e-16  5.54e-16  2.14e-16  9.26e-17  4.35e-21  6.33e-15  1.47e-13  3.45e-09
          R  3.61e+15         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1   1.8e+15       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2  4.67e+15       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  1.08e+16      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4   2.3e+20  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  1.58e+14    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6  6.82e+12   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7   2.9e+08  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.11e-18  2.22e-18  8.59e-19  3.72e-19  1.75e-23  2.54e-17  5.89e-16  1.39e-11
          R  8.98e+17         1         2     0.772     0.334  1.57e-05      22.8       529  1.25e+07
         P1  4.49e+17       0.5         1     0.386     0.167  7.86e-06      11.4       265  6.23e+06
         P2  1.16e+18       1.3      2.59         1     0.433  2.03e-05      29.6       686  1.61e+07
         P3  2.69e+18      2.99      5.98      2.31         1   4.7e-05      68.4  1.58e+03  3.73e+07
         P4  5.72e+22  6.37e+04  1.27e+05  4.92e+04  2.13e+04         1  1.45e+06  3.37e+07  7.93e+11
         P5  3.93e+16    0.0438    0.0875    0.0338    0.0146  6.88e-07         1      23.2  5.45e+05
         P6   1.7e+15   0.00189   0.00378   0.00146  0.000631  2.97e-08    0.0432         1  2.35e+04
         P7  7.21e+10  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.26e-12  1.83e-06  4.25e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.08464, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138179, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59162, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             313268       174475       103436       108050      15195.3       559789       148906      8436.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812152, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913022, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00913102   0.00922676    0.0104612
      low eigenvalue method done, cpu time[sec] = 0.922572, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00923    0.0104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000537    0.0104     0.995
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0103529
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995301   0.00469858     0.003782  0.000693004   2.5625e-05  0.000123475  4.38197e-06  9.08361e-05  7.37807e-07  2.41733e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9112, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137378, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             104423      58158.3      34478.7      36016.5      5065.08       186596      49635.2      2812.08
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.80986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08431, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.911106, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0082748   0.00835017   0.00908909
      low eigenvalue method done, cpu time[sec] = 0.92097, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00835   0.00901         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000472   0.00901     0.995
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00900722
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995912   0.00408787   0.00339185  0.000512279  2.08257e-05  8.29848e-05  3.29323e-06   9.3425e-05  7.40104e-07  2.41735e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.90899, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         5.99151e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137019, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59118, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            62653.5        34895      20687.2      21609.9      3039.05       111958      29781.1      1687.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.81502, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.084238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.916017, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00783231   0.00789826   0.00840201
      low eigenvalue method done, cpu time[sec] = 0.925489, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0079   0.00833         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00044   0.00833     0.996
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.008332
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996219   0.00378143   0.00317213  0.000437805  1.89563e-05  6.99036e-05  2.91241e-06  9.46104e-05  7.41996e-07  2.41736e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9093, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         8.38812e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.136668, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44752.5        24925      14776.6      15435.7      2170.75      79969.9      21272.2      1205.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812857, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.914031, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00752717   0.00758704   0.00793778
      low eigenvalue method done, cpu time[sec] = 0.923504, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00759   0.00788         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000419   0.00788     0.996
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00787527
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996426   0.00357414   0.00301642  0.000392986  1.78094e-05  6.26076e-05  2.69044e-06  9.52841e-05  7.43695e-07  2.41738e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92015, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.07847e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.136623, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60688, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34807.5      19386.1      11492.9      12005.5      1688.36      62198.8      16545.1      937.361
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.815769, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083751, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.916181, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00729286   0.00734829    0.0075868
      low eigenvalue method done, cpu time[sec] = 0.925834, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00735   0.00753         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000402   0.00753     0.996
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00752967
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996583   0.00341729   0.00289532   0.00036177  1.69888e-05   5.7715e-05  2.53682e-06  9.56942e-05  7.45267e-07  2.41739e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92494, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.60829, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31326.8      17447.5      10343.6        10805      1519.53      55978.9      14890.6      843.625
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.813191, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084193, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.91379, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00719311   0.00724673   0.00743887
      low eigenvalue method done, cpu time[sec] = 0.923603, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00725   0.00738         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000395   0.00738     0.996
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00738394
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996649   0.00335116    0.0028435  0.000349256  1.66528e-05   5.5789e-05  2.47516e-06  9.58359e-05  7.46016e-07   2.4174e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92434, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.79745e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137468, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61984, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20884.5      11631.7      6895.74      7203.31      1013.02      37319.3      9927.05      562.417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.912133, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00680177   0.00684856   0.00686716
      low eigenvalue method done, cpu time[sec] = 0.921937, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00685   0.00682         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000368   0.00682     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00682033
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996905   0.00309536   0.00263926   0.00030419  1.53998e-05  4.89847e-05  2.25118e-06  9.61729e-05  7.49481e-07  2.41744e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93425, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.39661e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13691, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15663.4      8723.75       5171.8      5402.48      759.763      27989.5      7445.29      421.812
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.825582, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083978, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.926088, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00651775   0.00655993   0.00646111
      low eigenvalue method done, cpu time[sec] = 0.936199, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00656   0.00642         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000349   0.00642     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00641963
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997086   0.00291351   0.00249082  0.000275096  1.45448e-05  4.46714e-05  2.10355e-06  9.61687e-05  7.52594e-07  2.41748e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.99576e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137997, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61591, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12530.7         6979      4137.44      4321.99       607.81      22391.6      5956.23       337.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.815496, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084517, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.91644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00629441   0.00633318   0.00614719
      low eigenvalue method done, cpu time[sec] = 0.926522, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00633   0.00611         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000334   0.00611     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00610963
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997227   0.00277282   0.00237439  0.000254096  1.38988e-05   4.1581e-05  1.99467e-06  9.59985e-05  7.55445e-07  2.41752e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61785, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10442.3      5815.83      3447.87      3601.65      506.508      18659.6      4963.52      281.208
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.817348, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084203, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.918107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00611029   0.00614636     0.005892
      low eigenvalue method done, cpu time[sec] = 0.928568, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00615   0.00586         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000322   0.00586     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00585748
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997342   0.00265838   0.00227878   0.00023791  1.33813e-05  3.92052e-05  1.90901e-06  9.57379e-05  7.58085e-07  2.41755e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94126, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.19406e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62253, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8950.5         4985      2955.32      3087.13       434.15        15994      4254.45      241.036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.823385, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084701, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.924703, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00595365   0.00598751   0.00567751
      low eigenvalue method done, cpu time[sec] = 0.934799, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00599   0.00565         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000312   0.00565     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00564546
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997438   0.00256216   0.00219781  0.000224881  1.29506e-05  3.72935e-05  1.83873e-06  9.54251e-05  7.60549e-07  2.41759e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95061, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.79321e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61074, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7831.69      4361.88       2585.9      2701.24      379.881      13994.7      3722.64      210.906
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.815644, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095519, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.917677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00581737   0.00584937   0.00549288
      low eigenvalue method done, cpu time[sec] = 0.927717, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00585   0.00546         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000303   0.00546     0.997
         *Z       ---       ---  1.01e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00546288
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997521   0.00247929    0.0021277  0.000214064  1.25824e-05  3.57048e-05  1.77936e-06  9.50815e-05   7.6286e-07  2.41763e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93304, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2500 K
      Energy reference = 86280 1/cm
      Energy step      = 417 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -50.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006003
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.196888
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.091411
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.097021
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.359088
         W1 Well: minimal relaxation eigenvalue = 0.0304067
         W1 Well: maximal relaxation eigenvalue = 1.09091
         W1 Well:       grid size = 253
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19220 1/cm
         B1 Barrier:        grid size = 207
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 207
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -38 1/cm
         B3 Barrier:        grid size = 218
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4625 1/cm
         B4 Barrier:        grid size = 222
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6293 1/cm
         B5 Barrier: nonpositive number of states at -23391 1/cm => truncating
         B5 Barrier:        grid size = 263
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23391 1/cm
         B6 Barrier:        grid size = 204
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1211 1/cm
         B7 Barrier:        grid size = 196
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4547 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16641 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06392, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 253
      MasterEquation::Barrier::truncate: real weight = 7.58482e+28
      MasterEquation::Barrier::truncate: effective weight = 1.44111e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19220 -19220 6.66e+06 7.35e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 9.37e+18
         B2    -38 5.43e+18
         B3  -4625 3.38e+18
         B4  -6293 3.52e+18
         B5 -19220 4.97e+17
         B6   1212 1.72e+19
         B7   4548 4.69e+18
         B8  16642 2.85e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.57e-16  3.17e-16  1.34e-16  6.05e-17  4.41e-21  3.33e-15  7.16e-14   1.3e-09
          R  6.38e+15         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  3.15e+15     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  7.45e+15      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  1.65e+16      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4  2.27e+20  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5     3e+14    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6   1.4e+13   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7   7.7e+08  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.34e-19  1.08e-18  4.57e-19  2.06e-19   1.5e-23  1.13e-17  2.44e-16  4.42e-12
          R  1.87e+18         1      2.02     0.856     0.386  2.82e-05      21.2       457  8.28e+06
         P1  9.25e+17     0.494         1     0.423     0.191  1.39e-05      10.5       225  4.09e+06
         P2  2.19e+18      1.17      2.37         1     0.451  3.29e-05      24.8       534  9.68e+06
         P3  4.85e+18      2.59      5.24      2.22         1  7.29e-05        55  1.18e+03  2.14e+07
         P4  6.65e+22  3.55e+04  7.19e+04  3.04e+04  1.37e+04         1  7.54e+05  1.62e+07  2.94e+11
         P5  8.82e+16    0.0471    0.0954    0.0403    0.0182  1.33e-06         1      21.5   3.9e+05
         P6   4.1e+15   0.00219   0.00443   0.00187  0.000846  6.17e-08    0.0465         1  1.81e+04
         P7  2.26e+11  1.21e-07  2.44e-07  1.03e-07  4.66e-08   3.4e-12  2.56e-06  5.51e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07699, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135218, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53961, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             327571       189776       118001       122902      17380.5       601714       163789      9953.27
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.798015, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084059, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.898511, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0119464    0.0121199    0.0144731
      low eigenvalue method done, cpu time[sec] = 0.907828, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0121    0.0143         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000705    0.0143     0.993
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0142666
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99204    0.0079603   0.00643575   0.00114563  4.36664e-05  0.000205521  7.39815e-06  0.000168736  1.54905e-06  7.02413e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.83273, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134694, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56361, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             109190      63258.5      39333.7      40967.3      5793.52       200571      54596.2      3317.76
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895932, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0109231    0.0110622    0.0127012
      low eigenvalue method done, cpu time[sec] = 0.905386, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0111    0.0125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000626    0.0125     0.994
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0125419
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993002   0.00699794    0.0058209  0.000860014  3.59802e-05  0.000140242  5.64801e-06  0.000173454  1.55372e-06  7.02417e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.85385, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         5.83492e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134699, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.56185, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            65514.3      37955.1      23600.2      24580.4      3476.11       120343      32757.7      1990.65
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08216, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0103895    0.0105125    0.0118054
      low eigenvalue method done, cpu time[sec] = 0.905221, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0105    0.0117         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000586    0.0117     0.994
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0116677
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99349   0.00651015   0.00547109   0.00074062  3.29799e-05  0.000119078  5.03429e-06  0.000175705  1.55752e-06  7.02421e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.85149, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         8.16889e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135012, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57093, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            46795.9      27110.8      16857.3      17557.4      2482.94      85959.1      23398.4       1421.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.798578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082427, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897648, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0100195     0.010132    0.0111969
      low eigenvalue method done, cpu time[sec] = 0.907255, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0101    0.0111         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000559    0.0111     0.994
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0110729
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993822   0.00617828   0.00522162  0.000668313  3.11342e-05  0.000107239  4.67561e-06  0.000177043  1.56092e-06  7.02426e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86306, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.05029e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135516, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58481, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36396.8      21086.2      13111.2      13655.8      1931.17      66857.1      18198.7      1105.92
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.798354, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086313, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.901533, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0097344   0.00983918    0.0107349
      low eigenvalue method done, cpu time[sec] = 0.91145, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00984    0.0106         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000538    0.0106     0.995
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0106209
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994074   0.00592611   0.00502674  0.000617741  2.98103e-05  9.92801e-05  4.42684e-06  0.000177903  1.56406e-06   7.0243e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8835, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5762, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32757.1      18977.6      11800.1      12290.2      1738.05      60171.4      16378.9      995.327
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797793, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.89721, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00961274   0.00971432    0.0105398
      low eigenvalue method done, cpu time[sec] = 0.907179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00971    0.0104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000529    0.0104     0.995
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0104299
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994181    0.0058195   0.00494311  0.000597416  2.92675e-05  9.61421e-05  4.32683e-06  0.000178218  1.56555e-06  7.02432e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87068, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.75048e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135256, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57723, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21838.1      12651.7      7866.73      8193.46       1158.7      40114.3      10919.2      663.551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.80049, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082591, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899414, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00913369   0.00922327   0.00978275
      low eigenvalue method done, cpu time[sec] = 0.909438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00922   0.00969         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000495   0.00969     0.995
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00968798
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994594   0.00540556   0.00461213  0.000523963  2.72373e-05  8.50276e-05  3.96266e-06    0.0001791  1.57244e-06  7.02442e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87391, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.33397e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.136354, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58586, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16378.6      9488.78      5900.05      6145.09      869.027      30085.7      8189.43      497.663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797924, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082687, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896974, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00878429   0.00886568   0.00924226
      low eigenvalue method done, cpu time[sec] = 0.907677, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00887   0.00916         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000471   0.00916     0.995
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00915763
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99489   0.00510964   0.00437018  0.000476305  2.58463e-05  7.79552e-05  3.72173e-06  0.000179335  1.57863e-06  7.02453e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.91746e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13527, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57652, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13102.9      7591.03      4720.04      4916.08      695.222      24068.6      6551.54      398.131
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797428, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897266, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0085085   0.00858375   0.00882272
      low eigenvalue method done, cpu time[sec] = 0.907273, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00858   0.00875         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000452   0.00875     0.996
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00874556
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99512   0.00487972   0.00417954  0.000441777  2.47917e-05  7.28718e-05  3.54346e-06  0.000179245  1.58429e-06  7.02463e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13492, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58492, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10919      6325.85      3933.37      4096.73      579.352      20057.1      5459.62      331.776
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.798223, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083288, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.89802, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0082804   0.00835079   0.00848054
      low eigenvalue method done, cpu time[sec] = 0.908244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00835   0.00841         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000437   0.00841     0.996
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00840922
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995308   0.00469205   0.00402243  0.000415081  2.39444e-05  6.89536e-05  3.40283e-06   0.00017897  1.58954e-06  7.02473e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87994, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.08445e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58737, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9359.18      5422.16      3371.46      3511.48      496.587      17191.8      4679.67      284.379
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.796396, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00808581   0.00815221   0.00819211
      low eigenvalue method done, cpu time[sec] = 0.906179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00815   0.00813         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000424   0.00813     0.996
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00812555
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995466   0.00453377   0.00388896  0.000393536  2.32373e-05  6.57932e-05  3.28719e-06  0.000178583  1.59445e-06  7.02484e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88111, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.66794e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135718, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58127, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8189.29      4744.39      2950.02      3072.55      434.514      15042.8      4094.71      248.832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00791611   0.00797914   0.00794321
      low eigenvalue method done, cpu time[sec] = 0.907193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00798   0.00788         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000412   0.00788     0.996
         *Z       ---       ---  7.21e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00788062
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995603   0.00439711   0.00377308  0.000375607  2.26314e-05  6.31614e-05  3.18927e-06  0.000178126  1.59905e-06  7.02494e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87698, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2600 K
      Energy reference = 89061 1/cm
      Energy step      = 433 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -47.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005987
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.194328
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.089591
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.097486
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.360337
         W1 Well: minimal relaxation eigenvalue = 0.0294321
         W1 Well: maximal relaxation eigenvalue = 1.10305
         W1 Well:       grid size = 251
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19621 1/cm
         B1 Barrier:        grid size = 206
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -136 1/cm
         B2 Barrier:        grid size = 206
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -136 1/cm
         B3 Barrier:        grid size = 217
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4899 1/cm
         B4 Barrier:        grid size = 220
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23519 1/cm => truncating
         B5 Barrier:        grid size = 260
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23518 1/cm
         B6 Barrier:        grid size = 203
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1162 1/cm
         B7 Barrier:        grid size = 195
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4626 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16750 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06235, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 251
      MasterEquation::Barrier::truncate: real weight = 7.1877e+28
      MasterEquation::Barrier::truncate: effective weight = 1.41806e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19621 -19621 5.37e+06  9.5e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -136 1.23e+19
         B2   -136  7.4e+18
         B3  -4899 4.83e+18
         B4  -6198 5.01e+18
         B5 -19621 7.13e+17
         B6   1163 2.32e+19
         B7   4627 6.46e+18
         B8  16750  4.2e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.74e-17  1.79e-16  8.23e-17  3.86e-17  4.22e-21  1.73e-15  3.48e-14  4.96e-10
          R  1.14e+16         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1  5.58e+15     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  1.22e+16      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3  2.59e+16      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4  2.37e+20  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  5.78e+14    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6  2.88e+13   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  2.02e+09  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.72e-19  5.57e-19  2.56e-19   1.2e-19  1.31e-23  5.38e-18  1.08e-16  1.54e-12
          R  3.68e+18         1      2.05     0.941     0.441  4.83e-05      19.8       398  5.68e+06
         P1  1.79e+18     0.488         1     0.459     0.215  2.35e-05      9.66       194  2.77e+06
         P2  3.91e+18      1.06      2.18         1     0.469  5.13e-05        21       423  6.03e+06
         P3  8.34e+18      2.27      4.65      2.13         1  0.000109      44.9       901  1.29e+07
         P4  7.62e+22  2.07e+04  4.25e+04  1.95e+04  9.15e+03         1   4.1e+05  8.24e+06  1.18e+11
         P5  1.86e+17    0.0505     0.104    0.0475    0.0223  2.44e-06         1      20.1  2.87e+05
         P6  9.25e+15   0.00252   0.00516   0.00237   0.00111  1.21e-07    0.0498         1  1.43e+04
         P7  6.48e+11  1.76e-07  3.61e-07  1.66e-07  7.78e-08   8.5e-12  3.49e-06  7.01e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07582, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52699, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             341059       205273       133822       138994        19760       643337       178994      11633.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780691, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082521, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879897, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0156783        0.016    0.0204388
      low eigenvalue method done, cpu time[sec] = 0.889278, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.016      0.02         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000956      0.02      0.99
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0200295
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98729    0.0127096    0.0103049   0.00180414  7.00457e-05  0.000320999  1.17455e-05  0.000295469  3.04728e-06  1.86915e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79586, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132622, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             113686      68424.5      44607.5      46331.2      6586.67       214446      59664.7      3877.84
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780131, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082033, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878955, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0144518    0.0147143    0.0180934
      low eigenvalue method done, cpu time[sec] = 0.888406, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0147    0.0178         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000855    0.0178     0.991
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0177719
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988723     0.011277   0.00939887   0.00136643  5.85458e-05  0.000222712  9.11773e-06  0.000303539  3.05609e-06  1.86916e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.80201, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         5.68833e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52598, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            68211.8      41054.7      26764.5      27798.7         3952       128667      35798.8       2326.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.778929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081777, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.877201, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0138075    0.0140417    0.0168992
      low eigenvalue method done, cpu time[sec] = 0.886443, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.014    0.0166         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000803    0.0166     0.992
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0166183
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.989455    0.0105451   0.00887588   0.00118334  5.40318e-05   0.00019064  8.19101e-06  0.000307504  3.06321e-06  1.86918e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         7.96367e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132941, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54964, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48722.7      29324.8      19117.5      19856.2      2822.86      91905.2      25570.6      1661.93
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781782, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.881063, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0133589    0.0135745    0.0160844
      low eigenvalue method done, cpu time[sec] = 0.890563, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0136    0.0158         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000768    0.0158     0.992
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0158298
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.989955    0.0100447   0.00850036   0.00107228  5.12457e-05  0.000172635  7.64766e-06  0.000309937  3.06955e-06  1.86919e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82011, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.0239e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132504, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54485, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            37895.4      22808.2      14869.2      15443.7      2195.56      71481.8      19888.2      1292.61
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77991, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081901, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878594, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.013012    0.0132139     0.015464
      low eigenvalue method done, cpu time[sec] = 0.887904, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0132    0.0152         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000741    0.0152     0.992
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0152285
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990337   0.00966319   0.00820565  0.000994473  4.92419e-05  0.000160499  7.26985e-06  0.000311561  3.07539e-06   1.8692e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81122, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132201, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54469, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34105.9      20527.3      13382.2      13899.4         1976      64333.7      17899.4      1163.35
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780033, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081285, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878227, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0128637    0.0130599    0.0152014
      low eigenvalue method done, cpu time[sec] = 0.887479, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0131     0.015         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000729     0.015     0.992
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0149738
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990498   0.00950152   0.00807882  0.000963168  4.84189e-05  0.000155706  7.11772e-06  0.000312176  3.07816e-06   1.8692e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81147, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.7065e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54887, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22737.3      13684.9       8921.5      9266.24      1317.33      42889.1      11932.9      775.568
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.782077, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.880047, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.012278    0.0124527    0.0141793
      low eigenvalue method done, cpu time[sec] = 0.889709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0125     0.014         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000685     0.014     0.993
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0139811
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991128   0.00887163   0.00757483  0.000849822  4.53324e-05  0.000138684  6.56235e-06  0.000314058  3.09095e-06  1.86923e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81631, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.27533e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132472, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17052.9      10263.7      6691.12      6949.68          988      32166.8      8949.71      581.676
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.779075, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082044, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.877465, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0118489    0.0120087    0.0134464
      low eigenvalue method done, cpu time[sec] = 0.886752, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.012    0.0133         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000653    0.0133     0.993
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.013268
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991581   0.00841912   0.00720432  0.000776062  4.32091e-05   0.00012781  6.19355e-06  0.000314806  3.10241e-06  1.86925e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.84417e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55483, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13642.4      8210.94       5352.9      5559.74        790.4      25733.5      7159.77      465.341
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781355, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081298, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.878978, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.011509    0.0116577    0.0128754
      low eigenvalue method done, cpu time[sec] = 0.888532, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0117    0.0127         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000629    0.0127     0.994
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0127117
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991934   0.00806617   0.00691115  0.000722488  4.15939e-05  0.000119971  5.91981e-06  0.000314969   3.1129e-06  1.86928e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8225, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132287, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54929, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11368.6      6842.45      4460.75      4633.12      658.667      21444.6      5966.47      387.784
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77908, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081873, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.87747, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0112271    0.0113668    0.0124084
      low eigenvalue method done, cpu time[sec] = 0.887039, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0114    0.0123         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000608    0.0123     0.994
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0122563
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992223   0.00777716    0.0066687  0.000680976  4.02925e-05  0.000113912  5.70331e-06  0.000314792  3.12263e-06  1.86931e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81444, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         3.98183e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55013, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9744.54      5864.95       3823.5      3971.24      564.572        18381      5114.12      332.386
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.782134, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081278, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.880417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.010986    0.0111184    0.0120137
      low eigenvalue method done, cpu time[sec] = 0.889765, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0111    0.0119         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000591    0.0119     0.994
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0118711
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992467   0.00753273   0.00646213  0.000647407  3.92037e-05  0.000109014  5.52485e-06    0.0003144  3.13172e-06  1.86933e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81763, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         4.55067e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.132746, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54976, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8526.47      5131.83      3345.56      3474.84          494      16083.4      4474.85      290.838
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.782636, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082663, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.881325, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0107753    0.0109014    0.0116724
      low eigenvalue method done, cpu time[sec] = 0.891304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0109    0.0115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000576    0.0115     0.994
         *Z       ---       ---  5.18e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0115377
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992679   0.00732118   0.00628232  0.000619424  3.82686e-05  0.000104927  5.37344e-06  0.000313869  3.14028e-06  1.86936e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82061, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2700 K
      Energy reference = 91841 1/cm
      Energy step      = 450 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -45.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005949
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.194608
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.088465
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094041
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.359574
         W1 Well: minimal relaxation eigenvalue = 0.0282553
         W1 Well: maximal relaxation eigenvalue = 1.12456
         W1 Well:       grid size = 250
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -20659 1/cm
         B1 Barrier:        grid size = 205
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -409 1/cm
         B2 Barrier:        grid size = 204
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 40 1/cm
         B3 Barrier:        grid size = 215
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4909 1/cm
         B4 Barrier:        grid size = 218
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6259 1/cm
         B5 Barrier: nonpositive number of states at -23359 1/cm => truncating
         B5 Barrier:        grid size = 256
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23359 1/cm
         B6 Barrier:        grid size = 201
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1390 1/cm
         B7 Barrier:        grid size = 194
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4540 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16691 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.05385, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 250
      MasterEquation::Barrier::truncate: real weight = 6.95045e+28
      MasterEquation::Barrier::truncate: effective weight = 1.42508e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -20659 -20659 2.96e+06 1.22e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -409  1.6e+19
         B2     41    1e+19
         B3  -4909 6.83e+18
         B4  -6259 7.07e+18
         B5 -20659 1.01e+18
         B6   1391  3.1e+19
         B7   4541  8.8e+18
         B8  16691  6.1e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.27e-17   1.1e-16  5.42e-17  2.63e-17  4.19e-21  9.78e-16  1.84e-14  2.11e-10
          R   1.9e+16         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1  9.13e+15     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  1.85e+16     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3   3.8e+16         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  2.39e+20  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5  1.02e+15    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  5.43e+13   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  4.75e+09   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.46e-19  3.03e-19   1.5e-19  7.28e-20  1.16e-23   2.7e-18  5.09e-17  5.82e-13
          R  6.86e+18         1      2.08      1.03     0.499  7.95e-05      18.5       349  3.99e+06
         P1   3.3e+18     0.482         1     0.495      0.24  3.83e-05      8.93       168  1.92e+06
         P2  6.68e+18     0.973      2.02         1     0.486  7.74e-05        18       340  3.89e+06
         P3  1.37e+19         2      4.16      2.06         1  0.000159      37.1       699     8e+06
         P4  8.63e+22  1.26e+04  2.61e+04  1.29e+04  6.28e+03         1  2.33e+05  4.39e+06  5.03e+10
         P5   3.7e+17    0.0539     0.112    0.0554    0.0269  4.29e-06         1      18.8  2.15e+05
         P6  1.96e+16   0.00286   0.00595   0.00294   0.00143  2.28e-07    0.0531         1  1.14e+04
         P7  1.72e+12   2.5e-07   5.2e-07  2.57e-07  1.25e-07  1.99e-11  4.64e-06  8.74e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.06711, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132363, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50572, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             353712       220900       150924       156342      22337.7       684475       194447        13480
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.769644, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.86696, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0197152    0.0202487    0.0269228
      low eigenvalue method done, cpu time[sec] = 0.876234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0202    0.0262         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0012    0.0262     0.987
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.026217
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980554     0.019446    0.0158177   0.00271514  0.000107922  0.000482772  1.79349e-05  0.000493007  5.65974e-06  4.60066e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.7607, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.131384, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51241, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             117904      73633.5        50308        52114      7445.91       228158      64815.7      4493.32
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.771138, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868806, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0182921    0.0187335    0.0240144
      low eigenvalue method done, cpu time[sec] = 0.878154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0187    0.0235         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00108    0.0235     0.988
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0234513
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982605    0.0173946     0.014528   0.00207619  9.13126e-05  0.000339683  1.41222e-05  0.000506016  5.67556e-06  4.60069e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76674, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         5.55075e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.131759, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52651, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70742.3      44180.1      30184.8      31268.4      4467.54       136895      38889.4      2695.99
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.772266, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080546, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.869153, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0175423    0.0179393    0.0225277
      low eigenvalue method done, cpu time[sec] = 0.878694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0179     0.022         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00102     0.022     0.989
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0220314
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983659    0.0163415     0.013777   0.00180848  8.47825e-05  0.000292842  1.27748e-05  0.000512558  5.68824e-06  4.60071e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.781, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         7.77105e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.131903, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51193, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50530.2      31557.2      21560.6      22334.6       3191.1      97782.1      27778.2      1925.71
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.769322, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080762, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.866208, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0170186    0.0173864    0.0215098
      low eigenvalue method done, cpu time[sec] = 0.875457, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0174    0.0211         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000975    0.0211     0.989
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0210569
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.984381    0.0156186    0.0132347   0.00164563  8.07443e-05  0.000266484  1.19834e-05  0.000516679  5.69947e-06  4.60074e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76423, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         9.99135e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.13166, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            39301.3      24544.5      16769.3      17371.3      2481.97      76052.7      21605.2      1497.77
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.770117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08094, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.866971, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0166127    0.0169587    0.0207324
      low eigenvalue method done, cpu time[sec] = 0.876212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.017    0.0203         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000943    0.0203      0.99
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0203113
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.984934    0.0150656    0.0128075    0.0015313  7.78348e-05  0.000248684  1.14322e-05  0.000519514  5.70978e-06  4.60076e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78266, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.131477, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52847, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35371.2        22090      15092.4      15634.2      2233.77      68447.5      19444.7         1348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.772515, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080373, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868965, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0164388    0.0167757    0.0204027
      low eigenvalue method done, cpu time[sec] = 0.878246, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0168      0.02         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000929      0.02      0.99
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0199947
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.985169    0.0148308    0.0126231   0.00148522  7.66382e-05  0.000241644    1.121e-05  0.000520615  5.71468e-06  4.60077e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78412, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.66523e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132204, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52343, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23580.8      14726.7      10061.6      10422.8      1489.18      45631.6      12963.1      898.664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.773635, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081677, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.871322, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0157503    0.0160528     0.019116
      low eigenvalue method done, cpu time[sec] = 0.880822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0161    0.0188         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000876    0.0188     0.991
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0187574
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986087     0.013913    0.0118879   0.00131803  7.21413e-05  0.000216596  1.03974e-05  0.000524189  5.73721e-06  4.60083e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          2.2203e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52525, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17685.6        11045      7546.19      7817.09      1116.89      34223.7      9722.36      673.998
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.772467, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081797, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.870525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0152441    0.0155226    0.0181894
      low eigenvalue method done, cpu time[sec] = 0.880107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0155    0.0179         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000838    0.0179     0.991
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0178645
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986749    0.0132507    0.0113446   0.00120887  6.90374e-05  0.000200547  9.85612e-06  0.000525901  5.75738e-06  4.60089e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78394, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         2.77538e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.1321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52457, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14148.5      8836.02      6036.96      6253.67      893.509        27379      7777.89      539.198
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.771354, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0148419    0.0151023    0.0174653
      low eigenvalue method done, cpu time[sec] = 0.878247, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0151    0.0172         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000808    0.0172     0.991
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0171655
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987268    0.0127323    0.0109131   0.00112938  6.66698e-05  0.000188945  9.45339e-06   0.00052663  5.77585e-06  4.60095e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78117, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132536, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52412, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11790.4      7363.35       5030.8       5211.4      744.591      22815.8      6481.57      449.332
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77451, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081299, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.872607, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0145075    0.0147533    0.0168715
      low eigenvalue method done, cpu time[sec] = 0.882141, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0148    0.0166         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000783    0.0166     0.992
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0165915
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987693    0.0123065    0.0105551   0.00106764  6.47573e-05  0.000179961  9.13417e-06  0.000526772  5.79297e-06  4.60101e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78486, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.88553e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132767, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52633, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10106      6311.44      4312.11      4466.91       638.22      19556.4      5555.63      385.142
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77375, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.080813, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.870895, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.014221    0.0144547    0.0163685
      low eigenvalue method done, cpu time[sec] = 0.880456, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0145    0.0161         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000762    0.0161     0.992
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0161048
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988054    0.0119455    0.0102493   0.00101762   6.3154e-05  0.000172683  8.87054e-06  0.000526538  5.80899e-06  4.60107e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78528, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          4.4406e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132332, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52617, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8842.79      5522.51       3773.1      3908.55      558.443      17111.9      4861.18      336.999
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.776012, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081676, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.874217, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0      0.01397    0.0141935    0.0159325
      low eigenvalue method done, cpu time[sec] = 0.883825, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0142    0.0157         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000744    0.0157     0.992
         *Z       ---       ---  3.92e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0156827
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988368    0.0116324   0.00998241  0.000975851  6.17743e-05    0.0001666  8.64647e-06   0.00052605  5.82408e-06  4.60114e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.7881, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2800 K
      Energy reference = 94621 1/cm
      Energy step      = 467 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -43.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006053
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.188699
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.088772
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094806
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.344793
         W1 Well: minimal relaxation eigenvalue = 0.0274423
         W1 Well: maximal relaxation eigenvalue = 1.14194
         W1 Well:       grid size = 248
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21194 1/cm
         B1 Barrier:        grid size = 203
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -180 1/cm
         B2 Barrier:        grid size = 203
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -180 1/cm
         B3 Barrier:        grid size = 213
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4849 1/cm
         B4 Barrier:        grid size = 216
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6250 1/cm
         B5 Barrier: nonpositive number of states at -23997 1/cm => truncating
         B5 Barrier:        grid size = 254
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23996 1/cm
         B6 Barrier:        grid size = 200
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1220 1/cm
         B7 Barrier:        grid size = 193
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4489 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16631 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.03646, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 248
      MasterEquation::Barrier::truncate: real weight = 6.84327e+28
      MasterEquation::Barrier::truncate: effective weight = 1.45612e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21194 -21194 2.16e+06 1.56e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -180 2.07e+19
         B2   -180 1.34e+19
         B3  -4849 9.57e+18
         B4  -6250 9.89e+18
         B5 -21194 1.42e+18
         B6   1221  4.1e+19
         B7   4490 1.19e+19
         B8  16632 8.76e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.1e-17  6.52e-17  3.46e-17  1.74e-17  3.92e-21   5.4e-16  9.58e-15  8.92e-11
          R  3.23e+16         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1  1.53e+16     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  2.89e+16     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  5.76e+16      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4  2.55e+20  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5  1.85e+15    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  1.04e+14   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  1.12e+10  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   8.2e-20  1.72e-19  9.14e-20  4.59e-20  1.04e-23  1.43e-18  2.53e-17  2.36e-13
          R  1.22e+19         1       2.1      1.11      0.56  0.000126      17.4       309  2.88e+06
         P1   5.8e+18     0.476         1      0.53     0.266  6.01e-05      8.28       147  1.37e+06
         P2  1.09e+19     0.897      1.89         1     0.503  0.000113      15.6       277  2.58e+06
         P3  2.18e+19      1.79      3.75      1.99         1  0.000225      31.1       552  5.14e+06
         P4  9.66e+22  7.92e+03  1.66e+04  8.83e+03  4.44e+03         1  1.38e+05  2.45e+06  2.28e+10
         P5     7e+17    0.0574     0.121     0.064    0.0322  7.25e-06         1      17.7  1.65e+05
         P6  3.95e+16   0.00324    0.0068   0.00361   0.00181  4.09e-07    0.0564         1  9.32e+03
         P7  4.24e+12  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.39e-11  6.05e-06  0.000107         1
   MasterEquation::set:  done, cpu time[sec] = 1.04986, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130447, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46117, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             365526       236604       169339       174858      25119.4       724992       210087      15496.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.75619, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080306, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.852346, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0248391    0.0257486    0.0363842
      low eigenvalue method done, cpu time[sec] = 0.861495, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0257    0.0351         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00157    0.0351     0.982
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0351069
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.971752    0.0282482    0.0230658   0.00386871  0.000158259  0.000688206  2.60278e-05  0.000783874  9.98827e-06  1.05638e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69381, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47604, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             121842        78868      56446.4      58285.9      8373.12       241664      70028.9      5165.41
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755999, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079983, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.85178, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0232087    0.0239725    0.0327075
      low eigenvalue method done, cpu time[sec] = 0.86102, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.024    0.0317         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00142    0.0317     0.984
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0316716
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974516     0.025484    0.0213366   0.00299322  0.000135571  0.000491569  2.08032e-05  0.000803779   1.0015e-05  1.05638e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70953, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         5.42133e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.12974, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4787, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            73105.2      47320.8      33867.9      34971.6      5023.87       144998      42017.4      3099.24
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755754, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079926, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.851742, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0223405     0.023033    0.0308094
      low eigenvalue method done, cpu time[sec] = 0.860924, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.023    0.0299         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00134    0.0299     0.985
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0298886
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975951    0.0240494    0.0203147   0.00262259  0.000126624  0.000426916  1.89503e-05  0.000814039  1.00362e-05  1.05639e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71093, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         7.58986e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.12944, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48721, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              52218      33800.6      24191.3      24979.7      3588.48       103570      30012.4      2213.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.757135, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079576, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.852666, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0217314    0.0223764    0.0295042
      low eigenvalue method done, cpu time[sec] = 0.861874, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0224    0.0287         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00129    0.0287     0.986
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0286587
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.97694    0.0230597    0.0195722   0.00239634  0.000121077  0.000390431  1.78593e-05  0.000820647   1.0055e-05  1.05639e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71916, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         9.75839e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130732, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49172, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              40614      26289.3      18815.5      19428.6      2791.04      80554.7        23343       1721.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079255, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.850289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0212578    0.0218673    0.0285045
      low eigenvalue method done, cpu time[sec] = 0.859709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0219    0.0277         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00125    0.0277     0.986
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0277145
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9777       0.0223    0.0189846    0.0022371  0.000117073  0.000365738   1.7098e-05  0.000825298  1.00721e-05   1.0564e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72317, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129773, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48547, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36552.6      23660.4      16933.9      17485.8      2511.94      72499.2      21008.7      1549.62
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756569, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.852289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0210546    0.0216492    0.0280796
      low eigenvalue method done, cpu time[sec] = 0.861528, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0216    0.0273         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00123    0.0273     0.986
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0273127
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.978023    0.0219767    0.0187304   0.00217284  0.000115423  0.000355958  1.67907e-05  0.000827138  1.00803e-05   1.0564e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71796, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          1.6264e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129845, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49994, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24368.4      15773.6      11289.3      11657.2      1674.62      48332.8      14005.8      1033.08
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.760669, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079578, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.856057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0202477    0.0207856    0.0264173
      low eigenvalue method done, cpu time[sec] = 0.865295, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0208    0.0257         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00117    0.0257     0.987
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0257374
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.979291    0.0207092     0.017713   0.00193915  0.000109213  0.000321086  1.56646e-05  0.000833358  1.01177e-05  1.05641e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73793, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.16853e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5066, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18276.3      11830.2      8466.97      8742.89      1255.97      36249.6      10504.3      774.811
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756765, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079426, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.85193, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0196521    0.0201504    0.0252158
      low eigenvalue method done, cpu time[sec] = 0.861231, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0202    0.0246         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00112    0.0246     0.988
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0245956
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98021    0.0197904    0.0169574   0.00178609  0.000104912  0.000298669  1.49122e-05  0.000836669  1.01511e-05  1.05643e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.71066e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.132022, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50191, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              14621      9464.16      6773.57      6994.31      1004.77      28999.7      8403.47      619.849
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758239, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080049, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.854684, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0191776    0.0196457     0.024274
      low eigenvalue method done, cpu time[sec] = 0.86425, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0196    0.0237         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00108    0.0237     0.988
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0236987
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980931    0.0190688     0.016355   0.00167434  0.000101622  0.000282425  1.43511e-05  0.000838417  1.01817e-05  1.05644e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74086, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129685, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49748, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12184.2       7886.8      5644.64      5828.59      837.312      24166.4      7002.89      516.541
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.75808, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853353, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0187821    0.0192258    0.0234997
      low eigenvalue method done, cpu time[sec] = 0.862916, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0192     0.023         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00105     0.023     0.988
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0229601
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981526    0.0184745    0.0158537   0.00158738  9.89585e-05  0.000269816  1.39053e-05  0.000839216  1.02101e-05  1.05645e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73105, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130205, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50192, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10443.6      6760.11      4838.27      4995.94      717.696      20714.1      6002.48      442.749
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758236, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079292, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853446, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0184424     0.018866    0.0228425
      low eigenvalue method done, cpu time[sec] = 0.862777, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0189    0.0223         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00102    0.0223     0.989
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0223323
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982031    0.0179693    0.0154243   0.00151679   9.6721e-05  0.000259584  1.35365e-05  0.000839396  1.02367e-05  1.05647e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         4.33706e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130783, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5071, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9138.15       5915.1      4233.48      4371.45      627.984      18124.8      5252.17      387.405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756502, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07971, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.852002, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0181445    0.0185507    0.0222718
      low eigenvalue method done, cpu time[sec] = 0.861198, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0186    0.0218         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000998    0.0218     0.989
         *Z       ---       ---  2.95e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0217866
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98247    0.0175302    0.0150488   0.00145775  9.47918e-05  0.000251017  1.32225e-05  0.000839149  1.02617e-05  1.05648e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74096, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2900 K
      Energy reference = 97401 1/cm
      Energy step      = 483 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -40.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006164
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.187478
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.086333
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.09555
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.341023
         W1 Well: minimal relaxation eigenvalue = 0.0266739
         W1 Well: maximal relaxation eigenvalue = 1.16557
         W1 Well:       grid size = 247
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21900 1/cm
         B1 Barrier:        grid size = 202
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -165 1/cm
         B2 Barrier:        grid size = 202
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -165 1/cm
         B3 Barrier:        grid size = 212
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4995 1/cm
         B4 Barrier:        grid size = 215
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6444 1/cm
         B5 Barrier: nonpositive number of states at -23349 1/cm => truncating
         B5 Barrier:        grid size = 250
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23349 1/cm
         B6 Barrier:        grid size = 199
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1283 1/cm
         B7 Barrier:        grid size = 192
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16739 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.03333, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 247
      MasterEquation::Barrier::truncate: real weight = 6.8442e+28
      MasterEquation::Barrier::truncate: effective weight = 1.50621e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21900 -21900  1.4e+06 1.99e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -165 2.65e+19
         B2   -165 1.78e+19
         B3  -4995 1.33e+19
         B4  -6444 1.37e+19
         B5 -21900 1.98e+18
         B6   1284 5.38e+19
         B7   4665 1.59e+19
         B8  16740 1.24e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.89e-17  4.01e-17  2.27e-17  1.17e-17  3.66e-21  3.09e-16  5.19e-15     4e-11
          R   5.3e+16         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  2.49e+16      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2  4.41e+16     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3  8.51e+16       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4  2.73e+20  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  3.23e+15     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6  1.93e+14   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7   2.5e+10  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.81e-20  1.02e-19  5.78e-20     3e-20  9.34e-24  7.89e-19  1.32e-17  1.02e-13
          R  2.08e+19         1      2.13       1.2     0.623  0.000194      16.4       275  2.12e+06
         P1  9.77e+18      0.47         1     0.565     0.293  9.13e-05      7.71       129  9.96e+05
         P2  1.73e+19     0.832      1.77         1     0.518  0.000162      13.6       229  1.76e+06
         P3  3.34e+19       1.6      3.42      1.93         1  0.000312      26.3       442   3.4e+06
         P4  1.07e+23  5.15e+03   1.1e+04  6.19e+03  3.21e+03         1  8.44e+04  1.42e+06  1.09e+10
         P5  1.27e+18     0.061      0.13    0.0733     0.038  1.18e-05         1      16.8  1.29e+05
         P6  7.56e+16   0.00363   0.00773   0.00437   0.00226  7.06e-07    0.0596         1   7.7e+03
         P7  9.82e+12  4.72e-07     1e-06  5.67e-07  2.94e-07  9.17e-11  7.74e-06   0.00013         1
   MasterEquation::set:  done, cpu time[sec] = 1.04641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             376505       252332       189096       194659      28109.5       764762       225852      17684.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.747969, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.846113, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0306936     0.032178    0.0479834
      low eigenvalue method done, cpu time[sec] = 0.855663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0322    0.0458         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00201    0.0458     0.977
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0457864
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960486     0.039514    0.0324035   0.00529161  0.000223856  0.000946027  3.64444e-05   0.00119873   1.6843e-05  2.27962e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128878, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46293, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             125502      84110.6      63031.9      64886.3      9369.84       254921      75284.1      5894.86
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745529, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.839996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0288492    0.0301116    0.0434262
      low eigenvalue method done, cpu time[sec] = 0.849196, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0301    0.0416         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00183    0.0416     0.979
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0416189
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964083    0.0359174    0.0301531    0.0041442  0.000193922  0.000685139  2.95304e-05   0.00122772   1.6886e-05  2.27963e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6802, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1          5.2993e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.12905, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              75301      50466.4      37819.1      38931.8      5621.91       152952      45170.4      3536.92
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.744885, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078879, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840062, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0278605     0.029013    0.0410576
      low eigenvalue method done, cpu time[sec] = 0.849304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.029    0.0394         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00173    0.0394      0.98
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0394384
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.965964    0.0340356    0.0288115   0.00365308   0.00018211  0.000599146  2.70752e-05   0.00124291    1.692e-05  2.27964e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69171, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         7.41902e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128572, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47312, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53786.4      36047.4      27013.7      27808.4      4015.65       109252      32264.6      2526.37
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745407, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078795, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840059, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0271645    0.0282434    0.0394229
      low eigenvalue method done, cpu time[sec] = 0.849241, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0282    0.0379         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00167    0.0379     0.981
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0379276
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.967268    0.0327318    0.0278316   0.00335194  0.000174776  0.000550514  2.56271e-05   0.00125287  1.69498e-05  2.27965e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68974, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         9.53874e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128695, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41833.9      28036.9      21010.6      21628.8      3123.28      84973.5      25094.7      1964.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746214, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.841718, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0266219    0.0276455    0.0381674
      low eigenvalue method done, cpu time[sec] = 0.850909, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0276    0.0368         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00162    0.0368     0.981
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0367642
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.968272    0.0317278    0.0270533   0.00313939  0.000169474  0.000517541  2.46152e-05      0.00126  1.69771e-05  2.27966e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70687, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128988, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48387, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            37650.5      25233.2      18909.6      19465.9      2810.95      76476.2      22585.2      1768.46
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.745891, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07925, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840881, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0263887    0.0273891     0.037633
      low eigenvalue method done, cpu time[sec] = 0.850026, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0274    0.0363         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0016    0.0363     0.982
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0362682
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9687    0.0312997    0.0267159   0.00305347  0.000167288  0.000504467  2.42063e-05   0.00126286    1.699e-05  2.27967e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70127, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.58979e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128693, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25100.3      16822.1      12606.4      12977.3      1873.97      50984.1      15056.8      1178.97
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.74489, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.839219, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0254606    0.0263719     0.035537
      low eigenvalue method done, cpu time[sec] = 0.849172, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0264    0.0343         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00152    0.0343     0.983
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0343175
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.970384    0.0296162    0.0253607   0.00274023   0.00015904   0.00045776  2.27054e-05   0.00127281  1.70494e-05  2.27969e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69885, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.11972e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129345, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50213, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18825.2      12616.6      9454.78      9732.95      1405.48      38238.1      11292.6       884.23
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.748363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079443, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.843935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0247733     0.025622    0.0340167
      low eigenvalue method done, cpu time[sec] = 0.853583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0256    0.0329         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00146    0.0329     0.983
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0328977
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.971609    0.0283909    0.0243498   0.00253435  0.000153312  0.000427651  2.17001e-05   0.00127847  1.71023e-05  2.27972e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72488, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.64965e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.12888, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49851, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15060.2      10093.3      7563.83      7786.36      1124.38      30590.5      9034.09      707.384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.748361, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078636, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.842714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0242243    0.0250249     0.032822
      low eigenvalue method done, cpu time[sec] = 0.852322, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.025    0.0318         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00141    0.0318     0.984
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0317789
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.972575    0.0274254     0.023541   0.00238365   0.00014892  0.000405782  2.09486e-05    0.0012818  1.71508e-05  2.27975e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71972, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129344, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50075, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12550.2      8411.06      6303.19      6488.63      936.984      25492.1      7528.41      589.486
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078786, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840958, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0237657    0.0245276    0.0318375
      low eigenvalue method done, cpu time[sec] = 0.850566, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0245    0.0309         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00137    0.0309     0.984
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0308551
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.973372    0.0266282     0.022866   0.00226613  0.000145357  0.000388775  2.03505e-05   0.00128369  1.71957e-05  2.27977e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72125, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.70951e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49761, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10757.3      7209.48      5402.73      5561.69      803.129      21850.3      6452.92      505.274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.74811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078956, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.843055, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0233712    0.0241007    0.0310003
      low eigenvalue method done, cpu time[sec] = 0.85277, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0241    0.0301         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00134    0.0301     0.985
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0300682
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974051    0.0259491    0.0222866   0.00217055  0.000142358   0.00037495  1.98548e-05   0.00128462  1.72378e-05   2.2798e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71955, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         4.23944e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129258, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4979, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9412.62       6308.3      4727.39      4866.47      702.738        19119      5646.31      442.115
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.743705, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079067, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.838417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0230246    0.0237263    0.0302723
      low eigenvalue method done, cpu time[sec] = 0.848116, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0237    0.0294         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00131    0.0294     0.985
         *Z       ---       ---  2.27e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0293828
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974642    0.0253575    0.0217788   0.00209049  0.000139768  0.000363356  1.94321e-05   0.00128489  1.72774e-05  2.27983e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71583, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 3000 K
      Energy reference = 100181 1/cm
      Energy step      = 500 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -38.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00593
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.186483
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.08546
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.096088
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.33922
         W1 Well: minimal relaxation eigenvalue = 0.0259611
         W1 Well: maximal relaxation eigenvalue = 1.1991
         W1 Well:       grid size = 246
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22818 1/cm
         B1 Barrier:        grid size = 201
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -318 1/cm
         B2 Barrier:        grid size = 200
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 181 1/cm
         B3 Barrier:        grid size = 210
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4818 1/cm
         B4 Barrier:        grid size = 213
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6318 1/cm
         B5 Barrier: nonpositive number of states at -23319 1/cm => truncating
         B5 Barrier:        grid size = 247
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23318 1/cm
         B6 Barrier:        grid size = 198
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1181 1/cm
         B7 Barrier:        grid size = 191
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16681 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.02446, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 246
      MasterEquation::Barrier::truncate: real weight = 6.93933e+28
      MasterEquation::Barrier::truncate: effective weight = 1.58089e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22818 -22818 7.69e+05 2.52e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -318 3.37e+19
         B2    182 2.34e+19
         B3  -4818 1.83e+19
         B4  -6318 1.88e+19
         B5 -22818 2.73e+18
         B6   1182 7.01e+19
         B7   4682 2.11e+19
         B8  16682 1.75e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.17e-17  2.53e-17  1.52e-17  8.09e-18  3.41e-21  1.82e-16   2.9e-15  1.87e-11
          R  8.51e+16         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  3.95e+16     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2   6.6e+16     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  1.24e+17      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4  2.93e+20  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5  5.49e+15    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  3.45e+14   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  5.35e+10  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.93e-20  6.31e-20  3.78e-20  2.02e-20  8.51e-24  4.54e-19  7.23e-18  4.66e-14
          R  3.42e+19         1      2.15      1.29     0.689  0.000291      15.5       247  1.59e+06
         P1  1.59e+19     0.464         1     0.599      0.32  0.000135      7.19       115  7.38e+05
         P2  2.65e+19     0.775      1.67         1     0.534  0.000225        12       191  1.23e+06
         P3  4.96e+19      1.45      3.13      1.87         1  0.000422      22.5       359  2.31e+06
         P4  1.18e+23  3.44e+03  7.41e+03  4.44e+03  2.37e+03         1  5.33e+04   8.5e+05  5.47e+09
         P5   2.2e+18    0.0645     0.139    0.0833    0.0444  1.87e-05         1      15.9  1.03e+05
         P6  1.38e+17   0.00405   0.00873   0.00523   0.00279  1.18e-06    0.0628         1  6.44e+03
         P7  2.15e+13  6.29e-07  1.35e-06  8.11e-07  4.33e-07  1.83e-10  9.74e-06  0.000155         1
   MasterEquation::set:  done, cpu time[sec] = 1.0376, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128496, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.43083, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             386657       268036       210217       215771      31312.4       803673       241686      20046.6
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.737701, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087296, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0374164    0.0397664    0.0622105
      low eigenvalue method done, cpu time[sec] = 0.850011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0398    0.0586         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00254    0.0586      0.97
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.058567
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.946466    0.0535342    0.0439676   0.00714395  0.000306134   0.00125522  4.93276e-05    0.0017668  2.72684e-05  4.65285e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.64876, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128493, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44708, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             128886      89345.2      70072.3      71923.8      10437.5       267891        80562      6682.21
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.737493, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078495, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831566, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0353235    0.0373406    0.0565765
      low eigenvalue method done, cpu time[sec] = 0.840784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0373    0.0535         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00232    0.0535     0.973
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.053547
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.951054    0.0489455    0.0411576    0.0055983  0.000268318  0.000923103   4.0553e-05   0.00180787  2.73349e-05  4.65287e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.65345, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         5.18403e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127672, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44477, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            77331.4      53607.1      42043.4      43154.3      6262.47       160735      48337.2      4009.32
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.737426, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077814, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.830806, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.034203    0.0360549    0.0536512
      low eigenvalue method done, cpu time[sec] = 0.839944, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0361    0.0509         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0022    0.0509     0.974
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0509193
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.953456    0.0465436    0.0394569    0.0049496  0.000253289  0.000812786  3.74155e-05   0.00182971  2.73871e-05  4.65289e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         7.25764e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128462, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45745, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            55236.7      38290.8        30031      30824.5       4473.2       114810      34526.6       2863.8
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.73683, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077988, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.83029, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0334134    0.0351542    0.0516298
      low eigenvalue method done, cpu time[sec] = 0.839818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0352    0.0491         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00213    0.0491     0.975
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.049095
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.955124    0.0448762    0.0382074   0.00455351  0.000243932  0.000750205  3.55602e-05   0.00184422  2.74327e-05  4.65291e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66361, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         9.33125e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.12798, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45397, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            42961.9      29781.7      23357.4      23974.6      3479.15        89297        26854       2227.4
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077871, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833375, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0327971    0.0344542    0.0500755
      low eigenvalue method done, cpu time[sec] = 0.842459, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0345    0.0477         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00206    0.0477     0.976
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0476875
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.95641    0.0435896    0.0372113   0.00427437  0.000237154  0.000707686  3.42613e-05   0.00185477  2.74744e-05  4.65293e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66022, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45185, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38665.7      26803.6      21021.7      21577.1      3131.24      80367.3      24168.6      2004.66
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.733627, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.827292, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.032532     0.034154    0.0494133
      low eigenvalue method done, cpu time[sec] = 0.836524, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0342    0.0471         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00204    0.0471     0.976
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0470866
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.95696    0.0430403    0.0367785   0.00416159  0.000234356  0.000690804  3.37359e-05   0.00185905   2.7494e-05  4.65294e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69215, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.55521e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46185, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25777.1        17869      14014.5      14384.8      2087.49      53578.2      16112.4      1336.44
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739288, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077726, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832671, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0314756     0.032962    0.0468118
      low eigenvalue method done, cpu time[sec] = 0.841778, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.033    0.0447         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00194    0.0447     0.977
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0447185
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.959124    0.0408757    0.0350348   0.00375053   0.00022378  0.000630386  3.18042e-05   0.00187427  2.75843e-05    4.653e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.07361e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128668, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19332.8      13401.8      10510.8      10788.6      1565.62      40183.7      12084.3      1002.33
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.740046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078114, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.834331, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0306916    0.0320823    0.0449205
      low eigenvalue method done, cpu time[sec] = 0.843977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0321     0.043         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00186     0.043     0.978
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0429894
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960705    0.0392952    0.0337283   0.00348029  0.000216416  0.000591332  3.05072e-05   0.00188337  2.76647e-05  4.65305e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67328, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.59201e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128158, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46654, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15466.3      10721.4      8408.68      8630.85      1252.49      32146.9      9667.44      801.865
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.73797, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078727, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832307, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0300642    0.0313811    0.0434311
      low eigenvalue method done, cpu time[sec] = 0.841727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0314    0.0416         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00181    0.0416     0.979
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0416234
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.961953    0.0380466    0.0326797   0.00328234  0.000210757  0.000562905  2.95357e-05   0.00188909  2.77382e-05   4.6531e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67435, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.12854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47614, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12888.6      8934.52      7007.23      7192.38      1043.75      26789.1       8056.2      668.221
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.740503, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078615, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.835454, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0295393    0.0307966    0.0422018
      low eigenvalue method done, cpu time[sec] = 0.844814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0308    0.0405         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00176    0.0405      0.98
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.040493
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.962987    0.0370133    0.0318024   0.00312783  0.000206157  0.000540759  2.87612e-05   0.00189272  2.78064e-05  4.65315e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68959, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.62882e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128163, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47987, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11047.3      7658.16       6006.2       6164.9      894.639      22962.1      6905.32      572.761
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738242, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078088, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832045, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0290872    0.0302944    0.0411549
      low eigenvalue method done, cpu time[sec] = 0.841711, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0303    0.0395         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00172    0.0395      0.98
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0395281
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.963869    0.0361314    0.0310475   0.00300208  0.000202278  0.000522727  2.81183e-05   0.00189493  2.78703e-05   4.6532e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68647, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         4.14722e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47724, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9666.42      6700.89      5255.42      5394.28      782.809      20091.8      6042.15      501.165
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738429, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07839, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.832862, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0286894    0.0298536    0.0402432
      low eigenvalue method done, cpu time[sec] = 0.842007, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0299    0.0387         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00168    0.0387      0.98
         *Z       ---       ---  1.78e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0386863
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964638    0.0353619    0.0303847   0.00289664  0.000198923  0.000507583  2.75693e-05   0.00189615  2.79305e-05  4.65325e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68523, elapsed time[sec] = 0
rate calculation done, cpu time[sec] = 5048.82, elapsed time[sec] = 101
